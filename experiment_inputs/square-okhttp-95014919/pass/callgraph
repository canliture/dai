CALLER: com.squareup.okhttp.curl.Main#<init>()
	CALLEE: io.airlift.command.HelpOption#<init>()
	CALLEE: static com.squareup.okhttp.curl.Main#versionString()
CALLER: static com.squareup.okhttp.curl.Main#main(java.lang.String[])
	CALLEE: static com.squareup.okhttp.curl.Main#fromArgs(java.lang.String[])
CALLER: com.squareup.okhttp.curl.Main#run()
	CALLEE: okio.Buffer#exhausted()
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSource#buffer()
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: okio.RealBufferedSource#exhausted()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.ResponseBody#close()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#source()
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#source()
	CALLEE: okio.Buffer#buffer()
	CALLEE: static com.squareup.okhttp.curl.Main#versionString()
	CALLEE: io.airlift.command.HelpOption#showHelpIfRequested()
	CALLEE: static com.squareup.okhttp.curl.Main#protocols()
	CALLEE: static com.squareup.okhttp.curl.Main#enableHttp2FrameLogging()
	CALLEE: com.squareup.okhttp.curl.Main#createClient()
	CALLEE: com.squareup.okhttp.curl.Main#createRequest()
	CALLEE: static com.squareup.okhttp.internal.http.StatusLine#get(com.squareup.okhttp.Response)
	CALLEE: static okio.Okio#sink(java.io.OutputStream)
	CALLEE: com.squareup.okhttp.curl.Main#close()
	CALLEE: okio.Okio.1#flush()
	CALLEE: okio.Okio.1#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.OkHttpClient#newCall(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Call#execute()
	CALLEE: com.squareup.okhttp.Response#body()
CALLER: static com.squareup.okhttp.curl.Main#fromArgs(java.lang.String[])
	CALLEE: static io.airlift.command.SingleCommand#singleCommand(java.lang.Class)
	CALLEE: io.airlift.command.SingleCommand#parse(java.lang.String[])
CALLER: io.airlift.command.HelpOption#showHelpIfRequested()
	CALLEE: static io.airlift.command.Help#help(io.airlift.command.model.CommandMetadata)
CALLER: static com.squareup.okhttp.curl.Main#protocols()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: static com.squareup.okhttp.Protocol#values()
	CALLEE: com.google.common.base.Joiner#join(java.lang.Object[])
CALLER: static com.squareup.okhttp.curl.Main#enableHttp2FrameLogging()
	CALLEE: com.squareup.okhttp.curl.Main.3#<init>()
CALLER: com.squareup.okhttp.curl.Main#createClient()
	CALLEE: com.squareup.okhttp.OkHttpClient#<init>()
	CALLEE: com.squareup.okhttp.OkHttpClient#setFollowSslRedirects(boolean)
	CALLEE: com.squareup.okhttp.OkHttpClient#setConnectTimeout(long,java.util.concurrent.TimeUnit)
	CALLEE: com.squareup.okhttp.OkHttpClient#setReadTimeout(long,java.util.concurrent.TimeUnit)
	CALLEE: static com.squareup.okhttp.curl.Main#createInsecureSslSocketFactory()
	CALLEE: com.squareup.okhttp.OkHttpClient#setSslSocketFactory(javax.net.ssl.SSLSocketFactory)
	CALLEE: static com.squareup.okhttp.curl.Main#createInsecureHostnameVerifier()
	CALLEE: com.squareup.okhttp.OkHttpClient#setHostnameVerifier(javax.net.ssl.HostnameVerifier)
	CALLEE: static com.squareup.okhttp.ConnectionPool#getDefault()
	CALLEE: com.squareup.okhttp.OkHttpClient#setConnectionPool(com.squareup.okhttp.ConnectionPool)
CALLER: com.squareup.okhttp.curl.Main#createRequest()
	CALLEE: com.squareup.okhttp.Request.Builder#<init>()
	CALLEE: com.squareup.okhttp.Request.Builder#url(java.lang.String)
	CALLEE: com.squareup.okhttp.curl.Main#getRequestMethod()
	CALLEE: com.squareup.okhttp.curl.Main#getRequestBody()
	CALLEE: com.squareup.okhttp.Request.Builder#method(java.lang.String,com.squareup.okhttp.RequestBody)
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
CALLER: static com.squareup.okhttp.internal.http.StatusLine#get(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.StatusLine#<init>(com.squareup.okhttp.Protocol,int,java.lang.String)
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#message()
	CALLEE: com.squareup.okhttp.Response#protocol()
CALLER: static okio.Okio#sink(java.io.OutputStream)
	CALLEE: okio.Timeout#<init>()
	CALLEE: static okio.Okio#sink(java.io.OutputStream,okio.Timeout)
CALLER: com.squareup.okhttp.curl.Main#close()
	CALLEE: com.squareup.okhttp.OkHttpClient#getConnectionPool()
	CALLEE: com.squareup.okhttp.ConnectionPool#evictAll()
CALLER: static io.airlift.command.SingleCommand#singleCommand(java.lang.Class)
	CALLEE: io.airlift.command.SingleCommand#<init>(java.lang.Class)
CALLER: static io.airlift.command.Help#help(io.airlift.command.model.CommandMetadata)
	CALLEE: static io.airlift.command.Help#help(io.airlift.command.model.CommandMetadata,java.lang.StringBuilder)
CALLER: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: static com.squareup.okhttp.Protocol#<clinit>()
	CALLEE: com.squareup.okhttp.Protocol#<init>(java.lang.String,int,java.lang.String)
CALLER: static com.squareup.okhttp.internal.framed.Http2#<clinit>()
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
CALLER: static com.squareup.okhttp.OkHttpClient#<clinit>()
	CALLEE: static com.squareup.okhttp.internal.Util#immutableList(java.lang.Object[])
	CALLEE: com.squareup.okhttp.OkHttpClient.1#<init>()
CALLER: com.squareup.okhttp.OkHttpClient#<init>()
	CALLEE: com.squareup.okhttp.internal.RouteDatabase#<init>()
	CALLEE: com.squareup.okhttp.Dispatcher#<init>()
CALLER: static com.squareup.okhttp.curl.Main#createInsecureSslSocketFactory()
	CALLEE: com.squareup.okhttp.curl.Main.1#<init>()
CALLER: static com.squareup.okhttp.curl.Main#createInsecureHostnameVerifier()
	CALLEE: com.squareup.okhttp.curl.Main.2#<init>()
CALLER: static com.squareup.okhttp.ConnectionPool#<clinit>()
	CALLEE: com.squareup.okhttp.ConnectionPool#<init>(int,long)
CALLER: com.squareup.okhttp.Request.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
CALLER: com.squareup.okhttp.Request.Builder#url(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#url(com.squareup.okhttp.HttpUrl)
CALLER: com.squareup.okhttp.curl.Main#getRequestBody()
	CALLEE: static com.squareup.okhttp.MediaType#parse(java.lang.String)
	CALLEE: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,java.lang.String)
CALLER: com.squareup.okhttp.Request.Builder#method(java.lang.String,com.squareup.okhttp.RequestBody)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#permitsRequestBody(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#requiresRequestBody(java.lang.String)
CALLER: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#set(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#<init>(com.squareup.okhttp.Request.Builder,com.squareup.okhttp.Request.1)
CALLER: static okio.Timeout#<clinit>()
	CALLEE: okio.Timeout.1#<init>()
CALLER: static okio.Okio#sink(java.io.OutputStream,okio.Timeout)
	CALLEE: okio.Okio.1#<init>(okio.Timeout,java.io.OutputStream)
CALLER: io.airlift.command.SingleCommand#<init>(java.lang.Class)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static io.airlift.command.model.MetadataLoader#loadCommand(java.lang.Class)
CALLER: static io.airlift.command.Help#help(io.airlift.command.model.CommandMetadata,java.lang.StringBuilder)
	CALLEE: io.airlift.command.CommandUsage#<init>()
	CALLEE: io.airlift.command.CommandUsage#usage(java.lang.String,java.lang.String,java.lang.String,io.airlift.command.model.CommandMetadata,java.lang.StringBuilder)
CALLER: com.google.common.base.Joiner#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: okio.ByteString#<init>(byte[])
CALLER: static okio.ByteString#<clinit>()
	CALLEE: static okio.ByteString#of(byte[])
CALLER: static com.squareup.okhttp.ConnectionSpec#<clinit>()
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#<init>(boolean)
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#cipherSuites(com.squareup.okhttp.CipherSuite[])
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#<init>(com.squareup.okhttp.ConnectionSpec)
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#tlsVersions(com.squareup.okhttp.TlsVersion[])
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#build()
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#supportsTlsExtensions(boolean)
CALLER: com.squareup.okhttp.OkHttpClient.1#<init>()
	CALLEE: com.squareup.okhttp.internal.Internal#<init>()
CALLER: com.squareup.okhttp.ConnectionPool#<init>(int,long)
	CALLEE: com.squareup.okhttp.internal.RouteDatabase#<init>()
CALLER: static com.squareup.okhttp.HttpUrl#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#<init>()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#parse(com.squareup.okhttp.HttpUrl,java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#build()
CALLER: static com.squareup.okhttp.MediaType#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.MediaType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
CALLER: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,java.lang.String)
	CALLEE: static com.squareup.okhttp.MediaType#parse(java.lang.String)
	CALLEE: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,byte[])
	CALLEE: com.squareup.okhttp.MediaType#charset()
CALLER: static com.squareup.okhttp.internal.http.HttpMethod#permitsRequestBody(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#requiresRequestBody(java.lang.String)
CALLER: com.squareup.okhttp.Headers.Builder#set(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#checkNameAndValue(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#removeAll(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#addLenient(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.Request#<init>(com.squareup.okhttp.Request.Builder,com.squareup.okhttp.Request.1)
	CALLEE: com.squareup.okhttp.Request#<init>(com.squareup.okhttp.Request.Builder)
CALLER: okio.Timeout.1#<init>()
	CALLEE: okio.Timeout#<init>()
CALLER: static io.airlift.command.model.MetadataLoader#loadCommand(java.lang.Class)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static io.airlift.command.model.MetadataLoader#loadInjectionMetadata(java.lang.Class)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$000(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$100(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$200(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$300(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static com.google.common.collect.Iterables#getFirst(java.lang.Iterable,java.lang.Object)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$400(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: io.airlift.command.model.CommandMetadata#<init>(java.lang.String,java.lang.String,boolean,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,io.airlift.command.model.ArgumentsMetadata,java.lang.Iterable,java.lang.Class)
CALLER: io.airlift.command.CommandUsage#<init>()
	CALLEE: io.airlift.command.CommandUsage#<init>(int,java.util.Comparator)
CALLER: io.airlift.command.CommandUsage#usage(java.lang.String,java.lang.String,java.lang.String,io.airlift.command.model.CommandMetadata,java.lang.StringBuilder)
	CALLEE: io.airlift.command.UsagePrinter#<init>(java.lang.StringBuilder,int)
	CALLEE: io.airlift.command.CommandUsage#usage(java.lang.String,java.lang.String,java.lang.String,io.airlift.command.model.CommandMetadata,io.airlift.command.UsagePrinter)
CALLER: static okio.ByteString#of(byte[])
	CALLEE: okio.ByteString#<init>(byte[])
CALLER: static com.squareup.okhttp.CipherSuite#<clinit>()
	CALLEE: com.squareup.okhttp.CipherSuite#<init>(java.lang.String,int,java.lang.String,int,int,int,int)
CALLER: com.squareup.okhttp.ConnectionSpec.Builder#cipherSuites(com.squareup.okhttp.CipherSuite[])
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#cipherSuites(java.lang.String[])
CALLER: static com.squareup.okhttp.TlsVersion#<clinit>()
	CALLEE: com.squareup.okhttp.TlsVersion#<init>(java.lang.String,int,java.lang.String)
CALLER: com.squareup.okhttp.ConnectionSpec.Builder#<init>(com.squareup.okhttp.ConnectionSpec)
	CALLEE: static com.squareup.okhttp.ConnectionSpec#access$400(com.squareup.okhttp.ConnectionSpec)
	CALLEE: static com.squareup.okhttp.ConnectionSpec#access$500(com.squareup.okhttp.ConnectionSpec)
	CALLEE: static com.squareup.okhttp.ConnectionSpec#access$600(com.squareup.okhttp.ConnectionSpec)
	CALLEE: static com.squareup.okhttp.ConnectionSpec#access$700(com.squareup.okhttp.ConnectionSpec)
CALLER: com.squareup.okhttp.ConnectionSpec.Builder#tlsVersions(com.squareup.okhttp.TlsVersion[])
	CALLEE: com.squareup.okhttp.ConnectionSpec.Builder#tlsVersions(java.lang.String[])
CALLER: com.squareup.okhttp.ConnectionSpec.Builder#build()
	CALLEE: com.squareup.okhttp.ConnectionSpec#<init>(com.squareup.okhttp.ConnectionSpec.Builder,com.squareup.okhttp.ConnectionSpec.1)
CALLER: com.squareup.okhttp.HttpUrl.Builder#parse(com.squareup.okhttp.HttpUrl,java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#encodedQuery(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#resolvePath(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#queryStringToNamesAndValues(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl#encodedUsername()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedPassword()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedPathSegments()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedQuery()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#skipLeadingAsciiWhitespace(java.lang.String,int,int)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#skipTrailingAsciiWhitespace(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#schemeDelimiterOffset(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#access$100(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#slashCount(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#access$200(java.lang.String,int,int,java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#portColonOffset(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#canonicalizeHost(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#parsePort(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#defaultPort(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#access$300(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.HttpUrl#access$400(com.squareup.okhttp.HttpUrl)
CALLER: static com.squareup.okhttp.HttpUrl.Builder.ParseResult#<clinit>()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder.ParseResult#<init>(java.lang.String,int)
CALLER: com.squareup.okhttp.HttpUrl.Builder#build()
	CALLEE: com.squareup.okhttp.HttpUrl#<init>(com.squareup.okhttp.HttpUrl.Builder,com.squareup.okhttp.HttpUrl.1)
CALLER: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,byte[])
	CALLEE: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,byte[],int,int)
CALLER: com.squareup.okhttp.Request#<init>(com.squareup.okhttp.Request.Builder)
	CALLEE: static com.squareup.okhttp.Request.Builder#access$000(com.squareup.okhttp.Request.Builder)
	CALLEE: static com.squareup.okhttp.Request.Builder#access$100(com.squareup.okhttp.Request.Builder)
	CALLEE: static com.squareup.okhttp.Request.Builder#access$200(com.squareup.okhttp.Request.Builder)
	CALLEE: static com.squareup.okhttp.Request.Builder#access$300(com.squareup.okhttp.Request.Builder)
	CALLEE: static com.squareup.okhttp.Request.Builder#access$400(com.squareup.okhttp.Request.Builder)
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static io.airlift.command.model.MetadataLoader#loadInjectionMetadata(java.lang.Class)
	CALLEE: io.airlift.command.model.MetadataLoader.InjectionMetadata#<init>(io.airlift.command.model.MetadataLoader.1)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: static io.airlift.command.model.MetadataLoader#loadInjectionMetadata(java.lang.Class,io.airlift.command.model.MetadataLoader.InjectionMetadata,java.util.List)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$600(io.airlift.command.model.MetadataLoader.InjectionMetadata)
CALLER: static com.google.common.collect.Iterables#getFirst(java.lang.Iterable,java.lang.Object)
	CALLEE: static com.google.common.collect.Iterators#getNext(java.util.Iterator,java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
CALLER: io.airlift.command.model.CommandMetadata#<init>(java.lang.String,java.lang.String,boolean,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,io.airlift.command.model.ArgumentsMetadata,java.lang.Iterable,java.lang.Class)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
CALLER: static io.airlift.command.UsageHelper#<clinit>()
	CALLEE: io.airlift.command.UsageHelper.1#<init>()
	CALLEE: io.airlift.command.UsageHelper.2#<init>()
CALLER: io.airlift.command.CommandUsage#<init>(int,java.util.Comparator)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: io.airlift.command.UsagePrinter#<init>(java.lang.StringBuilder,int)
	CALLEE: io.airlift.command.UsagePrinter#<init>(java.lang.StringBuilder,int,int,int,java.util.concurrent.atomic.AtomicInteger)
CALLER: io.airlift.command.CommandUsage#usage(java.lang.String,java.lang.String,java.lang.String,io.airlift.command.model.CommandMetadata,io.airlift.command.UsagePrinter)
	CALLEE: io.airlift.command.UsagePrinter#append(java.lang.String)
	CALLEE: io.airlift.command.UsagePrinter#newIndentedPrinter(int)
	CALLEE: static com.google.common.collect.Lists#newArrayList()
	CALLEE: io.airlift.command.CommandUsage#sortOptions(java.util.List)
	CALLEE: static io.airlift.command.UsageHelper#toSynopsisUsage(java.util.List)
	CALLEE: static io.airlift.command.UsageHelper#toUsage(io.airlift.command.model.ArgumentsMetadata)
	CALLEE: static io.airlift.command.UsageHelper#toDescription(io.airlift.command.model.OptionMetadata)
	CALLEE: static io.airlift.command.UsageHelper#toDescription(io.airlift.command.model.ArgumentsMetadata)
	CALLEE: io.airlift.command.UsagePrinter#appendWords(java.lang.Iterable)
	CALLEE: io.airlift.command.UsagePrinter#newline()
	CALLEE: io.airlift.command.UsagePrinter#newPrinterWithHangingIndent(int)
	CALLEE: io.airlift.command.model.OptionMetadata#getDescription()
	CALLEE: io.airlift.command.model.OptionMetadata#isHidden()
CALLER: com.squareup.okhttp.ConnectionSpec#<init>(com.squareup.okhttp.ConnectionSpec.Builder,com.squareup.okhttp.ConnectionSpec.1)
	CALLEE: com.squareup.okhttp.ConnectionSpec#<init>(com.squareup.okhttp.ConnectionSpec.Builder)
CALLER: static com.squareup.okhttp.HttpUrl#access$200(java.lang.String,int,int,java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#delimiterOffset(java.lang.String,int,int,java.lang.String)
CALLER: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#writeUtf8(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
	CALLEE: okio.Buffer#readUtf8()
CALLER: static com.squareup.okhttp.HttpUrl.Builder#canonicalizeHost(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,int,int,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#decodeIpv6(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#inet6AddressToAscii(byte[])
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#domainToAscii(java.lang.String)
CALLER: static com.squareup.okhttp.HttpUrl.Builder#parsePort(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#encodedQuery(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#queryStringToNamesAndValues(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#resolvePath(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl#access$200(java.lang.String,int,int,java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#push(java.lang.String,int,int,boolean,boolean)
CALLER: com.squareup.okhttp.HttpUrl#<init>(com.squareup.okhttp.HttpUrl.Builder,com.squareup.okhttp.HttpUrl.1)
	CALLEE: com.squareup.okhttp.HttpUrl#<init>(com.squareup.okhttp.HttpUrl.Builder)
CALLER: static com.squareup.okhttp.RequestBody#create(com.squareup.okhttp.MediaType,byte[],int,int)
	CALLEE: static com.squareup.okhttp.internal.Util#checkOffsetAndCount(long,long,long)
	CALLEE: com.squareup.okhttp.RequestBody.2#<init>(com.squareup.okhttp.MediaType,int,byte[],int)
CALLER: io.airlift.command.model.MetadataLoader.InjectionMetadata#<init>(io.airlift.command.model.MetadataLoader.1)
	CALLEE: io.airlift.command.model.MetadataLoader.InjectionMetadata#<init>()
CALLER: static com.google.common.collect.ImmutableList#<clinit>()
	CALLEE: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[])
CALLER: static io.airlift.command.model.MetadataLoader#loadInjectionMetadata(java.lang.Class,io.airlift.command.model.MetadataLoader.InjectionMetadata,java.util.List)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$000(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$100(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$200(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$300(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$400(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: static io.airlift.command.model.MetadataLoader#loadInjectionMetadata(java.lang.Class,io.airlift.command.model.MetadataLoader.InjectionMetadata,java.util.List)
	CALLEE: static io.airlift.command.model.MetadataLoader#concat(java.lang.Iterable,java.lang.Object)
	CALLEE: io.airlift.command.Accessor#<init>(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Object[])
	CALLEE: io.airlift.command.model.OptionMetadata#<init>(io.airlift.command.OptionType,java.lang.Iterable,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.Iterable,java.lang.Iterable)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#<init>(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: com.google.common.collect.ImmutableCollection#add(java.lang.Object)
CALLER: static io.airlift.command.model.MetadataLoader.InjectionMetadata#access$600(io.airlift.command.model.MetadataLoader.InjectionMetadata)
	CALLEE: io.airlift.command.model.MetadataLoader.InjectionMetadata#compact()
CALLER: static com.google.common.collect.Iterators#getNext(java.util.Iterator,java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
CALLER: static com.google.common.collect.Iterators#<clinit>()
	CALLEE: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.Iterators.2#<init>()
CALLER: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Iterator)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.2#iterator()
	CALLEE: com.google.common.base.Splitter.5#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: io.airlift.command.UsagePrinter#append(java.lang.String)
	CALLEE: static com.google.common.base.Splitter#onPattern(java.lang.String)
	CALLEE: io.airlift.command.UsagePrinter#appendWords(java.lang.Iterable)
	CALLEE: com.google.common.base.Splitter#omitEmptyStrings()
	CALLEE: com.google.common.base.Splitter#trimResults()
	CALLEE: com.google.common.base.Splitter#split(java.lang.CharSequence)
CALLER: io.airlift.command.UsagePrinter#newIndentedPrinter(int)
	CALLEE: io.airlift.command.UsagePrinter#<init>(java.lang.StringBuilder,int,int,int,java.util.concurrent.atomic.AtomicInteger)
CALLER: static io.airlift.command.UsageHelper#toSynopsisUsage(java.util.List)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: static io.airlift.command.model.OptionMetadata#isHiddenPredicate()
	CALLEE: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: io.airlift.command.UsageHelper.7#<init>()
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
CALLER: static io.airlift.command.UsageHelper#toDescription(io.airlift.command.model.OptionMetadata)
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#<init>()
	CALLEE: static com.google.common.collect.Lists#transform(java.util.List,com.google.common.base.Function)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: io.airlift.command.UsageHelper.4#<init>(java.lang.String)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.lang.Iterable)
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
CALLER: com.squareup.okhttp.ConnectionSpec#<init>(com.squareup.okhttp.ConnectionSpec.Builder)
	CALLEE: static com.squareup.okhttp.ConnectionSpec.Builder#access$000(com.squareup.okhttp.ConnectionSpec.Builder)
	CALLEE: static com.squareup.okhttp.ConnectionSpec.Builder#access$100(com.squareup.okhttp.ConnectionSpec.Builder)
	CALLEE: static com.squareup.okhttp.ConnectionSpec.Builder#access$200(com.squareup.okhttp.ConnectionSpec.Builder)
	CALLEE: static com.squareup.okhttp.ConnectionSpec.Builder#access$300(com.squareup.okhttp.ConnectionSpec.Builder)
CALLER: okio.Buffer#writeUtf8(java.lang.String,int,int)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: okio.Buffer#writeByte(int)
CALLER: static com.squareup.okhttp.HttpUrl#canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writeUtf8(java.lang.String)
	CALLEE: okio.Buffer#writeUtf8CodePoint(int)
	CALLEE: okio.Buffer#exhausted()
	CALLEE: okio.Buffer#readByte()
CALLER: okio.Buffer#readUtf8()
	CALLEE: okio.Buffer#readString(long,java.nio.charset.Charset)
CALLER: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,int,int,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#writeUtf8(java.lang.String,int,int)
	CALLEE: okio.Buffer#readUtf8()
	CALLEE: static com.squareup.okhttp.HttpUrl#percentDecode(okio.Buffer,java.lang.String,int,int,boolean)
CALLER: static com.squareup.okhttp.HttpUrl.Builder#decodeIpv6(java.lang.String,int,int)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#decodeIpv4Suffix(java.lang.String,int,int,byte[],int)
	CALLEE: static com.squareup.okhttp.HttpUrl#decodeHexDigit(char)
CALLER: static com.squareup.okhttp.HttpUrl.Builder#inet6AddressToAscii(byte[])
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#readUtf8()
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writeHexadecimalUnsignedLong(long)
CALLER: static com.squareup.okhttp.HttpUrl.Builder#domainToAscii(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#containsInvalidHostnameAsciiCodes(java.lang.String)
CALLER: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#push(java.lang.String,int,int,boolean,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#isDot(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#isDotDot(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#pop()
CALLER: com.squareup.okhttp.HttpUrl#<init>(com.squareup.okhttp.HttpUrl.Builder)
	CALLEE: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,boolean)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#effectivePort()
	CALLEE: com.squareup.okhttp.HttpUrl#percentDecode(java.util.List,boolean)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#toString()
CALLER: com.squareup.okhttp.RequestBody.2#<init>(com.squareup.okhttp.MediaType,int,byte[],int)
	CALLEE: com.squareup.okhttp.RequestBody#<init>()
CALLER: io.airlift.command.model.MetadataLoader.InjectionMetadata#<init>()
	CALLEE: static com.google.common.collect.Lists#newArrayList()
CALLER: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[])
	CALLEE: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[],int,int)
CALLER: static io.airlift.command.model.MetadataLoader#concat(java.lang.Iterable,java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
CALLER: io.airlift.command.Accessor#<init>(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: static com.google.common.base.Joiner#on(char)
	CALLEE: io.airlift.command.Accessor.1#<init>(io.airlift.command.Accessor)
	CALLEE: static io.airlift.command.Accessor#getItemType(java.lang.String,java.lang.reflect.Type)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: static com.google.common.collect.ImmutableList#copyOf(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[])
	CALLEE: com.google.common.collect.SingletonImmutableList#<init>(java.lang.Object)
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementsNotNull(java.lang.Object[])
CALLER: io.airlift.command.model.OptionMetadata#<init>(io.airlift.command.OptionType,java.lang.Iterable,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.Iterable,java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: io.airlift.command.Accessor#<init>(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
CALLER: static io.airlift.command.model.MetadataLoader.3#<clinit>()
	CALLEE: static io.airlift.command.OptionType#values()
CALLER: io.airlift.command.model.ArgumentsMetadata#<init>(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: io.airlift.command.Accessor#<init>(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
CALLER: io.airlift.command.model.MetadataLoader.InjectionMetadata#compact()
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: static io.airlift.command.model.MetadataLoader#access$700(java.util.List)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#<init>(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
CALLER: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.UnmodifiableListIterator#<init>()
CALLER: static com.google.common.collect.Collections2#<clinit>()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#useForNull(java.lang.String)
CALLER: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableList#construct(java.lang.Object[])
	CALLEE: com.google.common.collect.ImmutableCollection#toArray()
	CALLEE: com.google.common.collect.ImmutableList#asList()
	CALLEE: com.google.common.collect.RegularImmutableList#isPartialView()
	CALLEE: com.google.common.collect.SingletonImmutableList#isPartialView()
	CALLEE: com.google.common.collect.ImmutableList.SubList#isPartialView()
CALLER: static com.google.common.collect.ImmutableList#copyOf(java.util.Iterator)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.util.Iterator)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
CALLER: static com.google.common.base.Splitter#onPattern(java.lang.String)
	CALLEE: static com.google.common.base.Splitter#on(java.util.regex.Pattern)
CALLER: io.airlift.command.UsagePrinter#appendWords(java.lang.Iterable)
	CALLEE: static io.airlift.command.UsagePrinter#spaces(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.base.Splitter.5#iterator()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: static io.airlift.command.model.OptionMetadata#isHiddenPredicate()
	CALLEE: io.airlift.command.model.OptionMetadata.2#<init>()
CALLER: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.8#<init>(java.lang.Iterable,com.google.common.base.Function)
CALLER: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#<init>(java.lang.Object)
CALLER: static com.google.common.collect.Lists#transform(java.util.List,com.google.common.base.Function)
	CALLEE: com.google.common.collect.Lists.TransformingRandomAccessList#<init>(java.util.List,com.google.common.base.Function)
	CALLEE: com.google.common.collect.Lists.TransformingSequentialList#<init>(java.util.List,com.google.common.base.Function)
CALLER: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: com.google.common.base.Joiner#join(java.util.Iterator)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.lang.Iterable)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.base.Splitter.5#iterator()
CALLER: okio.Buffer#writableSegment(int)
	CALLEE: static okio.SegmentPool#take()
	CALLEE: okio.Segment#push(okio.Segment)
CALLER: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writableSegment(int)
CALLER: okio.Buffer#writeUtf8(java.lang.String)
	CALLEE: okio.Buffer#writeUtf8(java.lang.String,int,int)
CALLER: okio.Buffer#writeUtf8CodePoint(int)
	CALLEE: okio.Buffer#writeByte(int)
CALLER: okio.Buffer#readByte()
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
CALLER: okio.Buffer#readString(long,java.nio.charset.Charset)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Buffer#readByteArray(long)
	CALLEE: okio.Segment#pop()
CALLER: static com.squareup.okhttp.HttpUrl#percentDecode(okio.Buffer,java.lang.String,int,int,boolean)
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writeUtf8CodePoint(int)
	CALLEE: static com.squareup.okhttp.HttpUrl#decodeHexDigit(char)
CALLER: okio.Buffer#writeHexadecimalUnsignedLong(long)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: okio.Buffer#writeByte(int)
CALLER: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,int,int,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#effectivePort()
	CALLEE: static com.squareup.okhttp.HttpUrl#defaultPort(java.lang.String)
CALLER: com.squareup.okhttp.HttpUrl#percentDecode(java.util.List,boolean)
	CALLEE: static com.squareup.okhttp.HttpUrl#percentDecode(java.lang.String,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#toString()
	CALLEE: static com.squareup.okhttp.HttpUrl#defaultPort(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#effectivePort()
	CALLEE: static com.squareup.okhttp.HttpUrl#pathSegmentsToString(java.lang.StringBuilder,java.util.List)
	CALLEE: static com.squareup.okhttp.HttpUrl#namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)
CALLER: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[],int,int)
	CALLEE: com.google.common.collect.ImmutableList#<init>()
CALLER: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#<init>()
CALLER: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.Maps.EntrySet#isEmpty()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.SingletonImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.ImmutableEnumSet#isEmpty()
	CALLEE: com.google.common.collect.EmptyImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.collect.Maps.Values#isEmpty()
CALLER: static com.google.common.base.Joiner#on(char)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: static io.airlift.command.Accessor#getItemType(java.lang.String,java.lang.reflect.Type)
	CALLEE: static io.airlift.command.Accessor#getRawType(java.lang.reflect.Type)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
	CALLEE: static io.airlift.command.Accessor#getTypeParameters(java.lang.Class,java.lang.reflect.Type)
CALLER: com.google.common.collect.SingletonImmutableList#<init>(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#<init>()
CALLER: static com.google.common.collect.ObjectArrays#checkElementsNotNull(java.lang.Object[])
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementsNotNull(java.lang.Object[],int)
CALLER: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.util.Iterator)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
CALLER: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
CALLER: static io.airlift.command.OptionType#<clinit>()
	CALLEE: io.airlift.command.OptionType#<init>(java.lang.String,int)
CALLER: static io.airlift.command.model.MetadataLoader#access$700(java.util.List)
	CALLEE: static io.airlift.command.model.MetadataLoader#mergeOptionSet(java.util.List)
CALLER: io.airlift.command.model.ArgumentsMetadata#<init>(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.Sets#newHashSet()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#getAccessors()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
CALLER: com.google.common.collect.UnmodifiableListIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: com.google.common.base.Joiner#useForNull(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
CALLER: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[],int)
CALLER: static com.google.common.collect.ImmutableList#construct(java.lang.Object[])
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementsNotNull(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[])
CALLER: com.google.common.collect.ImmutableList.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableList.Builder#<init>(int)
CALLER: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#add(java.lang.Object)
CALLER: static com.google.common.base.Splitter#on(java.util.regex.Pattern)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: com.google.common.base.Splitter.3#<init>(java.util.regex.Pattern)
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy)
CALLER: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: com.google.common.collect.Iterables.8#<init>(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList#<init>(java.util.List,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.Lists.TransformingSequentialList#<init>(java.util.List,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.base.Joiner#join(java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
CALLER: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
CALLER: static okio.SegmentPool#take()
	CALLEE: okio.Segment#<init>()
CALLER: okio.Buffer#readByteArray(long)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Buffer#readFully(byte[])
CALLER: com.google.common.collect.ImmutableList#<init>()
	CALLEE: com.google.common.collect.ImmutableCollection#<init>()
CALLER: static io.airlift.command.Accessor#getRawType(java.lang.reflect.Type)
	CALLEE: static io.airlift.command.Accessor#getRawType(java.lang.reflect.Type)
CALLER: static io.airlift.command.Accessor#getTypeParameters(java.lang.Class,java.lang.reflect.Type)
	CALLEE: static io.airlift.command.Accessor#getTypeParameters(java.lang.Class,java.lang.reflect.Type)
CALLER: static com.google.common.collect.ObjectArrays#checkElementsNotNull(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementNotNull(java.lang.Object,int)
CALLER: static com.google.common.collect.ImmutableSet#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOfEnumSet(java.util.EnumSet)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: com.google.common.collect.ImmutableCollection#toArray()
	CALLEE: com.google.common.collect.SingletonImmutableSet#isPartialView()
	CALLEE: com.google.common.collect.RegularImmutableSet#isPartialView()
	CALLEE: com.google.common.collect.ImmutableEnumSet#isPartialView()
	CALLEE: com.google.common.collect.EmptyImmutableSet#isPartialView()
CALLER: static com.google.common.collect.ImmutableSet#copyOf(java.util.Iterator)
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: com.google.common.collect.ImmutableSet.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableSet.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet.Builder#addAll(java.util.Iterator)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableSet.Builder#build()
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static io.airlift.command.model.MetadataLoader#mergeOptionSet(java.util.List)
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#values()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: io.airlift.command.model.OptionMetadata#getAccessors()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: io.airlift.command.model.MetadataLoader.2#<init>()
	CALLEE: static com.google.common.collect.Maps#newHashMap()
	CALLEE: com.google.common.collect.ArrayListMultimap#asMap()
	CALLEE: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
CALLER: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
CALLER: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[])
	CALLEE: com.google.common.collect.SingletonImmutableList#<init>(java.lang.Object)
	CALLEE: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
CALLER: com.google.common.collect.ImmutableList.Builder#<init>(int)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#<init>(int)
CALLER: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#add(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#ensureCapacity(int)
CALLER: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy)
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy,boolean,com.google.common.base.CharMatcher,int)
CALLER: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner#toString(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.base.Joiner.1#toString(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: okio.Buffer#readFully(byte[])
	CALLEE: okio.Buffer#read(byte[],int,int)
CALLER: static com.google.common.collect.ImmutableSet#copyOfEnumSet(java.util.EnumSet)
	CALLEE: static com.google.common.collect.ImmutableEnumSet#asImmutable(java.util.EnumSet)
CALLER: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementNotNull(java.lang.Object,int)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
CALLER: com.google.common.collect.ImmutableSet.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableSet.Builder#<init>(int)
CALLER: com.google.common.collect.ImmutableSet.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#add(java.lang.Object)
CALLER: com.google.common.collect.ImmutableSet#<init>()
	CALLEE: com.google.common.collect.ImmutableCollection#<init>()
CALLER: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: com.google.common.collect.ArrayListMultimap#<init>()
CALLER: static com.google.common.collect.Maps#<clinit>()
	CALLEE: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
CALLER: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner)
CALLER: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ObjectArrays#newArray(java.lang.Object[],int)
CALLER: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#<init>(int)
	CALLEE: com.google.common.collect.ImmutableCollection.Builder#<init>()
	CALLEE: static com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
CALLER: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#ensureCapacity(int)
	CALLEE: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ImmutableCollection.Builder#expandedCapacity(int,int)
CALLER: static com.google.common.base.CharMatcher#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.1#<init>()
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
	CALLEE: com.google.common.base.CharMatcher.2#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.3#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.4#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.5#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.6#<init>(java.lang.String)
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char)
	CALLEE: com.google.common.base.CharMatcher.7#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.8#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.15#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#or(com.google.common.base.CharMatcher)
	CALLEE: com.google.common.base.CharMatcher.Or#withToString(java.lang.String)
CALLER: com.google.common.base.Joiner#toString(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#toString()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#toString()
	CALLEE: io.airlift.command.model.CommandMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableSet#toString()
	CALLEE: com.google.common.base.CharMatcher#toString()
	CALLEE: com.google.common.collect.ImmutableEnumSet#toString()
	CALLEE: com.google.common.collect.EmptyImmutableSet#toString()
	CALLEE: io.airlift.command.Accessor#toString()
	CALLEE: io.airlift.command.model.OptionMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableList#toString()
	CALLEE: com.google.common.collect.FluentIterable#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#toString()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#toString()
	CALLEE: com.squareup.okhttp.internal.framed.Header#toString()
	CALLEE: com.google.common.base.Splitter.5#toString()
	CALLEE: okio.ByteString#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#toString()
	CALLEE: com.squareup.okhttp.Challenge#toString()
	CALLEE: com.google.common.collect.AbstractMapEntry#toString()
CALLER: okio.Buffer#read(byte[],int,int)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Segment#pop()
CALLER: static com.google.common.collect.ImmutableEnumSet#asImmutable(java.util.EnumSet)
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.Iterables#getOnlyElement(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableEnumSet#<init>(java.util.EnumSet)
CALLER: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static com.google.common.collect.EmptyImmutableSet#<clinit>()
	CALLEE: com.google.common.collect.EmptyImmutableSet#<init>()
CALLER: com.google.common.collect.ImmutableSet.Builder#<init>(int)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#<init>(int)
CALLER: com.google.common.collect.ArrayListMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
CALLER: static com.google.common.collect.ObjectArrays#newArray(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.Platform#newArray(java.lang.Object[],int)
CALLER: com.google.common.base.CharMatcher.1#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.13#<init>(java.lang.String,char,char)
CALLER: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
CALLER: com.google.common.base.CharMatcher.2#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.3#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.4#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.5#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.6#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: static com.google.common.base.CharMatcher#inRange(char,char)
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.CharMatcher#showCharacter(char)
CALLER: com.google.common.base.CharMatcher.7#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.8#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.15#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: static com.google.common.collect.Iterables#getOnlyElement(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterators#getOnlyElement(java.util.Iterator)
CALLER: com.google.common.collect.ImmutableEnumSet#<init>(java.util.EnumSet)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.EmptyImmutableSet#<init>()
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: com.google.common.base.CharMatcher.13#<init>(java.lang.String,char,char)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.collect.AbstractMultimap#<init>()
CALLER: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: com.google.common.base.CharMatcher#or(com.google.common.base.CharMatcher)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)
CALLER: com.google.common.collect.ArrayListMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractListMultimap#asMap()
CALLER: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableSet.Builder#addAll(java.util.Iterator)
	CALLEE: com.google.common.collect.ImmutableCollection.Builder#addAll(java.util.Iterator)
CALLER: com.google.common.collect.ImmutableList.Builder#addAll(java.util.Iterator)
	CALLEE: com.google.common.collect.ImmutableCollection.Builder#addAll(java.util.Iterator)
CALLER: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
CALLER: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#addAll(java.lang.Iterable)
CALLER: com.google.common.base.Splitter#omitEmptyStrings()
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy,boolean,com.google.common.base.CharMatcher,int)
CALLER: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
CALLER: io.airlift.command.UsagePrinter#newPrinterWithHangingIndent(int)
	CALLEE: io.airlift.command.UsagePrinter#<init>(java.lang.StringBuilder,int,int,int,java.util.concurrent.atomic.AtomicInteger)
CALLER: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
CALLER: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: com.squareup.okhttp.Headers#<init>(com.squareup.okhttp.Headers.Builder,com.squareup.okhttp.Headers.1)
CALLER: com.google.common.base.Joiner#join(java.lang.Object[])
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: io.airlift.command.SingleCommand#parse(java.lang.String[])
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Object[])
	CALLEE: io.airlift.command.SingleCommand#parse(java.lang.Iterable)
CALLER: okio.Okio.1#write(okio.Buffer,long)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.Timeout#throwIfReached()
CALLER: com.squareup.okhttp.OkHttpClient#newCall(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Call#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request)
CALLER: com.google.common.collect.ImmutableCollection#toArray()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.SingletonImmutableList#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.SingletonImmutableSet#size()
	CALLEE: com.google.common.collect.RegularImmutableSet#size()
	CALLEE: com.google.common.collect.ImmutableEnumSet#size()
	CALLEE: com.google.common.collect.EmptyImmutableSet#size()
	CALLEE: com.google.common.collect.SingletonImmutableSet#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.RegularImmutableSet#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.ImmutableCollection#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.EmptyImmutableSet#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList#copyIntoArray(java.lang.Object[],int)
CALLER: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int)
CALLER: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int)
CALLER: io.airlift.command.UsageHelper.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.1#compare(io.airlift.command.model.OptionMetadata,io.airlift.command.model.OptionMetadata)
CALLER: com.google.common.collect.Iterables.6#iterator()
	CALLEE: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.8#<init>(java.util.Iterator,com.google.common.base.Function)
CALLER: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
CALLER: com.google.common.collect.AbstractListMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
CALLER: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableCollection.Builder#addAll(java.util.Iterator)
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
CALLER: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableCollection.ArrayBasedBuilder#ensureCapacity(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableCollection.Builder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
CALLER: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: static com.google.common.collect.Iterators#singletonIterator(java.lang.Object)
CALLER: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#listIterator()
CALLER: com.squareup.okhttp.Headers#<init>(com.squareup.okhttp.Headers.Builder,com.squareup.okhttp.Headers.1)
	CALLEE: com.squareup.okhttp.Headers#<init>(com.squareup.okhttp.Headers.Builder)
CALLER: io.airlift.command.SingleCommand#parse(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: io.airlift.command.Parser#<init>()
	CALLEE: io.airlift.command.Parser#parseCommand(io.airlift.command.model.CommandMetadata,java.lang.Iterable)
	CALLEE: io.airlift.command.SingleCommand#validate(io.airlift.command.ParseState)
	CALLEE: static com.google.common.collect.ImmutableMap#of(java.lang.Object,java.lang.Object)
	CALLEE: static io.airlift.command.ParserUtil#createInstance(java.lang.Class,java.lang.Iterable,com.google.common.collect.ListMultimap,io.airlift.command.model.ArgumentsMetadata,java.lang.Iterable,java.lang.Iterable,java.util.Map)
	CALLEE: io.airlift.command.model.CommandMetadata#getArguments()
	CALLEE: io.airlift.command.ParseState#getParsedArguments()
	CALLEE: io.airlift.command.ParseState#getParsedOptions()
	CALLEE: io.airlift.command.ParseState#getCommand()
	CALLEE: io.airlift.command.model.CommandMetadata#getAllOptions()
	CALLEE: io.airlift.command.model.CommandMetadata#getMetadataInjections()
	CALLEE: io.airlift.command.model.CommandMetadata#getType()
CALLER: com.squareup.okhttp.Call#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.OkHttpClient#copyWithDefaults()
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
CALLER: io.airlift.command.UsageHelper.1#compare(io.airlift.command.model.OptionMetadata,io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: static com.google.common.collect.ComparisonChain#start()
	CALLEE: com.google.common.collect.ComparisonChain.1#compare(java.lang.Comparable,java.lang.Comparable)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.ComparisonChain.InactiveComparisonChain#compare(java.lang.Comparable,java.lang.Comparable)
	CALLEE: com.google.common.collect.ComparisonChain.1#compare(int,int)
	CALLEE: com.google.common.collect.ComparisonChain.InactiveComparisonChain#compare(int,int)
	CALLEE: com.google.common.collect.ComparisonChain.1#result()
	CALLEE: com.google.common.collect.ComparisonChain.InactiveComparisonChain#result()
CALLER: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Predicate)
CALLER: com.google.common.collect.Iterators.8#<init>(java.util.Iterator,com.google.common.base.Function)
	CALLEE: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
CALLER: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
CALLER: com.google.common.collect.ImmutableSet.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet.Builder#add(java.lang.Object)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.ImmutableCollection.Builder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: static com.google.common.collect.Iterators#singletonIterator(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#<init>(java.lang.Object)
CALLER: com.google.common.collect.ImmutableList#listIterator()
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableAsList#listIterator(int)
CALLER: com.squareup.okhttp.Headers#<init>(com.squareup.okhttp.Headers.Builder)
	CALLEE: static com.squareup.okhttp.Headers.Builder#access$000(com.squareup.okhttp.Headers.Builder)
CALLER: io.airlift.command.Parser#parseCommand(io.airlift.command.model.CommandMetadata,java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: static com.google.common.collect.Iterators#peekingIterator(java.util.Iterator)
	CALLEE: static io.airlift.command.ParseState#newInstance()
	CALLEE: io.airlift.command.model.CommandMetadata#getCommandOptions()
	CALLEE: io.airlift.command.Parser#parseOptions(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: io.airlift.command.model.CommandMetadata#getArguments()
	CALLEE: io.airlift.command.Parser#parseArgs(io.airlift.command.ParseState,com.google.common.collect.PeekingIterator,io.airlift.command.model.ArgumentsMetadata)
	CALLEE: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#hasNext()
	CALLEE: io.airlift.command.ParseState#withCommand(io.airlift.command.model.CommandMetadata)
CALLER: io.airlift.command.SingleCommand#validate(io.airlift.command.ParseState)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: io.airlift.command.model.OptionMetadata#isRequired()
	CALLEE: com.google.common.collect.ImmutableMultimap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.CommandMetadata#getArguments()
	CALLEE: io.airlift.command.ParseCommandMissingException#<init>()
	CALLEE: io.airlift.command.ParseCommandUnrecognizedException#<init>(java.util.List)
	CALLEE: io.airlift.command.ParseArgumentsMissingException#<init>(java.lang.String)
	CALLEE: io.airlift.command.ParseArgumentsUnexpectedException#<init>(java.util.List)
	CALLEE: io.airlift.command.ParseOptionMissingValueException#<init>(java.lang.String)
	CALLEE: io.airlift.command.ParseOptionMissingException#<init>(java.lang.String)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#getTitle()
	CALLEE: io.airlift.command.ParseState#getParsedArguments()
	CALLEE: io.airlift.command.ParseState#getParsedOptions()
	CALLEE: io.airlift.command.ParseState#getCommand()
	CALLEE: io.airlift.command.ParseState#getCurrentOption()
	CALLEE: io.airlift.command.ParseState#getLocation()
	CALLEE: io.airlift.command.ParseState#getUnparsedInput()
	CALLEE: com.google.common.collect.ArrayListMultimap#containsKey(java.lang.Object)
	CALLEE: io.airlift.command.model.CommandMetadata#getAllOptions()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#isRequired()
CALLER: static com.google.common.collect.ImmutableMap#of(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableBiMap#of(java.lang.Object,java.lang.Object)
CALLER: static io.airlift.command.ParserUtil#createInstance(java.lang.Class,java.lang.Iterable,com.google.common.collect.ListMultimap,io.airlift.command.model.ArgumentsMetadata,java.lang.Iterable,java.lang.Iterable,java.util.Map)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.Accessor#getJavaType()
	CALLEE: io.airlift.command.model.OptionMetadata#getAccessors()
	CALLEE: io.airlift.command.Accessor#addValues(java.lang.Object,java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.ImmutableListMultimap#get(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#getAccessors()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: static io.airlift.command.ParserUtil#createInstance(java.lang.Class)
	CALLEE: static com.google.common.collect.Iterables#concat(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.ArrayListMultimap#get(java.lang.Object)
CALLER: com.squareup.okhttp.OkHttpClient#copyWithDefaults()
	CALLEE: static com.squareup.okhttp.ConnectionPool#getDefault()
	CALLEE: com.squareup.okhttp.OkHttpClient#<init>(com.squareup.okhttp.OkHttpClient)
	CALLEE: com.squareup.okhttp.OkHttpClient#getDefaultSSLSocketFactory()
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
CALLER: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
CALLER: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
CALLER: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
CALLER: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
CALLER: static com.google.common.collect.ComparisonChain#<clinit>()
	CALLEE: com.google.common.collect.ComparisonChain.1#<init>()
	CALLEE: com.google.common.collect.ComparisonChain.InactiveComparisonChain#<init>(int)
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.Lists.TransformingRandomAccessList.1#<init>(com.google.common.collect.Lists.TransformingRandomAccessList,java.util.ListIterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#listIterator(int)
CALLER: com.google.common.collect.Lists.TransformingSequentialList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.Lists.TransformingSequentialList.1#<init>(com.google.common.collect.Lists.TransformingSequentialList,java.util.ListIterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#listIterator(int)
CALLER: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.AbstractIterator#<init>()
CALLER: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.ImmutableMultimap.BuilderMultimap#createCollection()
CALLER: com.google.common.collect.Iterators.12#<init>(java.lang.Object)
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: static com.google.common.collect.Iterators#forArray(java.lang.Object[],int,int,int)
CALLER: com.google.common.collect.ImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList.1#<init>(com.google.common.collect.ImmutableList,int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableAsList#size()
CALLER: static com.google.common.collect.Iterators#peekingIterator(java.util.Iterator)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#<init>(java.util.Iterator)
CALLER: static io.airlift.command.ParseState#newInstance()
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
CALLER: static io.airlift.command.Context#<clinit>()
	CALLEE: io.airlift.command.Context#<init>(java.lang.String,int)
CALLER: io.airlift.command.Parser#parseOptions(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: io.airlift.command.Parser#parseSimpleOption(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: io.airlift.command.Parser#parseLongGnuGetOpt(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: io.airlift.command.Parser#parseClassicGetOpt(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#hasNext()
CALLER: io.airlift.command.Parser#parseArgs(io.airlift.command.ParseState,com.google.common.collect.PeekingIterator,io.airlift.command.model.ArgumentsMetadata)
	CALLEE: io.airlift.command.Parser#parseArg(io.airlift.command.ParseState,com.google.common.collect.PeekingIterator,io.airlift.command.model.ArgumentsMetadata)
	CALLEE: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#hasNext()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#peek()
CALLER: io.airlift.command.ParseCommandMissingException#<init>()
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: io.airlift.command.ParseCommandUnrecognizedException#<init>(java.util.List)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
CALLER: io.airlift.command.ParseArgumentsMissingException#<init>(java.lang.String)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: io.airlift.command.ParseArgumentsUnexpectedException#<init>(java.util.List)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: io.airlift.command.ParseOptionMissingValueException#<init>(java.lang.String)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: io.airlift.command.ParseOptionMissingException#<init>(java.lang.String)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: static com.google.common.collect.ImmutableBiMap#of(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#<init>(java.lang.Object,java.lang.Object)
CALLER: static io.airlift.command.ParserUtil#createInstance(java.lang.Class)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.Exception,java.lang.String,java.lang.Object[])
CALLER: static com.google.common.collect.Iterables#concat(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.2#<init>(java.lang.Iterable)
CALLER: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#<clinit>()
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#<init>()
CALLER: static com.squareup.okhttp.CertificatePinner#<clinit>()
	CALLEE: com.squareup.okhttp.CertificatePinner.Builder#<init>()
	CALLEE: com.squareup.okhttp.CertificatePinner.Builder#build()
CALLER: static com.squareup.okhttp.internal.http.AuthenticatorAdapter#<clinit>()
	CALLEE: com.squareup.okhttp.internal.http.AuthenticatorAdapter#<init>()
CALLER: static com.squareup.okhttp.Dns#<clinit>()
	CALLEE: com.squareup.okhttp.Dns.1#<init>()
CALLER: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: static com.google.common.collect.Iterators#singletonIterator(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: static com.google.common.collect.Iterators#forArray(java.lang.Object[])
CALLER: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: static com.google.common.collect.Iterators#unmodifiableIterator(java.util.Iterator)
CALLER: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: static com.google.common.collect.Iterators#emptyIterator()
CALLER: com.google.common.collect.ComparisonChain.1#<init>()
	CALLEE: com.google.common.collect.ComparisonChain#<init>(com.google.common.collect.ComparisonChain.1)
CALLER: com.google.common.collect.ComparisonChain.InactiveComparisonChain#<init>(int)
	CALLEE: com.google.common.collect.ComparisonChain#<init>(com.google.common.collect.ComparisonChain.1)
CALLER: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
CALLER: com.google.common.collect.ImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList.1#<init>(com.google.common.collect.Lists.TransformingRandomAccessList,java.util.ListIterator)
	CALLEE: com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
CALLER: com.google.common.collect.Lists.TransformingSequentialList.1#<init>(com.google.common.collect.Lists.TransformingSequentialList,java.util.ListIterator)
	CALLEE: com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
CALLER: com.google.common.collect.AbstractIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#<init>()
CALLER: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
CALLER: static com.google.common.collect.Iterators#forArray(java.lang.Object[],int,int,int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
	CALLEE: static com.google.common.collect.Iterators#emptyListIterator()
	CALLEE: com.google.common.collect.Iterators.11#<init>(int,int,java.lang.Object[],int)
CALLER: com.google.common.collect.ImmutableList.1#<init>(com.google.common.collect.ImmutableList,int,int)
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#<init>(int,int)
CALLER: com.google.common.collect.Iterators.PeekingImpl#<init>(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: io.airlift.command.Parser#parseSimpleOption(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.Parser#findOption(java.util.List,java.lang.String)
	CALLEE: static io.airlift.command.TypeConverter#newInstance()
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
	CALLEE: io.airlift.command.TypeConverter#convert(java.lang.String,java.lang.Class,java.lang.String)
	CALLEE: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#hasNext()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#peek()
	CALLEE: io.airlift.command.model.OptionMetadata#getJavaType()
	CALLEE: io.airlift.command.ParseState#withOption(io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.ParseState#withOptionValue(io.airlift.command.model.OptionMetadata,java.lang.Object)
	CALLEE: io.airlift.command.ParseState#popContext()
CALLER: io.airlift.command.Parser#parseLongGnuGetOpt(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.Parser#findOption(java.util.List,java.lang.String)
	CALLEE: static io.airlift.command.TypeConverter#newInstance()
	CALLEE: static com.google.common.base.Splitter#on(char)
	CALLEE: com.google.common.base.Splitter#limit(int)
	CALLEE: io.airlift.command.TypeConverter#convert(java.lang.String,java.lang.Class,java.lang.String)
	CALLEE: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#peek()
	CALLEE: com.google.common.base.Splitter#split(java.lang.CharSequence)
	CALLEE: io.airlift.command.model.OptionMetadata#getJavaType()
	CALLEE: io.airlift.command.ParseState#withOption(io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.ParseState#withOptionValue(io.airlift.command.model.OptionMetadata,java.lang.Object)
	CALLEE: io.airlift.command.ParseState#popContext()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: io.airlift.command.Parser#parseClassicGetOpt(com.google.common.collect.PeekingIterator,io.airlift.command.ParseState,java.util.List)
	CALLEE: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: io.airlift.command.ParseState#withOption(io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.ParseState#withOptionValue(io.airlift.command.model.OptionMetadata,java.lang.Object)
	CALLEE: io.airlift.command.ParseState#popContext()
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.Parser#findOption(java.util.List,java.lang.String)
	CALLEE: static io.airlift.command.TypeConverter#newInstance()
	CALLEE: io.airlift.command.TypeConverter#convert(java.lang.String,java.lang.Class,java.lang.String)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#hasNext()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#peek()
	CALLEE: io.airlift.command.model.OptionMetadata#getAllowedValues()
	CALLEE: io.airlift.command.model.OptionMetadata#getJavaType()
CALLER: io.airlift.command.Parser#parseArg(io.airlift.command.ParseState,com.google.common.collect.PeekingIterator,io.airlift.command.model.ArgumentsMetadata)
	CALLEE: static io.airlift.command.TypeConverter#newInstance()
	CALLEE: io.airlift.command.TypeConverter#convert(java.lang.String,java.lang.Class,java.lang.String)
	CALLEE: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#getJavaType()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#getTitle()
	CALLEE: io.airlift.command.ParseState#withUnparsedInput(java.lang.String)
	CALLEE: io.airlift.command.ParseState#withArgument(java.lang.Object)
CALLER: com.google.common.collect.SingletonImmutableBiMap#<init>(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableBiMap#<init>()
	CALLEE: static com.google.common.collect.CollectPreconditions#checkEntryNotNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.Iterables.2#<init>(java.lang.Iterable)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: com.squareup.okhttp.CertificatePinner.Builder#build()
	CALLEE: com.squareup.okhttp.CertificatePinner#<init>(com.squareup.okhttp.CertificatePinner.Builder,com.squareup.okhttp.CertificatePinner.1)
CALLER: static com.google.common.collect.Iterators#forArray(java.lang.Object[])
	CALLEE: static com.google.common.collect.Iterators#forArray(java.lang.Object[],int,int,int)
CALLER: static com.google.common.collect.Iterators#unmodifiableIterator(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.3#<init>(java.util.Iterator)
CALLER: static com.google.common.collect.Iterators#emptyIterator()
	CALLEE: static com.google.common.collect.Iterators#emptyListIterator()
CALLER: com.google.common.collect.ComparisonChain#<init>(com.google.common.collect.ComparisonChain.1)
	CALLEE: com.google.common.collect.ComparisonChain#<init>()
CALLER: com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
	CALLEE: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: static com.google.common.collect.AbstractIterator.State#<clinit>()
	CALLEE: com.google.common.collect.AbstractIterator.State#<init>(java.lang.String,int)
CALLER: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
CALLER: com.google.common.collect.Iterators.11#<init>(int,int,java.lang.Object[],int)
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#<init>(int,int)
CALLER: com.google.common.collect.AbstractIndexedListIterator#<init>(int,int)
	CALLEE: com.google.common.collect.UnmodifiableListIterator#<init>()
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
CALLER: io.airlift.command.Parser#findOption(java.util.List,java.lang.String)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: static io.airlift.command.TypeConverter#newInstance()
	CALLEE: io.airlift.command.TypeConverter#<init>()
CALLER: com.google.common.collect.ImmutableList.Builder#build()
	CALLEE: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[],int)
CALLER: static com.google.common.base.Splitter#on(char)
	CALLEE: static com.google.common.base.CharMatcher#is(char)
	CALLEE: static com.google.common.base.Splitter#on(com.google.common.base.CharMatcher)
CALLER: com.google.common.collect.ImmutableBiMap#<init>()
	CALLEE: com.google.common.collect.ImmutableMap#<init>()
CALLER: com.squareup.okhttp.CertificatePinner#<init>(com.squareup.okhttp.CertificatePinner.Builder,com.squareup.okhttp.CertificatePinner.1)
	CALLEE: com.squareup.okhttp.CertificatePinner#<init>(com.squareup.okhttp.CertificatePinner.Builder)
CALLER: com.google.common.collect.Iterators.3#<init>(java.util.Iterator)
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: static com.google.common.base.CharMatcher#is(char)
	CALLEE: static com.google.common.base.CharMatcher#showCharacter(char)
	CALLEE: com.google.common.base.CharMatcher.9#<init>(java.lang.String,char)
CALLER: static com.google.common.base.Splitter#on(com.google.common.base.CharMatcher)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy)
	CALLEE: com.google.common.base.Splitter.1#<init>(com.google.common.base.CharMatcher)
CALLER: com.squareup.okhttp.CertificatePinner#<init>(com.squareup.okhttp.CertificatePinner.Builder)
	CALLEE: static com.squareup.okhttp.CertificatePinner.Builder#access$000(com.squareup.okhttp.CertificatePinner.Builder)
	CALLEE: static com.squareup.okhttp.internal.Util#immutableMap(java.util.Map)
CALLER: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: com.google.common.base.CharMatcher.9#<init>(java.lang.String,char)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.Splitter#limit(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy,boolean,com.google.common.base.CharMatcher,int)
CALLER: io.airlift.command.TypeConverter#convert(java.lang.String,java.lang.Class,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: io.airlift.command.ParseOptionConversionException#<init>(java.lang.String,java.lang.String,java.lang.String)
CALLER: io.airlift.command.ParseState#pushContext(io.airlift.command.Context)
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
CALLER: com.google.common.collect.ComparisonChain.1#compare(java.lang.Comparable,java.lang.Comparable)
	CALLEE: com.google.common.collect.ComparisonChain.1#classify(int)
CALLER: com.google.common.collect.SingletonImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
CALLER: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableList.1#get(int)
	CALLEE: com.google.common.collect.Iterators.11#get(int)
CALLER: com.google.common.collect.Iterators.PeekingImpl#hasNext()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
CALLER: com.google.common.collect.Iterators.PeekingImpl#next()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: com.google.common.collect.Iterators.PeekingImpl#peek()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: com.google.common.base.CharMatcher.Or#withToString(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
CALLER: com.google.common.collect.Maps.ImprovedAbstractMap#values()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#createValues()
CALLER: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.8#transform(java.lang.Object)
	CALLEE: com.google.common.collect.Lists.TransformingRandomAccessList.1#transform(java.lang.Object)
	CALLEE: com.google.common.collect.Lists.TransformingSequentialList.1#transform(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.collect.Iterables.3#transform(java.lang.Object)
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
CALLER: com.google.common.collect.ImmutableSet.Builder#build()
	CALLEE: static com.google.common.collect.ImmutableSet#access$000(int,java.lang.Object[])
	CALLEE: com.google.common.collect.SingletonImmutableSet#size()
	CALLEE: com.google.common.collect.RegularImmutableSet#size()
	CALLEE: com.google.common.collect.EmptyImmutableSet#size()
CALLER: com.google.common.base.Splitter#trimResults()
	CALLEE: com.google.common.base.Splitter#trimResults(com.google.common.base.CharMatcher)
CALLER: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
CALLER: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
CALLER: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
CALLER: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
CALLER: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
CALLER: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: static com.google.common.collect.Lists#equalsImpl(java.util.List,java.lang.Object)
CALLER: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
CALLER: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#get(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: com.google.common.collect.Iterables.2#iterator()
	CALLEE: static com.google.common.collect.Iterables#access$100(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterators#concat(java.util.Iterator)
CALLER: com.squareup.okhttp.ConnectionPool#evictAll()
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.net.Socket)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getSocket()
CALLER: com.squareup.okhttp.Call#execute()
	CALLEE: com.squareup.okhttp.OkHttpClient#getDispatcher()
	CALLEE: com.squareup.okhttp.Call#getResponseWithInterceptorChain(boolean)
	CALLEE: com.squareup.okhttp.Dispatcher#finished(com.squareup.okhttp.Call)
	CALLEE: com.squareup.okhttp.Dispatcher#executed(com.squareup.okhttp.Call)
CALLER: com.google.common.collect.SingletonImmutableSet#toString()
	CALLEE: com.squareup.okhttp.Challenge#toString()
	CALLEE: com.google.common.collect.AbstractMapEntry#toString()
	CALLEE: com.google.common.collect.ComparatorOrdering#toString()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#toString()
	CALLEE: io.airlift.command.model.CommandMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableSet#toString()
	CALLEE: com.google.common.base.CharMatcher#toString()
	CALLEE: com.google.common.collect.ImmutableEnumSet#toString()
	CALLEE: com.google.common.collect.EmptyImmutableSet#toString()
	CALLEE: io.airlift.command.Accessor#toString()
	CALLEE: io.airlift.command.model.OptionMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableList#toString()
	CALLEE: com.google.common.collect.FluentIterable#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#toString()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#toString()
	CALLEE: com.squareup.okhttp.internal.framed.Header#toString()
	CALLEE: com.google.common.base.Splitter.5#toString()
	CALLEE: okio.ByteString#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#toString()
CALLER: io.airlift.command.model.ArgumentsMetadata#getJavaType()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: io.airlift.command.Accessor#getJavaType()
CALLER: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
CALLER: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#size()
	CALLEE: com.google.common.collect.RegularImmutableSet#size()
	CALLEE: com.google.common.collect.ImmutableEnumSet#size()
	CALLEE: com.google.common.collect.EmptyImmutableSet#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntrySet#size()
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
CALLER: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#isHashCodeFast()
	CALLEE: com.google.common.collect.RegularImmutableSet#isHashCodeFast()
	CALLEE: com.google.common.collect.ImmutableSet#isHashCodeFast()
	CALLEE: com.google.common.collect.EmptyImmutableSet#isHashCodeFast()
	CALLEE: static com.google.common.collect.Sets#equalsImpl(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
CALLER: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.ImmutableEnumSet#isEmpty()
	CALLEE: com.google.common.collect.EmptyImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.Maps.EntrySet#isEmpty()
CALLER: io.airlift.command.ParseOptionConversionException#<init>(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: com.google.common.collect.ComparisonChain.1#classify(int)
	CALLEE: static com.google.common.collect.ComparisonChain#access$100()
	CALLEE: static com.google.common.collect.ComparisonChain#access$200()
	CALLEE: static com.google.common.collect.ComparisonChain#access$300()
CALLER: com.google.common.collect.ImmutableList.1#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableAsList#get(int)
CALLER: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: com.google.common.collect.AbstractIterator#tryToComputeNext()
CALLER: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
CALLER: com.google.common.collect.Maps.ImprovedAbstractMap#createValues()
	CALLEE: com.google.common.collect.Maps.Values#<init>(java.util.Map)
CALLER: com.google.common.collect.Iterators.8#transform(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList.1#transform(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#apply(java.lang.Object)
CALLER: com.google.common.collect.Lists.TransformingSequentialList.1#transform(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#apply(java.lang.Object)
CALLER: static com.google.common.collect.ImmutableSet#access$000(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
CALLER: com.google.common.base.Splitter#trimResults(com.google.common.base.CharMatcher)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Splitter#<init>(com.google.common.base.Splitter.Strategy,boolean,com.google.common.base.CharMatcher,int)
CALLER: static com.google.common.collect.Lists#equalsImpl(java.util.List,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: static com.google.common.collect.Iterators#elementsEqual(java.util.Iterator,java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
CALLER: com.google.common.collect.ImmutableList#listIterator()
	CALLEE: com.google.common.collect.ImmutableList#listIterator()
CALLER: static com.google.common.collect.Iterables#access$100(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#iterators(java.lang.Iterable)
CALLER: static com.google.common.collect.Iterators#concat(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.5#<init>(java.util.Iterator)
CALLER: static com.squareup.okhttp.internal.Util#closeQuietly(java.net.Socket)
	CALLEE: static com.squareup.okhttp.internal.Util#isAndroidGetsocknameError(java.lang.AssertionError)
CALLER: com.squareup.okhttp.Call#getResponseWithInterceptorChain(boolean)
	CALLEE: com.squareup.okhttp.Call.ApplicationInterceptorChain#<init>(com.squareup.okhttp.Call,int,com.squareup.okhttp.Request,boolean)
	CALLEE: com.squareup.okhttp.Call.ApplicationInterceptorChain#proceed(com.squareup.okhttp.Request)
CALLER: com.google.common.collect.SingletonImmutableList#toString()
	CALLEE: com.squareup.okhttp.Challenge#toString()
	CALLEE: com.google.common.collect.AbstractMapEntry#toString()
	CALLEE: com.google.common.collect.ComparatorOrdering#toString()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#toString()
	CALLEE: io.airlift.command.model.CommandMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableSet#toString()
	CALLEE: com.google.common.base.CharMatcher#toString()
	CALLEE: com.google.common.collect.ImmutableEnumSet#toString()
	CALLEE: com.google.common.collect.EmptyImmutableSet#toString()
	CALLEE: io.airlift.command.Accessor#toString()
	CALLEE: io.airlift.command.model.OptionMetadata#toString()
	CALLEE: com.google.common.collect.SingletonImmutableList#toString()
	CALLEE: com.google.common.collect.FluentIterable#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#toString()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#toString()
	CALLEE: com.squareup.okhttp.internal.framed.Header#toString()
	CALLEE: com.google.common.base.Splitter.5#toString()
	CALLEE: okio.ByteString#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#toString()
CALLER: com.google.common.collect.FluentIterable#toString()
	CALLEE: static com.google.common.collect.Iterables#toString(java.lang.Iterable)
CALLER: static com.google.common.collect.Sets#equalsImpl(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#size()
	CALLEE: com.google.common.collect.RegularImmutableSet#size()
	CALLEE: com.google.common.collect.ImmutableEnumSet#size()
	CALLEE: com.google.common.collect.EmptyImmutableSet#size()
	CALLEE: com.google.common.collect.ImmutableEnumSet#containsAll(java.util.Collection)
	CALLEE: com.google.common.collect.EmptyImmutableSet#containsAll(java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.Maps.EntrySet#size()
CALLER: static com.google.common.collect.AbstractIterator.1#<clinit>()
	CALLEE: static com.google.common.collect.AbstractIterator.State#values()
CALLER: com.google.common.collect.AbstractIterator#tryToComputeNext()
	CALLEE: com.google.common.collect.Iterators.7#computeNext()
CALLER: com.google.common.collect.Maps.Values#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.7#apply(io.airlift.command.model.OptionMetadata)
CALLER: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.String)
CALLER: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.reflect.Field)
CALLER: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.util.Collection)
CALLER: io.airlift.command.UsageHelper.3#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#apply(java.lang.String)
CALLER: static com.google.common.collect.Iterators#elementsEqual(java.util.Iterator,java.util.Iterator)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: static com.google.common.base.Objects#equal(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: static com.google.common.collect.Iterables#iterators(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.3#<init>(java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: com.google.common.collect.Iterators.5#<init>(java.util.Iterator)
	CALLEE: static com.google.common.collect.Iterators#emptyIterator()
CALLER: com.squareup.okhttp.Call.ApplicationInterceptorChain#proceed(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Call.ApplicationInterceptorChain#<init>(com.squareup.okhttp.Call,int,com.squareup.okhttp.Request,boolean)
	CALLEE: static com.squareup.okhttp.Call#access$300(com.squareup.okhttp.Call)
	CALLEE: com.squareup.okhttp.Call#getResponse(com.squareup.okhttp.Request,boolean)
	CALLEE: com.squareup.okhttp.OkHttpClient#interceptors()
CALLER: static com.google.common.collect.Iterables#toString(java.lang.Iterable)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: com.google.common.collect.Iterables.2#iterator()
	CALLEE: static com.google.common.collect.Iterators#toString(java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: com.google.common.collect.EmptyImmutableSet#containsAll(java.util.Collection)
	CALLEE: com.google.common.collect.SingletonImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.ImmutableEnumSet#isEmpty()
	CALLEE: com.google.common.collect.EmptyImmutableSet#isEmpty()
	CALLEE: com.google.common.collect.Maps.EntrySet#isEmpty()
CALLER: com.google.common.collect.Iterators.7#computeNext()
	CALLEE: io.airlift.command.model.OptionMetadata.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractIterator#endOfData()
CALLER: io.airlift.command.UsageHelper.7#apply(io.airlift.command.model.OptionMetadata)
	CALLEE: static io.airlift.command.UsageHelper#toUsage(io.airlift.command.model.OptionMetadata)
CALLER: io.airlift.command.model.MetadataLoader.2#apply(java.util.Collection)
	CALLEE: io.airlift.command.model.OptionMetadata#<init>(java.lang.Iterable)
CALLER: static com.google.common.base.Objects#equal(java.lang.Object,java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
CALLER: com.google.common.collect.Iterables.3#<init>(java.util.Iterator)
	CALLEE: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: com.squareup.okhttp.Call#getResponse(com.squareup.okhttp.Request,boolean)
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.MediaType#toString()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#release()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.Request.Builder#removeHeader(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#getLastConnectException()
	CALLEE: com.squareup.okhttp.Request#body()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request,boolean,boolean,boolean,com.squareup.okhttp.internal.http.StreamAllocation,com.squareup.okhttp.internal.http.RetryableSink,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#releaseStreamAllocation()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#sendRequest()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#readResponse()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#recover(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#recover(java.io.IOException,okio.Sink)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#getResponse()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#followUpRequest()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#close()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#sameConnection(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.RequestBody.2#contentLength()
	CALLEE: com.squareup.okhttp.RequestBody.2#contentType()
CALLER: static com.google.common.collect.Iterators#toString(java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
CALLER: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: okio.ByteString#hashCode()
CALLER: io.airlift.command.model.OptionMetadata.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata.2#apply(io.airlift.command.model.OptionMetadata)
CALLER: static io.airlift.command.UsageHelper#toUsage(io.airlift.command.model.OptionMetadata)
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.lang.Iterable)
	CALLEE: io.airlift.command.model.OptionMetadata#getTitle()
	CALLEE: io.airlift.command.model.OptionMetadata#getArity()
	CALLEE: io.airlift.command.model.OptionMetadata#getOptions()
	CALLEE: com.google.common.collect.SingletonImmutableSet#size()
	CALLEE: com.google.common.collect.RegularImmutableSet#size()
	CALLEE: com.google.common.collect.ImmutableEnumSet#size()
	CALLEE: com.google.common.collect.EmptyImmutableSet#size()
	CALLEE: io.airlift.command.model.OptionMetadata#isRequired()
	CALLEE: io.airlift.command.UsageHelper.5#<init>()
	CALLEE: io.airlift.command.UsageHelper.6#<init>(java.lang.String)
	CALLEE: io.airlift.command.model.OptionMetadata#isMultiValued()
CALLER: io.airlift.command.model.OptionMetadata#<init>(java.lang.Iterable)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.util.Collection)
	CALLEE: static com.google.common.collect.Sets#newHashSet()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: io.airlift.command.model.OptionMetadata#getAccessors()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Request.Builder#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Request.1)
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#<clinit>()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#<init>()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request,boolean,boolean,boolean,com.squareup.okhttp.internal.http.StreamAllocation,com.squareup.okhttp.internal.http.RetryableSink,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.OkHttpClient#getConnectionPool()
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#createAddress(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#<init>(com.squareup.okhttp.ConnectionPool,com.squareup.okhttp.Address)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#releaseStreamAllocation()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#release()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#sendRequest()
	CALLEE: com.squareup.okhttp.Response.Builder#protocol(com.squareup.okhttp.Protocol)
	CALLEE: com.squareup.okhttp.Response.Builder#code(int)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#createRequestBody(com.squareup.okhttp.Request,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#createRequestBody(com.squareup.okhttp.Request,long)
	CALLEE: com.squareup.okhttp.Response.Builder#priorResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#message(java.lang.String)
	CALLEE: com.squareup.okhttp.Response.Builder#body(com.squareup.okhttp.ResponseBody)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#release()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#networkRequest(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.OkHttpClient.1#internalCache(com.squareup.okhttp.OkHttpClient)
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#<init>(long,com.squareup.okhttp.Request,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#get()
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.io.Closeable)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#connect()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#permitsRequestBody(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#<init>(int)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#<init>()
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#stripBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#<init>()
	CALLEE: com.squareup.okhttp.Response.Builder#request(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#unzip(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#setHttpEngine(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#setHttpEngine(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#writeRequestHeaders(com.squareup.okhttp.Request)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#readResponse()
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Response.Builder#request(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink)
	CALLEE: com.squareup.okhttp.Response.Builder#priorResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#close()
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response#body()
	CALLEE: com.squareup.okhttp.Response.Builder#cacheResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.ResponseBody#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#close()
	CALLEE: com.squareup.okhttp.Response.Builder#networkResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#releaseStreamAllocation()
	CALLEE: com.squareup.okhttp.OkHttpClient.1#internalCache(com.squareup.okhttp.OkHttpClient)
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.io.Closeable)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#stripBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#unzip(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#readNetworkResponse()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#<init>(com.squareup.okhttp.internal.http.HttpEngine,int,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#proceed(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#contentLength()
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#close()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#receiveHeaders(com.squareup.okhttp.Headers)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#validate(com.squareup.okhttp.Response,com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#combine(com.squareup.okhttp.Headers,com.squareup.okhttp.Headers)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#hasBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#maybeCache()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#cacheWritingResponse(com.squareup.okhttp.internal.http.CacheRequest,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequestHeaders(com.squareup.okhttp.Request)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#recover(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request,boolean,boolean,boolean,com.squareup.okhttp.internal.http.StreamAllocation,com.squareup.okhttp.internal.http.RetryableSink,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#close()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#recover(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.OkHttpClient#getRetryOnConnectionFailure()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#recover(java.io.IOException,okio.Sink)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#<init>(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request,boolean,boolean,boolean,com.squareup.okhttp.internal.http.StreamAllocation,com.squareup.okhttp.internal.http.RetryableSink,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#close()
	CALLEE: com.squareup.okhttp.OkHttpClient#getRetryOnConnectionFailure()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#recover(java.io.IOException,okio.Sink)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#followUpRequest()
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#method(java.lang.String,com.squareup.okhttp.RequestBody)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request.Builder#url(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#permitsRequestBody(java.lang.String)
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#sameConnection(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connection()
	CALLEE: com.squareup.okhttp.OkHttpClient#getProxy()
	CALLEE: com.squareup.okhttp.OkHttpClient#getAuthenticator()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#processAuthHeader(com.squareup.okhttp.Authenticator,com.squareup.okhttp.Response,java.net.Proxy)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: com.squareup.okhttp.OkHttpClient#getFollowRedirects()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.OkHttpClient#getFollowSslRedirects()
	CALLEE: com.squareup.okhttp.Request.Builder#removeHeader(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.HttpUrl#resolve(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#close()
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.io.Closeable)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreams()
	CALLEE: com.squareup.okhttp.Response#body()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#sameConnection(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
CALLER: io.airlift.command.model.OptionMetadata.2#apply(io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.model.OptionMetadata#isHidden()
CALLER: io.airlift.command.model.OptionMetadata#isMultiValued()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: io.airlift.command.Accessor#isMultiValued()
CALLER: com.squareup.okhttp.Request.Builder#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Request.1)
	CALLEE: com.squareup.okhttp.Request.Builder#<init>(com.squareup.okhttp.Request)
CALLER: com.squareup.okhttp.internal.http.HttpEngine.1#<init>()
	CALLEE: com.squareup.okhttp.ResponseBody#<init>()
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#createAddress(com.squareup.okhttp.OkHttpClient,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.OkHttpClient#getProxy()
	CALLEE: com.squareup.okhttp.OkHttpClient#getAuthenticator()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.Request#isHttps()
	CALLEE: com.squareup.okhttp.OkHttpClient#getSslSocketFactory()
	CALLEE: com.squareup.okhttp.OkHttpClient#getHostnameVerifier()
	CALLEE: com.squareup.okhttp.OkHttpClient#getCertificatePinner()
	CALLEE: com.squareup.okhttp.OkHttpClient#getDns()
	CALLEE: com.squareup.okhttp.OkHttpClient#getSocketFactory()
	CALLEE: com.squareup.okhttp.OkHttpClient#getProtocols()
	CALLEE: com.squareup.okhttp.OkHttpClient#getConnectionSpecs()
	CALLEE: com.squareup.okhttp.OkHttpClient#getProxySelector()
	CALLEE: com.squareup.okhttp.Address#<init>(java.lang.String,int,com.squareup.okhttp.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,com.squareup.okhttp.CertificatePinner,com.squareup.okhttp.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#release()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#networkRequest(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.Request#header(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.Util#hostHeader(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.OkHttpClient#getCookieHandler()
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#toMultimap(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Request#uri()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#addCookies(com.squareup.okhttp.Request.Builder,java.util.Map)
	CALLEE: static com.squareup.okhttp.internal.Version#userAgent()
CALLER: com.squareup.okhttp.OkHttpClient.1#internalCache(com.squareup.okhttp.OkHttpClient)
	CALLEE: com.squareup.okhttp.OkHttpClient#internalCache()
CALLER: com.squareup.okhttp.internal.http.CacheStrategy.Factory#<init>(long,com.squareup.okhttp.Request,com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.internal.http.HttpDate#parse(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#parseSeconds(java.lang.String,int)
CALLER: com.squareup.okhttp.internal.http.CacheStrategy.Factory#get()
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#getCandidate()
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Response,com.squareup.okhttp.internal.http.CacheStrategy.1)
	CALLEE: com.squareup.okhttp.Request#cacheControl()
	CALLEE: com.squareup.okhttp.CacheControl#onlyIfCached()
CALLER: static com.squareup.okhttp.internal.Util#closeQuietly(java.io.Closeable)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#close()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#close()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#close()
	CALLEE: com.squareup.okhttp.ResponseBody#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#close()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#connect()
	CALLEE: com.squareup.okhttp.OkHttpClient#getRetryOnConnectionFailure()
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: com.squareup.okhttp.OkHttpClient#getConnectTimeout()
	CALLEE: com.squareup.okhttp.OkHttpClient#getReadTimeout()
	CALLEE: com.squareup.okhttp.OkHttpClient#getWriteTimeout()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#newStream(int,int,int,boolean,boolean)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#permitsRequestBody(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#permitsRequestBody(java.lang.String)
	CALLEE: com.squareup.okhttp.Request#method()
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Headers)
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#<clinit>()
	CALLEE: com.squareup.okhttp.internal.http.OkHeaders.1#<init>()
	CALLEE: static com.squareup.okhttp.internal.Platform#get()
	CALLEE: com.squareup.okhttp.internal.Platform#getPrefix()
CALLER: com.squareup.okhttp.internal.http.RetryableSink#<init>(int)
	CALLEE: okio.Buffer#<init>()
CALLER: com.squareup.okhttp.internal.http.RetryableSink#<init>()
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#<init>(int)
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#stripBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#body(com.squareup.okhttp.ResponseBody)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response#body()
CALLER: com.squareup.okhttp.Response.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#unzip(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Headers.Builder#removeAll(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: okio.GzipSource#<init>(okio.Source)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#<init>(com.squareup.okhttp.Headers,okio.BufferedSource)
	CALLEE: com.squareup.okhttp.Headers#newBuilder()
	CALLEE: com.squareup.okhttp.Response.Builder#headers(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.Response.Builder#body(com.squareup.okhttp.ResponseBody)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response#body()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#source()
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#source()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#readNetworkResponse()
	CALLEE: com.squareup.okhttp.Response.Builder#request(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connection()
	CALLEE: com.squareup.okhttp.Request#header(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreamsOnConnection()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#finishRequest()
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#finishRequest()
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#readResponseHeaders()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#readResponseHeaders()
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#openResponseBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#openResponseBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getHandshake()
	CALLEE: com.squareup.okhttp.Response.Builder#body(com.squareup.okhttp.ResponseBody)
	CALLEE: com.squareup.okhttp.Response.Builder#handshake(com.squareup.okhttp.Handshake)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Response#request()
	CALLEE: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#proceed(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#body()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.RequestBody.2#contentLength()
	CALLEE: okio.RealBufferedSink#close()
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Address#getUriHost()
	CALLEE: com.squareup.okhttp.Address#getUriPort()
	CALLEE: com.squareup.okhttp.RequestBody.2#writeTo(okio.BufferedSink)
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#body()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#contentLength()
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#contentLength()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#permitsRequestBody(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#<init>(com.squareup.okhttp.internal.http.HttpEngine,int,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.OkHttpClient#networkInterceptors()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#connection()
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#access$000(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#access$102(com.squareup.okhttp.internal.http.HttpEngine,com.squareup.okhttp.Request)
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#access$200(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#createRequestBody(com.squareup.okhttp.Request,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#createRequestBody(com.squareup.okhttp.Request,long)
CALLER: com.squareup.okhttp.internal.http.RetryableSink#contentLength()
	CALLEE: okio.Buffer#size()
CALLER: com.squareup.okhttp.internal.http.RetryableSink#close()
	CALLEE: okio.Buffer#size()
CALLER: com.squareup.okhttp.internal.http.HttpEngine#receiveHeaders(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.OkHttpClient#getCookieHandler()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#toMultimap(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Request#uri()
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#validate(com.squareup.okhttp.Response,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.Headers#getDate(java.lang.String)
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#combine(com.squareup.okhttp.Headers,com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#isEndToEnd(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#add(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#get(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#hasBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#request()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#maybeCache()
	CALLEE: com.squareup.okhttp.OkHttpClient.1#internalCache(com.squareup.okhttp.OkHttpClient)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#stripBody(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: static com.squareup.okhttp.internal.http.CacheStrategy#isCacheable(com.squareup.okhttp.Response,com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.HttpMethod#invalidatesCache(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#cacheWritingResponse(com.squareup.okhttp.internal.http.CacheRequest,com.squareup.okhttp.Response)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#<init>(com.squareup.okhttp.Headers,okio.BufferedSource)
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#<init>(com.squareup.okhttp.internal.http.HttpEngine,okio.BufferedSource,com.squareup.okhttp.internal.http.CacheRequest,okio.BufferedSink)
	CALLEE: com.squareup.okhttp.Response.Builder#body(com.squareup.okhttp.ResponseBody)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response#body()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#source()
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#source()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#recover(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connectionFailed(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#isRecoverable(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNext()
	CALLEE: com.squareup.okhttp.internal.http.RouteException#getLastConnectException()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#recover(java.io.IOException,okio.Sink)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connectionFailed(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#isRecoverable(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNext()
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#processAuthHeader(com.squareup.okhttp.Authenticator,com.squareup.okhttp.Response,java.net.Proxy)
	CALLEE: com.squareup.okhttp.internal.http.AuthenticatorAdapter#authenticate(java.net.Proxy,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.AuthenticatorAdapter#authenticateProxy(java.net.Proxy,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response#code()
CALLER: com.squareup.okhttp.Request.Builder#removeHeader(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#removeAll(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreams()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
CALLER: com.squareup.okhttp.Request.Builder#<init>(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.Request#access$600(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.Request#access$700(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.Request#access$800(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.Request#access$900(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.Request#access$1000(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Headers#newBuilder()
CALLER: com.squareup.okhttp.Request#isHttps()
	CALLEE: com.squareup.okhttp.HttpUrl#isHttps()
CALLER: com.squareup.okhttp.Address#<init>(java.lang.String,int,com.squareup.okhttp.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,com.squareup.okhttp.CertificatePinner,com.squareup.okhttp.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#<init>()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#build()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#scheme(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.Util#immutableList(java.util.List)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#host(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#port(int)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.net.Socket)
	CALLEE: com.squareup.okhttp.ConnectionPool#remove(com.squareup.okhttp.internal.io.RealConnection)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getSocket()
CALLER: com.squareup.okhttp.Request#header(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#get(java.lang.String)
CALLER: static com.squareup.okhttp.internal.Util#hostHeader(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.HttpUrl#defaultPort(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#toMultimap(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
CALLER: com.squareup.okhttp.Request#uri()
	CALLEE: com.squareup.okhttp.HttpUrl#uri()
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#addCookies(com.squareup.okhttp.Request.Builder,java.util.Map)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#buildCookieHeader(java.util.List)
	CALLEE: com.squareup.okhttp.Request.Builder#addHeader(java.lang.String,java.lang.String)
CALLER: static com.squareup.okhttp.internal.http.HttpDate#<clinit>()
	CALLEE: com.squareup.okhttp.internal.http.HttpDate.1#<init>()
CALLER: com.squareup.okhttp.internal.http.CacheStrategy.Factory#getCandidate()
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Request#isHttps()
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Response,com.squareup.okhttp.internal.http.CacheStrategy.1)
	CALLEE: static com.squareup.okhttp.internal.http.CacheStrategy#isCacheable(com.squareup.okhttp.Response,com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.CacheStrategy.Factory#hasConditions(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#cacheResponseAge()
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#computeFreshnessLifetime()
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy.Factory#isFreshnessLifetimeHeuristic()
	CALLEE: com.squareup.okhttp.Request#cacheControl()
	CALLEE: com.squareup.okhttp.CacheControl#maxStaleSeconds()
	CALLEE: com.squareup.okhttp.CacheControl#minFreshSeconds()
	CALLEE: com.squareup.okhttp.CacheControl#maxAgeSeconds()
	CALLEE: com.squareup.okhttp.CacheControl#noCache()
CALLER: com.squareup.okhttp.internal.http.CacheStrategy#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Response,com.squareup.okhttp.internal.http.CacheStrategy.1)
	CALLEE: com.squareup.okhttp.internal.http.CacheStrategy#<init>(com.squareup.okhttp.Request,com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#newStream(int,int,int,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#findHealthyConnection(int,int,int,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream#<init>(com.squareup.okhttp.internal.http.StreamAllocation,com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#<init>(com.squareup.okhttp.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#<init>(java.io.IOException)
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: okio.RealBufferedSink#timeout()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getSocket()
	CALLEE: okio.ForwardingTimeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout.1#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout#timeout(long,java.util.concurrent.TimeUnit)
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.Headers#get(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#stringToLong(java.lang.String)
CALLER: static com.squareup.okhttp.internal.Platform#<clinit>()
	CALLEE: static com.squareup.okhttp.internal.Platform#findPlatform()
CALLER: okio.GzipSource#<init>(okio.Source)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: okio.InflaterSource#<init>(okio.BufferedSource,java.util.zip.Inflater)
CALLER: static okio.Okio#buffer(okio.Source)
	CALLEE: okio.RealBufferedSource#<init>(okio.Source)
CALLER: com.squareup.okhttp.internal.http.RealResponseBody#<init>(com.squareup.okhttp.Headers,okio.BufferedSource)
	CALLEE: com.squareup.okhttp.ResponseBody#<init>()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreamsOnConnection()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
CALLER: com.squareup.okhttp.internal.http.HttpEngine.NetworkInterceptorChain#connection()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connection()
CALLER: static okio.Okio#buffer(okio.Sink)
	CALLEE: okio.RealBufferedSink#<init>(okio.Sink)
CALLER: static com.squareup.okhttp.internal.http.HttpEngine#access$200(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#readNetworkResponse()
CALLER: com.squareup.okhttp.Headers.Builder#add(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#checkNameAndValue(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#addLenient(java.lang.String,java.lang.String)
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.Response#headers()
CALLER: static com.squareup.okhttp.internal.http.CacheStrategy#isCacheable(com.squareup.okhttp.Response,com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#cacheControl()
	CALLEE: com.squareup.okhttp.CacheControl#maxAgeSeconds()
	CALLEE: com.squareup.okhttp.CacheControl#noStore()
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
	CALLEE: com.squareup.okhttp.Response#cacheControl()
	CALLEE: com.squareup.okhttp.CacheControl#isPrivate()
	CALLEE: com.squareup.okhttp.CacheControl#isPublic()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#connectionFailed(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#connectFailed(com.squareup.okhttp.Route,java.io.IOException)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#isRecoverable(com.squareup.okhttp.internal.http.RouteException)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#getLastConnectException()
CALLER: com.squareup.okhttp.Headers#get(java.lang.String)
	CALLEE: static com.squareup.okhttp.Headers#get(java.lang.String[],java.lang.String)
CALLER: com.squareup.okhttp.HttpUrl#uri()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#toString()
	CALLEE: com.squareup.okhttp.HttpUrl#newBuilder()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#reencodeForUri()
CALLER: com.squareup.okhttp.Request.Builder#addHeader(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#add(java.lang.String,java.lang.String)
CALLER: static com.squareup.okhttp.internal.http.CacheStrategy.Factory#hasConditions(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#header(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#findHealthyConnection(int,int,int,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#findConnection(int,int,int,boolean)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#isHealthy(boolean)
CALLER: static com.squareup.okhttp.internal.http.Http2xStream#<clinit>()
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.Util#immutableList(java.lang.Object[])
CALLER: static com.squareup.okhttp.internal.Platform#findPlatform()
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#<init>(java.lang.Class,java.lang.String,java.lang.Class[])
	CALLEE: com.squareup.okhttp.internal.Platform.Android#<init>(com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod,java.lang.reflect.Method,java.lang.reflect.Method,com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod)
	CALLEE: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#<init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)
	CALLEE: com.squareup.okhttp.internal.Platform#<init>()
CALLER: okio.RealBufferedSource#<init>(okio.Source)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.RealBufferedSource#<init>(okio.Source,okio.Buffer)
CALLER: okio.RealBufferedSink#<init>(okio.Sink)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.RealBufferedSink#<init>(okio.Sink,okio.Buffer)
CALLER: com.squareup.okhttp.internal.http.OkHeaders.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.http.OkHeaders.1#compare(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.HttpUrl#newBuilder()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#<init>()
	CALLEE: static com.squareup.okhttp.HttpUrl#defaultPort(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#encodedQuery(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl#encodedUsername()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedPassword()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedPathSegments()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedQuery()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedFragment()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#findConnection(int,int,int,boolean)
	CALLEE: com.squareup.okhttp.ConnectionPool#get(com.squareup.okhttp.Address)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#routeDatabase()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#<init>(com.squareup.okhttp.Address,com.squareup.okhttp.internal.RouteDatabase)
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#next()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#<init>(com.squareup.okhttp.Route)
	CALLEE: com.squareup.okhttp.ConnectionPool#put(com.squareup.okhttp.internal.io.RealConnection)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#connect(int,int,int,java.util.List,boolean)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.internal.RouteDatabase#connected(com.squareup.okhttp.Route)
	CALLEE: com.squareup.okhttp.Address#getConnectionSpecs()
CALLER: static com.squareup.okhttp.internal.framed.Header#<clinit>()
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
CALLER: com.squareup.okhttp.internal.Platform.Android#<init>(com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod,java.lang.reflect.Method,java.lang.reflect.Method,com.squareup.okhttp.internal.OptionalMethod,com.squareup.okhttp.internal.OptionalMethod)
	CALLEE: com.squareup.okhttp.internal.Platform#<init>()
CALLER: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#<init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)
	CALLEE: com.squareup.okhttp.internal.Platform#<init>()
CALLER: com.squareup.okhttp.HttpUrl#encodedUsername()
	CALLEE: static com.squareup.okhttp.HttpUrl#delimiterOffset(java.lang.String,int,int,java.lang.String)
CALLER: com.squareup.okhttp.HttpUrl#encodedPathSegments()
	CALLEE: static com.squareup.okhttp.HttpUrl#delimiterOffset(java.lang.String,int,int,java.lang.String)
CALLER: com.squareup.okhttp.HttpUrl#encodedQuery()
	CALLEE: static com.squareup.okhttp.HttpUrl#delimiterOffset(java.lang.String,int,int,java.lang.String)
CALLER: com.squareup.okhttp.ConnectionPool#get(com.squareup.okhttp.Address)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#allocationLimit()
	CALLEE: com.squareup.okhttp.Address#equals(java.lang.Object)
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#routeDatabase()
	CALLEE: com.squareup.okhttp.OkHttpClient.1#routeDatabase(com.squareup.okhttp.ConnectionPool)
CALLER: com.squareup.okhttp.internal.http.RouteSelector#<init>(com.squareup.okhttp.Address,com.squareup.okhttp.internal.RouteDatabase)
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#resetNextProxy(com.squareup.okhttp.HttpUrl,java.net.Proxy)
	CALLEE: com.squareup.okhttp.Address#getProxy()
	CALLEE: com.squareup.okhttp.Address#url()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#next()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#next()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextInetSocketAddress()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextProxy()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextPostponed()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#nextPostponed()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#nextProxy()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#nextInetSocketAddress()
	CALLEE: com.squareup.okhttp.Route#<init>(com.squareup.okhttp.Address,java.net.Proxy,java.net.InetSocketAddress)
	CALLEE: com.squareup.okhttp.internal.RouteDatabase#shouldPostpone(com.squareup.okhttp.Route)
CALLER: com.squareup.okhttp.internal.io.RealConnection#connect(int,int,int,java.util.List,boolean)
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.net.Socket)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#<init>(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.ConnectionSpecSelector#<init>(java.util.List)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#connectSocket(int,int,int,com.squareup.okhttp.internal.ConnectionSpecSelector)
	CALLEE: com.squareup.okhttp.internal.ConnectionSpecSelector#connectionFailed(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#addConnectException(java.io.IOException)
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Address#getSocketFactory()
	CALLEE: com.squareup.okhttp.Address#getSslSocketFactory()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#resetNextProxy(com.squareup.okhttp.HttpUrl,java.net.Proxy)
	CALLEE: com.squareup.okhttp.HttpUrl#uri()
	CALLEE: com.squareup.okhttp.Address#getProxySelector()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#nextProxy()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextProxy()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#resetNextInetSocketAddress(java.net.Proxy)
	CALLEE: com.squareup.okhttp.Address#getUriHost()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#nextInetSocketAddress()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextInetSocketAddress()
	CALLEE: com.squareup.okhttp.Address#getUriHost()
CALLER: com.squareup.okhttp.internal.io.RealConnection#connectSocket(int,int,int,com.squareup.okhttp.internal.ConnectionSpecSelector)
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.Address#url()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#sendConnectionPreface()
	CALLEE: static com.squareup.okhttp.internal.Platform#get()
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: static okio.Okio#source(java.net.Socket)
	CALLEE: static okio.Okio#sink(java.net.Socket)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#connectTls(int,int,com.squareup.okhttp.internal.ConnectionSpecSelector)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Builder#<init>(boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Builder#socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink)
	CALLEE: com.squareup.okhttp.internal.Platform.Android#connectSocket(java.net.Socket,java.net.InetSocketAddress,int)
	CALLEE: com.squareup.okhttp.internal.Platform#connectSocket(java.net.Socket,java.net.InetSocketAddress,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Builder#protocol(com.squareup.okhttp.Protocol)
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Route#getSocketAddress()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Builder#build()
	CALLEE: com.squareup.okhttp.Address#getSslSocketFactory()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#resetNextInetSocketAddress(java.net.Proxy)
	CALLEE: static com.squareup.okhttp.internal.http.RouteSelector#getHostString(java.net.InetSocketAddress)
	CALLEE: com.squareup.okhttp.Address#getUriHost()
	CALLEE: com.squareup.okhttp.Address#getUriPort()
	CALLEE: com.squareup.okhttp.Address#getDns()
	CALLEE: com.squareup.okhttp.Dns.1#lookup(java.lang.String)
CALLER: static okio.Okio#source(java.net.Socket)
	CALLEE: static okio.Okio#timeout(java.net.Socket)
	CALLEE: static okio.Okio#source(java.io.InputStream,okio.Timeout)
	CALLEE: okio.AsyncTimeout#source(okio.Source)
CALLER: static okio.Okio#sink(java.net.Socket)
	CALLEE: static okio.Okio#sink(java.io.OutputStream,okio.Timeout)
	CALLEE: static okio.Okio#timeout(java.net.Socket)
	CALLEE: okio.AsyncTimeout#sink(okio.Sink)
CALLER: com.squareup.okhttp.internal.io.RealConnection#connectTls(int,int,com.squareup.okhttp.internal.ConnectionSpecSelector)
	CALLEE: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)
	CALLEE: com.squareup.okhttp.internal.Platform#configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)
	CALLEE: com.squareup.okhttp.internal.Platform.Android#getSelectedProtocol(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#getSelectedProtocol(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.Platform#getSelectedProtocol(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.Platform#afterHandshake(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#afterHandshake(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Address#getUriHost()
	CALLEE: com.squareup.okhttp.Address#getUriPort()
	CALLEE: com.squareup.okhttp.Route#requiresTunnel()
	CALLEE: com.squareup.okhttp.Address#getSslSocketFactory()
	CALLEE: com.squareup.okhttp.Address#getCertificatePinner()
	CALLEE: com.squareup.okhttp.Address#getHostnameVerifier()
	CALLEE: com.squareup.okhttp.Address#getProtocols()
	CALLEE: com.squareup.okhttp.CertificatePinner#check(java.lang.String,java.util.List)
	CALLEE: com.squareup.okhttp.curl.Main.2#verify(java.lang.String,javax.net.ssl.SSLSession)
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verify(java.lang.String,javax.net.ssl.SSLSession)
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.net.Socket)
	CALLEE: static com.squareup.okhttp.internal.Util#isAndroidGetsocknameError(java.lang.AssertionError)
	CALLEE: static com.squareup.okhttp.internal.Platform#get()
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: static okio.Okio#source(java.net.Socket)
	CALLEE: static okio.Okio#sink(java.net.Socket)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#createTunnel(int,int)
	CALLEE: com.squareup.okhttp.internal.ConnectionSpecSelector#configureSecureSocket(javax.net.ssl.SSLSocket)
	CALLEE: static com.squareup.okhttp.Handshake#get(javax.net.ssl.SSLSession)
	CALLEE: static com.squareup.okhttp.CertificatePinner#pin(java.security.cert.Certificate)
	CALLEE: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#allSubjectAltNames(java.security.cert.X509Certificate)
	CALLEE: static com.squareup.okhttp.Protocol#get(java.lang.String)
	CALLEE: com.squareup.okhttp.Handshake#peerCertificates()
	CALLEE: com.squareup.okhttp.internal.Platform.Android#configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)
CALLER: static okio.Okio#timeout(java.net.Socket)
	CALLEE: okio.Okio.3#<init>(java.net.Socket)
CALLER: static okio.Okio#source(java.io.InputStream,okio.Timeout)
	CALLEE: okio.Okio.2#<init>(okio.Timeout,java.io.InputStream)
CALLER: com.squareup.okhttp.internal.io.RealConnection#createTunnel(int,int)
	CALLEE: com.squareup.okhttp.Response.Builder#request(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Address#getAuthenticator()
	CALLEE: okio.ForwardingTimeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout.1#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#code()
	CALLEE: okio.Buffer#exhausted()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#processAuthHeader(com.squareup.okhttp.Authenticator,com.squareup.okhttp.Response,java.net.Proxy)
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#<init>(com.squareup.okhttp.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink)
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#createTunnelRequest()
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: okio.RealBufferedSink#timeout()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequest(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#finishRequest()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#readResponse()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newFixedLengthSource(long)
	CALLEE: static com.squareup.okhttp.internal.Util#skipAll(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: okio.RealBufferedSource#buffer()
	CALLEE: okio.RealBufferedSink#buffer()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#close()
CALLER: com.squareup.okhttp.internal.ConnectionSpecSelector#configureSecureSocket(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.ConnectionSpecSelector#isFallbackPossible(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.OkHttpClient.1#apply(com.squareup.okhttp.ConnectionSpec,javax.net.ssl.SSLSocket,boolean)
CALLER: static com.squareup.okhttp.Handshake#get(javax.net.ssl.SSLSession)
	CALLEE: static com.squareup.okhttp.internal.Util#immutableList(java.lang.Object[])
	CALLEE: com.squareup.okhttp.Handshake#<init>(java.lang.String,java.util.List,java.util.List)
CALLER: static com.squareup.okhttp.CertificatePinner#pin(java.security.cert.Certificate)
	CALLEE: static com.squareup.okhttp.CertificatePinner#sha1(java.security.cert.X509Certificate)
	CALLEE: okio.ByteString#base64()
CALLER: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#allSubjectAltNames(java.security.cert.X509Certificate)
	CALLEE: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#getSubjectAltNames(java.security.cert.X509Certificate,int)
CALLER: static com.squareup.okhttp.internal.framed.IncomingStreamHandler#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.IncomingStreamHandler.1#<init>()
CALLER: static com.squareup.okhttp.internal.framed.PushObserver#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.PushObserver.1#<init>()
CALLER: okio.Okio.3#<init>(java.net.Socket)
	CALLEE: okio.AsyncTimeout#<init>()
CALLER: com.squareup.okhttp.internal.io.RealConnection#createTunnelRequest()
	CALLEE: com.squareup.okhttp.Request.Builder#<init>()
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request.Builder#url(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.internal.Util#hostHeader(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.internal.Version#userAgent()
	CALLEE: com.squareup.okhttp.Address#url()
	CALLEE: com.squareup.okhttp.Route#getAddress()
CALLER: okio.RealBufferedSource#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: okio.GzipSource#timeout()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#timeout()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#timeout()
	CALLEE: okio.ForwardingSource#timeout()
	CALLEE: okio.AsyncTimeout.2#timeout()
	CALLEE: okio.Buffer#timeout()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#timeout()
	CALLEE: okio.InflaterSource#timeout()
CALLER: okio.RealBufferedSink#timeout()
	CALLEE: okio.AsyncTimeout.1#timeout()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#timeout()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#timeout()
	CALLEE: okio.Buffer#timeout()
	CALLEE: okio.DeflaterSink#timeout()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#timeout()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#writeRequest(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: okio.RealBufferedSink#writeUtf8(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#finishRequest()
	CALLEE: okio.RealBufferedSink#flush()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#readResponse()
	CALLEE: com.squareup.okhttp.Response.Builder#<init>()
	CALLEE: static com.squareup.okhttp.internal.http.StatusLine#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.Response.Builder#protocol(com.squareup.okhttp.Protocol)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#readHeaders()
	CALLEE: com.squareup.okhttp.Response.Builder#code(int)
	CALLEE: okio.RealBufferedSource#readUtf8LineStrict()
	CALLEE: com.squareup.okhttp.Response.Builder#message(java.lang.String)
	CALLEE: com.squareup.okhttp.Response.Builder#headers(com.squareup.okhttp.Headers)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#newFixedLengthSource(long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,long)
CALLER: static com.squareup.okhttp.internal.Util#skipAll(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: okio.Buffer#<init>()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#timeout()
	CALLEE: okio.Buffer#clear()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#timeout()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.ForwardingTimeout#deadlineNanoTime(long)
	CALLEE: okio.ForwardingTimeout#clearDeadline()
	CALLEE: okio.ForwardingTimeout#deadlineNanoTime()
	CALLEE: okio.Timeout#clearDeadline()
	CALLEE: okio.ForwardingTimeout#hasDeadline()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: okio.Timeout.1#deadlineNanoTime(long)
	CALLEE: okio.Timeout#deadlineNanoTime()
	CALLEE: okio.Timeout#hasDeadline()
	CALLEE: okio.Timeout#deadlineNanoTime(long)
CALLER: static com.squareup.okhttp.CertificatePinner#sha1(java.security.cert.X509Certificate)
	CALLEE: static okio.ByteString#of(byte[])
	CALLEE: static com.squareup.okhttp.internal.Util#sha1(okio.ByteString)
CALLER: okio.AsyncTimeout#<init>()
	CALLEE: okio.Timeout#<init>()
CALLER: okio.GzipSource#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
CALLER: com.squareup.okhttp.internal.http.HttpEngine.2#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: okio.Buffer#timeout()
CALLER: static com.squareup.okhttp.internal.http.StatusLine#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.StatusLine#<init>(com.squareup.okhttp.Protocol,int,java.lang.String)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#readHeaders()
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: com.squareup.okhttp.OkHttpClient.1#addLenient(com.squareup.okhttp.Headers.Builder,java.lang.String)
	CALLEE: okio.RealBufferedSource#readUtf8LineStrict()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#endOfInput()
CALLER: okio.Buffer#clear()
	CALLEE: okio.Buffer#skip(long)
CALLER: static com.squareup.okhttp.internal.Util#sha1(okio.ByteString)
	CALLEE: static okio.ByteString#of(byte[])
	CALLEE: okio.ByteString#toByteArray()
CALLER: com.squareup.okhttp.OkHttpClient.1#addLenient(com.squareup.okhttp.Headers.Builder,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#addLenient(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#endOfInput()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$500(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$400(com.squareup.okhttp.internal.http.Http1xStream,okio.ForwardingTimeout)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$502(com.squareup.okhttp.internal.http.Http1xStream,int)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$700(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#streamFinished(com.squareup.okhttp.internal.http.HttpStream)
CALLER: okio.Buffer#skip(long)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
CALLER: com.squareup.okhttp.Headers.Builder#addLenient(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#addLenient(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$600(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.ForwardingTimeout#<init>(okio.Timeout)
CALLER: static com.squareup.okhttp.internal.http.Http1xStream#access$400(com.squareup.okhttp.internal.http.Http1xStream,okio.ForwardingTimeout)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#detachTimeout(okio.ForwardingTimeout)
CALLER: okio.ForwardingTimeout#<init>(okio.Timeout)
	CALLEE: okio.Timeout#<init>()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#detachTimeout(okio.ForwardingTimeout)
	CALLEE: okio.ForwardingTimeout#setDelegate(okio.Timeout)
	CALLEE: okio.ForwardingTimeout#delegate()
	CALLEE: okio.ForwardingTimeout#clearDeadline()
	CALLEE: okio.Timeout#clearTimeout()
	CALLEE: okio.Timeout#clearDeadline()
	CALLEE: okio.ForwardingTimeout#clearTimeout()
CALLER: com.squareup.okhttp.internal.http.RouteException#addConnectException(java.io.IOException)
	CALLEE: com.squareup.okhttp.internal.http.RouteException#addSuppressedIfPossible(java.io.IOException,java.io.IOException)
CALLER: com.google.common.base.Joiner.1#toString(java.lang.Object)
	CALLEE: com.google.common.base.Joiner#toString(java.lang.Object)
CALLER: com.google.common.base.Splitter#split(java.lang.CharSequence)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Splitter.5#<init>(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: io.airlift.command.ParseState#withCommand(io.airlift.command.model.CommandMetadata)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
CALLER: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.Address#hashCode()
CALLER: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Address#equals(java.lang.Object)
CALLER: com.google.common.collect.ImmutableCollection#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: io.airlift.command.model.OptionMetadata#getJavaType()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: io.airlift.command.Accessor#getJavaType()
CALLER: com.squareup.okhttp.internal.http.HttpDate.1#initialValue()
	CALLEE: com.squareup.okhttp.internal.http.HttpDate.1#initialValue()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#close()
	CALLEE: static com.squareup.okhttp.internal.Util#discard(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#endOfInput()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$600(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
CALLER: okio.ByteString#base64()
	CALLEE: static okio.Base64#encode(byte[])
CALLER: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
CALLER: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: com.squareup.okhttp.internal.http.Http2xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#permitsRequestBody(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.OkHttpClient#getReadTimeout()
	CALLEE: com.squareup.okhttp.OkHttpClient#getWriteTimeout()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#writingRequestHeaders()
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#http2HeadersList(com.squareup.okhttp.Request)
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#spdy3HeadersList(com.squareup.okhttp.Request)
	CALLEE: okio.Timeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getProtocol()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#newStream(java.util.List,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#writeTimeout()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#readTimeout()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#writeRequestHeaders(com.squareup.okhttp.Request)
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: com.squareup.okhttp.internal.io.RealConnection#getRoute()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#writeRequest(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#writingRequestHeaders()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#getConnection()
	CALLEE: static com.squareup.okhttp.internal.http.RequestLine#get(com.squareup.okhttp.Request,java.net.Proxy.Type)
CALLER: com.squareup.okhttp.internal.http.Http2xStream#createRequestBody(com.squareup.okhttp.Request,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getSink()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#createRequestBody(com.squareup.okhttp.Request,long)
	CALLEE: com.squareup.okhttp.Request#header(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newChunkedSink()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newFixedLengthSink(long)
CALLER: com.squareup.okhttp.internal.http.Http2xStream#writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#writeToSocket(okio.Sink)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getSink()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#writeRequestBody(com.squareup.okhttp.internal.http.RetryableSink)
	CALLEE: com.squareup.okhttp.internal.http.RetryableSink#writeToSocket(okio.Sink)
CALLER: com.squareup.okhttp.internal.http.Http2xStream#finishRequest()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getSink()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#close()
CALLER: com.squareup.okhttp.internal.http.Http2xStream#readResponseHeaders()
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#readHttp2HeadersList(java.util.List)
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#readSpdy3HeadersList(java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getProtocol()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getResponseHeaders()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#readResponseHeaders()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#readResponse()
CALLER: com.squareup.okhttp.internal.http.Http2xStream#openResponseBody(com.squareup.okhttp.Response)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#<init>(com.squareup.okhttp.Headers,okio.BufferedSource)
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream.StreamFinishingSource#<init>(com.squareup.okhttp.internal.http.Http2xStream,okio.Source)
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getSource()
CALLER: com.squareup.okhttp.internal.http.Http1xStream#openResponseBody(com.squareup.okhttp.Response)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#<init>(com.squareup.okhttp.Headers,okio.BufferedSource)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#getTransferStream(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response#headers()
CALLER: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.String)
CALLER: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.String)
CALLER: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.collect.Maps.Values#map()
	CALLEE: static com.google.common.collect.Maps#valueIterator(java.util.Iterator)
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
CALLER: com.google.common.collect.Maps.Values#isEmpty()
	CALLEE: com.google.common.collect.Maps.Values#map()
CALLER: com.google.common.collect.Maps.Values#size()
	CALLEE: com.google.common.collect.Maps.Values#map()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#size()
CALLER: okio.RealBufferedSink#writeUtf8(java.lang.String)
	CALLEE: okio.Buffer#writeUtf8(java.lang.String)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
CALLER: okio.RealBufferedSource#readUtf8LineStrict()
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSource#indexOf(byte)
	CALLEE: okio.Buffer#copyTo(okio.Buffer,long,long)
	CALLEE: okio.Buffer#readByteString()
	CALLEE: okio.Buffer#readUtf8Line(long)
	CALLEE: okio.ByteString#hex()
CALLER: com.google.common.collect.ComparisonChain.1#compare(int,int)
	CALLEE: com.google.common.collect.ComparisonChain.1#classify(int)
	CALLEE: static com.google.common.primitives.Ints#compare(int,int)
CALLER: com.google.common.collect.Iterables.3#transform(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.3#transform(java.lang.Iterable)
CALLER: com.squareup.okhttp.HttpUrl#resolve(java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#<init>()
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#parse(com.squareup.okhttp.HttpUrl,java.lang.String)
	CALLEE: com.squareup.okhttp.HttpUrl.Builder#build()
CALLER: com.squareup.okhttp.internal.http.RouteSelector#hasNext()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextInetSocketAddress()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextProxy()
	CALLEE: com.squareup.okhttp.internal.http.RouteSelector#hasNextPostponed()
CALLER: okio.RealBufferedSink#close()
	CALLEE: static okio.Util#sneakyRethrow(java.lang.Throwable)
	CALLEE: okio.Buffer#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.1#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.1#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#write(okio.Buffer,long)
	CALLEE: okio.DeflaterSink#write(okio.Buffer,long)
	CALLEE: okio.Buffer#close()
	CALLEE: okio.DeflaterSink#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#write(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.http.RouteSelector#connectFailed(com.squareup.okhttp.Route,java.io.IOException)
	CALLEE: com.squareup.okhttp.HttpUrl#uri()
	CALLEE: com.squareup.okhttp.Address#url()
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.Address#getProxySelector()
	CALLEE: com.squareup.okhttp.internal.RouteDatabase#failed(com.squareup.okhttp.Route)
CALLER: com.squareup.okhttp.internal.io.RealConnection#isHealthy(boolean)
	CALLEE: okio.RealBufferedSource#exhausted()
CALLER: okio.AsyncTimeout#source(okio.Source)
	CALLEE: okio.AsyncTimeout.2#<init>(okio.AsyncTimeout,okio.Source)
CALLER: okio.AsyncTimeout#sink(okio.Sink)
	CALLEE: okio.AsyncTimeout.1#<init>(okio.AsyncTimeout,okio.Sink)
CALLER: com.squareup.okhttp.internal.http.AuthenticatorAdapter#authenticate(java.net.Proxy,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
	CALLEE: com.squareup.okhttp.internal.http.AuthenticatorAdapter#getConnectToInetAddress(java.net.Proxy,com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.Credentials#basic(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Response#request()
	CALLEE: com.squareup.okhttp.Response#challenges()
	CALLEE: com.squareup.okhttp.HttpUrl#url()
	CALLEE: com.squareup.okhttp.Challenge#getScheme()
	CALLEE: com.squareup.okhttp.Challenge#getRealm()
CALLER: com.squareup.okhttp.internal.http.AuthenticatorAdapter#authenticateProxy(java.net.Proxy,com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Request.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Request.Builder#build()
	CALLEE: com.squareup.okhttp.Request#newBuilder()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
	CALLEE: com.squareup.okhttp.internal.http.AuthenticatorAdapter#getConnectToInetAddress(java.net.Proxy,com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.Credentials#basic(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Response#request()
	CALLEE: com.squareup.okhttp.Response#challenges()
	CALLEE: com.squareup.okhttp.HttpUrl#url()
	CALLEE: com.squareup.okhttp.Challenge#getScheme()
	CALLEE: com.squareup.okhttp.Challenge#getRealm()
CALLER: com.squareup.okhttp.internal.http.StreamAllocation#streamFinished(com.squareup.okhttp.internal.http.HttpStream)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#deallocate(boolean,boolean,boolean)
CALLER: com.squareup.okhttp.internal.io.RealConnection#allocationLimit()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#maxConcurrentStreams()
CALLER: com.squareup.okhttp.Headers#newBuilder()
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
	CALLEE: static com.squareup.okhttp.Headers.Builder#access$000(com.squareup.okhttp.Headers.Builder)
CALLER: com.squareup.okhttp.internal.Platform.Android#connectSocket(java.net.Socket,java.net.InetSocketAddress,int)
	CALLEE: static com.squareup.okhttp.internal.Util#isAndroidGetsocknameError(java.lang.AssertionError)
CALLER: com.squareup.okhttp.internal.Platform.Android#configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#isSupported(java.lang.Object)
	CALLEE: static com.squareup.okhttp.internal.Platform#concatLengthPrefixed(java.util.List)
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)
	CALLEE: com.squareup.okhttp.internal.Platform.JettyNegoProvider#<init>(java.util.List)
CALLER: com.squareup.okhttp.internal.Platform.Android#getSelectedProtocol(javax.net.ssl.SSLSocket)
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#isSupported(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.Platform.JdkWithJettyBootPlatform#getSelectedProtocol(javax.net.ssl.SSLSocket)
	CALLEE: static com.squareup.okhttp.internal.Platform.JettyNegoProvider#access$000(com.squareup.okhttp.internal.Platform.JettyNegoProvider)
	CALLEE: static com.squareup.okhttp.internal.Platform.JettyNegoProvider#access$100(com.squareup.okhttp.internal.Platform.JettyNegoProvider)
CALLER: okio.RealBufferedSink#flush()
	CALLEE: okio.Buffer#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.1#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.1#flush()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#flush()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#flush()
	CALLEE: okio.DeflaterSink#write(okio.Buffer,long)
	CALLEE: okio.Buffer#flush()
	CALLEE: okio.DeflaterSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#flush()
CALLER: com.squareup.okhttp.internal.io.RealConnection#toString()
	CALLEE: com.squareup.okhttp.HttpUrl#port()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
	CALLEE: com.squareup.okhttp.Address#url()
	CALLEE: com.squareup.okhttp.Route#getProxy()
	CALLEE: com.squareup.okhttp.Route#getAddress()
	CALLEE: com.squareup.okhttp.Route#getSocketAddress()
	CALLEE: com.squareup.okhttp.Handshake#cipherSuite()
CALLER: com.squareup.okhttp.Request#cacheControl()
	CALLEE: static com.squareup.okhttp.CacheControl#parse(com.squareup.okhttp.Headers)
CALLER: com.squareup.okhttp.Address#equals(java.lang.Object)
	CALLEE: static com.squareup.okhttp.internal.Util#equal(java.lang.Object,java.lang.Object)
	CALLEE: com.squareup.okhttp.HttpUrl#equals(java.lang.Object)
CALLER: com.squareup.okhttp.Response.Builder#priorResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#checkPriorResponse(com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.Address#getUriHost()
	CALLEE: com.squareup.okhttp.HttpUrl#host()
CALLER: com.squareup.okhttp.Address#getUriPort()
	CALLEE: com.squareup.okhttp.HttpUrl#port()
CALLER: com.squareup.okhttp.HttpUrl.Builder#reencodeForUri()
	CALLEE: static com.squareup.okhttp.HttpUrl#canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean)
CALLER: com.squareup.okhttp.HttpUrl.Builder#host(java.lang.String)
	CALLEE: static com.squareup.okhttp.HttpUrl.Builder#canonicalizeHost(java.lang.String,int,int)
CALLER: com.squareup.okhttp.RequestBody.2#writeTo(okio.BufferedSink)
	CALLEE: okio.RealBufferedSink#write(byte[],int,int)
CALLER: com.squareup.okhttp.Address#hashCode()
	CALLEE: com.squareup.okhttp.HttpUrl#hashCode()
CALLER: com.squareup.okhttp.internal.http.HttpDate.1#initialValue()
	CALLEE: static com.squareup.okhttp.internal.http.HttpDate#access$000()
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#get(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#apply(java.lang.Object)
CALLER: com.google.common.collect.Lists.TransformingRandomAccessList#size()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
CALLER: com.google.common.collect.Lists.TransformingSequentialList#size()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
CALLER: static com.squareup.okhttp.internal.Util#discard(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: static com.squareup.okhttp.internal.Util#skipAll(okio.Source,int,java.util.concurrent.TimeUnit)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreamsOnConnection()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$500(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$502(com.squareup.okhttp.internal.http.Http1xStream,int)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$700(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#streamFinished(com.squareup.okhttp.internal.http.HttpStream)
CALLER: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
CALLER: static okio.Base64#encode(byte[])
	CALLEE: static okio.Base64#encode(byte[],byte[])
CALLER: static com.squareup.okhttp.internal.http.Http2xStream#http2HeadersList(com.squareup.okhttp.Request)
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: static com.squareup.okhttp.internal.Util#hostHeader(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.RequestLine#requestPath(com.squareup.okhttp.HttpUrl)
CALLER: static com.squareup.okhttp.internal.http.Http2xStream#spdy3HeadersList(com.squareup.okhttp.Request)
	CALLEE: okio.ByteString#utf8()
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: static com.squareup.okhttp.internal.Util#hostHeader(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.Request#headers()
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: com.squareup.okhttp.HttpUrl#scheme()
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.RequestLine#requestPath(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#joinOnNull(java.lang.String,java.lang.String)
	CALLEE: okio.ByteString#equals(java.lang.Object)
CALLER: com.squareup.okhttp.internal.http.HttpEngine#getConnection()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#connection()
CALLER: static com.squareup.okhttp.internal.http.RequestLine#get(com.squareup.okhttp.Request,java.net.Proxy.Type)
	CALLEE: com.squareup.okhttp.Request#method()
	CALLEE: com.squareup.okhttp.Request#httpUrl()
	CALLEE: static com.squareup.okhttp.internal.http.RequestLine#requestPath(com.squareup.okhttp.HttpUrl)
	CALLEE: static com.squareup.okhttp.internal.http.RequestLine#includeAuthorityInRequestLine(com.squareup.okhttp.Request,java.net.Proxy.Type)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#newChunkedSink()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#newFixedLengthSink(long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,long,com.squareup.okhttp.internal.http.Http1xStream.1)
CALLER: com.squareup.okhttp.internal.http.RetryableSink#writeToSocket(okio.Sink)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#size()
	CALLEE: okio.Buffer#copyTo(okio.Buffer,long,long)
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#write(okio.Buffer,long)
CALLER: static com.squareup.okhttp.internal.http.Http2xStream#readHttp2HeadersList(java.util.List)
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: com.squareup.okhttp.Response.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#add(java.lang.String,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.StatusLine#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.Response.Builder#protocol(com.squareup.okhttp.Protocol)
	CALLEE: com.squareup.okhttp.Response.Builder#code(int)
	CALLEE: com.squareup.okhttp.Response.Builder#message(java.lang.String)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Response.Builder#headers(com.squareup.okhttp.Headers)
	CALLEE: okio.ByteString#utf8()
CALLER: static com.squareup.okhttp.internal.http.Http2xStream#readSpdy3HeadersList(java.util.List)
	CALLEE: com.squareup.okhttp.Headers.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: com.squareup.okhttp.Response.Builder#<init>()
	CALLEE: com.squareup.okhttp.Headers.Builder#add(java.lang.String,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.StatusLine#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.Response.Builder#protocol(com.squareup.okhttp.Protocol)
	CALLEE: com.squareup.okhttp.Response.Builder#code(int)
	CALLEE: com.squareup.okhttp.Response.Builder#message(java.lang.String)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Response.Builder#headers(com.squareup.okhttp.Headers)
	CALLEE: okio.ByteString#utf8()
CALLER: com.squareup.okhttp.internal.http.Http2xStream.StreamFinishingSource#<init>(com.squareup.okhttp.internal.http.Http2xStream,okio.Source)
	CALLEE: okio.ForwardingSource#<init>(okio.Source)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#getTransferStream(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.internal.http.HttpEngine#hasBody(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newFixedLengthSource(long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newChunkedSource(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#newUnknownLengthSource()
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String)
CALLER: static com.google.common.collect.Maps#valueIterator(java.util.Iterator)
	CALLEE: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
	CALLEE: static com.google.common.collect.Maps#valueFunction()
CALLER: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#completeSegmentByteCount()
	CALLEE: okio.Buffer#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.1#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#write(okio.Buffer,long)
	CALLEE: okio.DeflaterSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#write(okio.Buffer,long)
CALLER: okio.RealBufferedSource#indexOf(byte)
	CALLEE: okio.RealBufferedSource#indexOf(byte,long)
CALLER: okio.Buffer#copyTo(okio.Buffer,long,long)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Segment#push(okio.Segment)
	CALLEE: okio.Segment#<init>(okio.Segment)
CALLER: okio.Buffer#readByteString()
	CALLEE: okio.ByteString#<init>(byte[])
	CALLEE: okio.Buffer#readByteArray()
CALLER: okio.Buffer#readUtf8Line(long)
	CALLEE: okio.Buffer#skip(long)
	CALLEE: okio.Buffer#getByte(long)
	CALLEE: okio.Buffer#readUtf8(long)
CALLER: com.google.common.collect.Iterables.3#transform(java.lang.Iterable)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterables.2#iterator()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.base.Splitter.5#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: static okio.Util#sneakyRethrow(java.lang.Throwable)
	CALLEE: static okio.Util#sneakyThrow2(java.lang.Throwable)
CALLER: okio.RealBufferedSource#exhausted()
	CALLEE: okio.Buffer#exhausted()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.http.AuthenticatorAdapter#getConnectToInetAddress(java.net.Proxy,com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.HttpUrl#host()
CALLER: static com.squareup.okhttp.Credentials#basic(java.lang.String,java.lang.String)
	CALLEE: static okio.ByteString#of(byte[])
	CALLEE: okio.ByteString#base64()
CALLER: com.squareup.okhttp.internal.OptionalMethod#invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#invokeOptional(java.lang.Object,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.OptionalMethod#isSupported(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#getMethod(java.lang.Class)
CALLER: static com.squareup.okhttp.internal.Platform#concatLengthPrefixed(java.util.List)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writeUtf8(java.lang.String)
	CALLEE: okio.Buffer#readByteArray()
CALLER: com.squareup.okhttp.internal.OptionalMethod#invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#invoke(java.lang.Object,java.lang.Object[])
CALLER: static com.squareup.okhttp.CacheControl#parse(com.squareup.okhttp.Headers)
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#parseSeconds(java.lang.String,int)
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#skipUntil(java.lang.String,int,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#skipWhitespace(java.lang.String,int)
	CALLEE: com.squareup.okhttp.CacheControl#<init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String)
CALLER: static com.squareup.okhttp.CacheControl#<clinit>()
	CALLEE: com.squareup.okhttp.CacheControl.Builder#<init>()
	CALLEE: com.squareup.okhttp.CacheControl.Builder#noCache()
	CALLEE: com.squareup.okhttp.CacheControl.Builder#onlyIfCached()
	CALLEE: com.squareup.okhttp.CacheControl.Builder#build()
	CALLEE: com.squareup.okhttp.CacheControl.Builder#maxStale(int,java.util.concurrent.TimeUnit)
CALLER: com.squareup.okhttp.Response.Builder#checkPriorResponse(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1700(com.squareup.okhttp.Response)
CALLER: okio.RealBufferedSink#write(byte[],int,int)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#write(byte[],int,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#get(java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#containsKey(java.lang.Object)
	CALLEE: static com.google.common.collect.Maps#safeContainsKey(java.util.Map,java.lang.Object)
CALLER: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#exhausted()
	CALLEE: okio.GzipSource#consumeHeader()
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#updateCrc(okio.Buffer,long,long)
	CALLEE: okio.GzipSource#consumeTrailer()
CALLER: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSink#buffer()
	CALLEE: okio.RealBufferedSink#close()
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#copyTo(okio.Buffer,long,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
CALLER: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.Buffer#write(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,java.lang.String)
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
CALLER: static com.squareup.okhttp.internal.http.RequestLine#requestPath(com.squareup.okhttp.HttpUrl)
	CALLEE: com.squareup.okhttp.HttpUrl#encodedQuery()
	CALLEE: com.squareup.okhttp.HttpUrl#encodedPath()
CALLER: static com.squareup.okhttp.internal.http.RequestLine#includeAuthorityInRequestLine(com.squareup.okhttp.Request,java.net.Proxy.Type)
	CALLEE: com.squareup.okhttp.Request#isHttps()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#<init>(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,long,com.squareup.okhttp.internal.http.Http1xStream.1)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,long)
CALLER: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#write(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#newChunkedSource(com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.HttpEngine)
CALLER: com.squareup.okhttp.internal.http.Http1xStream#newUnknownLengthSource()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#noNewStreamsOnConnection()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
CALLER: okio.RealBufferedSource#indexOf(byte,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.Buffer#indexOf(byte,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
CALLER: okio.Segment#<init>(okio.Segment)
	CALLEE: okio.Segment#<init>(byte[],int,int)
CALLER: okio.Buffer#readByteArray()
	CALLEE: okio.Buffer#readByteArray(long)
CALLER: okio.Buffer#getByte(long)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
CALLER: okio.Buffer#readUtf8(long)
	CALLEE: okio.Buffer#readString(long,java.nio.charset.Charset)
CALLER: com.squareup.okhttp.internal.OptionalMethod#invokeOptional(java.lang.Object,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#getMethod(java.lang.Class)
CALLER: com.squareup.okhttp.internal.OptionalMethod#getMethod(java.lang.Class)
	CALLEE: static com.squareup.okhttp.internal.OptionalMethod#getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])
CALLER: com.squareup.okhttp.internal.OptionalMethod#invoke(java.lang.Object,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.OptionalMethod#getMethod(java.lang.Class)
CALLER: okio.Buffer#write(byte[],int,int)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#get(java.lang.Object)
	CALLEE: static com.google.common.collect.Maps#safeGet(java.util.Map,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
CALLER: static com.google.common.collect.Maps#safeContainsKey(java.util.Map,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: okio.GzipSource#consumeHeader()
	CALLEE: okio.RealBufferedSource#buffer()
	CALLEE: okio.RealBufferedSource#indexOf(byte)
	CALLEE: okio.Buffer#getByte(long)
	CALLEE: okio.GzipSource#updateCrc(okio.Buffer,long,long)
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.RealBufferedSource#readShort()
	CALLEE: okio.GzipSource#checkEqual(java.lang.String,int,int)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: okio.Buffer#readShortLe()
	CALLEE: okio.RealBufferedSource#readShortLe()
CALLER: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.InflaterSource#refill()
	CALLEE: okio.InflaterSource#releaseInflatedBytes()
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.2#inflate(byte[],int,int)
CALLER: okio.GzipSource#consumeTrailer()
	CALLEE: okio.GzipSource#checkEqual(java.lang.String,int,int)
	CALLEE: okio.RealBufferedSource#readIntLe()
CALLER: okio.Buffer#write(okio.Buffer,long)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.Segment#push(okio.Segment)
	CALLEE: okio.Segment#writeTo(okio.Segment,int)
	CALLEE: okio.Segment#split(int)
	CALLEE: okio.Segment#compact()
CALLER: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: okio.ByteString#size()
CALLER: com.squareup.okhttp.HttpUrl#encodedPath()
	CALLEE: static com.squareup.okhttp.HttpUrl#delimiterOffset(java.lang.String,int,int,java.lang.String)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#<init>(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.RealBufferedSink#timeout()
	CALLEE: okio.ForwardingTimeout#<init>(okio.Timeout)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#<init>(com.squareup.okhttp.internal.http.Http1xStream,long)
	CALLEE: okio.RealBufferedSink#timeout()
	CALLEE: okio.ForwardingTimeout#<init>(okio.Timeout)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.HttpEngine)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: static com.google.common.collect.Maps.EntryFunction#<clinit>()
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#<init>(java.lang.String,int)
CALLER: static com.google.common.collect.Maps#safeGet(java.util.Map,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: okio.RealBufferedSource#require(long)
	CALLEE: okio.RealBufferedSource#request(long)
CALLER: okio.RealBufferedSource#readShort()
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.Buffer#readShort()
CALLER: okio.RealBufferedSource#skip(long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.Buffer#skip(long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
CALLER: okio.Buffer#readShortLe()
	CALLEE: okio.Buffer#readShort()
	CALLEE: static okio.Util#reverseBytesShort(short)
CALLER: okio.RealBufferedSource#readShortLe()
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.Buffer#readShortLe()
CALLER: okio.InflaterSource#refill()
	CALLEE: okio.RealBufferedSource#buffer()
	CALLEE: okio.RealBufferedSource#exhausted()
	CALLEE: okio.InflaterSource#releaseInflatedBytes()
CALLER: okio.InflaterSource#releaseInflatedBytes()
	CALLEE: okio.RealBufferedSource#skip(long)
CALLER: okio.RealBufferedSource#readIntLe()
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.Buffer#readIntLe()
CALLER: okio.Segment#split(int)
	CALLEE: okio.Segment#push(okio.Segment)
	CALLEE: okio.Segment#<init>(okio.Segment)
CALLER: okio.Segment#compact()
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.Segment#writeTo(okio.Segment,int)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#<init>(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#<init>(com.squareup.okhttp.internal.http.Http1xStream,com.squareup.okhttp.internal.http.Http1xStream.1)
CALLER: com.google.common.collect.Maps.EntryFunction.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.collect.Maps.EntryFunction#<init>(java.lang.String,int,com.google.common.collect.Maps.1)
CALLER: com.google.common.collect.Maps.EntryFunction.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.collect.Maps.EntryFunction#<init>(java.lang.String,int,com.google.common.collect.Maps.1)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: okio.RealBufferedSource#request(long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.GzipSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: okio.InflaterSource#read(okio.Buffer,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
CALLER: okio.Buffer#readShort()
	CALLEE: okio.Buffer#readByte()
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
CALLER: okio.Buffer#readIntLe()
	CALLEE: okio.Buffer#readInt()
	CALLEE: static okio.Util#reverseBytesInt(int)
CALLER: okio.ByteString#equals(java.lang.Object)
	CALLEE: okio.ByteString#size()
	CALLEE: okio.ByteString#rangeEquals(int,byte[],int,int)
CALLER: com.google.common.collect.Maps.EntryFunction#<init>(java.lang.String,int,com.google.common.collect.Maps.1)
	CALLEE: com.google.common.collect.Maps.EntryFunction#<init>(java.lang.String,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: okio.Buffer#readInt()
	CALLEE: okio.Buffer#readByte()
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
CALLER: com.google.common.collect.Maps.ImprovedAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#createEntrySet()
CALLER: okio.ForwardingSource#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#timeout()
CALLER: com.google.common.base.Splitter.5#iterator()
	CALLEE: static com.google.common.base.Splitter#access$000(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: io.airlift.command.ParseState#withOption(io.airlift.command.model.OptionMetadata)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
CALLER: io.airlift.command.ParseState#withUnparsedInput(java.lang.String)
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
CALLER: io.airlift.command.ParseState#withArgument(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#add(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
CALLER: io.airlift.command.ParseState#getLocation()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: okio.ForwardingTimeout#deadlineNanoTime(long)
	CALLEE: okio.ForwardingTimeout#deadlineNanoTime(long)
	CALLEE: okio.Timeout.1#deadlineNanoTime(long)
	CALLEE: okio.Timeout#deadlineNanoTime(long)
CALLER: okio.ForwardingTimeout#clearDeadline()
	CALLEE: okio.ForwardingTimeout#clearDeadline()
	CALLEE: okio.Timeout#clearDeadline()
CALLER: okio.ForwardingTimeout#deadlineNanoTime()
	CALLEE: okio.ForwardingTimeout#deadlineNanoTime()
	CALLEE: okio.Timeout#deadlineNanoTime()
CALLER: com.squareup.okhttp.Response.Builder#headers(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.Headers#newBuilder()
CALLER: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
CALLER: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Builder#build()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Builder,com.squareup.okhttp.internal.framed.FramedConnection.1)
CALLER: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#read(okio.Buffer,long)
CALLER: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.util.Map.Entry)
CALLER: com.squareup.okhttp.internal.framed.Header#toString()
	CALLEE: okio.ByteString#utf8()
CALLER: com.google.common.base.Splitter.5#toString()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.lang.Iterable)
CALLER: okio.ForwardingTimeout#hasDeadline()
	CALLEE: okio.ForwardingTimeout#hasDeadline()
	CALLEE: okio.Timeout#hasDeadline()
CALLER: okio.ForwardingTimeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.ForwardingTimeout#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout.1#timeout(long,java.util.concurrent.TimeUnit)
	CALLEE: okio.Timeout#timeout(long,java.util.concurrent.TimeUnit)
CALLER: okio.AsyncTimeout.1#write(okio.Buffer,long)
	CALLEE: okio.Okio.1#write(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit(java.io.IOException)
CALLER: okio.AsyncTimeout.2#read(okio.Buffer,long)
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit(java.io.IOException)
	CALLEE: okio.Okio.2#read(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#read(okio.Buffer,long)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$600(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#readChunkSize()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#endOfInput()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$600(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
CALLER: com.squareup.okhttp.CacheControl.Builder#build()
	CALLEE: com.squareup.okhttp.CacheControl#<init>(com.squareup.okhttp.CacheControl.Builder,com.squareup.okhttp.CacheControl.1)
CALLER: okio.ForwardingTimeout#clearTimeout()
	CALLEE: okio.Timeout#clearTimeout()
	CALLEE: okio.ForwardingTimeout#clearTimeout()
CALLER: okio.AsyncTimeout.1#close()
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit(java.io.IOException)
	CALLEE: okio.Okio.1#close()
CALLER: okio.AsyncTimeout.1#flush()
	CALLEE: okio.Okio.1#flush()
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit(java.io.IOException)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#close()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$400(com.squareup.okhttp.internal.http.Http1xStream,okio.ForwardingTimeout)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$502(com.squareup.okhttp.internal.http.Http1xStream,int)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#write(okio.Buffer,long)
	CALLEE: static com.squareup.okhttp.internal.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSink#flush()
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: okio.ByteString#compareTo(java.lang.Object)
	CALLEE: okio.ByteString#compareTo(okio.ByteString)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#close()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$400(com.squareup.okhttp.internal.http.Http1xStream,okio.ForwardingTimeout)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$502(com.squareup.okhttp.internal.http.Http1xStream,int)
	CALLEE: okio.RealBufferedSink#writeUtf8(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#write(okio.Buffer,long)
	CALLEE: okio.RealBufferedSink#writeUtf8(java.lang.String)
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.RealBufferedSink#writeHexadecimalUnsignedLong(long)
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSink#flush()
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$300(com.squareup.okhttp.internal.http.Http1xStream)
CALLER: okio.ByteString#rangeEquals(int,byte[],int,int)
	CALLEE: static okio.Util#arrayRangeEquals(byte[],int,byte[],int,int)
CALLER: okio.ByteString#toString()
	CALLEE: okio.ByteString#hex()
	CALLEE: okio.ByteString#md5()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#createEntrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
CALLER: static com.google.common.base.Splitter#access$000(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter#splittingIterator(java.lang.CharSequence)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#<clinit>()
	CALLEE: static com.squareup.okhttp.internal.Util#threadFactory(java.lang.String,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Builder,com.squareup.okhttp.internal.framed.FramedConnection.1)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
CALLER: com.google.common.collect.Maps.EntryFunction.2#apply(java.util.Map.Entry)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
CALLER: okio.AsyncTimeout#enter()
	CALLEE: okio.Timeout#hasDeadline()
	CALLEE: okio.Timeout#timeoutNanos()
	CALLEE: static okio.AsyncTimeout#scheduleTimeout(okio.AsyncTimeout,long,boolean)
CALLER: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit()
	CALLEE: okio.Okio.3#newTimeoutException(java.io.IOException)
CALLER: okio.AsyncTimeout#exit(java.io.IOException)
	CALLEE: okio.AsyncTimeout#exit()
	CALLEE: okio.Okio.3#newTimeoutException(java.io.IOException)
CALLER: okio.Okio.2#read(okio.Buffer,long)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: okio.Timeout#throwIfReached()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#readChunkSize()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine#receiveHeaders(com.squareup.okhttp.Headers)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream#readHeaders()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#endOfInput()
	CALLEE: static com.squareup.okhttp.internal.http.Http1xStream#access$600(com.squareup.okhttp.internal.http.Http1xStream)
	CALLEE: okio.RealBufferedSource#readUtf8LineStrict()
	CALLEE: okio.RealBufferedSource#readHexadecimalUnsignedLong()
CALLER: com.squareup.okhttp.CacheControl#<init>(com.squareup.okhttp.CacheControl.Builder,com.squareup.okhttp.CacheControl.1)
	CALLEE: com.squareup.okhttp.CacheControl#<init>(com.squareup.okhttp.CacheControl.Builder)
CALLER: okio.ByteString#compareTo(okio.ByteString)
	CALLEE: okio.ByteString#size()
	CALLEE: okio.ByteString#getByte(int)
CALLER: okio.RealBufferedSink#writeHexadecimalUnsignedLong(long)
	CALLEE: okio.Buffer#writeHexadecimalUnsignedLong(long)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
CALLER: okio.ByteString#md5()
	CALLEE: okio.ByteString#digest(java.lang.String)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
	CALLEE: com.google.common.collect.Maps.EntrySet#<init>()
CALLER: com.google.common.base.Splitter#splittingIterator(java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.3#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.1#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: static com.squareup.okhttp.internal.Util#threadFactory(java.lang.String,boolean)
	CALLEE: com.squareup.okhttp.internal.Util.1#<init>(java.lang.String,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: com.squareup.okhttp.internal.framed.Http2#newWriter(okio.BufferedSink,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3#newWriter(okio.BufferedSink,boolean)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$700(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: com.squareup.okhttp.internal.framed.Http2#newReader(okio.BufferedSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3#newReader(okio.BufferedSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#<init>(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.FrameReader,com.squareup.okhttp.internal.framed.FramedConnection.1)
	CALLEE: static com.squareup.okhttp.internal.Util#threadFactory(java.lang.String,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#<init>()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$000(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$100(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$200(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$300(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#set(int,int,int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$400(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: com.squareup.okhttp.internal.framed.Http2#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getInitialWindowSize(int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$500(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection.Builder#access$600(com.squareup.okhttp.internal.framed.FramedConnection.Builder)
CALLER: static okio.AsyncTimeout#scheduleTimeout(okio.AsyncTimeout,long,boolean)
	CALLEE: okio.AsyncTimeout#<init>()
	CALLEE: okio.Timeout#deadlineNanoTime()
	CALLEE: okio.AsyncTimeout.Watchdog#<init>()
	CALLEE: okio.AsyncTimeout#remainingNanos(long)
CALLER: okio.AsyncTimeout#exit()
	CALLEE: static okio.AsyncTimeout#cancelScheduledTimeout(okio.AsyncTimeout)
CALLER: okio.RealBufferedSource#readHexadecimalUnsignedLong()
	CALLEE: okio.Buffer#getByte(long)
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.RealBufferedSource#request(long)
	CALLEE: okio.Buffer#readHexadecimalUnsignedLong()
CALLER: okio.ByteString#digest(java.lang.String)
	CALLEE: static okio.ByteString#of(byte[])
CALLER: com.google.common.collect.Maps.EntrySet#<init>()
	CALLEE: com.google.common.collect.Sets.ImprovedAbstractSet#<init>()
CALLER: com.google.common.base.Splitter.3#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.3#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: com.google.common.base.Splitter.1#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.1#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: com.squareup.okhttp.internal.framed.Http2#newWriter(okio.BufferedSink,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#<init>(okio.BufferedSink,boolean)
CALLER: com.squareup.okhttp.internal.framed.Spdy3#newWriter(okio.BufferedSink,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#<init>(okio.BufferedSink,boolean)
CALLER: com.squareup.okhttp.internal.framed.Http2#newReader(okio.BufferedSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#<init>(okio.BufferedSource,int,boolean)
CALLER: com.squareup.okhttp.internal.framed.Spdy3#newReader(okio.BufferedSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#<init>(okio.BufferedSource,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#<init>(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.FrameReader,com.squareup.okhttp.internal.framed.FramedConnection.1)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#<init>(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.FrameReader)
CALLER: okio.Buffer#readHexadecimalUnsignedLong()
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#readUtf8()
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.Buffer#writeHexadecimalUnsignedLong(long)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
CALLER: com.google.common.base.Splitter.3#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.3.1#<init>(com.google.common.base.Splitter.3,com.google.common.base.Splitter,java.lang.CharSequence,java.util.regex.Matcher)
CALLER: com.google.common.base.Splitter.1#iterator(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.1.1#<init>(com.google.common.base.Splitter.1,com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#<init>(okio.BufferedSink,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#<init>(okio.Buffer)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#<init>(okio.BufferedSink,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: okio.DeflaterSink#<init>(okio.Sink,java.util.zip.Deflater)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#<init>(okio.BufferedSource,int,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#<init>(okio.BufferedSource)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#<init>(int,okio.Source)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#<init>(okio.BufferedSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#<init>(okio.BufferedSource)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#<init>(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.FrameReader)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1100(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.google.common.base.Splitter.3.1#<init>(com.google.common.base.Splitter.3,com.google.common.base.Splitter,java.lang.CharSequence,java.util.regex.Matcher)
	CALLEE: com.google.common.base.Splitter.SplittingIterator#<init>(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: com.google.common.base.Splitter.1.1#<init>(com.google.common.base.Splitter.1,com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.Splitter.SplittingIterator#<init>(com.google.common.base.Splitter,java.lang.CharSequence)
CALLER: okio.DeflaterSink#<init>(okio.Sink,java.util.zip.Deflater)
	CALLEE: static okio.Okio#buffer(okio.Sink)
	CALLEE: okio.DeflaterSink#<init>(okio.BufferedSink,java.util.zip.Deflater)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#<init>(int,okio.Source)
	CALLEE: static okio.Okio#buffer(okio.Source)
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader#<init>(okio.BufferedSource)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#<init>(com.squareup.okhttp.internal.framed.NameValueBlockReader,okio.Source)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader.2#<init>(com.squareup.okhttp.internal.framed.NameValueBlockReader)
	CALLEE: okio.InflaterSource#<init>(okio.Source,java.util.zip.Inflater)
CALLER: com.google.common.base.Splitter.SplittingIterator#<init>(com.google.common.base.Splitter,java.lang.CharSequence)
	CALLEE: com.google.common.base.AbstractIterator#<init>()
	CALLEE: static com.google.common.base.Splitter#access$200(com.google.common.base.Splitter)
	CALLEE: static com.google.common.base.Splitter#access$300(com.google.common.base.Splitter)
	CALLEE: static com.google.common.base.Splitter#access$400(com.google.common.base.Splitter)
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#<init>(com.squareup.okhttp.internal.framed.NameValueBlockReader,okio.Source)
	CALLEE: okio.ForwardingSource#<init>(okio.Source)
CALLER: okio.InflaterSource#<init>(okio.Source,java.util.zip.Inflater)
	CALLEE: static okio.Okio#buffer(okio.Source)
	CALLEE: okio.InflaterSource#<init>(okio.BufferedSource,java.util.zip.Inflater)
CALLER: static com.google.common.base.AbstractIterator.State#<clinit>()
	CALLEE: com.google.common.base.AbstractIterator.State#<init>(java.lang.String,int)
CALLER: com.squareup.okhttp.internal.NamedRunnable#run()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader.1#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.1#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader.2#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.6#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.5#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.7#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.4#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.3#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.2#execute()
CALLER: okio.AsyncTimeout.Watchdog#run()
	CALLEE: static okio.AsyncTimeout#access$000()
	CALLEE: okio.Okio.3#timedOut()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#timedOut()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#sendConnectionPreface()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getInitialWindowSize(int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#connectionPreface()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#connectionPreface()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#settings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#settings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#windowUpdate(int,long)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#windowUpdate(int,long)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#maxConcurrentStreams()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getMaxConcurrentStreams(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#newStream(java.util.List,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#newStream(int,java.util.List,boolean,boolean)
CALLER: okio.DeflaterSink#write(okio.Buffer,long)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: static okio.Util#checkOffsetAndCount(long,long,long)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.DeflaterSink#deflate(boolean)
CALLER: okio.DeflaterSink#flush()
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.DeflaterSink#deflate(boolean)
CALLER: okio.DeflaterSink#close()
	CALLEE: okio.RealBufferedSink#close()
	CALLEE: static okio.Util#sneakyRethrow(java.lang.Throwable)
	CALLEE: okio.DeflaterSink#finishDeflate()
CALLER: okio.DeflaterSink#timeout()
	CALLEE: okio.RealBufferedSink#timeout()
CALLER: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#readContinuationHeader()
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader.1#read(okio.Buffer,long)
	CALLEE: okio.ForwardingSource#read(okio.Buffer,long)
	CALLEE: static com.squareup.okhttp.internal.framed.NameValueBlockReader#access$000(com.squareup.okhttp.internal.framed.NameValueBlockReader)
	CALLEE: static com.squareup.okhttp.internal.framed.NameValueBlockReader#access$002(com.squareup.okhttp.internal.framed.NameValueBlockReader,int)
CALLER: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
CALLER: okio.InflaterSource#timeout()
	CALLEE: okio.RealBufferedSource#timeout()
CALLER: com.squareup.okhttp.Response.Builder#build()
	CALLEE: com.squareup.okhttp.Response#<init>(com.squareup.okhttp.Response.Builder,com.squareup.okhttp.Response.1)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
CALLER: io.airlift.command.ParseState#withOptionValue(io.airlift.command.model.OptionMetadata,java.lang.Object)
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
	CALLEE: static com.google.common.collect.ImmutableListMultimap#builder()
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#putAll(com.google.common.collect.Multimap)
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#build()
CALLER: com.squareup.okhttp.CertificatePinner#check(java.lang.String,java.util.List)
	CALLEE: static com.squareup.okhttp.CertificatePinner#pin(java.security.cert.Certificate)
	CALLEE: static com.squareup.okhttp.CertificatePinner#sha1(java.security.cert.X509Certificate)
	CALLEE: okio.ByteString#base64()
	CALLEE: com.squareup.okhttp.CertificatePinner#findMatchingPins(java.lang.String)
CALLER: com.google.common.collect.ArrayListMultimap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#containsKey(java.lang.Object)
CALLER: com.google.common.collect.ArrayListMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractListMultimap#get(java.lang.Object)
CALLER: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
CALLER: com.google.common.base.AbstractIterator#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: com.google.common.base.AbstractIterator#tryToComputeNext()
CALLER: io.airlift.command.model.CommandMetadata#getAllOptions()
	CALLEE: static com.google.common.collect.ImmutableList#builder()
	CALLEE: com.google.common.collect.ImmutableList.Builder#addAll(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableList.Builder#build()
CALLER: io.airlift.command.Accessor#addValues(java.lang.Object,java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#isEmpty(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.Exception,java.lang.String,java.lang.Object[])
	CALLEE: io.airlift.command.Accessor#getValue(java.lang.Object)
	CALLEE: static io.airlift.command.Accessor#getOrCreateCollectionField(java.lang.String,java.lang.Object,java.lang.reflect.Field)
	CALLEE: static com.google.common.collect.Iterables#addAll(java.util.Collection,java.lang.Iterable)
	CALLEE: static com.google.common.collect.Iterables#getLast(java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verify(java.lang.String,javax.net.ssl.SSLSession)
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verify(java.lang.String,java.security.cert.X509Certificate)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#listIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedList)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#execute()
	CALLEE: static com.squareup.okhttp.internal.Util#closeQuietly(java.io.Closeable)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readConnectionPreface()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readConnectionPreface()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#nextFrame(com.squareup.okhttp.internal.framed.FrameReader.Handler)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#nextFrame(com.squareup.okhttp.internal.framed.FrameReader.Handler)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1200(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.ErrorCode,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: static okio.AsyncTimeout#access$000()
	CALLEE: static okio.AsyncTimeout#awaitTimeout()
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#connectionPreface()
	CALLEE: okio.ByteString#toByteArray()
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.ByteString#hex()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$100()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$000()
	CALLEE: okio.RealBufferedSink#write(byte[])
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#settings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#size()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#isSet(int)
	CALLEE: okio.RealBufferedSink#writeShort(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#get(int)
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#settings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#size()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#isSet(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#get(int)
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#flags(int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#windowUpdate(int,long)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$500(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#windowUpdate(int,long)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#newStream(int,java.util.List,boolean,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#<init>(int,com.squareup.okhttp.internal.framed.FramedConnection,boolean,boolean,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isOpen()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#setIdle(boolean)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#synStream(boolean,boolean,int,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#synStream(boolean,boolean,int,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#pushPromise(int,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#pushPromise(int,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#flush()
CALLER: okio.DeflaterSink#deflate(boolean)
	CALLEE: okio.Buffer#writableSegment(int)
	CALLEE: static okio.SegmentPool#recycle(okio.Segment)
	CALLEE: okio.Segment#pop()
	CALLEE: okio.RealBufferedSink#buffer()
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
CALLER: okio.DeflaterSink#finishDeflate()
	CALLEE: okio.DeflaterSink#deflate(boolean)
CALLER: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#readContinuationHeader()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$100()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$300(okio.BufferedSource)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2.FrameLogger#formatHeader(boolean,int,int,byte,byte)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.Response#<init>(com.squareup.okhttp.Response.Builder,com.squareup.okhttp.Response.1)
	CALLEE: com.squareup.okhttp.Response#<init>(com.squareup.okhttp.Response.Builder)
CALLER: static com.google.common.collect.ImmutableListMultimap#builder()
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#<init>()
CALLER: com.google.common.collect.AbstractListMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
CALLER: static com.google.common.base.AbstractIterator.1#<clinit>()
	CALLEE: static com.google.common.base.AbstractIterator.State#values()
CALLER: com.google.common.base.AbstractIterator#tryToComputeNext()
	CALLEE: com.google.common.base.Splitter.SplittingIterator#computeNext()
CALLER: io.airlift.command.Accessor#getValue(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: static io.airlift.command.ParserUtil#createInstance(java.lang.Class)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.Exception,java.lang.String,java.lang.Object[])
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#subList(int,int)
CALLER: static io.airlift.command.Accessor#getOrCreateCollectionField(java.lang.String,java.lang.Object,java.lang.reflect.Field)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.Exception,java.lang.String,java.lang.Object[])
	CALLEE: static io.airlift.command.Accessor#newCollection(java.lang.Class)
CALLER: static com.google.common.collect.Iterables#addAll(java.util.Collection,java.lang.Iterable)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableSet#iterator()
	CALLEE: com.google.common.collect.ImmutableEnumSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterables.2#iterator()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.base.Splitter.5#iterator()
	CALLEE: static com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
CALLER: static com.google.common.collect.Iterables#getLast(java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: static com.google.common.collect.Iterables#getLastInNonemptyList(java.util.List)
	CALLEE: static com.google.common.collect.Iterators#getLast(java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
CALLER: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verify(java.lang.String,java.security.cert.X509Certificate)
	CALLEE: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyAsIpAddress(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyHostName(java.lang.String,java.security.cert.X509Certificate)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$000(com.google.common.collect.AbstractMapBasedMultimap)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedList)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: static com.squareup.okhttp.internal.framed.ErrorCode#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.ErrorCode#<init>(java.lang.String,int,int,int,int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readConnectionPreface()
	CALLEE: okio.ByteString#size()
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: okio.ByteString#utf8()
	CALLEE: okio.ByteString#hex()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$100()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$000()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: okio.RealBufferedSource#readByteString(long)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#nextFrame(com.squareup.okhttp.internal.framed.FrameReader.Handler)
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$100()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$300(okio.BufferedSource)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2.FrameLogger#formatHeader(boolean,int,int,byte,byte)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readData(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readHeaders(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readPriority(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readRstStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readSettings(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readPushPromise(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readPing(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readGoAway(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readWindowUpdate(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#nextFrame(com.squareup.okhttp.internal.framed.FrameReader.Handler)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSynStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSynReply(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readRstStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSettings(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readPing(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readGoAway(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readHeaders(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Reader#readWindowUpdate(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#data(boolean,int,okio.BufferedSource,int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$1200(com.squareup.okhttp.internal.framed.FramedConnection,com.squareup.okhttp.internal.framed.ErrorCode,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#close(com.squareup.okhttp.internal.framed.ErrorCode,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: static okio.AsyncTimeout#awaitTimeout()
	CALLEE: okio.AsyncTimeout#remainingNanos(long)
CALLER: okio.RealBufferedSink#write(byte[])
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#write(byte[])
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$100()
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$500(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.Http2.FrameLogger#formatHeader(boolean,int,int,byte,byte)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$600(okio.BufferedSink,int)
	CALLEE: okio.RealBufferedSink#writeByte(int)
CALLER: okio.RealBufferedSink#writeShort(int)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#writeShort(int)
CALLER: okio.RealBufferedSink#writeInt(int)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.Settings#flags(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#isPersisted(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#persistValue(int)
CALLER: static com.squareup.okhttp.internal.framed.Http2#access$500(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#illegalArgument(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedStream#<init>(int,com.squareup.okhttp.internal.framed.FramedConnection,boolean,boolean,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getInitialWindowSize(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#<init>(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#<init>(com.squareup.okhttp.internal.framed.FramedStream,long,com.squareup.okhttp.internal.framed.FramedStream.1)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#<init>(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$102(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource,boolean)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$202(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#isOpen()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$100(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$300(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$200(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$400(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#synStream(boolean,boolean,int,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#headers(boolean,int,java.util.List)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#synStream(boolean,boolean,int,int,java.util.List)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#writeShort(int)
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#writeNameValueBlockToBuffer(java.util.List)
	CALLEE: okio.RealBufferedSink#writeAll(okio.Source)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#pushPromise(int,int,java.util.List)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#writeHeaders(java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#writeContinuationFrames(int,long)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#flush()
	CALLEE: okio.RealBufferedSink#flush()
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#flush()
	CALLEE: okio.RealBufferedSink#flush()
CALLER: static com.squareup.okhttp.internal.framed.Http2#access$300(okio.BufferedSource)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#readMedium(okio.BufferedSource)
CALLER: okio.RealBufferedSource#readByte()
	CALLEE: okio.Buffer#readByte()
	CALLEE: okio.RealBufferedSource#require(long)
CALLER: static com.squareup.okhttp.internal.framed.Http2.FrameLogger#formatHeader(boolean,int,int,byte,byte)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2.FrameLogger#formatFlags(byte,byte)
CALLER: okio.RealBufferedSource#readInt()
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.Buffer#readInt()
CALLER: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#ioException(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.Response#<init>(com.squareup.okhttp.Response.Builder)
	CALLEE: com.squareup.okhttp.Headers.Builder#build()
	CALLEE: static com.squareup.okhttp.Response.Builder#access$000(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$100(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$200(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$300(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$400(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$500(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$600(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$700(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$800(com.squareup.okhttp.Response.Builder)
	CALLEE: static com.squareup.okhttp.Response.Builder#access$900(com.squareup.okhttp.Response.Builder)
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableMultimap.Builder#<init>()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
CALLER: com.google.common.base.Splitter.SplittingIterator#computeNext()
	CALLEE: com.google.common.base.Splitter.SplittingIterator#computeNext()
CALLER: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#subList(int,int)
CALLER: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.SingletonImmutableList#subList(int,int)
CALLER: static io.airlift.command.Accessor#newCollection(java.lang.Class)
	CALLEE: io.airlift.command.ParseException#<init>(java.lang.String,java.lang.Object[])
CALLER: static com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#add(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.3#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Iterators.3#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.5#hasNext()
	CALLEE: com.google.common.collect.Iterators.5#next()
	CALLEE: com.google.common.base.AbstractIterator#next()
	CALLEE: com.google.common.base.AbstractIterator#hasNext()
CALLER: static com.google.common.collect.Iterables#getLastInNonemptyList(java.util.List)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#get(int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: static com.google.common.collect.Iterators#getLast(java.util.Iterator)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
CALLER: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyIpAddress(java.lang.String,java.security.cert.X509Certificate)
	CALLEE: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#getSubjectAltNames(java.security.cert.X509Certificate,int)
CALLER: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyHostName(java.lang.String,java.security.cert.X509Certificate)
	CALLEE: static com.squareup.okhttp.internal.tls.OkHostnameVerifier#getSubjectAltNames(java.security.cert.X509Certificate,int)
	CALLEE: com.squareup.okhttp.internal.tls.OkHostnameVerifier#verifyHostName(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#<init>(javax.security.auth.x500.X500Principal)
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#findMostSpecific(java.lang.String)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
CALLER: okio.RealBufferedSource#readByteString(long)
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: okio.Buffer#readByteString(long)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readData(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#data(boolean,int,okio.BufferedSource,int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$400(int,byte,short)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readHeaders(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$400(int,byte,short)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readPriority(com.squareup.okhttp.internal.framed.FrameReader.Handler,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readHeaderBlock(int,short,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#headers(boolean,boolean,int,int,java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readPriority(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readPriority(com.squareup.okhttp.internal.framed.FrameReader.Handler,int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readRstStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#fromHttp2(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readSettings(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readShort()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#set(int,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ackSettings()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#settings(boolean,com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getHeaderTableSize()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#headerTableSizeSetting(int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readPushPromise(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$400(int,byte,short)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Reader#readHeaderBlock(int,short,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#pushPromise(int,int,java.util.List)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readPing(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ping(boolean,int,int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readGoAway(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: okio.RealBufferedSource#readByteString(long)
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#fromHttp2(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,okio.ByteString)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readWindowUpdate(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,byte,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$200(java.lang.String,java.lang.Object[])
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#windowUpdate(int,long)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSynStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readShort()
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#headers(boolean,boolean,int,int,java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#readNameValueBlock(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSynReply(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#headers(boolean,boolean,int,int,java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#readNameValueBlock(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readRstStream(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.Spdy3.Reader#ioException(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#fromSpdy3Rst(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readSettings(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#set(int,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#settings(boolean,com.squareup.okhttp.internal.framed.Settings)
	CALLEE: static com.squareup.okhttp.internal.framed.Spdy3.Reader#ioException(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readPing(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ping(boolean,int,int)
	CALLEE: static com.squareup.okhttp.internal.framed.Spdy3.Reader#ioException(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readGoAway(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,okio.ByteString)
	CALLEE: static com.squareup.okhttp.internal.framed.Spdy3.Reader#ioException(java.lang.String,java.lang.Object[])
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#fromSpdyGoAway(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readHeaders(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#headers(boolean,boolean,int,int,java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#readNameValueBlock(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#readWindowUpdate(com.squareup.okhttp.internal.framed.FrameReader.Handler,int,int)
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#windowUpdate(int,long)
	CALLEE: static com.squareup.okhttp.internal.framed.Spdy3.Reader#ioException(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#data(boolean,int,okio.BufferedSource,int)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1300(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1400(com.squareup.okhttp.internal.framed.FramedConnection,int,okio.BufferedSource,int,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveFin()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveData(okio.BufferedSource,int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#close(com.squareup.okhttp.internal.framed.ErrorCode,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#setIdle(boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#shutdown(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#close()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#close(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: okio.Buffer#write(byte[])
	CALLEE: okio.Buffer#write(byte[],int,int)
CALLER: static com.squareup.okhttp.internal.framed.Http2#access$600(okio.BufferedSink,int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#writeMedium(okio.BufferedSink,int)
CALLER: okio.RealBufferedSink#writeByte(int)
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
CALLER: okio.Buffer#writeShort(int)
	CALLEE: okio.Buffer#writableSegment(int)
CALLER: okio.Buffer#writeInt(int)
	CALLEE: okio.Buffer#writableSegment(int)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#<init>(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: okio.AsyncTimeout#<init>()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#<init>(com.squareup.okhttp.internal.framed.FramedStream,long,com.squareup.okhttp.internal.framed.FramedStream.1)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#<init>(com.squareup.okhttp.internal.framed.FramedStream,long)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#<init>(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: okio.Buffer#<init>()
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#headers(boolean,int,java.util.List)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#writeHeaders(java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#writeContinuationFrames(int,long)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#writeNameValueBlockToBuffer(java.util.List)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.ByteString#size()
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: okio.RealBufferedSink#write(okio.ByteString)
CALLER: okio.RealBufferedSink#writeAll(okio.Source)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#read(okio.Buffer,long)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Writer#writeHeaders(java.util.List)
	CALLEE: okio.Buffer#writeByte(int)
	CALLEE: okio.ByteString#toAsciiLowercase()
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$200()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#writeInt(int,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#writeByteString(okio.ByteString)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#writeContinuationFrames(int,long)
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
CALLER: static com.squareup.okhttp.internal.framed.Http2#readMedium(okio.BufferedSource)
	CALLEE: okio.RealBufferedSource#readByte()
CALLER: com.google.common.collect.ImmutableMultimap.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableMultimap.BuilderMultimap#<init>()
CALLER: com.google.common.base.Splitter.SplittingIterator#computeNext()
	CALLEE: com.google.common.base.Splitter.3.1#separatorStart(int)
	CALLEE: com.google.common.base.Splitter.1.1#separatorStart(int)
	CALLEE: com.google.common.base.Splitter.3.1#separatorEnd(int)
	CALLEE: com.google.common.base.Splitter.1.1#separatorEnd(int)
	CALLEE: com.google.common.base.CharMatcher.8#matches(char)
	CALLEE: com.google.common.base.CharMatcher.15#matches(char)
	CALLEE: com.google.common.base.AbstractIterator#endOfData()
CALLER: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: static com.google.common.collect.ImmutableList#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: com.google.common.collect.RegularImmutableList#subListUnchecked(int,int)
	CALLEE: com.google.common.collect.ImmutableList#subListUnchecked(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#findMostSpecific(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#nextAT()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#quotedAV()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#hexAV()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#escapedAV()
CALLER: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#iteratorOrListIterator(java.util.Collection)
CALLER: okio.Buffer#readByteString(long)
	CALLEE: okio.ByteString#<init>(byte[])
	CALLEE: okio.Buffer#readByteArray(long)
CALLER: static com.squareup.okhttp.internal.framed.Http2#access$400(int,byte,short)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#lengthWithoutPadding(int,byte,short)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readPriority(com.squareup.okhttp.internal.framed.FrameReader.Handler,int)
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#priority(int,int,int,boolean)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#readHeaderBlock(int,short,byte,int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readHeaders()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#getAndResetHeaderList()
CALLER: static com.squareup.okhttp.internal.framed.HeadersMode#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.HeadersMode#<init>(java.lang.String,int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#headers(boolean,boolean,int,int,java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeLater(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1100(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#<init>(int,com.squareup.okhttp.internal.framed.FramedConnection,boolean,boolean,java.util.List)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1300(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1500(com.squareup.okhttp.internal.framed.FramedConnection,int,java.util.List,boolean)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1600(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1700(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1800(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1702(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1900(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2100()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader.1#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Reader,java.lang.String,java.lang.Object[],com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.HeadersMode#failIfStreamPresent()
	CALLEE: com.squareup.okhttp.internal.framed.HeadersMode#failIfStreamAbsent()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveFin()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveHeaders(java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
CALLER: static com.squareup.okhttp.internal.framed.ErrorCode#fromHttp2(int)
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#values()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1300(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2200(com.squareup.okhttp.internal.framed.FramedConnection,int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveRstStream(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#settings(boolean,com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getInitialWindowSize(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getProtocol()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1900(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#clear()
	CALLEE: com.squareup.okhttp.internal.framed.Settings#merge(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ackSettingsLater(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2300(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#addBytesToWriteWindow(long)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2302(com.squareup.okhttp.internal.framed.FramedConnection,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#addBytesToWriteWindow(long)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#headerTableSizeSetting(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#adjustDynamicTableByteCount()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#pushPromise(int,int,java.util.List)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2600(com.squareup.okhttp.internal.framed.FramedConnection,int,java.util.List)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ping(boolean,int,int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2400(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2500(com.squareup.okhttp.internal.framed.FramedConnection,boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,okio.ByteString)
	CALLEE: okio.ByteString#size()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1900(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1602(com.squareup.okhttp.internal.framed.FramedConnection,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#getId()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#receiveRstStream(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isLocallyInitiated()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#windowUpdate(int,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#getStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#addBytesToWriteWindow(long)
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader#readNameValueBlock(int)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: okio.ByteString#size()
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: okio.ByteString#toAsciiLowercase()
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#readByteString()
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#doneReading()
CALLER: static com.squareup.okhttp.internal.framed.ErrorCode#fromSpdy3Rst(int)
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#values()
CALLER: static com.squareup.okhttp.internal.framed.ErrorCode#fromSpdyGoAway(int)
	CALLEE: static com.squareup.okhttp.internal.framed.ErrorCode#values()
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$1300(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#pushedStream(int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$1400(com.squareup.okhttp.internal.framed.FramedConnection,int,okio.BufferedSource,int,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#pushDataLater(int,okio.BufferedSource,int,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writeSynResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.1#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#shutdown(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,byte[])
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,byte[])
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#close()
	CALLEE: okio.RealBufferedSink#close()
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#close()
	CALLEE: static com.squareup.okhttp.internal.Util#closeAll(java.io.Closeable,java.io.Closeable)
CALLER: static com.squareup.okhttp.internal.framed.Http2#writeMedium(okio.BufferedSink,int)
	CALLEE: okio.RealBufferedSink#writeByte(int)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#<init>(com.squareup.okhttp.internal.framed.FramedStream,long)
	CALLEE: okio.Buffer#<init>()
CALLER: okio.RealBufferedSink#write(okio.ByteString)
	CALLEE: okio.RealBufferedSink#emitCompleteSegments()
	CALLEE: okio.Buffer#write(okio.ByteString)
CALLER: okio.ByteString#toAsciiLowercase()
	CALLEE: okio.ByteString#<init>(byte[])
CALLER: static com.squareup.okhttp.internal.framed.Hpack#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,java.lang.String)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(java.lang.String,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#nameToFirstIndex()
CALLER: com.squareup.okhttp.internal.framed.Hpack.Writer#writeInt(int,int,int)
	CALLEE: okio.Buffer#writeByte(int)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Writer#writeByteString(okio.ByteString)
	CALLEE: okio.ByteString#size()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Writer#writeInt(int,int,int)
	CALLEE: okio.Buffer#write(okio.ByteString)
CALLER: com.google.common.collect.ImmutableMultimap.BuilderMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: com.google.common.base.Splitter.1.1#separatorStart(int)
	CALLEE: com.google.common.base.CharMatcher#indexIn(java.lang.CharSequence,int)
CALLER: com.google.common.collect.RegularImmutableList#subListUnchecked(int,int)
	CALLEE: com.google.common.collect.RegularImmutableList#<init>(java.lang.Object[],int,int)
CALLER: com.google.common.collect.ImmutableList#subListUnchecked(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#<init>(com.google.common.collect.ImmutableList,int,int)
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#quotedAV()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getEscaped()
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#hexAV()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getByte(int)
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#escapedAV()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getEscaped()
CALLER: static com.squareup.okhttp.internal.framed.Http2#lengthWithoutPadding(int,byte,short)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#ioException(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readHeaders()
	CALLEE: okio.RealBufferedSource#exhausted()
	CALLEE: okio.RealBufferedSource#readByte()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#adjustDynamicTableByteCount()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readInt(int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readIndexedHeader(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithIncrementalIndexingNewName()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithIncrementalIndexingIndexedName(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithoutIndexingNewName()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithoutIndexingIndexedName(int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$1500(com.squareup.okhttp.internal.framed.FramedConnection,int,java.util.List,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#pushHeadersLater(int,java.util.List,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader.1#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Reader,java.lang.String,java.lang.Object[],com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#setIdle(boolean)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$2200(com.squareup.okhttp.internal.framed.FramedConnection,int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#pushResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.Settings#merge(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#set(int,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#isSet(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#get(int)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#flags(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader#ackSettingsLater(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1100(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2100()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.Reader.2#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Reader,java.lang.String,java.lang.Object[],com.squareup.okhttp.internal.framed.Settings)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#adjustDynamicTableByteCount()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#clearDynamicTable()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#evictToRecoverBytes(int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$2600(com.squareup.okhttp.internal.framed.FramedConnection,int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#pushRequestLater(int,java.util.List)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$2400(com.squareup.okhttp.internal.framed.FramedConnection,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removePing(int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$2500(com.squareup.okhttp.internal.framed.FramedConnection,boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writePingLater(boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader#readByteString()
	CALLEE: okio.RealBufferedSource#readInt()
	CALLEE: okio.RealBufferedSource#readByteString(long)
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader#doneReading()
	CALLEE: okio.InflaterSource#refill()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#pushDataLater(int,okio.BufferedSource,int,boolean)
	CALLEE: okio.Buffer#<init>()
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#require(long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.6#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.1#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,byte[])
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#write(byte[])
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: okio.RealBufferedSink#writeInt(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Http2#access$500(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#goAway(int,com.squareup.okhttp.internal.framed.ErrorCode,byte[])
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: static com.squareup.okhttp.internal.Util#closeAll(java.io.Closeable,java.io.Closeable)
	CALLEE: okio.RealBufferedSink#close()
CALLER: okio.Buffer#write(okio.ByteString)
	CALLEE: okio.ByteString#write(okio.Buffer)
CALLER: com.squareup.okhttp.internal.framed.Header#<init>(java.lang.String,java.lang.String)
	CALLEE: static okio.ByteString#encodeUtf8(java.lang.String)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
CALLER: com.google.common.base.CharMatcher#indexIn(java.lang.CharSequence,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
	CALLEE: com.google.common.base.CharMatcher.9#matches(char)
CALLER: com.google.common.collect.ImmutableList.SubList#<init>(com.google.common.collect.ImmutableList,int,int)
	CALLEE: com.google.common.collect.ImmutableList#<init>()
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getEscaped()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getUTF8()
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readInt(int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByte()
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readIndexedHeader(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#isStaticHeader(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$000()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#dynamicTableIndex(int)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithIncrementalIndexingNewName()
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByteString()
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$100(okio.ByteString)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#insertIntoDynamicTable(int,com.squareup.okhttp.internal.framed.Header)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithIncrementalIndexingIndexedName(int)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByteString()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#insertIntoDynamicTable(int,com.squareup.okhttp.internal.framed.Header)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#getName(int)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithoutIndexingNewName()
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByteString()
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$100(okio.ByteString)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readLiteralHeaderWithoutIndexingIndexedName(int)
	CALLEE: com.squareup.okhttp.internal.framed.Header#<init>(okio.ByteString,okio.ByteString)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByteString()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#getName(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#pushHeadersLater(int,java.util.List,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.5#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#pushResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.7#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader.2#<init>(com.squareup.okhttp.internal.framed.FramedConnection.Reader,java.lang.String,java.lang.Object[],com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#pushRequestLater(int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.4#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writePingLater(boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.3#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.6#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: okio.ByteString#write(okio.Buffer)
	CALLEE: okio.Buffer#write(byte[],int,int)
CALLER: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getUTF8()
	CALLEE: com.squareup.okhttp.internal.tls.DistinguishedNameParser#getByte(int)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readByte()
	CALLEE: okio.RealBufferedSource#readByte()
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#isStaticHeader(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$000()
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#readByteString()
	CALLEE: static okio.ByteString#of(byte[])
	CALLEE: okio.RealBufferedSource#readByteString(long)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readInt(int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#readByte()
	CALLEE: static com.squareup.okhttp.internal.framed.Huffman#get()
	CALLEE: okio.RealBufferedSource#readByteArray(long)
	CALLEE: com.squareup.okhttp.internal.framed.Huffman#decode(byte[])
CALLER: static com.squareup.okhttp.internal.framed.Hpack#access$100(okio.ByteString)
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#checkLowercase(okio.ByteString)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#insertIntoDynamicTable(int,com.squareup.okhttp.internal.framed.Header)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#clearDynamicTable()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#evictToRecoverBytes(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#dynamicTableIndex(int)
CALLER: com.squareup.okhttp.internal.framed.Hpack.Reader#getName(int)
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#isStaticHeader(int)
	CALLEE: static com.squareup.okhttp.internal.framed.Hpack#access$000()
	CALLEE: com.squareup.okhttp.internal.framed.Hpack.Reader#dynamicTableIndex(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.5#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.7#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.4#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.3#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: static com.squareup.okhttp.internal.framed.Huffman#<clinit>()
	CALLEE: com.squareup.okhttp.internal.framed.Huffman#<init>()
CALLER: okio.RealBufferedSource#readByteArray(long)
	CALLEE: okio.Buffer#readByteArray(long)
	CALLEE: okio.RealBufferedSource#require(long)
CALLER: static com.squareup.okhttp.internal.framed.Hpack#checkLowercase(okio.ByteString)
	CALLEE: okio.ByteString#size()
	CALLEE: okio.ByteString#utf8()
	CALLEE: okio.ByteString#getByte(int)
CALLER: com.squareup.okhttp.internal.framed.Huffman#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Huffman.Node#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Huffman#buildTree()
CALLER: com.squareup.okhttp.internal.framed.Huffman#buildTree()
	CALLEE: com.squareup.okhttp.internal.framed.Huffman#addCode(int,int,byte)
CALLER: com.squareup.okhttp.internal.framed.Huffman#addCode(int,int,byte)
	CALLEE: com.squareup.okhttp.internal.framed.Huffman.Node#<init>()
	CALLEE: com.squareup.okhttp.internal.framed.Huffman.Node#<init>(int,int)
	CALLEE: static com.squareup.okhttp.internal.framed.Huffman.Node#access$000(com.squareup.okhttp.internal.framed.Huffman.Node)
CALLER: com.squareup.okhttp.internal.framed.Http2.Reader#close()
	CALLEE: okio.RealBufferedSource#close()
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Reader#close()
	CALLEE: com.squareup.okhttp.internal.framed.NameValueBlockReader#close()
CALLER: com.squareup.okhttp.Response.Builder#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers.Builder#set(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.Response#challenges()
	CALLEE: com.squareup.okhttp.Response#headers()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#parseChallenges(com.squareup.okhttp.Headers,java.lang.String)
CALLER: com.squareup.okhttp.Response#newBuilder()
	CALLEE: com.squareup.okhttp.Response.Builder#<init>(com.squareup.okhttp.Response,com.squareup.okhttp.Response.1)
CALLER: com.squareup.okhttp.Response#header(java.lang.String)
	CALLEE: com.squareup.okhttp.Response#header(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.Response#cacheControl()
	CALLEE: static com.squareup.okhttp.CacheControl#parse(com.squareup.okhttp.Headers)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
CALLER: io.airlift.command.ParseState#popContext()
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: io.airlift.command.ParseState#<init>(io.airlift.command.model.CommandGroupMetadata,io.airlift.command.model.CommandMetadata,com.google.common.collect.ListMultimap,java.util.List,java.util.List,io.airlift.command.model.OptionMetadata,java.util.List)
	CALLEE: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#subList(int,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.squareup.okhttp.internal.framed.FramedStream#getResponseHeaders()
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#waitForIo()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#exitAndThrowIfTimedOut()
CALLER: com.squareup.okhttp.internal.framed.FramedStream#getSink()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isLocallyInitiated()
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#putAll(com.google.common.collect.Multimap)
	CALLEE: com.google.common.collect.ImmutableMultimap.Builder#putAll(com.google.common.collect.Multimap)
CALLER: okio.Okio.3#timedOut()
	CALLEE: static okio.Okio#access$000()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#toString()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#listIterator(int)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedList,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#get(int)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#getListDelegate()
CALLER: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
CALLER: com.squareup.okhttp.internal.framed.Huffman#decode(byte[])
	CALLEE: static com.squareup.okhttp.internal.framed.Huffman.Node#access$000(com.squareup.okhttp.internal.framed.Huffman.Node)
	CALLEE: static com.squareup.okhttp.internal.framed.Huffman.Node#access$100(com.squareup.okhttp.internal.framed.Huffman.Node)
	CALLEE: static com.squareup.okhttp.internal.framed.Huffman.Node#access$200(com.squareup.okhttp.internal.framed.Huffman.Node)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#close(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeInternal(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynReset(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#receiveFin()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isOpen()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$102(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource,boolean)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#receiveData(okio.BufferedSource,int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#receive(okio.BufferedSource,long)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#receiveHeaders(java.util.List,com.squareup.okhttp.internal.framed.HeadersMode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isOpen()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeLater(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.HeadersMode#failIfHeadersAbsent()
	CALLEE: com.squareup.okhttp.internal.framed.HeadersMode#failIfHeadersPresent()
CALLER: com.squareup.okhttp.internal.framed.FramedStream#closeLater(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynResetLater(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeInternal(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.google.common.collect.ImmutableList.SubList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: okio.RealBufferedSource#close()
	CALLEE: okio.Buffer#clear()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.FixedLengthSource#close()
	CALLEE: okio.Buffer#close()
	CALLEE: okio.RealBufferedSource#close()
	CALLEE: okio.GzipSource#close()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.2#close()
	CALLEE: com.squareup.okhttp.internal.http.Http2xStream.StreamFinishingSource#close()
	CALLEE: okio.AsyncTimeout.2#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#close()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.ContinuationSource#close()
	CALLEE: okio.ForwardingSource#close()
	CALLEE: okio.InflaterSource#close()
CALLER: com.squareup.okhttp.internal.framed.NameValueBlockReader#close()
	CALLEE: okio.RealBufferedSource#close()
CALLER: static com.squareup.okhttp.internal.http.OkHeaders#parseChallenges(com.squareup.okhttp.Headers,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#value(int)
	CALLEE: com.squareup.okhttp.Headers#name(int)
	CALLEE: com.squareup.okhttp.Headers#size()
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#skipUntil(java.lang.String,int,java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HeaderParser#skipWhitespace(java.lang.String,int)
	CALLEE: com.squareup.okhttp.Challenge#<init>(java.lang.String,java.lang.String)
CALLER: com.squareup.okhttp.Response.Builder#<init>(com.squareup.okhttp.Response,com.squareup.okhttp.Response.1)
	CALLEE: com.squareup.okhttp.Response.Builder#<init>(com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.Response#header(java.lang.String,java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#get(java.lang.String)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#wrapEntry(java.util.Map.Entry)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#exitAndThrowIfTimedOut()
	CALLEE: okio.AsyncTimeout#exit()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#newTimeoutException(java.io.IOException)
CALLER: com.google.common.collect.ImmutableMultimap.Builder#putAll(com.google.common.collect.Multimap)
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.ArrayListMultimap#asMap()
	CALLEE: com.google.common.collect.SingletonImmutableSet#iterator()
	CALLEE: com.google.common.collect.EmptyImmutableSet#iterator()
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: com.google.common.collect.ImmutableMultimap#asMap()
	CALLEE: com.google.common.collect.ImmutableMap#entrySet()
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#entrySet()
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#iterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedList,int)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#getListDelegate()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection,java.util.Iterator)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#getListDelegate()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#getDelegate()
CALLER: com.squareup.okhttp.internal.framed.FramedStream#closeInternal(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$100(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$200(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writeSynReset(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#receive(okio.BufferedSource,long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.RealBufferedSource#read(okio.Buffer,long)
	CALLEE: okio.RealBufferedSource#skip(long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeLater(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: okio.Buffer#writeAll(okio.Source)
CALLER: okio.GzipSource#close()
	CALLEE: okio.InflaterSource#close()
CALLER: com.squareup.okhttp.internal.http.HttpEngine.2#close()
	CALLEE: static com.squareup.okhttp.internal.Util#discard(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: okio.Buffer#close()
	CALLEE: okio.RealBufferedSource#close()
CALLER: com.squareup.okhttp.internal.http.Http2xStream.StreamFinishingSource#close()
	CALLEE: com.squareup.okhttp.internal.http.StreamAllocation#streamFinished(com.squareup.okhttp.internal.http.HttpStream)
	CALLEE: okio.ForwardingSource#close()
	CALLEE: static com.squareup.okhttp.internal.http.Http2xStream#access$000(com.squareup.okhttp.internal.http.Http2xStream)
CALLER: okio.AsyncTimeout.2#close()
	CALLEE: okio.AsyncTimeout#exit(boolean)
	CALLEE: okio.AsyncTimeout#exit(java.io.IOException)
	CALLEE: okio.Okio.2#close()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.ChunkedSource#close()
	CALLEE: static com.squareup.okhttp.internal.Util#discard(okio.Source,int,java.util.concurrent.TimeUnit)
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
CALLER: com.squareup.okhttp.internal.http.Http1xStream.UnknownLengthSource#close()
	CALLEE: com.squareup.okhttp.internal.http.Http1xStream.AbstractSource#unexpectedEndOfInput()
CALLER: okio.ForwardingSource#close()
	CALLEE: okio.RealBufferedSource#close()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#close()
CALLER: okio.InflaterSource#close()
	CALLEE: okio.RealBufferedSource#close()
CALLER: com.squareup.okhttp.Response.Builder#<init>(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Headers#newBuilder()
	CALLEE: static com.squareup.okhttp.Response#access$1700(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1100(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1200(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1300(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1400(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1500(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1600(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1800(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1900(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$2000(com.squareup.okhttp.Response)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#wrapEntry(java.util.Map.Entry)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: static com.google.common.collect.Maps#immutableEntry(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableListMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: okio.Buffer#writeAll(okio.Source)
	CALLEE: okio.Buffer#read(okio.Buffer,long)
CALLER: static com.google.common.collect.Maps#immutableEntry(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: com.google.common.collect.ImmutableMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
CALLER: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#<init>()
CALLER: com.google.common.collect.ImmutableMultimap.Builder#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: static com.google.common.collect.CollectPreconditions#checkEntryNotNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.12#next()
	CALLEE: com.google.common.collect.Iterators.1#next()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#next()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: static com.google.common.collect.Iterables#toString(java.lang.Iterable)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#add(java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#add(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$208(com.google.common.collect.AbstractMapBasedMultimap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#addToMap()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#addToMap()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$000(com.google.common.collect.AbstractMapBasedMultimap)
CALLER: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: static com.squareup.okhttp.internal.Util#equal(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableList.SubList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#subList(int,int)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#timedOut()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#closeLater(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.google.common.collect.ImmutableMultimap.BuilderMultimap#createCollection()
	CALLEE: static com.google.common.collect.Lists#newArrayList()
CALLER: com.google.common.collect.ImmutableList.SubList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
CALLER: com.squareup.okhttp.Response.Builder#cacheResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#checkSupportResponse(java.lang.String,com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.ResponseBody#close()
	CALLEE: okio.Buffer#close()
	CALLEE: okio.RealBufferedSource#close()
	CALLEE: com.squareup.okhttp.internal.http.HttpEngine.1#source()
	CALLEE: com.squareup.okhttp.internal.http.RealResponseBody#source()
CALLER: com.squareup.okhttp.Headers#getDate(java.lang.String)
	CALLEE: static com.squareup.okhttp.internal.http.HttpDate#parse(java.lang.String)
	CALLEE: com.squareup.okhttp.Headers#get(java.lang.String)
CALLER: com.squareup.okhttp.internal.http.HttpEngine.1#source()
	CALLEE: okio.Buffer#<init>()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#read(okio.Buffer,long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.Buffer#read(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getInitialWindowSize(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#waitUntilReadable()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#checkNotClosed()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$500(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$600(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeWindowUpdateLater(int,long)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#timeout()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$700(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#close()
	CALLEE: okio.Buffer#size()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$500(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$600(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#emitDataFrame(boolean)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1000(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeData(int,boolean,okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#flush()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#write(okio.Buffer,long)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.Buffer#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#emitDataFrame(boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#flush()
	CALLEE: okio.Buffer#size()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$500(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#emitDataFrame(boolean)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1200(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#flush()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#timeout()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1100(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableMultimap.Builder#put(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableList#copyIntoArray(java.lang.Object[],int)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableList.SubList#get(int)
CALLER: com.google.common.collect.ImmutableList.SubList#subList(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: com.google.common.collect.ImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.SingletonImmutableList#subList(int,int)
	CALLEE: com.google.common.collect.ImmutableList.SubList#subList(int,int)
CALLER: com.google.common.collect.ImmutableList.SubList#listIterator()
	CALLEE: com.google.common.collect.ImmutableList#listIterator()
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#close()
	CALLEE: okio.Buffer#clear()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1000(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
CALLER: com.squareup.okhttp.internal.http.RealResponseBody#contentLength()
	CALLEE: static com.squareup.okhttp.internal.http.OkHeaders#contentLength(com.squareup.okhttp.Headers)
CALLER: com.squareup.okhttp.Response.Builder#checkSupportResponse(java.lang.String,com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1700(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1800(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$1900(com.squareup.okhttp.Response)
	CALLEE: static com.squareup.okhttp.Response#access$2000(com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#waitUntilReadable()
	CALLEE: okio.Buffer#size()
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#exitAndThrowIfTimedOut()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$700(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$800(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$900(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#checkNotClosed()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$800(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#emitDataFrame(boolean)
	CALLEE: okio.Buffer#size()
	CALLEE: okio.AsyncTimeout#enter()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream.StreamTimeout#exitAndThrowIfTimedOut()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$500(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$600(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1200(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$1100(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$800(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream#access$900(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeData(int,boolean,okio.Buffer,long)
CALLER: static com.squareup.okhttp.internal.framed.FramedStream#access$1000(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#cancelStreamIfNecessary()
CALLER: static com.squareup.okhttp.internal.framed.FramedStream#access$1200(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#checkOutNotClosed()
CALLER: com.google.common.collect.ImmutableMultimap.Builder#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkEntryNotNull(java.lang.Object,java.lang.Object)
CALLER: static com.squareup.okhttp.internal.framed.FramedStream#access$900(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#waitForIo()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writeData(int,boolean,okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#data(boolean,int,okio.Buffer,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#data(boolean,int,okio.Buffer,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#maxDataLength()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#maxDataLength()
CALLER: com.squareup.okhttp.internal.framed.FramedStream#cancelStreamIfNecessary()
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#isOpen()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$100(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource#access$300(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSource)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$200(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$400(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#removeStream(int)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#close(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedStream#checkOutNotClosed()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$200(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink#access$400(com.squareup.okhttp.internal.framed.FramedStream.FramedDataSink)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#data(boolean,int,okio.Buffer,int)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#dataFrame(int,byte,okio.Buffer,int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#data(boolean,int,okio.Buffer,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#sendDataFrame(int,int,okio.Buffer,int)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#dataFrame(int,byte,okio.Buffer,int)
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#sendDataFrame(int,int,okio.Buffer,int)
	CALLEE: okio.RealBufferedSink#write(okio.Buffer,long)
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader.1#execute()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$1100(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#close(com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2000(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.IncomingStreamHandler.1#receive(com.squareup.okhttp.internal.framed.FramedStream)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.1#execute()
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writeSynReset(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.Reader.2#execute()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#ackSettings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#ackSettings(com.squareup.okhttp.internal.framed.Settings)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.6#execute()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2700(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2800(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.PushObserver.1#onData(int,okio.BufferedSource,int,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.5#execute()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2700(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2800(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.PushObserver.1#onHeaders(int,java.util.List,boolean)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.7#execute()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2700(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2800(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.PushObserver.1#onReset(int,com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.4#execute()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#rstStream(int,com.squareup.okhttp.internal.framed.ErrorCode)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2700(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$2800(com.squareup.okhttp.internal.framed.FramedConnection)
	CALLEE: com.squareup.okhttp.internal.framed.PushObserver.1#onRequest(int,java.util.List)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.3#execute()
	CALLEE: static com.squareup.okhttp.internal.framed.FramedConnection#access$900(com.squareup.okhttp.internal.framed.FramedConnection,boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writeWindowUpdateLater(int,long)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection.2#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long)
CALLER: com.google.common.collect.ImmutableListMultimap.Builder#build()
	CALLEE: com.google.common.collect.ImmutableMultimap.Builder#build()
CALLER: com.squareup.okhttp.Response.Builder#networkResponse(com.squareup.okhttp.Response)
	CALLEE: com.squareup.okhttp.Response.Builder#checkSupportResponse(java.lang.String,com.squareup.okhttp.Response)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#flush()
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#ackSettings(com.squareup.okhttp.internal.framed.Settings)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: com.squareup.okhttp.internal.framed.Settings#getMaxFrameSize(int)
CALLER: static com.squareup.okhttp.internal.framed.FramedConnection#access$900(com.squareup.okhttp.internal.framed.FramedConnection,boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
	CALLEE: com.squareup.okhttp.internal.framed.FramedConnection#writePing(boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.2#<init>(com.squareup.okhttp.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long)
	CALLEE: com.squareup.okhttp.internal.NamedRunnable#<init>(java.lang.String,java.lang.Object[])
CALLER: com.google.common.collect.ImmutableMultimap.Builder#build()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#values()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.Maps.Values#iterator()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#entrySet()
	CALLEE: com.google.common.collect.ImmutableMultimap.BuilderMultimap#<init>()
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: static com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: static com.google.common.collect.Ordering#from(java.util.Comparator)
	CALLEE: com.google.common.collect.AbstractMultimap#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: static com.google.common.collect.ImmutableMultimap#copyOf(com.google.common.collect.Multimap)
	CALLEE: com.google.common.collect.Ordering#onKeys()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection#writePing(boolean,int,int,com.squareup.okhttp.internal.framed.Ping)
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#ping(boolean,int,int)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#ping(boolean,int,int)
CALLER: static com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: static com.google.common.collect.Lists#newArrayList(java.util.Iterator)
CALLER: static com.google.common.collect.Ordering#from(java.util.Comparator)
	CALLEE: com.google.common.collect.ComparatorOrdering#<init>(java.util.Comparator)
CALLER: com.google.common.collect.AbstractMultimap#putAll(java.lang.Object,java.lang.Iterable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: com.google.common.collect.Iterators.1#hasNext()
	CALLEE: com.google.common.collect.Iterators.12#hasNext()
	CALLEE: com.google.common.collect.AbstractIndexedListIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
	CALLEE: static com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.ImmutableList.SubList#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#addAll(java.util.Collection)
CALLER: static com.google.common.collect.ImmutableMultimap#copyOf(com.google.common.collect.Multimap)
	CALLEE: static com.google.common.collect.ImmutableListMultimap#copyOf(com.google.common.collect.Multimap)
CALLER: com.squareup.okhttp.internal.framed.Http2.Writer#ping(boolean,int,int)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#frameHeader(int,int,byte,byte)
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: com.squareup.okhttp.internal.framed.Spdy3.Writer#ping(boolean,int,int)
	CALLEE: okio.RealBufferedSink#flush()
	CALLEE: okio.RealBufferedSink#writeInt(int)
CALLER: static com.google.common.collect.Lists#newArrayList(java.util.Iterator)
	CALLEE: static com.google.common.collect.Lists#newArrayList()
	CALLEE: static com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
CALLER: com.google.common.collect.ComparatorOrdering#<init>(java.util.Comparator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Ordering#<init>()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#addAll(java.util.Collection)
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#addToMap()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$212(com.google.common.collect.AbstractMapBasedMultimap,int)
CALLER: static com.google.common.collect.ImmutableListMultimap#copyOf(com.google.common.collect.Multimap)
	CALLEE: static com.google.common.collect.ImmutableList#copyOf(java.util.Collection)
	CALLEE: com.google.common.collect.SingletonImmutableList#size()
	CALLEE: com.google.common.collect.SingletonImmutableList#isEmpty()
	CALLEE: com.google.common.collect.RegularImmutableList#size()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.ImmutableList.SubList#size()
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: com.google.common.collect.AbstractMultimap#isEmpty()
	CALLEE: static com.google.common.collect.ImmutableListMultimap#of()
	CALLEE: static com.google.common.collect.ImmutableMap#builder()
	CALLEE: com.google.common.collect.ImmutableListMultimap#<init>(com.google.common.collect.ImmutableMap,int)
	CALLEE: com.google.common.collect.ImmutableMap.Builder#build()
	CALLEE: com.google.common.collect.ImmutableMap.Builder#put(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.AbstractMultimap#isEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#size()
CALLER: static com.google.common.collect.ImmutableMap#builder()
	CALLEE: com.google.common.collect.ImmutableMap.Builder#<init>()
CALLER: com.google.common.collect.ImmutableListMultimap#<init>(com.google.common.collect.ImmutableMap,int)
	CALLEE: com.google.common.collect.ImmutableMultimap#<init>(com.google.common.collect.ImmutableMap,int)
CALLER: static com.google.common.collect.EmptyImmutableListMultimap#<clinit>()
	CALLEE: com.google.common.collect.EmptyImmutableListMultimap#<init>()
CALLER: com.google.common.collect.ImmutableMap.Builder#<init>()
	CALLEE: com.google.common.collect.ImmutableMap.Builder#<init>(int)
CALLER: com.google.common.collect.ImmutableMultimap#<init>(com.google.common.collect.ImmutableMap,int)
	CALLEE: com.google.common.collect.AbstractMultimap#<init>()
CALLER: com.google.common.collect.EmptyImmutableListMultimap#<init>()
	CALLEE: com.google.common.collect.ImmutableListMultimap#<init>(com.google.common.collect.ImmutableMap,int)
	CALLEE: static com.google.common.collect.ImmutableMap#of()
CALLER: static com.google.common.collect.ImmutableMap#of()
	CALLEE: static com.google.common.collect.ImmutableBiMap#of()
CALLER: static com.google.common.collect.EmptyImmutableBiMap#<clinit>()
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#<init>()
CALLER: com.google.common.collect.EmptyImmutableBiMap#<init>()
	CALLEE: com.google.common.collect.ImmutableBiMap#<init>()
CALLER: com.google.common.collect.Maps.EntrySet#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#map()
CALLER: com.google.common.collect.Maps.EntrySet#isEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#map()
CALLER: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: static com.google.common.base.Objects#equal(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#contains(java.lang.Object)
	CALLEE: static com.google.common.collect.Collections2#safeContains(java.util.Collection,java.lang.Object)
CALLER: com.google.common.collect.AbstractMapEntry#toString()
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
CALLER: com.squareup.okhttp.internal.framed.FramedConnection.2#execute()
	CALLEE: com.squareup.okhttp.internal.framed.Http2.Writer#windowUpdate(int,long)
	CALLEE: com.squareup.okhttp.internal.framed.Spdy3.Writer#windowUpdate(int,long)
CALLER: com.squareup.okhttp.internal.framed.PushObserver.1#onData(int,okio.BufferedSource,int,boolean)
	CALLEE: okio.Buffer#skip(long)
CALLER: com.google.common.collect.Ordering#onKeys()
	CALLEE: static com.google.common.collect.Maps#keyFunction()
	CALLEE: com.google.common.collect.Ordering#onResultOf(com.google.common.base.Function)
CALLER: com.squareup.okhttp.internal.framed.IncomingStreamHandler.1#receive(com.squareup.okhttp.internal.framed.FramedStream)
	CALLEE: com.squareup.okhttp.internal.framed.FramedStream#close(com.squareup.okhttp.internal.framed.ErrorCode)
CALLER: com.google.common.collect.ImmutableMultimap#asMap()
	CALLEE: com.google.common.collect.ImmutableMultimap#asMap()
CALLER: com.google.common.collect.ImmutableMultimap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableMap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#containsKey(java.lang.Object)
CALLER: com.google.common.collect.ImmutableListMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableListMultimap#get(java.lang.Object)
CALLER: com.google.common.collect.ImmutableMap.Builder#build()
	CALLEE: static com.google.common.collect.ImmutableMap#of(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: static com.google.common.collect.ImmutableMap#of()
	CALLEE: com.google.common.collect.RegularImmutableMap#<init>(int,com.google.common.collect.ImmutableMapEntry.TerminalEntry[])
CALLER: com.google.common.collect.ImmutableMap.Builder#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableMap.Builder#ensureCapacity(int)
	CALLEE: static com.google.common.collect.ImmutableMap#entryOf(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#set(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#getDelegateListIterator()
CALLER: static com.google.common.collect.Collections2#safeContains(java.util.Collection,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.Ordering#onResultOf(com.google.common.base.Function)
	CALLEE: com.google.common.collect.ByFunctionOrdering#<init>(com.google.common.base.Function,com.google.common.collect.Ordering)
CALLER: com.google.common.collect.ImmutableMap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableMap#get(java.lang.Object)
CALLER: com.google.common.collect.ImmutableListMultimap#get(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableList#of()
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#get(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableMap#get(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableMap#<init>(int,com.google.common.collect.ImmutableMapEntry.TerminalEntry[])
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: com.google.common.collect.ImmutableMap#<init>()
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#hashCode()
	CALLEE: com.google.common.collect.ImmutableList#hashCode()
	CALLEE: io.airlift.command.Accessor#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableList#hashCode()
	CALLEE: com.google.common.collect.SingletonImmutableSet#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableSet#hashCode()
	CALLEE: com.google.common.collect.ImmutableEnumSet#hashCode()
	CALLEE: com.google.common.collect.EmptyImmutableSet#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#hashCode()
	CALLEE: com.squareup.okhttp.Route#hashCode()
	CALLEE: com.squareup.okhttp.internal.framed.Header#hashCode()
	CALLEE: okio.ByteString#hashCode()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#hashCode()
	CALLEE: com.squareup.okhttp.Challenge#hashCode()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: com.google.common.collect.AbstractMapEntry#hashCode()
	CALLEE: com.google.common.collect.RegularImmutableMap#createEntryArray(int)
	CALLEE: static com.google.common.collect.Hashing#closedTableSize(int,double)
	CALLEE: com.google.common.collect.RegularImmutableMap.NonTerminalMapEntry#<init>(com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)
	CALLEE: com.google.common.collect.RegularImmutableMap#checkNoConflictInBucket(java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)
CALLER: com.google.common.collect.ImmutableMap.Builder#ensureCapacity(int)
	CALLEE: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ImmutableCollection.Builder#expandedCapacity(int,int)
CALLER: static com.google.common.collect.ImmutableMap#entryOf(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkEntryNotNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableMapEntry.TerminalEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator#getDelegateListIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#getDelegateIterator()
CALLER: com.google.common.collect.ByFunctionOrdering#<init>(com.google.common.base.Function,com.google.common.collect.Ordering)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Ordering#<init>()
CALLER: com.google.common.collect.RegularImmutableMap.NonTerminalMapEntry#<init>(com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)
	CALLEE: com.google.common.collect.ImmutableMapEntry#<init>(com.google.common.collect.ImmutableMapEntry)
CALLER: com.google.common.collect.RegularImmutableMap#checkNoConflictInBucket(java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableMap.NonTerminalMapEntry#getNextInKeyBucket()
	CALLEE: com.google.common.collect.ImmutableMapEntry.TerminalEntry#getNextInKeyBucket()
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableMap#checkNoConflict(boolean,java.lang.String,java.util.Map.Entry,java.util.Map.Entry)
CALLER: com.google.common.collect.ImmutableMapEntry.TerminalEntry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableMapEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#getDelegateIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.google.common.collect.ImmutableMapEntry#<init>(com.google.common.collect.ImmutableMapEntry)
	CALLEE: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
CALLER: com.google.common.collect.ImmutableMapEntry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkEntryNotNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ComparatorOrdering#toString()
	CALLEE: com.google.common.collect.ComparatorOrdering#toString()
CALLER: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
CALLER: com.google.common.collect.ComparatorOrdering#hashCode()
	CALLEE: com.google.common.collect.ComparatorOrdering#hashCode()
CALLER: com.google.common.collect.SingletonImmutableBiMap#containsKey(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Route#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.internal.framed.Header#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.squareup.okhttp.Challenge#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.ArgumentsMetadata#equals(java.lang.Object)
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableList#equals(java.lang.Object)
	CALLEE: io.airlift.command.Accessor#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableList#equals(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEnumSet#equals(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#equals(java.lang.Object)
	CALLEE: okio.ByteString#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#equals(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableMap#get(java.lang.Object)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: io.airlift.command.model.OptionMetadata#hashCode()
	CALLEE: io.airlift.command.model.OptionMetadata#equals(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: com.google.common.collect.RegularImmutableMap.NonTerminalMapEntry#getNextInKeyBucket()
	CALLEE: com.google.common.collect.ImmutableMapEntry.TerminalEntry#getNextInKeyBucket()
CALLER: com.google.common.collect.ByFunctionOrdering#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.7#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.4#apply(java.lang.Object)
	CALLEE: io.airlift.command.Accessor.1#apply(java.lang.Object)
	CALLEE: io.airlift.command.model.MetadataLoader.2#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.3#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.5#apply(java.lang.Object)
	CALLEE: io.airlift.command.UsageHelper.6#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#apply(java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#compare(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableMap#entrySet()
	CALLEE: com.google.common.collect.ImmutableMap#entrySet()
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#entrySet()
CALLER: com.google.common.collect.EmptyImmutableBiMap#entrySet()
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#entrySet()
CALLER: com.google.common.collect.Maps.EntryFunction.1#apply(java.lang.Object)
	CALLEE: com.google.common.collect.Maps.EntryFunction.1#apply(java.util.Map.Entry)
CALLER: com.google.common.collect.ComparatorOrdering#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ComparatorOrdering#compare(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.ImmutableMap#entrySet()
	CALLEE: com.google.common.collect.SingletonImmutableBiMap#createEntrySet()
	CALLEE: com.google.common.collect.EmptyImmutableBiMap#createEntrySet()
	CALLEE: com.google.common.collect.RegularImmutableMap#createEntrySet()
CALLER: com.google.common.collect.EmptyImmutableBiMap#entrySet()
	CALLEE: static com.google.common.collect.ImmutableSet#of()
CALLER: com.google.common.collect.Maps.EntryFunction.1#apply(java.util.Map.Entry)
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
CALLER: com.google.common.collect.SingletonImmutableBiMap#createEntrySet()
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.Maps#immutableEntry(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableMap#createEntrySet()
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#<init>(com.google.common.collect.RegularImmutableMap,com.google.common.collect.RegularImmutableMap.1)
CALLER: com.google.common.collect.RegularImmutableMap.EntrySet#<init>(com.google.common.collect.RegularImmutableMap,com.google.common.collect.RegularImmutableMap.1)
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#<init>(com.google.common.collect.RegularImmutableMap)
CALLER: com.google.common.collect.RegularImmutableMap.EntrySet#<init>(com.google.common.collect.RegularImmutableMap)
	CALLEE: com.google.common.collect.ImmutableMapEntrySet#<init>()
CALLER: com.google.common.collect.ImmutableMapEntrySet#<init>()
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.RegularImmutableMap.EntrySet#iterator()
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#iterator()
CALLER: com.google.common.collect.RegularImmutableMap.EntrySet#iterator()
	CALLEE: com.google.common.collect.ImmutableList#iterator()
	CALLEE: com.google.common.collect.ImmutableCollection#asList()
CALLER: com.google.common.collect.ImmutableCollection#asList()
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#createAsList()
CALLER: com.google.common.collect.RegularImmutableMap.EntrySet#createAsList()
	CALLEE: static com.google.common.collect.RegularImmutableMap#access$100(com.google.common.collect.RegularImmutableMap)
	CALLEE: com.google.common.collect.RegularImmutableAsList#<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])
CALLER: com.google.common.collect.RegularImmutableAsList#<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableList#asImmutableList(java.lang.Object[])
	CALLEE: com.google.common.collect.RegularImmutableAsList#<init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList)
CALLER: com.google.common.collect.RegularImmutableAsList#<init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList)
	CALLEE: com.google.common.collect.ImmutableAsList#<init>()
CALLER: com.google.common.collect.ImmutableAsList#<init>()
	CALLEE: com.google.common.collect.ImmutableList#<init>()
CALLER: com.google.common.collect.RegularImmutableAsList#listIterator(int)
	CALLEE: com.google.common.collect.RegularImmutableList#listIterator(int)
	CALLEE: com.google.common.collect.ImmutableList#listIterator(int)
CALLER: com.google.common.collect.ImmutableAsList#size()
	CALLEE: com.google.common.collect.RegularImmutableAsList#delegateCollection()
	CALLEE: com.google.common.collect.ImmutableMapEntrySet#size()
CALLER: com.google.common.collect.RegularImmutableAsList#get(int)
	CALLEE: com.google.common.collect.RegularImmutableList#get(int)
	CALLEE: com.google.common.collect.SingletonImmutableList#get(int)
CALLER: com.google.common.collect.ImmutableMapEntrySet#size()
	CALLEE: com.google.common.collect.RegularImmutableMap.EntrySet#map()
	CALLEE: com.google.common.collect.RegularImmutableMap#size()
