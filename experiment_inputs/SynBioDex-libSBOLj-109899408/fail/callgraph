CALLER: static org.sbolstandard.core2.SBOLValidate#<clinit>()
	CALLEE: static org.openscience.cdk.DefaultChemObjectBuilder#getInstance()
	CALLEE: org.openscience.cdk.smiles.SmilesParser#<init>(org.openscience.cdk.interfaces.IChemObjectBuilder)
CALLER: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
CALLER: static org.sbolstandard.core2.SBOLValidate#validateSBOL(org.sbolstandard.core2.SBOLDocument,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#clearErrors()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateWasDerivedFromVersion(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCircularReferences(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateURIuniqueness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validatePersistentIdentityUniqueness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateMapsTos(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateSequenceConstraintDifferentFrom(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCompliance(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCompleteness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateDerivedComponentDefinitions(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateOntologyUsage(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateSequenceAnnotations(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateComponents(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateComponentDefinitionSequences(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateActivityRoleTypeUsage(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCombinatorialBestPractices(org.sbolstandard.core2.SBOLDocument)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareDocuments(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#clearErrors()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareNamespaces(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareCollections(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareComponentDefinitions(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareSequences(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareModuleDefinitions(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareModels(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareActivities(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#comparePlans(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareAgents(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareGenericTopLevels(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareCombinatorialDerivations(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareImplementations(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareAttachments(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
CALLER: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
CALLER: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
CALLER: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
CALLER: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean,boolean)
CALLER: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareDocuments(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setTypesInURIs(boolean)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#enumerate()
	CALLEE: org.apache.http.MessageConstraintException#getMessage()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#getErrors()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#getNumErrors()
	CALLEE: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateSBOL(org.sbolstandard.core2.SBOLDocument,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setURIPrefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setCompliant(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setTypesInURI(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setVersion(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setKeepGoing(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#setKeepGoing(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isSnapGeneFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isFastaFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGFF3File(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGenBankFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getNumErrors()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getNumErrors()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getErrors()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getErrors()
CALLER: static org.sbolstandard.core2.SBOLValidate#main(java.lang.String[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validate(java.io.PrintStream,java.io.PrintStream,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,boolean,boolean,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#usage()
CALLER: static org.openscience.cdk.DefaultChemObjectBuilder#getInstance()
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#<init>()
CALLER: org.openscience.cdk.smiles.SmilesParser#<init>(org.openscience.cdk.interfaces.IChemObjectBuilder)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#<init>(org.openscience.cdk.interfaces.IChemObjectBuilder)
CALLER: static org.sbolstandard.core2.Sbol2Terms#<clinit>()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: static org.sbolstandard.core2.Sbol1Terms#<clinit>()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLValidate#validateWasDerivedFromVersion(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromVersion(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateCircularReferences(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasGeneratedByCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateURIuniqueness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLValidate.2#<init>(java.util.HashMap)
	CALLEE: org.sbolstandard.core2.IdentifiedVisitor#visitDocument(org.sbolstandard.core2.SBOLDocument)
CALLER: static org.sbolstandard.core2.SBOLValidate#validatePersistentIdentityUniqueness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.IdentifiedVisitor#visitDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLValidate.1#<init>(java.util.HashMap)
CALLER: static org.sbolstandard.core2.SBOLValidate#validateMapsTos(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionMapsTos(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionMapsTos(org.sbolstandard.core2.ModuleDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateSequenceConstraintDifferentFrom(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkSequenceConstraintDifferentFrom(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateCompliance(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.TopLevel#isURIcompliant()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateCompleteness(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkIdentifiedCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkTopLevelCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkCollectionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperiments()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkExperimentCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Experiment)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementations()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkImplementationCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkActivityCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Activity)
CALLER: static org.sbolstandard.core2.SBOLValidate#validateDerivedComponentDefinitions(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollections()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestrictionURI()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateOntologyUsage(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: org.sbolstandard.core2.SystemsBiologyOntology#<init>()
	CALLEE: org.sbolstandard.core2.EDAMOntology#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SequenceOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToRestrictionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SystemsBiologyOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.EDAMOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkInteractionTypeParticipationRole(org.sbolstandard.core2.Interaction,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachments()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Model#getFramework()
	CALLEE: org.sbolstandard.core2.Model#getLanguage()
	CALLEE: org.sbolstandard.core2.Interaction#getTypes()
	CALLEE: org.sbolstandard.core2.Attachment#isSetFormat()
	CALLEE: org.sbolstandard.core2.Attachment#getFormat()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
	CALLEE: org.sbolstandard.core2.Component#getRoles()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestrictionURI()
	CALLEE: org.sbolstandard.core2.Participation#getRoles()
	CALLEE: org.sbolstandard.core2.Measure#getTypes()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateSequenceAnnotations(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateOverlappingRegions(org.sbolstandard.core2.Location,org.sbolstandard.core2.Location,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateComponents(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateOverlappingRegions(org.sbolstandard.core2.Location,org.sbolstandard.core2.Location,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateComponentDefinitionSequences(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#includesSequence(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getImpliedNucleicAcidSequence()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateActivityRoleTypeUsage(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: static org.sbolstandard.core2.ActivityRoleType#convertToURI(org.sbolstandard.core2.ActivityRoleType)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
	CALLEE: org.sbolstandard.core2.Association#getRoles()
	CALLEE: org.sbolstandard.core2.Usage#getEntity()
	CALLEE: org.sbolstandard.core2.Usage#getRoles()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateCombinatorialBestPractices(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariants()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollections()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
	CALLEE: org.sbolstandard.core2.Component#getRoles()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareNamespaces(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespaces()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareCollections(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Collection#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareComponentDefinitions(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareComponents(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareSequenceAnnotations(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareSequenceConstraints(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareSequences(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareModuleDefinitions(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareFunctionalComponents(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareModules(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareInteractions(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareModels(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Model#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareActivities(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareAssociations(java.lang.String,org.sbolstandard.core2.Activity,java.lang.String,org.sbolstandard.core2.Activity)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareUsages(java.lang.String,org.sbolstandard.core2.Activity,java.lang.String,org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Activity#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#comparePlans(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlans()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareAgents(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareGenericTopLevels(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.GenericTopLevel#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareCombinatorialDerivations(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareVariableComponents(java.lang.String,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareImplementations(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Implementation#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareAttachments(java.lang.String,org.sbolstandard.core2.SBOLDocument,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Attachment#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLReader#isFastaFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isFastaString(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#isGFF3File(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGFF3String(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#isGenBankFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGenBankString(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.lang.String,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#read(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isSnapGeneFile(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setDefaultURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#fixDocumentURIPrefix()
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#extractDocumentURIPrefix()
	CALLEE: org.sbolstandard.core2.SBOLDocument#rename(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.HashMap)
	CALLEE: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(org.sbolstandard.core2.Identified,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.SBOLDocument#getRootCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
CALLER: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevelLocalOnly(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModels()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalData()
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariants()
	CALLEE: org.sbolstandard.core2.Usage#getEntity()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollections()
	CALLEE: org.sbolstandard.core2.Association#getPlan()
	CALLEE: org.sbolstandard.core2.Association#isSetPlan()
	CALLEE: org.sbolstandard.core2.Association#getAgent()
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#clearErrors()
	CALLEE: static org.sbolstandard.core2.FASTA#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: static org.sbolstandard.core2.GFF3#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: static org.sbolstandard.core2.GenBank#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: static org.sbolstandard.core2.SnapGene#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#writeCSV(java.io.Writer,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.Throwable)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespaceBindings()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getTopLevelDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#writeJSON(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#writeTurtle(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getNamespaceBindingsV1()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#convertToV1Document(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#writeRDF(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.File,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.Throwable)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespaceBindings()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getTopLevelDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#writeRDF(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.File)
CALLER: org.openscience.cdk.DefaultChemObjectBuilder#<init>()
	CALLEE: org.openscience.cdk.DynamicFactory#<init>(int)
	CALLEE: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.Class)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.1#<init>(org.openscience.cdk.DefaultChemObjectBuilder,org.openscience.cdk.interfaces.IChemObjectBuilder)
	CALLEE: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.Class,org.openscience.cdk.DynamicFactory.CreationModifier)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.2#<init>(org.openscience.cdk.DefaultChemObjectBuilder,org.openscience.cdk.interfaces.IChemObjectBuilder)
CALLER: org.openscience.cdk.smiles.BeamToCDK#<init>(org.openscience.cdk.interfaces.IChemObjectBuilder)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
CALLER: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#<init>(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.util.Collection)
CALLER: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromVersion(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractPersistentId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.Version#isFirstVersionNewer(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkWasGeneratedByCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasGeneratedByCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Usage#getEntityURI()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
CALLER: org.sbolstandard.core2.SBOLValidate.2#<init>(java.util.HashMap)
	CALLEE: org.sbolstandard.core2.IdentifiedVisitor#<init>()
CALLER: org.sbolstandard.core2.IdentifiedVisitor#visitDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLValidate.2#visit(org.sbolstandard.core2.Identified,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLValidate.1#visit(org.sbolstandard.core2.Identified,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
CALLER: org.sbolstandard.core2.SBOLValidate.1#<init>(java.util.HashMap)
	CALLEE: org.sbolstandard.core2.IdentifiedVisitor#<init>()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionMapsTos(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionMapsTos(org.sbolstandard.core2.ModuleDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkSequenceConstraintDifferentFrom(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectDefinition()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectDefinition()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkIdentifiedCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkTopLevelCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkCollectionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkExperimentCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollectionURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkImplementationCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
CALLER: static org.sbolstandard.core2.SBOLValidate#checkActivityCompleteness(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Activity#getWasInformedByURIs()
	CALLEE: org.sbolstandard.core2.Association#getAgentURI()
	CALLEE: org.sbolstandard.core2.Association#getPlanURI()
CALLER: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevelLocalOnly(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SequenceOntology#<clinit>()
	CALLEE: static org.sbolstandard.core2.SequenceOntology#type(java.lang.String)
CALLER: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: org.oboparser.obo.OBOParser#<init>()
	CALLEE: org.oboparser.obo.OBOParser#parse(java.io.Reader)
	CALLEE: org.oboparser.obo.OBOParser#getOntology()
CALLER: static org.sbolstandard.core2.SystemsBiologyOntology#<clinit>()
	CALLEE: static org.sbolstandard.core2.SystemsBiologyOntology#type(java.lang.String)
CALLER: org.sbolstandard.core2.SystemsBiologyOntology#<init>()
	CALLEE: org.oboparser.obo.OBOParser#<init>()
	CALLEE: org.oboparser.obo.OBOParser#parse(java.io.Reader)
	CALLEE: org.oboparser.obo.OBOParser#getOntology()
CALLER: static org.sbolstandard.core2.EDAMOntology#<clinit>()
	CALLEE: static org.sbolstandard.core2.EDAMOntology#type(java.lang.String)
CALLER: org.sbolstandard.core2.EDAMOntology#<init>()
	CALLEE: org.oboparser.obo.OBOParser#<init>()
	CALLEE: org.oboparser.obo.OBOParser#parse(java.io.Reader)
	CALLEE: org.oboparser.obo.OBOParser#getOntology()
CALLER: org.sbolstandard.core2.SequenceOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getId(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceOntology#isDescendantOf(java.lang.String,java.lang.String)
CALLER: static org.sbolstandard.core2.RestrictionType#convertToRestrictionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.RestrictionType#<clinit>()
	CALLEE: org.sbolstandard.core2.RestrictionType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.sbolstandard.core2.SystemsBiologyOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SystemsBiologyOntology#getId(java.net.URI)
	CALLEE: org.sbolstandard.core2.SystemsBiologyOntology#isDescendantOf(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.EDAMOntology#isDescendantOf(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.EDAMOntology#getId(java.net.URI)
	CALLEE: org.sbolstandard.core2.EDAMOntology#isDescendantOf(java.lang.String,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLValidate#checkInteractionTypeParticipationRole(org.sbolstandard.core2.Interaction,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.SBOLValidate#validateOverlappingRegions(org.sbolstandard.core2.Location,org.sbolstandard.core2.Location,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
CALLER: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.ActivityRoleType#<clinit>()
	CALLEE: org.sbolstandard.core2.ActivityRoleType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: static org.sbolstandard.core2.OperatorType#<clinit>()
	CALLEE: org.sbolstandard.core2.OperatorType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.sbolstandard.core2.SBOLDocument#getNamespaces()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareComponents(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.Component,java.lang.String,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareSequenceAnnotations(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareLocations(java.lang.String,org.sbolstandard.core2.SequenceAnnotation,java.lang.String,org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareSequenceConstraints(java.lang.String,org.sbolstandard.core2.ComponentDefinition,java.lang.String,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraint(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareFunctionalComponents(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.FunctionalComponent,java.lang.String,org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareModules(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.Module,java.lang.String,org.sbolstandard.core2.Module)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModule(java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareInteractions(java.lang.String,org.sbolstandard.core2.ModuleDefinition,java.lang.String,org.sbolstandard.core2.ModuleDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareParticipations(java.lang.String,org.sbolstandard.core2.Interaction,java.lang.String,org.sbolstandard.core2.Interaction)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteraction(java.net.URI)
	CALLEE: org.sbolstandard.core2.Interaction#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareAssociations(java.lang.String,org.sbolstandard.core2.Activity,java.lang.String,org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Activity#getAssociation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareUsages(java.lang.String,org.sbolstandard.core2.Activity,java.lang.String,org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Activity#getUsage(java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getGenericTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SBOLValidate#compareVariableComponents(java.lang.String,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponent(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#getImplementation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.SBOLDocument#getAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.io.InputStream,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#read(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(java.io.File,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.Attachment#getSource()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevelLocalOnly(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getDefaultURIprefix()
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCollection(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createExperiment(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createExperimentalData(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.lang.String,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCombinatorialDerivation(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createAttachment(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createModel(java.lang.String,java.lang.String,java.lang.String,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createModuleDefinition(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createImplementation(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createGenericTopLevel(java.lang.String,java.lang.String,java.lang.String,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createActivity(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createAgent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createPlan(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#getRDFType()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.Collection#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Experiment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ExperimentalData#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Model#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Implementation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Attachment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Activity#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Plan#copy(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.Agent#copy(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.Activity#copy(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#copy(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.Sequence#copy(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.Implementation#copy(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#copy(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Model#copy(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.Attachment#copy(org.sbolstandard.core2.Attachment)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#copy(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#copy(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ExperimentalData#copy(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.Experiment#copy(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.Collection#copy(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.Model#getFramework()
	CALLEE: org.sbolstandard.core2.Model#getLanguage()
	CALLEE: org.sbolstandard.core2.Model#getSource()
CALLER: org.sbolstandard.core2.SBOLDocument#setDefaultURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#isURIprefixCompliant(java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#fixDocumentURIPrefix()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#setDefaultURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#extractDocumentURIPrefix()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevelLocalOnly(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getDefaultURIprefix()
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractSimpleNamespace(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
CALLER: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
CALLER: org.sbolstandard.core2.SBOLDocument#extractDocumentURIPrefix()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
CALLER: org.sbolstandard.core2.SBOLDocument#rename(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.HashMap)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Collection#addMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Collection#removeMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#removeAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#removeWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#removeWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperiments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlans()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevels()
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(org.sbolstandard.core2.Identified,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setTemplate(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Model#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Implementation#setBuilt(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#addExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Association#setPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariable(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#setAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#setEntity(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#setRemote(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Model#getSource()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.Association#getAgentURI()
	CALLEE: org.sbolstandard.core2.Usage#getEntityURI()
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollectionURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#removeModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#getPlanURI()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Experiment#removeExperimentalData(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(org.sbolstandard.core2.Identified,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(java.util.List,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
CALLER: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevelLocalOnly(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
CALLER: static org.sbolstandard.core2.FASTA#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: static org.sbolstandard.core2.FASTA#write(java.io.Writer,org.sbolstandard.core2.Sequence)
CALLER: static org.sbolstandard.core2.GFF3#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.GFF3#write(java.io.Writer,org.sbolstandard.core2.ComponentDefinition,java.lang.String,java.lang.String,int,boolean,int)
	CALLEE: static org.sbolstandard.core2.FASTA#writeFASTALine(java.io.Writer,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
CALLER: static org.sbolstandard.core2.GenBank#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: static org.sbolstandard.core2.GenBank#write(org.sbolstandard.core2.ComponentDefinition,java.io.Writer)
CALLER: static org.sbolstandard.core2.SnapGene#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#setMode(org.apache.http.entity.mime.HttpMultipartMode)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#build()
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#write(java.io.OutputStream,java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpPost#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>()
	CALLEE: static org.apache.http.impl.client.HttpClients#custom()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.entity.mime.MultipartEntityBuilder#create()
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#setEntity(org.apache.http.HttpEntity)
	CALLEE: static org.sbolstandard.core2.SnapGene#checkResponseCode(org.apache.http.HttpResponse)
	CALLEE: static org.sbolstandard.core2.SnapGene#fetchContentSaveToFile(org.apache.http.client.HttpClient,java.lang.String,java.lang.String,java.io.OutputStream,java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#releaseConnection()
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addTextBody(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addBinaryBody(java.lang.String,byte[],org.apache.http.entity.ContentType,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#build()
CALLER: static org.sbolstandard.core2.SBOLWriter#writeCSV(java.io.Writer,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSortedComponents()
CALLER: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#<init>(java.util.List)
CALLER: static org.sbolstandard.core2.SBOLWriter#getTopLevelDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperiments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachments()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatImplementation(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatAttachments(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatExperiments(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatExperimentalData(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlans()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevels()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCollections(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatModuleDefinitions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatModels(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatComponentDefinitions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatSequences(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatActivities(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatAgents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatPlans(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatGenericTopLevel(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCombinatorialDerivation(java.util.Set,java.util.List)
CALLER: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.Datatree.TopLevelDocuments.Impl#<init>(java.util.List)
CALLER: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#<init>(java.util.List,java.util.List)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.datatree.Datatree.TopLevelDocuments.Impl#getDocuments()
CALLER: static org.sbolstandard.core2.SBOLWriter#writeJSON(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static javax.json.Json#createGeneratorFactory(java.util.Map)
	CALLEE: org.sbolstandard.core.io.json.JsonIo#<init>()
	CALLEE: org.sbolstandard.core.io.json.JsonIo#createIoWriter(javax.json.stream.JsonGenerator)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapDR(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLWriter#writeTurtle(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo#<init>()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo#createIoWriter(java.io.PrintWriter)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLWriter#getNamespaceBindingsV1()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#convertToV1Document(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCollectionV1(org.sbolstandard.core2.Collection,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatDNAComponent(org.sbolstandard.core2.ComponentDefinition,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatDNASequence(org.sbolstandard.core2.Sequence,java.util.List)
CALLER: static org.sbolstandard.core2.SBOLWriter#writeRDF(java.io.Writer,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#<init>(javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo#<init>()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo#createIoWriter(javax.xml.stream.XMLStreamWriter)
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#flush()
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#close()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.File,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream,java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.File)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream)
CALLER: static org.openscience.cdk.DynamicFactory#<clinit>()
	CALLEE: static org.openscience.cdk.tools.LoggingToolFactory#createLoggingTool(java.lang.Class)
CALLER: org.openscience.cdk.DynamicFactory#<init>(int)
	CALLEE: org.openscience.cdk.DynamicFactory.DefaultInterfaceProvider#<init>()
	CALLEE: org.openscience.cdk.DynamicFactory#<init>(org.openscience.cdk.DynamicFactory.InterfaceProvider,int)
CALLER: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.Class)
	CALLEE: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.Class,org.openscience.cdk.DynamicFactory.CreationModifier)
CALLER: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.Class,org.openscience.cdk.DynamicFactory.CreationModifier)
	CALLEE: org.openscience.cdk.DynamicFactory#isConcrete(java.lang.Class)
	CALLEE: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.CreationModifier)
CALLER: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.util.Collection)
	CALLEE: static org.sbolstandard.core2.SBOLValidationException#formatMessage(java.lang.String,java.util.Collection)
CALLER: static org.sbolstandard.core2.Version#isFirstVersionNewer(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion#compareTo(org.sbolstandard.core2.ComparableVersion)
CALLER: org.sbolstandard.core2.SBOLValidate.2#visit(org.sbolstandard.core2.Identified,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.Collection#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Experiment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ExperimentalData#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Model#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Implementation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Attachment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Activity#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measure#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Participation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#access$000()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#access$100(java.util.List,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Module#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Interaction#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Association#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Usage#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Range#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericLocation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.MapsTo#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Cut#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SBOLValidate.1#visit(org.sbolstandard.core2.Identified,org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#access$000()
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
CALLER: static org.sbolstandard.core2.RefinementType#<clinit>()
	CALLEE: org.sbolstandard.core2.RefinementType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: static org.sbolstandard.core2.AccessType#<clinit>()
	CALLEE: org.sbolstandard.core2.AccessType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.oboparser.obo.OBOParser#parse(java.io.Reader)
	CALLEE: org.oboparser.obo.OBOParser#parse(java.io.BufferedReader)
CALLER: org.sbolstandard.core2.SequenceOntology#isDescendantOf(java.lang.String,java.lang.String)
	CALLEE: org.oboparser.obo.OBOOntology#isDescendantOf(org.oboparser.obo.OBOStanza,org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
CALLER: org.sbolstandard.core2.SystemsBiologyOntology#isDescendantOf(java.lang.String,java.lang.String)
	CALLEE: org.oboparser.obo.OBOOntology#isDescendantOf(org.oboparser.obo.OBOStanza,org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
CALLER: org.sbolstandard.core2.EDAMOntology#isDescendantOf(java.lang.String,java.lang.String)
	CALLEE: org.oboparser.obo.OBOOntology#isDescendantOf(org.oboparser.obo.OBOStanza,org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Measure#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
	CALLEE: org.sbolstandard.core2.Measured#getMeasure(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.Component,java.lang.String,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.MapsTo#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getMapsTo(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareLocations(java.lang.String,org.sbolstandard.core2.SequenceAnnotation,java.lang.String,org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Range#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericLocation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Cut#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.FunctionalComponent,java.lang.String,org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.MapsTo#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTo(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareMapsTos(java.lang.String,org.sbolstandard.core2.Module,java.lang.String,org.sbolstandard.core2.Module)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.MapsTo#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getMapsTo(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLValidate#compareParticipations(java.lang.String,org.sbolstandard.core2.Interaction,java.lang.String,org.sbolstandard.core2.Interaction)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#compareMeasures(java.lang.String,org.sbolstandard.core2.Measured,java.lang.String,org.sbolstandard.core2.Measured)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Participation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipation(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(java.io.InputStream,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readJSON(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readTurtle(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readRDF(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(org.sbolstandard.core.datatree.DocumentRoot)
CALLER: static org.sbolstandard.core2.SBOLReader#read(java.io.File,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(java.io.InputStream,java.lang.String)
CALLER: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isURIprefixCompliant(java.lang.String)
CALLER: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
CALLER: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#validateIdVersion(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidationException#formatMessage(java.lang.String,java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#createCollection(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Collection#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addCollection(org.sbolstandard.core2.Collection)
CALLER: org.sbolstandard.core2.SBOLDocument#createExperiment(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Experiment#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addExperiment(org.sbolstandard.core2.Experiment)
CALLER: org.sbolstandard.core2.SBOLDocument#createExperimentalData(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ExperimentalData#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addExperimentalData(org.sbolstandard.core2.ExperimentalData)
CALLER: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.lang.String,java.util.Set)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.SBOLDocument#createCombinatorialDerivation(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
CALLER: org.sbolstandard.core2.SBOLDocument#createAttachment(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Attachment#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addAttachment(org.sbolstandard.core2.Attachment)
CALLER: org.sbolstandard.core2.SBOLDocument#createModel(java.lang.String,java.lang.String,java.lang.String,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Model#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addModel(org.sbolstandard.core2.Model)
CALLER: org.sbolstandard.core2.SBOLDocument#createModuleDefinition(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
CALLER: org.sbolstandard.core2.SBOLDocument#createImplementation(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Implementation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addImplementation(org.sbolstandard.core2.Implementation)
CALLER: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Sequence#<init>(java.net.URI,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addSequence(org.sbolstandard.core2.Sequence)
CALLER: org.sbolstandard.core2.SBOLDocument#createGenericTopLevel(java.lang.String,java.lang.String,java.lang.String,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#<init>(java.net.URI,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addGenericTopLevel(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.sbolstandard.core2.SBOLDocument#createActivity(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Activity#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addActivity(org.sbolstandard.core2.Activity)
CALLER: org.sbolstandard.core2.SBOLDocument#createAgent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Agent#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addAgent(org.sbolstandard.core2.Agent)
CALLER: org.sbolstandard.core2.SBOLDocument#createPlan(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#checkURIprefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Plan#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addPlan(org.sbolstandard.core2.Plan)
CALLER: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
CALLER: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeGenericTopLevel(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeActivity(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeAgent(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removePlan(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeCollection(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeExperiment(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeExperimentalData(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeModel(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeImplementation(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeAttachment(org.sbolstandard.core2.Attachment)
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Association#setPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#setAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#setEntity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Association#getAgentURI()
	CALLEE: org.sbolstandard.core2.Usage#getEntityURI()
	CALLEE: org.sbolstandard.core2.Association#getPlanURI()
	CALLEE: org.sbolstandard.core2.Identified#removeWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#isSetPlan()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperiments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachments()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlans()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevels()
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(org.sbolstandard.core2.Identified,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setTemplate(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Model#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Implementation#setBuilt(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#addMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.Experiment#addExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Module#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariable(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#setRemote(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Model#getSource()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollectionURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#removeVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#removeModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Experiment#removeExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#removeMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#removeAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#removeWasGeneratedBy(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(org.sbolstandard.core2.Identified,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
CALLER: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(java.util.List,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#changeURIPrefixVersion(java.util.List,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Annotation#setNestedIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedIdentity()
CALLER: static org.sbolstandard.core2.FASTA#write(java.io.Writer,org.sbolstandard.core2.Sequence)
	CALLEE: static org.sbolstandard.core2.FASTA#writeFASTALine(java.io.Writer,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
CALLER: org.sbolstandard.core2.SBOLDocument#getRootComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariants()
CALLER: static org.sbolstandard.core2.GFF3#write(java.io.Writer,org.sbolstandard.core2.ComponentDefinition,java.lang.String,java.lang.String,int,boolean,int)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: static org.sbolstandard.core2.GFF3#write(java.io.Writer,org.sbolstandard.core2.ComponentDefinition,java.lang.String,java.lang.String,int,boolean,int)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getName(java.net.URI)
	CALLEE: static org.sbolstandard.core2.GenBank#getFeatureEnd(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: static org.sbolstandard.core2.GenBank#getFeatureStart(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: static org.sbolstandard.core2.GenBank#isInlineFeature(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentDefinition()
CALLER: static org.sbolstandard.core2.FASTA#writeFASTALine(java.io.Writer,java.lang.String)
	CALLEE: static org.sbolstandard.core2.FASTA#writeFASTALine(java.io.Writer,java.lang.String,int)
CALLER: static org.sbolstandard.core2.GenBank#write(org.sbolstandard.core2.ComponentDefinition,java.io.Writer)
	CALLEE: static org.sbolstandard.core2.GenBank#writeComponentDefinition(org.sbolstandard.core2.ComponentDefinition,java.io.Writer)
CALLER: org.sbolstandard.core2.SBOLDocument#write(java.io.OutputStream,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#write(org.sbolstandard.core2.SBOLDocument,java.io.OutputStream,java.lang.String)
CALLER: org.apache.http.client.methods.HttpPost#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#<init>()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setURI(java.net.URI)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>()
	CALLEE: static org.apache.http.impl.conn.PoolingHttpClientConnectionManager#getDefaultRegistry()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry)
CALLER: static org.apache.http.impl.client.HttpClients#custom()
	CALLEE: static org.apache.http.impl.client.HttpClientBuilder#create()
CALLER: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#updateHeader(org.apache.http.Header)
CALLER: static org.apache.http.entity.mime.MultipartEntityBuilder#create()
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#<init>()
CALLER: static org.apache.http.entity.mime.HttpMultipartMode#<clinit>()
	CALLEE: org.apache.http.entity.mime.HttpMultipartMode#<init>(java.lang.String,int)
CALLER: static org.apache.http.entity.ContentType#<clinit>()
	CALLEE: static org.apache.http.entity.ContentType#create(java.lang.String,java.nio.charset.Charset)
CALLER: static org.sbolstandard.core2.SnapGene#checkResponseCode(org.apache.http.HttpResponse)
	CALLEE: static org.sbolstandard.core2.SnapGene#inputStreamToString(java.io.InputStream)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
CALLER: static org.sbolstandard.core2.SnapGene#fetchContentSaveToFile(org.apache.http.client.HttpClient,java.lang.String,java.lang.String,java.io.OutputStream,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SnapGene#checkResponseCode(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#releaseConnection()
	CALLEE: org.apache.http.client.methods.HttpGet#<init>(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.client.entity.DecompressingEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.BasicHttpEntity#writeTo(java.io.OutputStream)
CALLER: org.apache.http.client.methods.HttpRequestBase#releaseConnection()
	CALLEE: org.apache.http.client.methods.AbstractExecutionAwareRequest#reset()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCollections(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatModuleDefinitions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatFunctionalComponents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatInteractions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatModelProperties(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatModule(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getRoles()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatModels(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Model#getFramework()
	CALLEE: org.sbolstandard.core2.Model#getLanguage()
	CALLEE: org.sbolstandard.core2.Model#getSource()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatComponentDefinitions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatComponents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatSequenceAnnotations(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatSequenceConstraints(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatSequence(java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatSequences(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatActivities(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.Activity#getTypes()
	CALLEE: org.joda.time.base.AbstractDateTime#toString()
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatAssociations(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatUsages(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatWasInformedByProperties(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Activity#getWasInformedByURIs()
	CALLEE: org.sbolstandard.core2.Activity#isSetStartedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#getStartedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#isSetEndedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#getEndedAtTime()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatAgents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatPlans(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatGenericTopLevel(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#getRDFType()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCombinatorialDerivation(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.StrategyType#convertToURI(org.sbolstandard.core2.StrategyType)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatVariableComponents(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#isSetStrategy()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getStrategy()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatImplementation(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatAttachments(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Attachment#getSource()
	CALLEE: org.sbolstandard.core2.Attachment#isSetFormat()
	CALLEE: org.sbolstandard.core2.Attachment#getFormat()
	CALLEE: org.sbolstandard.core2.Attachment#isSetSize()
	CALLEE: org.sbolstandard.core2.Attachment#getSize()
	CALLEE: org.sbolstandard.core2.Attachment#isSetHash()
	CALLEE: org.sbolstandard.core2.Attachment#getHash()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatExperiments(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatExperimentalData(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
CALLER: static javax.json.Json#createGeneratorFactory(java.util.Map)
	CALLEE: static javax.json.spi.JsonProvider#provider()
CALLER: org.sbolstandard.core.io.json.JsonIo#<init>()
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#transformName(java.lang.Object)
CALLER: org.sbolstandard.core.io.json.JsonIo#createIoWriter(javax.json.stream.JsonGenerator)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#<init>(org.sbolstandard.core.io.json.JsonIo,javax.json.stream.JsonGenerator)
CALLER: static org.sbolstandard.core.io.json.StringifyQName#<clinit>()
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#<init>()
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.2#<init>()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo#createIoWriter(java.io.PrintWriter)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#<init>(org.sbolstandard.core.io.turtle.TurtleIo,java.io.PrintWriter)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCollectionV1(org.sbolstandard.core2.Collection,java.util.List)
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSubComponent(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatDNAComponent(org.sbolstandard.core2.ComponentDefinition,java.util.List)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSequenceV1(org.sbolstandard.core2.Sequence)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSequenceAnnotationV1(org.sbolstandard.core2.SequenceAnnotation,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getComponentV1(org.sbolstandard.core2.Component,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatDNASequence(org.sbolstandard.core2.Sequence,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#<init>(javax.xml.stream.XMLStreamWriter)
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#<init>(javax.xml.stream.XMLStreamWriter)
CALLER: org.sbolstandard.core.io.rdf.RdfIo#createIoWriter(javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#<init>(org.sbolstandard.core.io.rdf.RdfIo,javax.xml.stream.XMLStreamWriter)
CALLER: static org.openscience.cdk.tools.LoggingToolFactory#createLoggingTool(java.lang.Class)
	CALLEE: static org.openscience.cdk.tools.LoggingToolFactory#instantiateWithCreateMethod(java.lang.Class,java.lang.Class)
	CALLEE: static org.openscience.cdk.tools.LoggingToolFactory#initializeLoggingTool(java.lang.Class,java.lang.String)
CALLER: org.openscience.cdk.DynamicFactory#<init>(org.openscience.cdk.DynamicFactory.InterfaceProvider,int)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorLookup#<init>(int)
CALLER: org.openscience.cdk.DynamicFactory#register(java.lang.Class,java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.CreationModifier)
	CALLEE: static org.openscience.cdk.DynamicFactory#key(java.lang.Class,java.lang.reflect.Constructor)
	CALLEE: org.openscience.cdk.DynamicFactory#register(org.openscience.cdk.DynamicFactory.ConstructorKey,java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.CreationModifier)
CALLER: static org.sbolstandard.core2.SBOLValidationException#formatMessage(java.lang.String,java.util.Collection)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLValidationException#parse(java.io.BufferedReader)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getReference()
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getDescription()
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getCondition()
CALLER: org.sbolstandard.core2.ComparableVersion#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion#parseVersion(java.lang.String)
CALLER: org.sbolstandard.core2.ComparableVersion#compareTo(org.sbolstandard.core2.ComparableVersion)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
CALLER: static org.sbolstandard.core2.SBOLValidate#access$100(java.util.List,java.util.HashMap)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateNestedAnnotationURIuniqueness(java.util.List,java.util.HashMap)
CALLER: org.oboparser.obo.OBOParser#parse(java.io.BufferedReader)
	CALLEE: org.oboparser.obo.OBOOntology#<init>()
	CALLEE: org.oboparser.obo.OBOParser#handleLine(java.lang.String)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#finalize()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#shutdown()
CALLER: static org.sbolstandard.core2.SBOLReader#readJSON(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.json.JsonIo#<init>()
	CALLEE: static javax.json.Json#createReaderFactory(java.util.Map)
	CALLEE: org.sbolstandard.core.io.json.JsonIo#createIoReader(javax.json.JsonStructure)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapDR(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#read()
CALLER: static org.sbolstandard.core2.SBOLReader#readTurtle(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo#<init>()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo#createIoReader(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#read()
CALLER: static org.sbolstandard.core2.SBOLReader#readRDF(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo#<init>()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo#createIoReader(javax.xml.stream.XMLStreamReader)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#read()
CALLER: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
CALLER: static org.sbolstandard.core2.SBOLReader#read(java.io.InputStream,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#setDefaultURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setCompliant(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(org.sbolstandard.core2.SBOLDocument,java.io.InputStream,java.lang.String)
CALLER: static org.sbolstandard.core2.URIcompliance#validateIdVersion(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isDisplayIdValid(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#isVersionValid(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLValidationException#formatMessage(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidationException#parse(java.io.BufferedReader)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getReference()
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getDescription()
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getCondition()
CALLER: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#validateIdVersion(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.Collection#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isDisplayIdValid(java.lang.String)
CALLER: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isVersionValid(java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#addCollection(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Experiment#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addExperiment(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.ExperimentalData#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addExperimentalData(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.ComponentDefinition#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setTypes(java.util.Set)
CALLER: org.sbolstandard.core2.SBOLDocument#addComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Location#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setTemplate(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
CALLER: org.sbolstandard.core2.Attachment#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Attachment#setSource(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addAttachment(org.sbolstandard.core2.Attachment)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Model#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Model#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.Model#setLanguage(java.net.URI)
	CALLEE: org.sbolstandard.core2.Model#setFramework(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addModel(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.ModuleDefinition#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Interaction#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Participation#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
CALLER: org.sbolstandard.core2.Implementation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addImplementation(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Sequence#<init>(java.net.URI,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Sequence#setEncoding(java.net.URI)
	CALLEE: org.sbolstandard.core2.Sequence#setElements(java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.GenericTopLevel#<init>(java.net.URI,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: org.sbolstandard.core2.SBOLDocument#addGenericTopLevel(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.GenericTopLevel#getRDFType()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespacePrefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#setRDFType(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespace(java.net.URI,java.lang.String)
CALLER: org.sbolstandard.core2.Activity#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addActivity(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
CALLER: org.sbolstandard.core2.Agent#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addAgent(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Plan#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addPlan(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.SBOLDocument#removeGenericTopLevel(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeActivity(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeAgent(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removePlan(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeCollection(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeExperiment(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeExperimentalData(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#containsSequence(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#removeComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
CALLER: org.sbolstandard.core2.SBOLDocument#removeModel(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#containsModel(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#removeModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Module#getDefinitionURI()
CALLER: org.sbolstandard.core2.SBOLDocument#removeCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
CALLER: org.sbolstandard.core2.SBOLDocument#removeImplementation(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
CALLER: org.sbolstandard.core2.SBOLDocument#removeAttachment(org.sbolstandard.core2.Attachment)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.TopLevel#containsAttachment(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(org.sbolstandard.core2.Identified,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
CALLER: org.sbolstandard.core2.SequenceOntology#getName(java.net.URI)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
	CALLEE: org.oboparser.obo.OBOStanza#getName()
	CALLEE: org.oboparser.obo.OBOTerm#getName()
CALLER: static org.sbolstandard.core2.GenBank#getFeatureEnd(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getPreciseLocations()
CALLER: static org.sbolstandard.core2.GenBank#getFeatureStart(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getPreciseLocations()
CALLER: static org.sbolstandard.core2.OrientationType#<clinit>()
	CALLEE: org.sbolstandard.core2.OrientationType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: static org.sbolstandard.core2.GenBank#isInlineFeature(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getPreciseLocations()
CALLER: static org.sbolstandard.core2.GenBank#writeComponentDefinition(org.sbolstandard.core2.ComponentDefinition,java.io.Writer)
	CALLEE: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#writeHeader(java.io.Writer,org.sbolstandard.core2.ComponentDefinition,int)
	CALLEE: static org.sbolstandard.core2.GenBank#writeReferences(java.io.Writer,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.GenBank#writeComment(java.io.Writer,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.GenBank#recurseComponentDefinition(org.sbolstandard.core2.ComponentDefinition,java.io.Writer,int,boolean,int)
	CALLEE: static org.sbolstandard.core2.GenBank#writeSequence(java.io.Writer,org.sbolstandard.core2.Sequence,int)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
CALLER: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#<init>()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#<init>()
CALLER: static org.apache.http.impl.conn.PoolingHttpClientConnectionManager#getDefaultRegistry()
	CALLEE: static org.apache.http.config.RegistryBuilder#create()
	CALLEE: static org.apache.http.conn.socket.PlainConnectionSocketFactory#getSocketFactory()
	CALLEE: static org.apache.http.conn.ssl.SSLConnectionSocketFactory#getSocketFactory()
	CALLEE: org.apache.http.config.RegistryBuilder#register(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.config.RegistryBuilder#build()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry,org.apache.http.conn.HttpConnectionFactory,org.apache.http.conn.DnsResolver)
CALLER: static org.apache.http.impl.client.HttpClientBuilder#create()
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#<init>()
CALLER: org.apache.http.message.BasicHeader#<init>(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.entity.ContentType#create(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.util.Args#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.entity.ContentType#valid(java.lang.String)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: org.apache.http.entity.ContentType#<init>(java.lang.String,java.nio.charset.Charset)
CALLER: static org.sbolstandard.core2.SnapGene#inputStreamToString(java.io.InputStream)
	CALLEE: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.Writer)
CALLER: org.apache.http.client.methods.HttpGet#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setURI(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#<init>()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCommonTopLevelData(java.util.List,org.sbolstandard.core2.TopLevel)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Collection#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamedProperties.Impl#<init>(java.util.List)
CALLER: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
CALLER: static org.sbolstandard.core2.Sbol2Terms.ModuleDefinition#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatFunctionalComponents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.AccessType#convertToURI(org.sbolstandard.core2.AccessType)
	CALLEE: static org.sbolstandard.core2.DirectionType#convertToURI(org.sbolstandard.core2.DirectionType)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getMapsTo(java.util.Set)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getDirection()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatInteractions(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatParticipations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Interaction#getTypes()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatModelProperties(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatModule(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getMapsTo(java.util.Set)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Module#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Model#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.ComponentDefinition#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatComponents(java.util.Set,java.util.List)
	CALLEE: org.sbolstandard.core2.Component#isSetRoleIntegration()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.Component#getRoles()
	CALLEE: org.sbolstandard.core2.Component#getRoleIntegration()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.AccessType#convertToURI(org.sbolstandard.core2.AccessType)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getMapsTo(java.util.Set)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.RoleIntegrationType#convertToURI(org.sbolstandard.core2.RoleIntegrationType)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getLocation(org.sbolstandard.core2.Location)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatSequenceAnnotations(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatSequenceConstraints(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestrictionURI()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatSequence(java.net.URI,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Sequence#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Activity#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatAssociations(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Association#getAgentURI()
	CALLEE: org.sbolstandard.core2.Association#getPlanURI()
	CALLEE: org.sbolstandard.core2.Association#getRoles()
	CALLEE: org.sbolstandard.core2.Association#isSetPlan()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatUsages(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Usage#getEntityURI()
	CALLEE: org.sbolstandard.core2.Usage#getRoles()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatWasInformedByProperties(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Agent#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Plan#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.CombinatorialDerivation#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.StrategyType#<clinit>()
	CALLEE: org.sbolstandard.core2.StrategyType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatVariableComponents(java.util.Set,java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.OperatorType#convertToURI(org.sbolstandard.core2.OperatorType)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollectionURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Implementation#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Attachment#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Experiment#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.ExperimentalData#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static javax.json.spi.JsonProvider#provider()
	CALLEE: javax.json.JsonException#<init>(java.lang.String,java.lang.Throwable)
CALLER: static org.sbolstandard.core.io.rdf.RdfTerms#<clinit>()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: org.sbolstandard.core.io.json.StringifyQName.1#<init>()
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#<init>()
CALLER: org.sbolstandard.core.io.json.StringifyQName.2#<init>()
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#<init>()
CALLER: static org.sbolstandard.core2.Sbol1Terms.Collection#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#getSubComponent(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSequenceV1(org.sbolstandard.core2.Sequence)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSequenceAnnotationV1(org.sbolstandard.core2.SequenceAnnotation,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getComponentV1(org.sbolstandard.core2.Component,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#<init>(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
CALLER: static org.sbolstandard.core2.Sbol1Terms.DNAComponent#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#getSequenceV1(org.sbolstandard.core2.Sequence)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
CALLER: static org.sbolstandard.core2.SBOLWriter#getSequenceAnnotationV1(org.sbolstandard.core2.SequenceAnnotation,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSubComponent(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,int)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
CALLER: static org.sbolstandard.core2.SBOLWriter#getComponentV1(org.sbolstandard.core2.Component,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#getSubComponent(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
CALLER: static org.sbolstandard.core2.Sbol1Terms.DNASequence#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.openscience.cdk.tools.LoggingToolFactory#initializeLoggingTool(java.lang.Class,java.lang.String)
	CALLEE: static org.openscience.cdk.tools.LoggingToolFactory#instantiateWithCreateMethod(java.lang.Class,java.lang.Class)
CALLER: static org.openscience.cdk.DynamicFactory#key(java.lang.Class,java.lang.reflect.Constructor)
	CALLEE: static org.openscience.cdk.DynamicFactory#key(java.lang.Class,java.lang.Class[])
CALLER: org.openscience.cdk.DynamicFactory#register(org.openscience.cdk.DynamicFactory.ConstructorKey,java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.CreationModifier)
	CALLEE: org.openscience.cdk.DynamicFactory.ReflectionCreator#<init>(java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory.ModifiedCreator#<init>(org.openscience.cdk.DynamicFactory.Creator,org.openscience.cdk.DynamicFactory.CreationModifier,org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory#register(org.openscience.cdk.DynamicFactory.ConstructorKey,org.openscience.cdk.DynamicFactory.Creator)
CALLER: static org.sbolstandard.core2.SBOLValidationException#parse(java.io.BufferedReader)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#setId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#setCondition(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#setReference(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationRule#getId()
CALLER: org.sbolstandard.core2.ComparableVersion#parseVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#<init>(org.sbolstandard.core2.ComparableVersion.1)
	CALLEE: static org.sbolstandard.core2.ComparableVersion#parseItem(boolean,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#normalize()
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#<init>(java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#toString()
CALLER: static org.sbolstandard.core2.SBOLValidate#validateNestedAnnotationURIuniqueness(java.util.List,java.util.HashMap)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedIdentity()
CALLER: org.oboparser.obo.OBOOntology#<init>()
	CALLEE: org.oboparser.obo.OBOStanza#<init>(java.lang.String)
CALLER: org.oboparser.obo.OBOParser#handleLine(java.lang.String)
	CALLEE: org.oboparser.obo.OBOOntology#addOBOStanza(org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOTerm#<init>()
	CALLEE: org.oboparser.obo.OBOTypedef#<init>()
	CALLEE: org.oboparser.obo.OBOIndividual#<init>()
	CALLEE: org.oboparser.obo.OBOValue#<init>(java.lang.String)
	CALLEE: org.oboparser.obo.OBOStanza#addValue(java.lang.String,org.oboparser.obo.OBOValue)
	CALLEE: org.oboparser.obo.OBOTerm#addValue(java.lang.String,org.oboparser.obo.OBOValue)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#shutdown()
	CALLEE: org.apache.http.pool.AbstractConnPool#shutdown()
CALLER: static javax.json.Json#createReaderFactory(java.util.Map)
	CALLEE: static javax.json.spi.JsonProvider#provider()
CALLER: org.sbolstandard.core.io.json.JsonIo#createIoReader(javax.json.JsonStructure)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#<init>(org.sbolstandard.core.io.json.JsonIo,javax.json.JsonStructure)
CALLER: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,java.util.Collection)
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapDR(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapTLDs(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo#createIoReader(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#<init>(java.io.Reader)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#<init>(org.sbolstandard.core.io.turtle.TurtleIo,org.sbolstandard.core.io.turtle.TurtleIo.WSScanner,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern,java.util.regex.Pattern)
CALLER: org.sbolstandard.core.io.rdf.RdfIo#createIoReader(javax.xml.stream.XMLStreamReader)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#<init>(org.sbolstandard.core.io.rdf.RdfIo,javax.xml.stream.XMLStreamReader)
CALLER: static org.sbolstandard.core2.SBOLReader#read(org.sbolstandard.core2.SBOLDocument,java.io.InputStream,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#clearErrors()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#getNumErrors()
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCompliance(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isFastaString(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGFF3String(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#isGenBankString(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setDefaultURIprefix(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readJSON(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readTurtle(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readRDF(java.io.Reader)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getSBOLVersion(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setCompliant(boolean)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SnapGene#read(org.sbolstandard.core2.SBOLDocument,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCompliant()
	CALLEE: static org.sbolstandard.core2.SBOLReader#clearErrors()
	CALLEE: org.sbolstandard.core2.SBOLDocument#setCreateDefaults(boolean)
	CALLEE: static org.sbolstandard.core2.FASTA#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.GFF3#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.GenBank#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.Throwable)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readTopLevelDocs(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
CALLER: org.sbolstandard.core2.TopLevel#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#addTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractPersistentId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.Version#isFirstVersionNewer(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractURIprefix(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#isURIcompliant(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.URIcompliance#keyExistsInAnyMap(java.net.URI,java.util.Map[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractVersion(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
CALLER: org.sbolstandard.core2.ComponentDefinition#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addType(java.net.URI)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#setTemplate(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Attachment#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Model#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Model#setLanguage(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Model#setFramework(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Sequence#setEncoding(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Sequence#setElements(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkSequenceEncoding(org.sbolstandard.core2.Sequence)
CALLER: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: org.sbolstandard.core2.SBOLDocument#getNamespace(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: org.sbolstandard.core2.SBOLDocument#getNamespacePrefix(java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
CALLER: org.sbolstandard.core2.GenericTopLevel#setRDFType(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.SBOLDocument#addNamespace(java.net.URI,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SBOLDocument#removeTopLevel(org.sbolstandard.core2.TopLevel,java.util.Map)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.Version#isFirstVersionNewer(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractVersion(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Experiment#containsExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#containsMember(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#updateReferences(java.util.List,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
CALLER: static org.sbolstandard.core2.GenBank#writeHeader(java.io.Writer,org.sbolstandard.core2.ComponentDefinition,int)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#writeGenBankLine(java.io.Writer,java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#containsType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
CALLER: static org.sbolstandard.core2.GenBank#writeReferences(java.io.Writer,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: static org.sbolstandard.core2.GenBank#writeGenBankLine(java.io.Writer,java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
CALLER: static org.sbolstandard.core2.GenBank#writeComment(java.io.Writer,org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
CALLER: static org.sbolstandard.core2.GenBank#recurseComponentDefinition(org.sbolstandard.core2.ComponentDefinition,java.io.Writer,int,boolean,int)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.SequenceOntology#getId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.GenBank#getFeatureEnd(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: static org.sbolstandard.core2.GenBank#getFeatureStart(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: static org.sbolstandard.core2.GenBank#isInlineFeature(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: static org.sbolstandard.core2.GenBank#recurseComponentDefinition(org.sbolstandard.core2.ComponentDefinition,java.io.Writer,int,boolean,int)
	CALLEE: static org.sbolstandard.core2.GenBank#convertSOtoGenBank(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#writeFeature(java.io.Writer,org.sbolstandard.core2.SequenceAnnotation,java.lang.String,int,boolean)
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSortedSequenceAnnotationsByDisplayId()
CALLER: static org.sbolstandard.core2.GenBank#writeSequence(java.io.Writer,org.sbolstandard.core2.Sequence,int)
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
CALLER: org.apache.http.client.methods.HttpRequestBase#<init>()
	CALLEE: org.apache.http.client.methods.AbstractExecutionAwareRequest#<init>()
CALLER: static org.apache.http.config.RegistryBuilder#create()
	CALLEE: org.apache.http.config.RegistryBuilder#<init>()
CALLER: static org.apache.http.conn.socket.PlainConnectionSocketFactory#<clinit>()
	CALLEE: org.apache.http.conn.socket.PlainConnectionSocketFactory#<init>()
CALLER: static org.apache.http.conn.ssl.SSLConnectionSocketFactory#getSocketFactory()
	CALLEE: static org.apache.http.ssl.SSLContexts#createDefault()
	CALLEE: static org.apache.http.conn.ssl.SSLConnectionSocketFactory#getDefaultHostnameVerifier()
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry,org.apache.http.conn.HttpConnectionFactory,org.apache.http.conn.DnsResolver)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry,org.apache.http.conn.HttpConnectionFactory,org.apache.http.conn.SchemePortResolver,org.apache.http.conn.DnsResolver,long,java.util.concurrent.TimeUnit)
CALLER: static org.apache.http.util.Args#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
CALLER: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.Writer)
	CALLEE: static org.apache.commons.io.IOUtils#copy(java.io.Reader,java.io.Writer)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
CALLER: static org.sbolstandard.core2.Sbol2Terms.TopLevel#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#<init>(java.net.URI)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#<init>(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
CALLER: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#<init>(java.util.List,java.lang.Object,java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamedProperties.Impl#getProperties()
CALLER: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.Double)
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
	CALLEE: org.sbolstandard.core2.Measure#getNumericalValue()
	CALLEE: org.sbolstandard.core2.Measure#getUnitURI()
	CALLEE: org.sbolstandard.core2.Measure#getTypes()
CALLER: static org.sbolstandard.core2.Sbol2Terms.ComponentInstance#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.FunctionalComponent#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.DirectionType#<clinit>()
	CALLEE: org.sbolstandard.core2.DirectionType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: static org.sbolstandard.core2.SBOLWriter#getMapsTo(java.util.Set)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.RefinementType#convertToURI(org.sbolstandard.core2.RefinementType)
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Interaction#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLWriter#formatParticipations(java.util.Set)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonMeasuredData(java.util.List,org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Participation#getParticipantURI()
	CALLEE: org.sbolstandard.core2.Participation#getRoles()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Module#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Component#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.RoleIntegrationType#<clinit>()
	CALLEE: org.sbolstandard.core2.RoleIntegrationType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
CALLER: static org.sbolstandard.core2.SBOLWriter#getLocation(org.sbolstandard.core2.Location)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,int)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.OrientationType#convertToURI(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
CALLER: static org.sbolstandard.core2.SBOLWriter#getSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLWriter#formatCommonIdentifiedData(java.util.List,org.sbolstandard.core2.Identified)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,int)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.OrientationType#convertToURI(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
CALLER: static org.sbolstandard.core2.Sbol2Terms.SequenceAnnotation#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.SequenceConstraint#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#<init>(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Association#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Usage#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.VariableComponent#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol1Terms.SequenceAnnotations#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,int)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(int)
CALLER: static org.openscience.cdk.DynamicFactory#key(java.lang.Class,java.lang.Class[])
	CALLEE: static org.openscience.cdk.DynamicFactory#convert(java.lang.Class[])
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#<init>(java.lang.Class,java.lang.Class[],org.openscience.cdk.DynamicFactory.1)
CALLER: org.openscience.cdk.DynamicFactory.ReflectionCreator#<init>(java.lang.reflect.Constructor,org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory.ReflectionCreator#<init>(java.lang.reflect.Constructor)
CALLER: org.openscience.cdk.DynamicFactory.ModifiedCreator#<init>(org.openscience.cdk.DynamicFactory.Creator,org.openscience.cdk.DynamicFactory.CreationModifier,org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory.ModifiedCreator#<init>(org.openscience.cdk.DynamicFactory.Creator,org.openscience.cdk.DynamicFactory.CreationModifier)
CALLER: org.openscience.cdk.DynamicFactory#register(org.openscience.cdk.DynamicFactory.ConstructorKey,org.openscience.cdk.DynamicFactory.Creator)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorLookup#put(java.lang.Class,org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
CALLER: org.sbolstandard.core2.ComparableVersion.ListItem#<init>(org.sbolstandard.core2.ComparableVersion.1)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#<init>()
CALLER: static org.sbolstandard.core2.ComparableVersion.IntegerItem#<clinit>()
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#<init>()
CALLER: static org.sbolstandard.core2.ComparableVersion#parseItem(boolean,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#<init>(java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#<init>(java.lang.String)
CALLER: org.sbolstandard.core2.ComparableVersion.ListItem#normalize()
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#isNull()
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#isNull()
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#isNull()
CALLER: org.oboparser.obo.OBOOntology#addOBOStanza(org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOStanza#getId()
CALLER: org.oboparser.obo.OBOTerm#<init>()
	CALLEE: org.oboparser.obo.OBOStanza#<init>(java.lang.String)
CALLER: org.oboparser.obo.OBOTypedef#<init>()
	CALLEE: org.oboparser.obo.OBOStanza#<init>(java.lang.String)
CALLER: org.oboparser.obo.OBOIndividual#<init>()
	CALLEE: org.oboparser.obo.OBOStanza#<init>(java.lang.String)
CALLER: org.oboparser.obo.OBOValue#<init>(java.lang.String)
	CALLEE: static org.oboparser.obo.OBOValue#parseModifiers(java.lang.String)
CALLER: org.oboparser.obo.OBOStanza#addValue(java.lang.String,org.oboparser.obo.OBOValue)
	CALLEE: org.oboparser.obo.OBOValue#getValue()
	CALLEE: org.oboparser.obo.OBOException#<init>(java.lang.String)
CALLER: org.oboparser.obo.OBOTerm#addValue(java.lang.String,org.oboparser.obo.OBOValue)
	CALLEE: org.oboparser.obo.OBOStanza#addValue(java.lang.String,org.oboparser.obo.OBOValue)
	CALLEE: org.oboparser.obo.OBOValue#getValue()
	CALLEE: org.oboparser.obo.OBOException#<init>(java.lang.String)
CALLER: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.lang.Throwable,java.util.Collection)
	CALLEE: static org.sbolstandard.core2.SBOLValidationException#formatMessage(java.lang.String,java.util.Collection)
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapTLDs(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.1#<init>(org.sbolstandard.core.datatree.NameTransformer)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapL(java.util.List,org.sbolstandard.core.datatree.Func)
CALLER: static org.sbolstandard.core2.SnapGene#read(org.sbolstandard.core2.SBOLDocument,java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setURIPrefix(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#releaseConnection()
	CALLEE: static org.sbolstandard.core2.SBOLReader#getDisplayId()
	CALLEE: static org.sbolstandard.core2.SBOLReader#getVersion()
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(java.io.InputStream)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#build()
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.EmptyInputStream#read(byte[])
	CALLEE: org.apache.http.conn.EofSensorInputStream#read(byte[])
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[])
	CALLEE: org.apache.http.client.methods.HttpPost#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>()
	CALLEE: static org.apache.http.impl.client.HttpClients#custom()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.entity.mime.MultipartEntityBuilder#create()
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#setEntity(org.apache.http.HttpEntity)
	CALLEE: static org.sbolstandard.core2.SnapGene#checkResponseCode(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#setMode(org.apache.http.entity.mime.HttpMultipartMode)
	CALLEE: static org.apache.commons.lang3.RandomStringUtils#randomAlphanumeric(int)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addTextBody(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addBinaryBody(java.lang.String,byte[],org.apache.http.entity.ContentType,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#build()
	CALLEE: static org.sbolstandard.core2.SnapGene#fetchContentAsInputStream(org.apache.http.client.HttpClient,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#getURIPrefix()
CALLER: static org.sbolstandard.core2.FASTA#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.FASTA#readFASTALine(java.io.BufferedReader)
	CALLEE: static org.sbolstandard.core2.FASTA#createSequence(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
CALLER: static org.sbolstandard.core2.GFF3#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#clearRoles()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GFF3#readGFF3Line(java.io.BufferedReader)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.GFF3#findParent(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.GFF3#findOffset(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.GFF3#addSequenceAnnotation(org.sbolstandard.core2.ComponentDefinition,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
CALLER: static org.sbolstandard.core2.GenBank#read(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#addAnnotation(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearRoles()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespace(java.net.URI,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.GenBank#readGenBankLine(java.io.BufferedReader)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(javax.xml.namespace.QName,javax.xml.namespace.QName,java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.GenBank#fixTag(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#convertGenBanktoSO(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#createSubComponentDefinitions(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.net.URI,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(org.sbolstandard.core2.Sequence)
CALLER: static org.sbolstandard.core2.SBOLReader#readV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#clearErrors()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#getNumErrors()
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#validateCompliance(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#setCompliant(boolean)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLReader#readTopLevelDocsV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
CALLER: static org.sbolstandard.core2.SBOLReader#readTopLevelDocs(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#clearErrors()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.Throwable)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCollection(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseExperiment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseExperimentalData(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModuleDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequence(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCombinatorialDerivation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseImplementation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseActivity(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAgent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parsePlan(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseGenericTopLevel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.IdentifiableDocument.Abstract#getPropertyValues(java.lang.Object)
CALLER: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
CALLER: static org.sbolstandard.core2.URIcompliance#isURIcompliant(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
CALLER: org.sbolstandard.core2.ComponentDefinition#addType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#containsType(java.net.URI)
CALLER: static org.sbolstandard.core2.SBOLValidate#checkSequenceEncoding(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkSmilesEncoding(java.lang.String)
CALLER: static org.sbolstandard.core2.GenBank#writeFeature(java.io.Writer,org.sbolstandard.core2.SequenceAnnotation,java.lang.String,int,boolean)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#isIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#isStringValue()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Annotation#getIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getSortedLocations()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getPreciseLocations()
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.GenBank#writeGenBankLine(java.io.Writer,java.lang.String,int,int)
	CALLEE: static org.sbolstandard.core2.GenBank#locationStr(org.sbolstandard.core2.Location,int,boolean,org.sbolstandard.core2.Location)
	CALLEE: static org.sbolstandard.core2.GenBank#stradlesOrigin(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
CALLER: org.apache.http.client.methods.AbstractExecutionAwareRequest#<init>()
	CALLEE: org.apache.http.message.AbstractHttpMessage#<init>()
CALLER: static org.apache.http.ssl.SSLContexts#createDefault()
	CALLEE: org.apache.http.ssl.SSLInitializationException#<init>(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.http.conn.ssl.SSLConnectionSocketFactory#getDefaultHostnameVerifier()
	CALLEE: static org.apache.http.conn.util.PublicSuffixMatcherLoader#getDefault()
	CALLEE: org.apache.http.conn.ssl.DefaultHostnameVerifier#<init>(org.apache.http.conn.util.PublicSuffixMatcher)
CALLER: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLSocketFactory,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
CALLER: static org.apache.http.conn.ssl.AllowAllHostnameVerifier#<clinit>()
	CALLEE: org.apache.http.conn.ssl.AllowAllHostnameVerifier#<init>()
CALLER: static org.apache.http.conn.ssl.BrowserCompatHostnameVerifier#<clinit>()
	CALLEE: org.apache.http.conn.ssl.BrowserCompatHostnameVerifier#<init>()
CALLER: static org.apache.http.conn.ssl.StrictHostnameVerifier#<clinit>()
	CALLEE: org.apache.http.conn.ssl.StrictHostnameVerifier#<init>()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry,org.apache.http.conn.HttpConnectionFactory,org.apache.http.conn.SchemePortResolver,org.apache.http.conn.DnsResolver,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#<init>(org.apache.http.config.Lookup,org.apache.http.conn.SchemePortResolver,org.apache.http.conn.DnsResolver)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.conn.HttpClientConnectionOperator,org.apache.http.conn.HttpConnectionFactory,long,java.util.concurrent.TimeUnit)
CALLER: static org.apache.commons.io.IOUtils#copy(java.io.Reader,java.io.Writer)
	CALLEE: static org.apache.commons.io.IOUtils#copyLarge(java.io.Reader,java.io.Writer)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Identified#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: org.sbolstandard.core.datatree.Literal.UriLiteral#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: org.sbolstandard.core.datatree.TopLevelDocument.Impl#<init>(java.util.List,java.lang.Object,java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core.datatree.IdentifiableDocument.Abstract#<init>()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Measure#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.Double)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(double)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Measured#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.MapsTo#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamedProperties.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#<init>(java.util.List,java.lang.Object,java.net.URI,java.util.List)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Participation#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Range#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Location#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.Cut#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.Sbol2Terms.GenericLocation#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: org.sbolstandard.core.datatree.Literal.StringLiteral#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(int)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#<init>(java.lang.Integer)
CALLER: static org.openscience.cdk.DynamicFactory#convert(java.lang.Class[])
	CALLEE: static org.openscience.cdk.DynamicFactory#convert(java.lang.Class)
CALLER: org.openscience.cdk.DynamicFactory.ClassBasedKey#<init>(java.lang.Class,java.lang.Class[],org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#<init>(java.lang.Class,java.lang.Class[])
CALLER: org.openscience.cdk.DynamicFactory.ConstructorLookup#put(java.lang.Class,org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapL(java.util.List,org.sbolstandard.core.datatree.Func)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.1#apply(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.2#apply(java.lang.Object)
CALLER: static org.apache.commons.lang3.RandomStringUtils#randomAlphanumeric(int)
	CALLEE: static org.apache.commons.lang3.RandomStringUtils#random(int,boolean,boolean)
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#addTextBody(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addTextBody(java.lang.String,java.lang.String,org.apache.http.entity.ContentType)
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#addBinaryBody(java.lang.String,byte[],org.apache.http.entity.ContentType,java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#<init>(byte[],org.apache.http.entity.ContentType,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#build()
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#buildEntity()
CALLER: static org.sbolstandard.core2.SnapGene#fetchContentAsInputStream(org.apache.http.client.HttpClient,java.lang.String,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.SnapGene#checkResponseCode(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#releaseConnection()
	CALLEE: org.apache.http.client.methods.HttpGet#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SnapGene.HttpStream#<init>()
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
CALLER: static org.sbolstandard.core2.SBOLReader#read(java.io.InputStream)
	CALLEE: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#setCompliant(boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#read(org.sbolstandard.core2.SBOLDocument,java.io.InputStream,java.lang.String)
CALLER: static org.sbolstandard.core2.FASTA#createSequence(org.sbolstandard.core2.SBOLDocument,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.lang.String,java.util.Set)
CALLER: static org.sbolstandard.core2.GFF3#findParent(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
CALLER: static org.sbolstandard.core2.GFF3#findOffset(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.GFF3#findParent(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: static org.sbolstandard.core2.GFF3#findOffset(org.sbolstandard.core2.SBOLDocument,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Range#getStart()
CALLER: static org.sbolstandard.core2.GFF3#addSequenceAnnotation(org.sbolstandard.core2.ComponentDefinition,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#<init>()
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getURIbyName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Identified#createAnnotation(javax.xml.namespace.QName,java.lang.String)
CALLER: static org.sbolstandard.core2.GenBank#readGenBankLine(java.io.BufferedReader)
	CALLEE: static org.sbolstandard.core2.GenBank#convertGenBanktoSO(java.lang.String)
CALLER: org.sbolstandard.core2.Annotation#<init>(javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setStringValue(java.lang.String)
CALLER: org.sbolstandard.core2.Annotation#<init>(javax.xml.namespace.QName,javax.xml.namespace.QName,java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedIdentity(java.net.URI)
CALLER: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.GenBank#convertGenBanktoSO(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getURIbyId(java.lang.String)
CALLER: static org.sbolstandard.core2.GenBank#createSubComponentDefinitions(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.net.URI,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#createSequence(java.lang.String,java.lang.String,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: static org.sbolstandard.core2.Sequence#reverseComplement(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#readTopLevelDocsV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: static org.sbolstandard.core2.SBOLReader#clearErrors()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.Throwable)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseGenericTopLevel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseDnaComponentV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseDnaSequenceV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCollectionV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
CALLER: static org.sbolstandard.core2.Sbol2Terms.Description#<clinit>()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#parseCollection(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addCollection(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCollection(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModuleDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequence(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCombinatorialDerivation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseImplementation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseActivity(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAgent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parsePlan(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseGenericTopLevel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Collection#setMembers(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Collection#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseExperiment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Experiment#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addExperiment(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseExperimentalData(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Experiment#setExperimentalData(java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperiment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseExperimentalData(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ExperimentalData#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addExperimentalData(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.ExperimentalData#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseModuleDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModule(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseInteraction(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseFunctionalComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setFunctionalComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setInteractions(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setModels(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setModules(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseModel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Model#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addModel(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Model#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseSequence(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Sequence#<init>(java.net.URI,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequence(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequenceAnnotation(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequenceConstraint(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequences(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequenceAnnotations(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequenceConstraints(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseCombinatorialDerivation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.StrategyType#convertToStrategyType(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseVariableComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setStrategy(org.sbolstandard.core2.StrategyType)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setVariableComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
CALLER: static org.sbolstandard.core2.SBOLReader#parseImplementation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getImplementation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Implementation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addImplementation(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModuleDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Implementation#setBuilt(java.net.URI)
	CALLEE: org.sbolstandard.core2.Implementation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Attachment#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addAttachment(org.sbolstandard.core2.Attachment)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Attachment#setFormat(java.net.URI)
	CALLEE: org.sbolstandard.core2.Attachment#setSize(long)
	CALLEE: org.sbolstandard.core2.Attachment#setHash(java.lang.String)
	CALLEE: org.sbolstandard.core2.Attachment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseActivity(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Activity#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addActivity(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseActivity(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#dateTime()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAssociation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseUsage(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Activity#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#setStartedAtTime(org.joda.time.DateTime)
	CALLEE: org.sbolstandard.core2.Activity#setEndedAtTime(org.joda.time.DateTime)
	CALLEE: org.sbolstandard.core2.Activity#setAssociations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#setUsages(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#setWasInformedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.joda.time.format.DateTimeFormatter#parseDateTime(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseAgent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Agent#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addAgent(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parsePlan(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Plan#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addPlan(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseGenericTopLevel(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getGenericTopLevel(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#<init>(java.net.URI,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addGenericTopLevel(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespacePrefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseAttachment(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractNamespace(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespace(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.GenericTopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
CALLER: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.SBOLValidate#checkSmilesEncoding(java.lang.String)
	CALLEE: org.openscience.cdk.smiles.SmilesParser#parseSmiles(java.lang.String)
CALLER: static org.sbolstandard.core2.GenBank#locationStr(org.sbolstandard.core2.Location,int,boolean,org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
CALLER: static org.sbolstandard.core2.GenBank#stradlesOrigin(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
CALLER: org.apache.http.message.AbstractHttpMessage#<init>()
	CALLEE: org.apache.http.message.AbstractHttpMessage#<init>(org.apache.http.params.HttpParams)
CALLER: static org.apache.http.conn.util.PublicSuffixMatcherLoader#getDefault()
	CALLEE: static org.apache.http.conn.util.PublicSuffixMatcherLoader#load(java.net.URL)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.conn.util.PublicSuffixMatcher#<init>(java.util.Collection,java.util.Collection)
CALLER: org.apache.http.conn.ssl.DefaultHostnameVerifier#<init>(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLSocketFactory,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.conn.ssl.SSLConnectionSocketFactory#getDefaultHostnameVerifier()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.conn.ssl.AllowAllHostnameVerifier#<init>()
	CALLEE: org.apache.http.conn.ssl.AbstractVerifier#<init>()
CALLER: org.apache.http.conn.ssl.BrowserCompatHostnameVerifier#<init>()
	CALLEE: org.apache.http.conn.ssl.AbstractVerifier#<init>()
CALLER: org.apache.http.conn.ssl.StrictHostnameVerifier#<init>()
	CALLEE: org.apache.http.conn.ssl.AbstractVerifier#<init>()
CALLER: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#<init>(org.apache.http.config.Lookup,org.apache.http.conn.SchemePortResolver,org.apache.http.conn.DnsResolver)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.conn.HttpClientConnectionOperator,org.apache.http.conn.HttpConnectionFactory,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#<init>()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#<init>(org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData,org.apache.http.conn.HttpConnectionFactory)
	CALLEE: org.apache.http.impl.conn.CPool#<init>(org.apache.http.pool.ConnFactory,int,int,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.AbstractConnPool#setValidateAfterInactivity(int)
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(double)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#<init>(java.lang.Double)
CALLER: org.sbolstandard.core.datatree.NestedDocument.Impl#<init>(java.util.List,java.lang.Object,java.net.URI,java.util.List)
	CALLEE: org.sbolstandard.core.datatree.IdentifiableDocument.Abstract#<init>()
CALLER: org.sbolstandard.core.datatree.Literal.IntegerLiteral#<init>(java.lang.Integer)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: org.openscience.cdk.DynamicFactory.ClassBasedKey#<init>(java.lang.Class,java.lang.Class[])
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#<init>()
CALLER: org.sbolstandard.core.datatree.NameTransformer.1#apply(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.1#apply(org.sbolstandard.core.datatree.TopLevelDocument)
CALLER: static org.apache.commons.lang3.RandomStringUtils#random(int,boolean,boolean)
	CALLEE: static org.apache.commons.lang3.RandomStringUtils#random(int,int,int,boolean,boolean)
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#addTextBody(java.lang.String,java.lang.String,org.apache.http.entity.ContentType)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
	CALLEE: org.apache.http.entity.mime.content.StringBody#<init>(java.lang.String,org.apache.http.entity.ContentType)
CALLER: org.apache.http.entity.mime.content.ByteArrayBody#<init>(byte[],org.apache.http.entity.ContentType,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.AbstractContentBody#<init>(org.apache.http.entity.ContentType)
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.entity.mime.FormBodyPartBuilder#create(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#addPart(org.apache.http.entity.mime.FormBodyPart)
	CALLEE: org.apache.http.entity.mime.FormBodyPartBuilder#build()
CALLER: org.apache.http.entity.mime.MultipartEntityBuilder#buildEntity()
	CALLEE: org.apache.http.entity.mime.MultipartEntityBuilder#generateBoundary()
	CALLEE: org.apache.http.message.BasicNameValuePair#<init>(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.entity.ContentType#create(java.lang.String,org.apache.http.NameValuePair[])
	CALLEE: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.HttpRFC6532Multipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.HttpStrictMultipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#getTotalLength()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#<init>(org.apache.http.entity.mime.AbstractMultipartForm,org.apache.http.entity.ContentType,long)
CALLER: org.sbolstandard.core2.SequenceOntology#getURIbyName(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getURIbyId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceOntology#getId(java.lang.String)
CALLER: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Annotation#setStringValue(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Annotation#setNestedQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Annotation#setNestedIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.SequenceOntology#getURIbyId(java.lang.String)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
CALLER: static org.sbolstandard.core2.SBOLReader#parseDnaComponentV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseDnaSequenceV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequenceConstraints(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
	CALLEE: static org.sbolstandard.core2.SequenceOntology#convertSeqOntologyV1(java.lang.String)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequenceAnnotationV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.List,java.lang.String,int,java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToURI(org.sbolstandard.core2.RestrictionType)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getByWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#copy(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#clearWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.SBOLReader.SBOLPair#getRight()
	CALLEE: org.sbolstandard.core2.SBOLReader.SBOLPair#getLeft()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseDnaSequenceV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Sequence#<init>(java.net.URI,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getByWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseCollectionV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#fixDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Collection#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addCollection(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseDnaComponentV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Collection#setMembers(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Collection#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setStringValue(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Annotation#setBooleanValue(boolean)
	CALLEE: org.sbolstandard.core2.Annotation#setDoubleValue(double)
	CALLEE: org.sbolstandard.core2.Annotation#setIntegerValue(int)
	CALLEE: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.Collection#setMembers(java.util.Set)
	CALLEE: org.sbolstandard.core2.Collection#clearMembers()
	CALLEE: org.sbolstandard.core2.Collection#addMember(java.net.URI)
CALLER: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#clearWasDerivedFroms()
CALLER: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#clearWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
CALLER: org.sbolstandard.core2.TopLevel#setAttachments(java.util.Set)
	CALLEE: org.sbolstandard.core2.TopLevel#clearAttachments()
	CALLEE: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
CALLER: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Identified#clearAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#addAnnotation(org.sbolstandard.core2.Annotation)
CALLER: org.sbolstandard.core2.Collection#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Collection#getMemberIdentities()
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
CALLER: org.sbolstandard.core2.Experiment#setExperimentalData(java.util.Set)
	CALLEE: org.sbolstandard.core2.Experiment#clearExperimentalData()
	CALLEE: org.sbolstandard.core2.Experiment#addExperimentalData(java.net.URI)
CALLER: org.sbolstandard.core2.SBOLDocument#getExperiment(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getRegistries()
CALLER: org.sbolstandard.core2.Experiment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataIdentities()
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
CALLER: org.sbolstandard.core2.ExperimentalData#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLReader#parseModule(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseModuleDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMapsTo(org.sbolstandard.core.datatree.NestedDocument,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Module#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseInteraction(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseParticipation(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Interaction#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Interaction#setParticipations(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseFunctionalComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMapsTo(org.sbolstandard.core.datatree.NestedDocument,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: static org.sbolstandard.core2.AccessType#convertToAccessType(java.net.URI)
	CALLEE: static org.sbolstandard.core2.DirectionType#convertToDirectionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.ModuleDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#clearRoles()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.ModuleDefinition#setFunctionalComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#clearFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addFunctionalComponentNoCheck(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#checkMapsTosLocalURIs()
CALLER: org.sbolstandard.core2.ModuleDefinition#setInteractions(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#clearInteractions()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addInteraction(org.sbolstandard.core2.Interaction)
CALLER: org.sbolstandard.core2.ModuleDefinition#setModels(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#clearModels()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addModel(java.net.URI)
CALLER: org.sbolstandard.core2.ModuleDefinition#setModules(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#clearModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addModule(org.sbolstandard.core2.Module)
CALLER: org.sbolstandard.core2.ModuleDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelIdentities()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
CALLER: org.sbolstandard.core2.Model#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: static org.sbolstandard.core2.SBOLReader#parseComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Component#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMapsTo(org.sbolstandard.core.datatree.NestedDocument,boolean)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: static org.sbolstandard.core2.AccessType#convertToAccessType(java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseLocation(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.ComponentInstance#setAccess(org.sbolstandard.core2.AccessType)
	CALLEE: static org.sbolstandard.core2.RoleIntegrationType#convertToRoleIntegrationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#setRoleIntegration(org.sbolstandard.core2.RoleIntegrationType)
	CALLEE: org.sbolstandard.core2.Component#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#setLocations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#setSourceLocations(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseSequenceAnnotation(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseLocation(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseSequenceConstraint(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: org.sbolstandard.core2.ComponentDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearRoles()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#setSequences(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearSequences()
CALLER: org.sbolstandard.core2.ComponentDefinition#setComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addComponentNoCheck(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#checkMapsTosLocalURIs()
CALLER: org.sbolstandard.core2.ComponentDefinition#setSequenceAnnotations(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearSequenceAnnotations()
CALLER: org.sbolstandard.core2.ComponentDefinition#setSequenceConstraints(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#clearSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
CALLER: org.sbolstandard.core2.ComponentDefinition#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceIdentities()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
CALLER: static org.sbolstandard.core2.StrategyType#convertToStrategyType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.SBOLReader#parseVariableComponent(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCollection(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseComponentDefinition(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCombinatorialDerivation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.OperatorType#convertToOperatorType(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#<init>(java.net.URI,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariants(java.util.Set)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariantCollections(java.util.Set)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariantDerivations(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#setStrategy(org.sbolstandard.core2.StrategyType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#setVariableComponents(java.util.Set)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#clearVariableComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#addVariableComponentNoCheck(org.sbolstandard.core2.VariableComponent)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateIdentity()
CALLER: org.sbolstandard.core2.Implementation#setBuilt(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Implementation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.Attachment#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: static org.joda.time.format.ISODateTimeFormat#dateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#access$1500()
CALLER: static org.sbolstandard.core2.SBOLReader#parseAssociation(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Association#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Association#setPlan(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseUsage(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Usage#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: org.sbolstandard.core2.Activity#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#clearTypes()
	CALLEE: org.sbolstandard.core2.Activity#addType(java.net.URI)
CALLER: org.sbolstandard.core2.Activity#setAssociations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#clearAssociations()
	CALLEE: org.sbolstandard.core2.Activity#addAssociation(org.sbolstandard.core2.Association)
CALLER: org.sbolstandard.core2.Activity#setUsages(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#clearUsages()
	CALLEE: org.sbolstandard.core2.Activity#addUsage(org.sbolstandard.core2.Usage)
CALLER: org.sbolstandard.core2.Activity#setWasInformedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Activity#clearWasInformedBys()
	CALLEE: org.sbolstandard.core2.Activity#addWasInformedBy(java.net.URI)
CALLER: org.sbolstandard.core2.Activity#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Activity#getWasInformedByIdentities()
	CALLEE: org.sbolstandard.core2.Activity#getWasInformedByURIs()
	CALLEE: org.joda.time.base.AbstractInstant#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SBOLDocument#addNamespace(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespaceBinding(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.GenericTopLevel#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.TopLevel#equals(java.lang.Object)
CALLER: org.openscience.cdk.smiles.SmilesParser#parseSmiles(java.lang.String)
	CALLEE: org.openscience.cdk.smiles.SmilesParser#parseSmiles(java.lang.String,boolean)
CALLER: org.apache.http.message.AbstractHttpMessage#<init>(org.apache.http.params.HttpParams)
	CALLEE: org.apache.http.message.HeaderGroup#<init>()
CALLER: static org.apache.http.conn.util.PublicSuffixMatcherLoader#load(java.net.URL)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.conn.util.PublicSuffixMatcherLoader#load(java.io.InputStream)
CALLER: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#getFactory()
CALLER: static org.apache.commons.logging.LogFactory#<clinit>()
	CALLEE: static org.apache.commons.logging.LogFactory#class$(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getClassLoader(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#objectId(java.lang.Object)
	CALLEE: static org.apache.commons.logging.LogFactory#initDiagnostics()
	CALLEE: static org.apache.commons.logging.LogFactory#logClassLoaderEnvironment(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#createFactoryStore()
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
CALLER: org.apache.http.conn.util.PublicSuffixMatcher#<init>(java.util.Collection,java.util.Collection)
	CALLEE: org.apache.http.conn.util.PublicSuffixMatcher#<init>(org.apache.http.conn.util.DomainType,java.util.Collection,java.util.Collection)
CALLER: org.apache.http.conn.ssl.AbstractVerifier#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.impl.conn.DefaultSchemePortResolver#<clinit>()
	CALLEE: org.apache.http.impl.conn.DefaultSchemePortResolver#<init>()
CALLER: static org.apache.http.impl.conn.SystemDefaultDnsResolver#<clinit>()
	CALLEE: org.apache.http.impl.conn.SystemDefaultDnsResolver#<init>()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#<init>(org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData,org.apache.http.conn.HttpConnectionFactory)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#<init>()
CALLER: org.apache.http.impl.conn.CPool#<init>(org.apache.http.pool.ConnFactory,int,int,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.pool.AbstractConnPool#<init>(org.apache.http.pool.ConnFactory,int,int)
CALLER: org.sbolstandard.core.datatree.Literal.DoubleLiteral#<init>(java.lang.Double)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: org.sbolstandard.core.datatree.NameTransformer.1#apply(org.sbolstandard.core.datatree.TopLevelDocument)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapTLD(org.sbolstandard.core.datatree.TopLevelDocument)
CALLER: static org.apache.commons.lang3.RandomStringUtils#random(int,int,int,boolean,boolean)
	CALLEE: static org.apache.commons.lang3.RandomStringUtils#random(int,int,int,boolean,boolean,char[],java.util.Random)
CALLER: org.apache.http.entity.mime.content.StringBody#<init>(java.lang.String,org.apache.http.entity.ContentType)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.AbstractContentBody#<init>(org.apache.http.entity.ContentType)
	CALLEE: org.apache.http.entity.ContentType#getCharset()
CALLER: org.apache.http.entity.mime.content.AbstractContentBody#<init>(org.apache.http.entity.ContentType)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.entity.mime.FormBodyPartBuilder#create(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
	CALLEE: org.apache.http.entity.mime.FormBodyPartBuilder#<init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
CALLER: org.apache.http.message.BasicNameValuePair#<init>(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.entity.ContentType#create(java.lang.String,org.apache.http.NameValuePair[])
	CALLEE: static org.apache.http.util.Args#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.entity.ContentType#valid(java.lang.String)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: static org.apache.http.entity.ContentType#create(java.lang.String,org.apache.http.NameValuePair[],boolean)
CALLER: static org.apache.http.entity.mime.MultipartEntityBuilder.1#<clinit>()
	CALLEE: static org.apache.http.entity.mime.HttpMultipartMode#values()
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#<clinit>()
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#encode(java.nio.charset.Charset,java.lang.String)
CALLER: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#<init>(java.nio.charset.Charset,java.lang.String)
CALLER: org.apache.http.entity.mime.HttpRFC6532Multipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#<init>(java.nio.charset.Charset,java.lang.String)
CALLER: org.apache.http.entity.mime.HttpStrictMultipart#<init>(java.nio.charset.Charset,java.lang.String,java.util.List)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#<init>(java.nio.charset.Charset,java.lang.String)
CALLER: org.apache.http.entity.mime.AbstractMultipartForm#getTotalLength()
	CALLEE: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#getBodyParts()
	CALLEE: org.apache.http.entity.mime.HttpRFC6532Multipart#getBodyParts()
	CALLEE: org.apache.http.entity.mime.HttpStrictMultipart#getBodyParts()
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#doWriteTo(java.io.OutputStream,boolean)
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getBody()
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#getContentLength()
	CALLEE: org.apache.http.entity.mime.content.StringBody#getContentLength()
CALLER: org.apache.http.entity.mime.MultipartFormEntity#<init>(org.apache.http.entity.mime.AbstractMultipartForm,org.apache.http.entity.ContentType,long)
	CALLEE: org.apache.http.message.BasicHeader#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.ContentType#toString()
CALLER: org.sbolstandard.core2.SequenceOntology#getId(java.lang.String)
	CALLEE: org.oboparser.obo.OBOStanza#getId()
	CALLEE: org.oboparser.obo.OBOOntology#getStanzas()
	CALLEE: org.oboparser.obo.OBOStanza#getName()
	CALLEE: org.oboparser.obo.OBOTerm#getName()
CALLER: static org.sbolstandard.core2.SBOLReader#parseSequenceAnnotationV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.List,java.lang.String,int,java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLConversionException#<init>(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseDnaComponentV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseSequenceAnnotationV1(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core.datatree.NestedDocument,java.util.List,java.lang.String,int,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLReader.SBOLPair#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
CALLER: org.sbolstandard.core2.Component#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
CALLER: org.sbolstandard.core2.SequenceConstraint#<init>(java.net.URI,java.net.URI,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setRestriction(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
CALLER: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromVersion(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI)
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasDerivedFromCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Location#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.SBOLDocument#getByWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevels()
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
CALLER: org.sbolstandard.core2.ComponentDefinition#copy(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Component#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#deepCopy()
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addComponent(org.sbolstandard.core2.Component)
CALLER: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Collection#addMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkWasGeneratedByCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.Identified,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Identified#addAnnotation(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#addNamespace(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
CALLER: org.sbolstandard.core2.Collection#getMemberIdentities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Experiment#addExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Experiment#getExperimentalDataIdentities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.sbolstandard.core2.SBOLReader#parseMapsTo(org.sbolstandard.core.datatree.NestedDocument,boolean)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.RefinementType#convertToRefinementType(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#<init>(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Measure#<init>(java.net.URI,double,java.net.URI)
	CALLEE: org.sbolstandard.core2.Measure#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.Module#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Measured#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#setDefinition(java.net.URI)
CALLER: org.sbolstandard.core2.Module#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.Module#clearMapsTos()
	CALLEE: org.sbolstandard.core2.Module#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: org.sbolstandard.core2.Measured#clearMeasures()
	CALLEE: org.sbolstandard.core2.Measured#addMeasure(org.sbolstandard.core2.Measure)
CALLER: static org.sbolstandard.core2.SBOLReader#parseParticipation(org.sbolstandard.core.datatree.NestedDocument,java.util.Map)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseMeasure(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: org.sbolstandard.core2.Participation#<init>(java.net.URI,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core2.Interaction#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Measured#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Interaction#setTypes(java.util.Set)
CALLER: org.sbolstandard.core2.Interaction#setParticipations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Interaction#clearParticipations()
	CALLEE: org.sbolstandard.core2.Interaction#addParticipation(org.sbolstandard.core2.Participation)
CALLER: static org.sbolstandard.core2.AccessType#convertToAccessType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.DirectionType#convertToDirectionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.FunctionalComponent#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.ComponentInstance#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setDirection(org.sbolstandard.core2.DirectionType)
CALLER: org.sbolstandard.core2.FunctionalComponent#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#clearMapsTos()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.ModuleDefinition#clearFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#removeFunctionalComponent(org.sbolstandard.core2.FunctionalComponent)
CALLER: org.sbolstandard.core2.ModuleDefinition#addFunctionalComponentNoCheck(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
CALLER: org.sbolstandard.core2.ModuleDefinition#checkMapsTosLocalURIs()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
CALLER: org.sbolstandard.core2.ModuleDefinition#clearInteractions()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#removeInteraction(org.sbolstandard.core2.Interaction)
CALLER: org.sbolstandard.core2.ModuleDefinition#addInteraction(org.sbolstandard.core2.Interaction)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Interaction#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Participation#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Participation#getParticipantURI()
CALLER: org.sbolstandard.core2.ModuleDefinition#addModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.ModuleDefinition#clearModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#removeModule(org.sbolstandard.core2.Module)
CALLER: org.sbolstandard.core2.ModuleDefinition#addModule(org.sbolstandard.core2.Module)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
	CALLEE: org.sbolstandard.core2.Module#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#setModule(org.sbolstandard.core2.Module)
CALLER: org.sbolstandard.core2.ModuleDefinition#getModelIdentities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.sbolstandard.core2.SBOLReader#parseLocation(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseRange(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseCut(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core2.SBOLReader#parseGenericLocation(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
CALLER: org.sbolstandard.core2.ComponentInstance#setAccess(org.sbolstandard.core2.AccessType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: static org.sbolstandard.core2.RoleIntegrationType#convertToRoleIntegrationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Component#setRoleIntegration(org.sbolstandard.core2.RoleIntegrationType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Component#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#clearRoles()
	CALLEE: org.sbolstandard.core2.Component#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.Component#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#clearMapsTos()
	CALLEE: org.sbolstandard.core2.Component#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ComponentInstance#setDefinition(java.net.URI)
CALLER: org.sbolstandard.core2.Component#setLocations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#clearLocations()
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#setSourceLocations(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#clearSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setLocations(java.util.Set)
CALLER: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
CALLER: org.sbolstandard.core2.SequenceAnnotation#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#clearRoles()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#clearComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeComponent(org.sbolstandard.core2.Component)
CALLER: org.sbolstandard.core2.ComponentDefinition#addComponentNoCheck(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.Component#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.ComponentDefinition#checkMapsTosLocalURIs()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.ComponentDefinition#clearSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
CALLER: org.sbolstandard.core2.ComponentDefinition#clearSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
CALLER: org.sbolstandard.core2.ComponentDefinition#addSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkSequenceConstraint(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequenceIdentities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.sbolstandard.core2.OperatorType#convertToOperatorType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.VariableComponent#<init>(java.net.URI,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#setVariable(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#setOperator(org.sbolstandard.core2.OperatorType)
CALLER: org.sbolstandard.core2.VariableComponent#setVariants(java.util.Set)
	CALLEE: org.sbolstandard.core2.VariableComponent#clearVariants()
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariant(java.net.URI)
CALLER: org.sbolstandard.core2.VariableComponent#setVariantCollections(java.util.Set)
	CALLEE: org.sbolstandard.core2.VariableComponent#clearVariantCollections()
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantCollection(java.net.URI)
CALLER: org.sbolstandard.core2.VariableComponent#setVariantDerivations(java.util.Set)
	CALLEE: org.sbolstandard.core2.VariableComponent#clearVariantDerivations()
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantDerivation(java.net.URI)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#clearVariableComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#removeVariableComponent(org.sbolstandard.core2.VariableComponent)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#addVariableComponentNoCheck(org.sbolstandard.core2.VariableComponent)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#setCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#getTemplateIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#<clinit>()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#localDateParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#localTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateOptionalTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#localDateOptionalTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#monthElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfMonthElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfWeekElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfYearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#fractionElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearMonth()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearMonthDay()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearWeek()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearWeekDay()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinute()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecond()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondFraction()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateHour()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinute()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecond()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecondMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecondFraction()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#time()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTimeNoMillis()
CALLER: org.sbolstandard.core2.Association#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#setAgent(java.net.URI)
CALLER: org.sbolstandard.core2.Association#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Association#clearRoles()
	CALLEE: org.sbolstandard.core2.Association#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.Association#setPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Usage#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Usage#setEntity(java.net.URI)
CALLER: org.sbolstandard.core2.Usage#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Usage#clearRoles()
	CALLEE: org.sbolstandard.core2.Usage#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.Activity#clearAssociations()
	CALLEE: org.sbolstandard.core2.Activity#removeAssociation(org.sbolstandard.core2.Association)
CALLER: org.sbolstandard.core2.Activity#addAssociation(org.sbolstandard.core2.Association)
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Activity#clearUsages()
	CALLEE: org.sbolstandard.core2.Activity#removeUsages(org.sbolstandard.core2.Usage)
CALLER: org.sbolstandard.core2.Activity#addUsage(org.sbolstandard.core2.Usage)
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Activity#addWasInformedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Activity#getWasInformedByIdentities()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getActivity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.openscience.cdk.smiles.SmilesParser#parseSmiles(java.lang.String,boolean)
	CALLEE: org.joda.time.IllegalFieldValueException#getMessage()
	CALLEE: static uk.ac.ebi.beam.Graph#fromSmiles(java.lang.String)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#toAtomContainer(uk.ac.ebi.beam.Graph,boolean)
	CALLEE: org.openscience.cdk.smiles.SmilesParser#parseMolCXSMILES(java.lang.String,org.openscience.cdk.interfaces.IAtomContainer)
	CALLEE: org.openscience.cdk.exception.InvalidSmilesException#<init>(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Graph#getTitle()
	CALLEE: uk.ac.ebi.beam.Graph#kekule()
CALLER: static org.apache.http.conn.util.PublicSuffixMatcherLoader#load(java.io.InputStream)
	CALLEE: org.apache.http.conn.util.PublicSuffixListParser#<init>()
	CALLEE: org.apache.http.conn.util.PublicSuffixListParser#parseByType(java.io.Reader)
	CALLEE: org.apache.http.conn.util.PublicSuffixMatcher#<init>(java.util.Collection)
CALLER: static org.apache.commons.logging.LogFactory#getFactory()
	CALLEE: static org.apache.commons.logging.LogFactory#cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)
	CALLEE: org.joda.time.IllegalFieldValueException#getMessage()
	CALLEE: static org.apache.commons.logging.LogFactory#objectId(java.lang.Object)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getContextClassLoaderInternal()
	CALLEE: static org.apache.commons.logging.LogFactory#getCachedFactory(java.lang.ClassLoader)
	CALLEE: static org.apache.commons.logging.LogFactory#logHierarchy(java.lang.String,java.lang.ClassLoader)
	CALLEE: static org.apache.commons.logging.LogFactory#getConfigurationFile(java.lang.ClassLoader,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)
	CALLEE: static org.apache.commons.logging.LogFactory#trim(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getResourceAsStream(java.lang.ClassLoader,java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#getClassLoader(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#initDiagnostics()
	CALLEE: static org.apache.commons.logging.LogFactory#getSystemProperty(java.lang.String,java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#logClassLoaderEnvironment(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#getClassLoader(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#objectId(java.lang.Object)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#logHierarchy(java.lang.String,java.lang.ClassLoader)
CALLER: static org.apache.commons.logging.LogFactory#createFactoryStore()
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#handleThrowable(java.lang.Throwable)
CALLER: static org.apache.http.conn.util.DomainType#<clinit>()
	CALLEE: org.apache.http.conn.util.DomainType#<init>(java.lang.String,int)
CALLER: org.apache.http.conn.util.PublicSuffixMatcher#<init>(org.apache.http.conn.util.DomainType,java.util.Collection,java.util.Collection)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<clinit>()
	CALLEE: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>()
CALLER: org.apache.http.pool.AbstractConnPool#<init>(org.apache.http.pool.ConnFactory,int,int)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapTLD(org.sbolstandard.core.datatree.TopLevelDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapVPs(java.util.List)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
CALLER: org.apache.http.entity.mime.FormBodyPartBuilder#<init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)
	CALLEE: org.apache.http.entity.mime.FormBodyPartBuilder#<init>()
CALLER: static org.apache.http.entity.ContentType#create(java.lang.String,org.apache.http.NameValuePair[],boolean)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
	CALLEE: org.apache.http.entity.ContentType#<init>(java.lang.String,java.nio.charset.Charset,org.apache.http.NameValuePair[])
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#encode(java.nio.charset.Charset,java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(byte[],int,int)
CALLER: org.apache.http.entity.mime.AbstractMultipartForm#<init>(java.nio.charset.Charset,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.entity.mime.AbstractMultipartForm#doWriteTo(java.io.OutputStream,boolean)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#encode(java.nio.charset.Charset,java.lang.String)
	CALLEE: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#getBodyParts()
	CALLEE: org.apache.http.entity.mime.HttpRFC6532Multipart#getBodyParts()
	CALLEE: org.apache.http.entity.mime.HttpStrictMultipart#getBodyParts()
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.HttpRFC6532Multipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.HttpStrictMultipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getBody()
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.content.StringBody#writeTo(java.io.OutputStream)
CALLER: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Range#setEnd(int)
	CALLEE: org.sbolstandard.core2.Range#setStart(int)
CALLER: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentInstance#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#setAccess(org.sbolstandard.core2.AccessType)
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Measured#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setDefinition(java.net.URI)
CALLER: org.sbolstandard.core2.SequenceConstraint#setRestriction(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToRestrictionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
CALLER: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToRestrictionType(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
CALLER: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractPersistentId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.Version#isFirstVersionNewer(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: static org.sbolstandard.core2.URIcompliance#keyExistsInAnyMap(java.net.URI,java.util.Map[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractVersion(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#isChildURIformCompliant(java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#deepCopy()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#<init>(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.Identified#addNamespace(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespace(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getNamespacePrefix(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#addNamespace(java.net.URI,java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Identified#addNamespace(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedQName()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
CALLER: static org.sbolstandard.core2.RefinementType#convertToRefinementType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.MapsTo#<init>(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#setRefinement(org.sbolstandard.core2.RefinementType)
	CALLEE: org.sbolstandard.core2.MapsTo#setLocal(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#setRemote(java.net.URI)
CALLER: org.sbolstandard.core2.Measure#<init>(java.net.URI,double,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Measure#setNumericalValue(java.lang.Double)
	CALLEE: org.sbolstandard.core2.Measure#setUnit(java.net.URI)
CALLER: org.sbolstandard.core2.Measure#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core2.Measure#clearTypes()
	CALLEE: org.sbolstandard.core2.Measure#addType(java.net.URI)
CALLER: org.sbolstandard.core2.Measured#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.Module#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ModuleDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Module#clearMapsTos()
	CALLEE: org.sbolstandard.core2.Module#removeMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.Module#addMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkModuleDefinitionMapsTos(org.sbolstandard.core2.ModuleDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
	CALLEE: org.sbolstandard.core2.MapsTo#setModule(org.sbolstandard.core2.Module)
CALLER: org.sbolstandard.core2.Measured#clearMeasures()
	CALLEE: org.sbolstandard.core2.Measured#removeMeasure(org.sbolstandard.core2.Measure)
CALLER: org.sbolstandard.core2.Measured#addMeasure(org.sbolstandard.core2.Measure)
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
CALLER: org.sbolstandard.core2.Participation#<init>(java.net.URI,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Measured#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Participation#setParticipant(java.net.URI)
	CALLEE: org.sbolstandard.core2.Participation#setRoles(java.util.Set)
CALLER: org.sbolstandard.core2.Interaction#setTypes(java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Interaction#clearTypes()
	CALLEE: org.sbolstandard.core2.Interaction#addType(java.net.URI)
CALLER: org.sbolstandard.core2.Interaction#clearParticipations()
	CALLEE: org.sbolstandard.core2.Interaction#removeParticipation(org.sbolstandard.core2.Participation)
CALLER: org.sbolstandard.core2.Interaction#addParticipation(org.sbolstandard.core2.Participation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Participation#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.Participation#getParticipantURI()
CALLER: org.sbolstandard.core2.FunctionalComponent#setDirection(org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.FunctionalComponent#clearMapsTos()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#removeMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.FunctionalComponent#addMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: org.sbolstandard.core2.ModuleDefinition#removeFunctionalComponent(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinitions()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.Participation#getParticipantURI()
CALLER: org.sbolstandard.core2.ModuleDefinition#removeInteraction(org.sbolstandard.core2.Interaction)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.ModuleDefinition#removeModule(org.sbolstandard.core2.Module)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: static org.sbolstandard.core2.SBOLReader#parseRange(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.OrientationType#convertToOrientationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseCut(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.OrientationType#convertToOrientationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static org.sbolstandard.core2.SBOLReader#parseGenericLocation(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setWasDerivedFroms(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setWasGeneratedBys(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: static org.sbolstandard.core2.OrientationType#convertToOrientationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
CALLER: org.sbolstandard.core2.Component#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Component#isSetRoleIntegration()
CALLER: org.sbolstandard.core2.Component#clearMapsTos()
	CALLEE: org.sbolstandard.core2.Component#removeMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.Component#addMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionMapsTos(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: org.sbolstandard.core2.ComponentInstance#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Component#clearLocations()
	CALLEE: org.sbolstandard.core2.Component#removeLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Location#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.Component#clearSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#removeSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Location#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.SequenceAnnotation#setLocations(java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#clearLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
CALLER: org.sbolstandard.core2.ComponentDefinition#removeComponent(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinitions()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
CALLER: org.sbolstandard.core2.ComponentDefinition#removeSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.ComponentDefinition#removeSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: static org.sbolstandard.core2.SBOLValidate#checkSequenceConstraint(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkSequenceConstraintDifferentFrom(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#compareTo(org.sbolstandard.core2.SequenceAnnotation)
CALLER: org.sbolstandard.core2.VariableComponent#setVariable(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
CALLER: org.sbolstandard.core2.VariableComponent#setOperator(org.sbolstandard.core2.OperatorType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#isSetStrategy()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getStrategy()
CALLER: org.sbolstandard.core2.VariableComponent#addVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.VariableComponent#addVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
CALLER: org.sbolstandard.core2.VariableComponent#addVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#removeVariableComponent(org.sbolstandard.core2.VariableComponent)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendYear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#monthElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYear(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfMonthElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfMonth(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendWeekyear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendWeekOfWeekyear(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfWeekElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeek(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfYearElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfYear(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendHourOfDay(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMinuteOfHour(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendSecondOfMinute(int)
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#fractionElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,boolean,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#yearMonth()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#monthElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#yearMonthDay()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#monthElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfMonthElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearWeek()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearWeekDay()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfWeekElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinute()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecond()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondFraction()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#fractionElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateHour()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: static org.joda.time.format.ISODateTimeFormat#hour()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinute()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinute()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecond()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecond()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecondMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateHourMinuteSecondFraction()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondFraction()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#time()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecondFraction()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#timeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourMinuteSecond()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#tTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#time()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#tTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTime()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTimeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTime()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#weekDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#weekDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTimeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: static org.joda.time.format.ISODateTimeFormat#weekDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfYearElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#tTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#ordinalDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendYear(int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfMonth()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicTime()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,boolean,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfHour()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfMinute()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicTimeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,boolean,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfHour()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfMinute()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTime()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTimeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTime()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTimeNoMillis()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendYear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicOrdinalDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendWeekyear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: static org.joda.time.DateTimeFieldType#weekOfWeekyear()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDateTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTime()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDateTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicTTimeNoMillis()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#basicWeekDate()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#yearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#monthElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfMonthElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekyearElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#weekElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfWeekElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dayOfYearElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#hourElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#minuteElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#secondElement()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfHour(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfMinute(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#localDateParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#withZoneUTC()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#timeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#localTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#literalTElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatter#withZoneUTC()
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateOptionalTimeParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#dateOptionalTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#offsetElement()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser()
CALLER: static org.joda.time.format.ISODateTimeFormat.Constants#localDateOptionalTimeParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#dateElementParser()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#timeElementParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#withZoneUTC()
CALLER: org.sbolstandard.core2.Association#setAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.Usage#setEntity(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Activity#removeAssociation(org.sbolstandard.core2.Association)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.Activity#removeUsages(org.sbolstandard.core2.Usage)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: static uk.ac.ebi.beam.Graph#fromSmiles(java.lang.String)
	CALLEE: static uk.ac.ebi.beam.Parser#parse(java.lang.String)
CALLER: org.openscience.cdk.smiles.BeamToCDK#toAtomContainer(uk.ac.ebi.beam.Graph,boolean)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#emptyContainer()
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#toCDKAtom(uk.ac.ebi.beam.Atom,int)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#toCDKBond(uk.ac.ebi.beam.Edge,org.openscience.cdk.interfaces.IAtom[],boolean)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#newTetrahedral(int,int[],org.openscience.cdk.interfaces.IAtom[],uk.ac.ebi.beam.Configuration)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#newExtendedTetrahedral(int,uk.ac.ebi.beam.Graph,org.openscience.cdk.interfaces.IAtom[])
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#addDoubleBondStereochemistry(uk.ac.ebi.beam.Graph,org.openscience.cdk.interfaces.IAtomContainer)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Graph#implHCount(int)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Graph#getTitle()
	CALLEE: uk.ac.ebi.beam.Graph#neighbors(int)
	CALLEE: uk.ac.ebi.beam.Graph#configurationOf(int)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.Graph#edges()
	CALLEE: uk.ac.ebi.beam.Graph#size()
CALLER: org.openscience.cdk.smiles.SmilesParser#parseMolCXSMILES(java.lang.String,org.openscience.cdk.interfaces.IAtomContainer)
	CALLEE: org.openscience.cdk.smiles.CxSmilesState#<init>()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processCx(java.lang.String,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
	CALLEE: org.openscience.cdk.smiles.SmilesParser#assignCxSmilesInfo(org.openscience.cdk.interfaces.IChemObjectBuilder,org.openscience.cdk.interfaces.IChemObject,java.util.List,java.util.Map,org.openscience.cdk.smiles.CxSmilesState)
CALLER: org.openscience.cdk.exception.InvalidSmilesException#<init>(java.lang.String)
	CALLEE: org.openscience.cdk.exception.CDKException#<init>(java.lang.String)
CALLER: org.apache.http.conn.util.PublicSuffixListParser#parseByType(java.io.Reader)
	CALLEE: org.apache.http.conn.util.PublicSuffixList#<init>(org.apache.http.conn.util.DomainType,java.util.List,java.util.List)
CALLER: org.apache.http.conn.util.PublicSuffixMatcher#<init>(java.util.Collection)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.conn.util.PublicSuffixList#getExceptions()
	CALLEE: org.apache.http.conn.util.PublicSuffixList#getRules()
	CALLEE: org.apache.http.conn.util.PublicSuffixList#getType()
CALLER: static org.apache.commons.logging.LogFactory#getContextClassLoaderInternal()
	CALLEE: org.apache.commons.logging.LogFactory.1#<init>()
CALLER: static org.apache.commons.logging.LogFactory#logHierarchy(java.lang.String,java.lang.ClassLoader)
	CALLEE: static org.apache.commons.logging.LogFactory#objectId(java.lang.Object)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#getConfigurationFile(java.lang.ClassLoader,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getProperties(java.net.URL)
CALLER: static org.apache.commons.logging.LogFactory#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: org.apache.commons.logging.LogFactory.6#<init>(java.lang.String,java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)
	CALLEE: static org.apache.commons.logging.LogFactory#objectId(java.lang.Object)
	CALLEE: static org.apache.commons.logging.LogFactory#isDiagnosticsEnabled()
	CALLEE: static org.apache.commons.logging.LogFactory#logDiagnostic(java.lang.String)
	CALLEE: org.apache.commons.logging.LogFactory.2#<init>(java.lang.String,java.lang.ClassLoader)
CALLER: static org.apache.commons.logging.LogFactory#getResourceAsStream(java.lang.ClassLoader,java.lang.String)
	CALLEE: org.apache.commons.logging.LogFactory.3#<init>(java.lang.ClassLoader,java.lang.String)
CALLER: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>()
	CALLEE: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>(org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
CALLER: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.String)
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapVPs(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapL(java.util.List,org.sbolstandard.core.datatree.Func)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.2#<init>(org.sbolstandard.core.datatree.NameTransformer)
CALLER: org.apache.http.entity.mime.FormBodyPartBuilder#<init>()
	CALLEE: org.apache.http.entity.mime.Header#<init>()
CALLER: org.apache.http.util.ByteArrayBuffer#<init>(int)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
CALLER: org.apache.http.util.ByteArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#expand(int)
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
	CALLEE: org.apache.http.util.ByteArrayBuffer#buffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[],int,int)
CALLER: org.apache.http.entity.mime.HttpBrowserCompatibleMultipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.Header#getField(java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#getFilename()
	CALLEE: org.apache.http.entity.mime.content.StringBody#getFilename()
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getBody()
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getHeader()
CALLER: org.apache.http.entity.mime.HttpRFC6532Multipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getHeader()
	CALLEE: org.apache.http.entity.mime.Header#iterator()
CALLER: org.apache.http.entity.mime.HttpStrictMultipart#formatMultipartHeader(org.apache.http.entity.mime.FormBodyPart,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeField(org.apache.http.entity.mime.MinimalField,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.FormBodyPart#getHeader()
	CALLEE: org.apache.http.entity.mime.Header#iterator()
CALLER: org.sbolstandard.core2.Location#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
CALLER: org.sbolstandard.core2.Range#setEnd(int)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Range#setStart(int)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.FunctionalComponent#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ComponentInstance#setDefinition(java.net.URI)
CALLER: static org.sbolstandard.core2.URIcompliance#isChildURIformCompliant(java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractPersistentId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractVersion(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#<init>(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.Component#deepCopy()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addType(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequences(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.TopLevel#<init>(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addComponent(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#deepCopy()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#deepCopy()
CALLER: org.sbolstandard.core2.MapsTo#setLocal(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.MapsTo#setRemote(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
CALLER: org.sbolstandard.core2.Measure#setNumericalValue(java.lang.Double)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Measure#setUnit(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Module#removeMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.Measured#removeMeasure(org.sbolstandard.core2.Measure)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.Participation#setParticipant(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
CALLER: org.sbolstandard.core2.Participation#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Participation#clearRoles()
	CALLEE: org.sbolstandard.core2.Participation#addRole(java.net.URI)
CALLER: org.sbolstandard.core2.Interaction#removeParticipation(org.sbolstandard.core2.Participation)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.FunctionalComponent#removeMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: static org.sbolstandard.core2.OrientationType#convertToOrientationType(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
CALLER: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
	CALLEE: org.sbolstandard.core2.Location#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Cut#setAt(int)
CALLER: org.sbolstandard.core2.Component#removeMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.Component#removeLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.Component#removeSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.sbolstandard.core2.SequenceAnnotation#clearLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#removeLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Location#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendYear(int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#year()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#<init>(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendWeekyear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#weekyear()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#<init>(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#<init>(java.lang.String)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendHourOfDay(int)
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,boolean,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#<init>(java.lang.String,java.lang.String,boolean,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeFormatter)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.DateTimeFormatter#getParser0()
	CALLEE: org.joda.time.format.DateTimeFormatter#getPrinter0()
CALLER: static org.joda.time.format.ISODateTimeFormat#date()
	CALLEE: static org.joda.time.format.ISODateTimeFormat#yearMonthDay()
CALLER: static org.joda.time.format.ISODateTimeFormat#hour()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#access$3900()
CALLER: static org.joda.time.format.ISODateTimeFormat#weekDate()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#access$2000()
CALLER: static org.joda.time.DateTimeFieldType#<clinit>()
	CALLEE: static org.joda.time.DurationFieldType#eras()
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#<init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)
	CALLEE: static org.joda.time.DurationFieldType#years()
	CALLEE: static org.joda.time.DurationFieldType#centuries()
	CALLEE: static org.joda.time.DurationFieldType#days()
	CALLEE: static org.joda.time.DurationFieldType#months()
	CALLEE: static org.joda.time.DurationFieldType#weekyears()
	CALLEE: static org.joda.time.DurationFieldType#weeks()
	CALLEE: static org.joda.time.DurationFieldType#halfdays()
	CALLEE: static org.joda.time.DurationFieldType#hours()
	CALLEE: static org.joda.time.DurationFieldType#minutes()
	CALLEE: static org.joda.time.DurationFieldType#seconds()
	CALLEE: static org.joda.time.DurationFieldType#millis()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendFixedDecimal(org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#checkPrinter(org.joda.time.format.DateTimePrinter)
	CALLEE: static org.joda.time.format.DateTimePrinterInternalPrinter#of(org.joda.time.format.DateTimePrinter)
	CALLEE: static org.joda.time.format.DateTimeParserInternalParser#of(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#<init>(org.joda.time.format.InternalParser[])
CALLER: org.joda.time.format.DateTimeFormatterBuilder#append(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: static org.joda.time.format.DateTimeParserInternalParser#of(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#checkParser(org.joda.time.format.DateTimeParser)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendOptional(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: static org.joda.time.format.DateTimeParserInternalParser#of(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#<init>(org.joda.time.format.InternalParser[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#checkParser(org.joda.time.format.DateTimeParser)
CALLER: static uk.ac.ebi.beam.Parser#parse(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Parser#<init>(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Parser#molecule()
CALLER: org.openscience.cdk.smiles.BeamToCDK#emptyContainer()
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
CALLER: org.openscience.cdk.smiles.BeamToCDK#toCDKAtom(uk.ac.ebi.beam.Atom,int)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#newCDKAtom(uk.ac.ebi.beam.Atom)
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#atomClass()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#atomClass()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#atomClass()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#aromatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#aromatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#aromatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#isotope()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#isotope()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#isotope()
CALLER: org.openscience.cdk.smiles.BeamToCDK#toCDKBond(uk.ac.ebi.beam.Edge,org.openscience.cdk.interfaces.IAtom[],boolean)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#toCDKBondOrder(uk.ac.ebi.beam.Edge)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#createBond(org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IBond.Order)
	CALLEE: uk.ac.ebi.beam.Edge#either()
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
CALLER: static uk.ac.ebi.beam.Configuration.Type#<clinit>()
	CALLEE: uk.ac.ebi.beam.Configuration.Type#<init>(java.lang.String,int)
CALLER: org.openscience.cdk.smiles.BeamToCDK#newTetrahedral(int,int[],org.openscience.cdk.interfaces.IAtom[],uk.ac.ebi.beam.Configuration)
	CALLEE: static org.openscience.cdk.smiles.BeamToCDK#insert(int,int[])
	CALLEE: org.openscience.cdk.stereo.TetrahedralChirality#<init>(org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IAtom[],org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo)
CALLER: org.openscience.cdk.smiles.BeamToCDK#newExtendedTetrahedral(int,uk.ac.ebi.beam.Graph,org.openscience.cdk.interfaces.IAtom[])
	CALLEE: org.openscience.cdk.stereo.ExtendedTetrahedral#<init>(org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IAtom[],org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo)
	CALLEE: uk.ac.ebi.beam.Graph#edges(int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Bond#order()
	CALLEE: uk.ac.ebi.beam.Configuration#shorthand()
	CALLEE: uk.ac.ebi.beam.Graph#neighbors(int)
	CALLEE: uk.ac.ebi.beam.Graph#configurationOf(int)
CALLER: org.openscience.cdk.smiles.BeamToCDK#addDoubleBondStereochemistry(uk.ac.ebi.beam.Graph,org.openscience.cdk.interfaces.IAtomContainer)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#findDirectionalEdge(uk.ac.ebi.beam.Graph,int)
	CALLEE: org.openscience.cdk.stereo.DoubleBondStereochemistry#<init>(org.openscience.cdk.interfaces.IBond,org.openscience.cdk.interfaces.IBond[],org.openscience.cdk.interfaces.IDoubleBondStereochemistry.Conformation)
	CALLEE: uk.ac.ebi.beam.Edge#either()
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Edge#bond(int)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Configuration#shorthand()
	CALLEE: uk.ac.ebi.beam.Graph#neighbors(int)
	CALLEE: uk.ac.ebi.beam.Graph#configurationOf(int)
	CALLEE: uk.ac.ebi.beam.Graph#edges()
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processCx(java.lang.String,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#<init>(java.lang.String)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(java.lang.String)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processAtomLabels(org.openscience.cdk.smiles.CxSmilesParser.CharIter,java.util.Map)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processCoords(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#skipIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processFragmentGrouping(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processPolymerSgroups(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processDataSgroups(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processPositionalVariation(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processRadicals(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$000(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
CALLER: static com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: static com.google.common.collect.Maps#<clinit>()
	CALLEE: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
CALLER: org.openscience.cdk.smiles.SmilesParser#assignCxSmilesInfo(org.openscience.cdk.interfaces.IChemObjectBuilder,org.openscience.cdk.interfaces.IChemObject,java.util.List,java.util.Map,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#hasNext()
	CALLEE: com.google.common.collect.ImmutableEntry#getValue()
	CALLEE: com.google.common.collect.ImmutableEntry#getKey()
	CALLEE: org.openscience.cdk.smiles.SmilesParser#parseIntSafe(java.lang.String)
	CALLEE: static org.openscience.cdk.tools.manipulator.AtomContainerManipulator#replaceAtomByAtom(org.openscience.cdk.interfaces.IAtomContainer,org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IAtom)
	CALLEE: javax.vecmath.Point3d#<init>(double[])
	CALLEE: javax.vecmath.Point2d#<init>(double[])
	CALLEE: static com.google.common.collect.HashMultimap#create()
	CALLEE: org.openscience.cdk.sgroup.Sgroup#<init>()
	CALLEE: org.openscience.cdk.sgroup.Sgroup#setType(org.openscience.cdk.sgroup.SgroupType)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#addAtom(org.openscience.cdk.interfaces.IAtom)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#addBond(org.openscience.cdk.interfaces.IBond)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#setSubscript(java.lang.String)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#putValue(org.openscience.cdk.sgroup.SgroupKey,java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.HashMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.Maps.ViewCachingAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
CALLER: org.apache.http.conn.util.PublicSuffixList#<init>(org.apache.http.conn.util.DomainType,java.util.List,java.util.List)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: org.apache.commons.logging.LogFactory.4#<init>(java.lang.ClassLoader,java.lang.String)
CALLER: static org.apache.commons.logging.LogFactory#getProperties(java.net.URL)
	CALLEE: org.apache.commons.logging.LogFactory.5#<init>(java.net.URL)
CALLER: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>(org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>(org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy)
CALLER: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#QName(java.lang.String,java.lang.String)
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.MinimalField#getName()
	CALLEE: org.apache.http.entity.mime.MinimalField#getBody()
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#writeField(org.apache.http.entity.mime.MinimalField,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(java.lang.String,java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.MinimalField#getName()
	CALLEE: org.apache.http.entity.mime.MinimalField#getBody()
CALLER: org.sbolstandard.core2.TopLevel#<init>(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
CALLER: org.sbolstandard.core2.ComponentDefinition#addComponent(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkComponentDefinitionCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.ComponentDefinition,java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.Component#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentDefinition(org.sbolstandard.core2.ComponentDefinition)
CALLER: org.sbolstandard.core2.Cut#setAt(int)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
CALLER: org.sbolstandard.core2.SequenceAnnotation#removeLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean,int)
CALLER: static org.joda.time.format.ISODateTimeFormat#yearMonthDay()
	CALLEE: static org.joda.time.format.ISODateTimeFormat.Constants#access$3700()
CALLER: static org.joda.time.DurationFieldType#<clinit>()
	CALLEE: org.joda.time.DurationFieldType.StandardDurationFieldType#<init>(java.lang.String,byte)
CALLER: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#<init>(java.lang.String,byte,org.joda.time.DurationFieldType,org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.DateTimeFieldType#<init>(java.lang.String)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean,int)
CALLER: static org.joda.time.format.DateTimePrinterInternalPrinter#of(org.joda.time.format.DateTimePrinter)
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#<init>(org.joda.time.format.DateTimePrinter)
CALLER: static org.joda.time.format.DateTimeParserInternalParser#of(org.joda.time.format.DateTimeParser)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#<init>(org.joda.time.format.DateTimeParser)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#<init>(org.joda.time.format.InternalParser[])
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#estimateParsedLength()
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#estimateParsedLength()
CALLER: uk.ac.ebi.beam.Parser#<init>(java.lang.String)
	CALLEE: static uk.ac.ebi.beam.CharBuffer#fromString(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Parser#<init>(uk.ac.ebi.beam.CharBuffer,boolean)
CALLER: org.openscience.cdk.smiles.BeamToCDK#newCDKAtom(uk.ac.ebi.beam.Atom)
	CALLEE: org.openscience.cdk.smiles.BeamToCDK#createAtom(uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.Element#symbol()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#label()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#label()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#label()
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
CALLER: org.openscience.cdk.smiles.BeamToCDK#toCDKBondOrder(uk.ac.ebi.beam.Edge)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
CALLER: org.openscience.cdk.smiles.BeamToCDK#createBond(org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IAtom,org.openscience.cdk.interfaces.IBond.Order)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
CALLER: static org.openscience.cdk.smiles.BeamToCDK.1#<clinit>()
	CALLEE: static uk.ac.ebi.beam.Bond#values()
CALLER: static org.openscience.cdk.interfaces.IBond.Order#<clinit>()
	CALLEE: org.openscience.cdk.interfaces.IBond.Order#<init>(java.lang.String,int,java.lang.Integer)
CALLER: static uk.ac.ebi.beam.Configuration#<clinit>()
	CALLEE: uk.ac.ebi.beam.Configuration#<init>(java.lang.String,int,uk.ac.ebi.beam.Configuration.Type,java.lang.String)
	CALLEE: uk.ac.ebi.beam.Configuration#<init>(java.lang.String,int,uk.ac.ebi.beam.Configuration.Type,java.lang.String,uk.ac.ebi.beam.Configuration)
	CALLEE: static uk.ac.ebi.beam.Configuration#values()
CALLER: static org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo#<clinit>()
	CALLEE: org.openscience.cdk.interfaces.ITetrahedralChirality.Stereo#<init>(java.lang.String,int)
CALLER: static uk.ac.ebi.beam.Bond#<clinit>()
	CALLEE: uk.ac.ebi.beam.Bond#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: uk.ac.ebi.beam.Bond.1#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: uk.ac.ebi.beam.Bond.2#<init>(java.lang.String,int,java.lang.String,int)
CALLER: org.openscience.cdk.smiles.BeamToCDK#findDirectionalEdge(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.Graph#edges(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
CALLER: static org.openscience.cdk.interfaces.IDoubleBondStereochemistry.Conformation#<clinit>()
	CALLEE: org.openscience.cdk.interfaces.IDoubleBondStereochemistry.Conformation#<init>(java.lang.String,int)
CALLER: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processAtomLabels(org.openscience.cdk.smiles.CxSmilesParser.CharIter,java.util.Map)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$000(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$010(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIfDigit()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$002(org.openscience.cdk.smiles.CxSmilesParser.CharIter,int)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#substr(int,int)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#unescape(java.lang.String)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processCoords(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#readDouble(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#skipIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processFragmentGrouping(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processPolymerSgroups(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$000(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#substr(int,int)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#unescape(java.lang.String)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isSgroupDelim(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesState.PolymerSgroup#<init>(java.lang.String,java.util.List,java.lang.String,java.lang.String)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processDataSgroups(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser.CharIter#access$000(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#substr(int,int)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#unescape(java.lang.String)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isSgroupDelim(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesState.DataSgroup#<init>(java.util.List,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processPositionalVariation(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processUnsignedInt(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processRadicals(org.openscience.cdk.smiles.CxSmilesParser.CharIter,org.openscience.cdk.smiles.CxSmilesState)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
CALLER: static com.google.common.collect.Maps#capacity(int)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
CALLER: static com.google.common.collect.Collections2#<clinit>()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#useForNull(java.lang.String)
CALLER: javax.vecmath.Point3d#<init>(double[])
	CALLEE: javax.vecmath.Tuple3d#<init>(double[])
CALLER: javax.vecmath.Point2d#<init>(double[])
	CALLEE: javax.vecmath.Tuple2d#<init>(double[])
CALLER: static org.openscience.cdk.smiles.SmilesParser.1#<clinit>()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesState.Radical#values()
CALLER: static com.google.common.collect.HashMultimap#create()
	CALLEE: com.google.common.collect.HashMultimap#<init>()
CALLER: org.openscience.cdk.sgroup.Sgroup#<init>()
	CALLEE: org.openscience.cdk.sgroup.Sgroup#setType(org.openscience.cdk.sgroup.SgroupType)
CALLER: static org.openscience.cdk.sgroup.SgroupType#<clinit>()
	CALLEE: org.openscience.cdk.sgroup.SgroupType#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.openscience.cdk.sgroup.SgroupType#values()
CALLER: org.openscience.cdk.sgroup.Sgroup#setType(org.openscience.cdk.sgroup.SgroupType)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#putValue(org.openscience.cdk.sgroup.SgroupKey,java.lang.Object)
CALLER: org.openscience.cdk.sgroup.Sgroup#setSubscript(java.lang.String)
	CALLEE: org.openscience.cdk.sgroup.Sgroup#putValue(org.openscience.cdk.sgroup.SgroupKey,java.lang.Object)
CALLER: static org.openscience.cdk.sgroup.SgroupKey#<clinit>()
	CALLEE: org.openscience.cdk.sgroup.SgroupKey#<init>(java.lang.String,int)
CALLER: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#<init>(org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.String)
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#encode(java.nio.charset.Charset,java.lang.String)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
CALLER: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(java.lang.String,java.io.OutputStream)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#encode(java.nio.charset.Charset,java.lang.String)
	CALLEE: static org.apache.http.entity.mime.AbstractMultipartForm#writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)
CALLER: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core2.Annotation#copy()
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Identified#hasAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#<init>(org.joda.time.DateTimeFieldType,int,boolean)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#<init>(org.joda.time.DateTimeFieldType,int,boolean,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#<init>(org.joda.time.DateTimeFieldType,int,boolean)
CALLER: org.joda.time.DurationFieldType.StandardDurationFieldType#<init>(java.lang.String,byte)
	CALLEE: org.joda.time.DurationFieldType#<init>(java.lang.String)
CALLER: static uk.ac.ebi.beam.CharBuffer#fromString(java.lang.String)
	CALLEE: uk.ac.ebi.beam.CharBuffer#<init>(char[])
CALLER: uk.ac.ebi.beam.Parser#<init>(uk.ac.ebi.beam.CharBuffer,boolean)
	CALLEE: uk.ac.ebi.beam.IntStack#<init>(int)
	CALLEE: uk.ac.ebi.beam.Graph#<init>(int)
	CALLEE: uk.ac.ebi.beam.Parser#readSmiles(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.IntStack#size()
	CALLEE: uk.ac.ebi.beam.Graph#getFlags(int)
	CALLEE: uk.ac.ebi.beam.Parser#createTopologies(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#length()
CALLER: static uk.ac.ebi.beam.Element#<clinit>()
	CALLEE: uk.ac.ebi.beam.Element#<init>(java.lang.String,int,int,java.lang.String,int[])
	CALLEE: uk.ac.ebi.beam.Element#<init>(java.lang.String,int,int,java.lang.String)
	CALLEE: static uk.ac.ebi.beam.Element#values()
	CALLEE: static uk.ac.ebi.beam.Element#loadDefaults()
CALLER: org.openscience.cdk.smiles.BeamToCDK#createAtom(uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.Element#symbol()
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
	CALLEE: uk.ac.ebi.beam.Element#atomicNumber()
CALLER: uk.ac.ebi.beam.Bond.1#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: uk.ac.ebi.beam.Bond#<init>(java.lang.String,int,java.lang.String,int,uk.ac.ebi.beam.Bond.1)
CALLER: uk.ac.ebi.beam.Bond.2#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: uk.ac.ebi.beam.Bond#<init>(java.lang.String,int,java.lang.String,int,uk.ac.ebi.beam.Bond.1)
CALLER: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIfDigit()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#access$100(char)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#unescape(java.lang.String)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#readDouble(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processUnsignedInt(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processIntList(org.openscience.cdk.smiles.CxSmilesParser.CharIter,char,java.util.List)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#nextIf(char)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#processUnsignedInt(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#processUnsignedInt(org.openscience.cdk.smiles.CxSmilesParser.CharIter)
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#hasNext()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#next()
	CALLEE: org.openscience.cdk.smiles.CxSmilesParser.CharIter#curr()
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
CALLER: static org.openscience.cdk.smiles.CxSmilesState.Radical#<clinit>()
	CALLEE: org.openscience.cdk.smiles.CxSmilesState.Radical#<init>(java.lang.String,int)
CALLER: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: com.google.common.collect.HashMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
CALLER: static org.apache.commons.logging.LogFactory#getLog(java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getFactory()
CALLER: static org.apache.http.impl.io.DefaultHttpRequestWriterFactory#<clinit>()
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriterFactory#<init>()
CALLER: static org.apache.http.impl.conn.DefaultHttpResponseParserFactory#<clinit>()
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParserFactory#<init>()
CALLER: static org.apache.http.impl.entity.LaxContentLengthStrategy#<clinit>()
	CALLEE: org.apache.http.impl.entity.LaxContentLengthStrategy#<init>()
CALLER: static org.apache.http.impl.entity.StrictContentLengthStrategy#<clinit>()
	CALLEE: org.apache.http.impl.entity.StrictContentLengthStrategy#<init>()
CALLER: uk.ac.ebi.beam.Parser#readSmiles(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.IntStack#size()
	CALLEE: uk.ac.ebi.beam.Parser#addAtom(uk.ac.ebi.beam.Atom,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.Graph#addFlags(int)
	CALLEE: uk.ac.ebi.beam.Parser#readBracketAtom(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.Parser#ring(int,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.IntStack#empty()
	CALLEE: uk.ac.ebi.beam.IntStack#peek()
	CALLEE: uk.ac.ebi.beam.IntStack#push(int)
	CALLEE: uk.ac.ebi.beam.IntStack#pop()
	CALLEE: uk.ac.ebi.beam.Graph#setTitle(java.lang.String)
	CALLEE: uk.ac.ebi.beam.CharBuffer#get()
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber(int)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
CALLER: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer,int)
CALLER: uk.ac.ebi.beam.Parser#createTopologies(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Topology#toExplicit(uk.ac.ebi.beam.Graph,int,uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Parser#addTopology(int,uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond(int)
CALLER: uk.ac.ebi.beam.Element#<init>(java.lang.String,int,int,java.lang.String,int[])
	CALLEE: static uk.ac.ebi.beam.Element.ElementCheck#access$000()
CALLER: uk.ac.ebi.beam.Element#<init>(java.lang.String,int,int,java.lang.String)
	CALLEE: uk.ac.ebi.beam.Element#<init>(java.lang.String,int,int,java.lang.String,int[])
CALLER: static uk.ac.ebi.beam.Element#loadDefaults()
	CALLEE: static uk.ac.ebi.beam.Element#load(java.lang.String)
CALLER: uk.ac.ebi.beam.Bond#<init>(java.lang.String,int,java.lang.String,int,uk.ac.ebi.beam.Bond.1)
	CALLEE: uk.ac.ebi.beam.Bond#<init>(java.lang.String,int,java.lang.String,int)
CALLER: static org.openscience.cdk.smiles.CxSmilesParser#access$100(char)
	CALLEE: static org.openscience.cdk.smiles.CxSmilesParser#isDigit(char)
CALLER: com.google.common.base.Joiner#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: org.apache.http.impl.io.DefaultHttpRequestWriterFactory#<init>()
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriterFactory#<init>(org.apache.http.message.LineFormatter)
CALLER: org.apache.http.impl.conn.DefaultHttpResponseParserFactory#<init>()
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParserFactory#<init>(org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory)
CALLER: org.apache.http.impl.entity.LaxContentLengthStrategy#<init>()
	CALLEE: org.apache.http.impl.entity.LaxContentLengthStrategy#<init>(int)
CALLER: org.apache.http.impl.entity.StrictContentLengthStrategy#<init>()
	CALLEE: org.apache.http.impl.entity.StrictContentLengthStrategy#<init>(int)
CALLER: static uk.ac.ebi.beam.AtomImpl.AliphaticSubset#<clinit>()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#<init>(java.lang.String,int,uk.ac.ebi.beam.Element)
	CALLEE: static uk.ac.ebi.beam.AtomImpl.AliphaticSubset#values()
CALLER: uk.ac.ebi.beam.Parser#addAtom(uk.ac.ebi.beam.Atom,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.Graph#addFlags(int)
	CALLEE: uk.ac.ebi.beam.IntStack#empty()
	CALLEE: uk.ac.ebi.beam.IntStack#push(int)
	CALLEE: uk.ac.ebi.beam.IntStack#pop()
	CALLEE: uk.ac.ebi.beam.Graph#addAtom(uk.ac.ebi.beam.Atom)
	CALLEE: uk.ac.ebi.beam.Bond#directional()
	CALLEE: uk.ac.ebi.beam.Bond.1#directional()
	CALLEE: uk.ac.ebi.beam.Bond.2#directional()
	CALLEE: uk.ac.ebi.beam.Edge#<init>(int,int,uk.ac.ebi.beam.Bond)
	CALLEE: uk.ac.ebi.beam.Graph#addEdge(uk.ac.ebi.beam.Edge)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#add(int)
CALLER: static uk.ac.ebi.beam.AtomImpl.AromaticSubset#<clinit>()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#<init>(java.lang.String,int,uk.ac.ebi.beam.Element)
	CALLEE: static uk.ac.ebi.beam.AtomImpl.AromaticSubset#values()
CALLER: static uk.ac.ebi.beam.AtomImpl#<clinit>()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(uk.ac.ebi.beam.Element,int,int)
	CALLEE: static uk.ac.ebi.beam.AtomBuilder#aliphatic(uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.AtomBuilder#isotope(int)
	CALLEE: uk.ac.ebi.beam.AtomBuilder#build()
CALLER: uk.ac.ebi.beam.Parser#readBracketAtom(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.Graph#addFlags(int)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer,int)
	CALLEE: static uk.ac.ebi.beam.Element#read(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Configuration#read(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Parser#readHydrogens(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Parser#readCharge(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Parser#readClass(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.InvalidSmilesException#invalidBracketAtom(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(java.lang.String)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,int,int,int,boolean)
	CALLEE: uk.ac.ebi.beam.CharBuffer#get()
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#substr(int,int)
	CALLEE: uk.ac.ebi.beam.CharBuffer#next()
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber()
CALLER: uk.ac.ebi.beam.Parser#ring(int,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer,int)
	CALLEE: uk.ac.ebi.beam.Parser#openRing(int)
	CALLEE: uk.ac.ebi.beam.Parser#closeRing(int,uk.ac.ebi.beam.CharBuffer)
CALLER: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer,int)
	CALLEE: static uk.ac.ebi.beam.InvalidSmilesException#display(uk.ac.ebi.beam.CharBuffer,int)
CALLER: static uk.ac.ebi.beam.Topology#toExplicit(uk.ac.ebi.beam.Graph,int,uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Graph#bondedValence(int)
	CALLEE: uk.ac.ebi.beam.Graph#implHCount(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Bond#order()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#hydrogens()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#hydrogens()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#hydrogens()
	CALLEE: uk.ac.ebi.beam.Configuration#type()
CALLER: static uk.ac.ebi.beam.Topology#<clinit>()
	CALLEE: uk.ac.ebi.beam.Topology.1#<init>()
CALLER: uk.ac.ebi.beam.Parser#addTopology(int,uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Bond#order()
	CALLEE: uk.ac.ebi.beam.Graph#addFlags(int)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edge(int,int)
	CALLEE: uk.ac.ebi.beam.Parser#insertThImplicitRef(int,int[])
	CALLEE: uk.ac.ebi.beam.Parser#insertDbImplicitRef(int,int[])
	CALLEE: static uk.ac.ebi.beam.Topology#create(int,int[],java.util.List,uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Graph#addTopology(uk.ac.ebi.beam.Topology)
	CALLEE: uk.ac.ebi.beam.Graph#edges(int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#toArray()
CALLER: static uk.ac.ebi.beam.Element.ElementCheck#<clinit>()
	CALLEE: static uk.ac.ebi.beam.Element.NoValenceCheck#access$200()
	CALLEE: static uk.ac.ebi.beam.Element.ChargeCheck#access$300()
	CALLEE: uk.ac.ebi.beam.Element.ElementCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck,uk.ac.ebi.beam.Element.ChargeCheck)
CALLER: static uk.ac.ebi.beam.Element#load(java.lang.String)
	CALLEE: static uk.ac.ebi.beam.Element.ValenceCheck#parse(java.lang.String,int)
	CALLEE: static uk.ac.ebi.beam.Element.ChargeCheck#parse(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Element.ElementCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck,uk.ac.ebi.beam.Element.ChargeCheck,uk.ac.ebi.beam.Element.1)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMultimap#<init>()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
CALLER: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#<init>(java.lang.String,int,uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.Element#symbol()
	CALLEE: uk.ac.ebi.beam.Generator.SubsetToken#<init>(java.lang.String)
CALLER: uk.ac.ebi.beam.Graph#addAtom(uk.ac.ebi.beam.Atom)
	CALLEE: uk.ac.ebi.beam.Graph#ensureCapacity()
CALLER: uk.ac.ebi.beam.Graph#addEdge(uk.ac.ebi.beam.Edge)
	CALLEE: uk.ac.ebi.beam.Edge#either()
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Graph#ensureEdgeCapacity(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Bond#order()
CALLER: uk.ac.ebi.beam.AtomImpl.AromaticSubset#<init>(java.lang.String,int,uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.Element#symbol()
	CALLEE: uk.ac.ebi.beam.Generator.SubsetToken#<init>(java.lang.String)
CALLER: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(uk.ac.ebi.beam.Element,int,int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,int,int,int,boolean)
CALLER: static uk.ac.ebi.beam.AtomBuilder#aliphatic(uk.ac.ebi.beam.Element)
	CALLEE: uk.ac.ebi.beam.AtomBuilder#<init>(uk.ac.ebi.beam.Element,boolean)
CALLER: static uk.ac.ebi.beam.Element#read(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#get()
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
	CALLEE: uk.ac.ebi.beam.CharBuffer#next()
CALLER: static uk.ac.ebi.beam.Element.AromaticSpecification#<clinit>()
	CALLEE: uk.ac.ebi.beam.Element.AromaticSpecification#<init>(java.lang.String,int,uk.ac.ebi.beam.Element[])
CALLER: static uk.ac.ebi.beam.Configuration#read(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber()
CALLER: static uk.ac.ebi.beam.Parser#readHydrogens(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber()
CALLER: static uk.ac.ebi.beam.Parser#readCharge(uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Parser#readCharge(int,uk.ac.ebi.beam.CharBuffer)
CALLER: static uk.ac.ebi.beam.Parser#readClass(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber()
	CALLEE: uk.ac.ebi.beam.CharBuffer#nextIsDigit()
CALLER: static uk.ac.ebi.beam.InvalidSmilesException#invalidBracketAtom(uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
CALLER: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(java.lang.String)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,java.lang.String,int,int,int,boolean)
CALLER: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,int,int,int,boolean)
	CALLEE: uk.ac.ebi.beam.Element#symbol()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,java.lang.String,int,int,int,boolean)
CALLER: uk.ac.ebi.beam.Parser#openRing(int)
	CALLEE: uk.ac.ebi.beam.IntStack#peek()
	CALLEE: uk.ac.ebi.beam.Parser.RingBond#<init>(int,uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.Parser.1)
	CALLEE: uk.ac.ebi.beam.Parser#createArrangement(int)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#add(int)
CALLER: uk.ac.ebi.beam.Parser#closeRing(int,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.IntStack#peek()
	CALLEE: uk.ac.ebi.beam.Bond#directional()
	CALLEE: uk.ac.ebi.beam.Bond.1#directional()
	CALLEE: uk.ac.ebi.beam.Bond.2#directional()
	CALLEE: uk.ac.ebi.beam.Edge#<init>(int,int,uk.ac.ebi.beam.Bond)
	CALLEE: uk.ac.ebi.beam.Graph#addEdge(uk.ac.ebi.beam.Edge)
	CALLEE: uk.ac.ebi.beam.Graph#adjacent(int,int)
	CALLEE: uk.ac.ebi.beam.Bond#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.1#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.2#inverse()
	CALLEE: static uk.ac.ebi.beam.Parser#decideBond(uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#add(int)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#replace(int,int)
CALLER: static uk.ac.ebi.beam.InvalidSmilesException#display(uk.ac.ebi.beam.CharBuffer,int)
	CALLEE: uk.ac.ebi.beam.CharBuffer#position()
CALLER: uk.ac.ebi.beam.Graph#implHCount(int)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#hydrogens(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#hydrogens(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#hydrogens(uk.ac.ebi.beam.Graph,int)
CALLER: uk.ac.ebi.beam.Topology.1#<init>()
	CALLEE: uk.ac.ebi.beam.Topology#<init>()
CALLER: uk.ac.ebi.beam.Graph#edge(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
CALLER: uk.ac.ebi.beam.Parser#insertThImplicitRef(int,int[])
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String)
CALLER: uk.ac.ebi.beam.Parser#insertDbImplicitRef(int,int[])
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String)
CALLER: static uk.ac.ebi.beam.Topology#create(int,int[],java.util.List,uk.ac.ebi.beam.Configuration)
	CALLEE: static uk.ac.ebi.beam.Topology#tetrahedral(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: static uk.ac.ebi.beam.Topology#trigonal(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: static uk.ac.ebi.beam.Topology#extendedTetrahedral(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: static uk.ac.ebi.beam.Topology#unknown()
	CALLEE: uk.ac.ebi.beam.Configuration#type()
CALLER: uk.ac.ebi.beam.Graph#addTopology(uk.ac.ebi.beam.Topology)
	CALLEE: static uk.ac.ebi.beam.Topology#unknown()
	CALLEE: uk.ac.ebi.beam.Topology.1#atom()
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#atom()
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#atom()
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#atom()
CALLER: static uk.ac.ebi.beam.Element.NoValenceCheck#<clinit>()
	CALLEE: uk.ac.ebi.beam.Element.NoValenceCheck#<init>()
CALLER: static uk.ac.ebi.beam.Element.ChargeCheck#<clinit>()
	CALLEE: uk.ac.ebi.beam.Element.ChargeCheck#<init>(int,int)
CALLER: static uk.ac.ebi.beam.Element.ValenceCheck#parse(java.lang.String,int)
	CALLEE: static uk.ac.ebi.beam.Element.NoValenceCheck#access$200()
	CALLEE: static uk.ac.ebi.beam.Element.ValenceCheck#parse(java.lang.String,int)
	CALLEE: uk.ac.ebi.beam.Element.FixedValence#<init>(int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.NeutralValence#<init>(int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.ChargeAdjustedValence#<init>(int,int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.MultiValenceCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck[],uk.ac.ebi.beam.Element.1)
CALLER: static uk.ac.ebi.beam.Element.ChargeCheck#parse(java.lang.String)
	CALLEE: uk.ac.ebi.beam.Element.ChargeCheck#<init>(int,int)
CALLER: uk.ac.ebi.beam.Element.ElementCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck,uk.ac.ebi.beam.Element.ChargeCheck,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.ElementCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck,uk.ac.ebi.beam.Element.ChargeCheck)
CALLER: static org.apache.http.message.BasicLineFormatter#<clinit>()
	CALLEE: org.apache.http.message.BasicLineFormatter#<init>()
CALLER: static org.apache.http.message.BasicLineParser#<clinit>()
	CALLEE: org.apache.http.message.BasicLineParser#<init>()
CALLER: static org.apache.http.impl.DefaultHttpResponseFactory#<clinit>()
	CALLEE: org.apache.http.impl.DefaultHttpResponseFactory#<init>()
CALLER: static uk.ac.ebi.beam.Parser#readCharge(int,uk.ac.ebi.beam.CharBuffer)
	CALLEE: static uk.ac.ebi.beam.Parser#readCharge(int,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#getNumber()
	CALLEE: uk.ac.ebi.beam.CharBuffer#nextIsDigit()
CALLER: uk.ac.ebi.beam.Parser.RingBond#<init>(int,uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.Parser.1)
	CALLEE: uk.ac.ebi.beam.Parser.RingBond#<init>(int,uk.ac.ebi.beam.Bond)
CALLER: uk.ac.ebi.beam.Parser#createArrangement(int)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#<init>(uk.ac.ebi.beam.Parser.1)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#add(int)
CALLER: uk.ac.ebi.beam.Graph#adjacent(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
CALLER: static uk.ac.ebi.beam.Parser#decideBond(uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.Bond,uk.ac.ebi.beam.CharBuffer)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String,uk.ac.ebi.beam.CharBuffer,int)
CALLER: static uk.ac.ebi.beam.Topology#tetrahedral(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Configuration#shorthand()
CALLER: static uk.ac.ebi.beam.Topology#trigonal(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Configuration#shorthand()
CALLER: static uk.ac.ebi.beam.Topology#extendedTetrahedral(int,int[],uk.ac.ebi.beam.Configuration)
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Configuration#type()
	CALLEE: uk.ac.ebi.beam.Configuration#shorthand()
CALLER: uk.ac.ebi.beam.Element.NoValenceCheck#<init>()
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
CALLER: uk.ac.ebi.beam.Element.FixedValence#<init>(int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.FixedValence#<init>(int)
CALLER: uk.ac.ebi.beam.Element.NeutralValence#<init>(int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.NeutralValence#<init>(int)
CALLER: uk.ac.ebi.beam.Element.ChargeAdjustedValence#<init>(int,int,uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.ChargeAdjustedValence#<init>(int,int)
CALLER: uk.ac.ebi.beam.Element.MultiValenceCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck[],uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.MultiValenceCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck[])
CALLER: org.apache.http.message.BasicLineParser#<init>()
	CALLEE: org.apache.http.message.BasicLineParser#<init>(org.apache.http.ProtocolVersion)
CALLER: org.apache.http.impl.DefaultHttpResponseFactory#<init>()
	CALLEE: org.apache.http.impl.DefaultHttpResponseFactory#<init>(org.apache.http.ReasonPhraseCatalog)
CALLER: uk.ac.ebi.beam.Parser.LocalArrangement#<init>(uk.ac.ebi.beam.Parser.1)
	CALLEE: uk.ac.ebi.beam.Parser.LocalArrangement#<init>()
CALLER: uk.ac.ebi.beam.Topology.Tetrahedral#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#<init>(int,int[],int)
CALLER: uk.ac.ebi.beam.Topology.Trigonal#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#<init>(int,int[],int)
CALLER: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#<init>(int,int[],int,uk.ac.ebi.beam.Topology.1)
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#<init>(int,int[],int)
CALLER: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>()
CALLER: uk.ac.ebi.beam.Element.FixedValence#<init>(int)
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
CALLER: uk.ac.ebi.beam.Element.NeutralValence#<init>(int)
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
CALLER: uk.ac.ebi.beam.Element.ChargeAdjustedValence#<init>(int,int)
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
CALLER: uk.ac.ebi.beam.Element.MultiValenceCheck#<init>(uk.ac.ebi.beam.Element.ValenceCheck[])
	CALLEE: uk.ac.ebi.beam.Element.ValenceCheck#<init>(uk.ac.ebi.beam.Element.1)
CALLER: static org.apache.http.impl.EnglishReasonPhraseCatalog#<clinit>()
	CALLEE: org.apache.http.impl.EnglishReasonPhraseCatalog#<init>()
	CALLEE: static org.apache.http.impl.EnglishReasonPhraseCatalog#setReason(int,java.lang.String)
CALLER: org.apache.http.impl.DefaultHttpResponseFactory#<init>(org.apache.http.ReasonPhraseCatalog)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: uk.ac.ebi.beam.Topology.Tetrahedral#<init>(int,int[],int)
	CALLEE: uk.ac.ebi.beam.Topology#<init>()
CALLER: uk.ac.ebi.beam.Topology.Trigonal#<init>(int,int[],int)
	CALLEE: uk.ac.ebi.beam.Topology#<init>()
CALLER: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#<init>(int,int[],int)
	CALLEE: uk.ac.ebi.beam.Topology#<init>()
CALLER: static org.apache.http.HttpVersion#<clinit>()
	CALLEE: org.apache.http.HttpVersion#<init>(int,int)
CALLER: org.apache.http.HttpVersion#<init>(int,int)
	CALLEE: org.apache.http.ProtocolVersion#<init>(java.lang.String,int,int)
CALLER: org.apache.http.ProtocolVersion#<init>(java.lang.String,int,int)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
CALLER: org.apache.http.message.HeaderGroup#updateHeader(org.apache.http.Header)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.sbolstandard.core.datatree.NameTransformer.2#apply(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer.2#apply(org.sbolstandard.core.datatree.NamedProperty)
CALLER: uk.ac.ebi.beam.Edge#bond(int)
	CALLEE: uk.ac.ebi.beam.Bond#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.1#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.2#inverse()
	CALLEE: uk.ac.ebi.beam.Edge#invalidEndpointMessage(int)
CALLER: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#hydrogens(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.Graph#bondedValence(int)
	CALLEE: static uk.ac.ebi.beam.Element#implicitHydrogenCount(uk.ac.ebi.beam.Element,int)
CALLER: uk.ac.ebi.beam.AtomImpl.AromaticSubset#hydrogens(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#bondedValence(int)
	CALLEE: static uk.ac.ebi.beam.Element#implicitAromHydrogenCount(uk.ac.ebi.beam.Element,int)
CALLER: uk.ac.ebi.beam.AtomImpl.BracketAtom#hydrogens(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#hydrogens()
CALLER: com.google.common.base.Joiner#useForNull(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
CALLER: uk.ac.ebi.beam.CharBuffer#getNumber(int)
	CALLEE: uk.ac.ebi.beam.CharBuffer#nextIsDigit()
	CALLEE: uk.ac.ebi.beam.CharBuffer#getAsDigit()
CALLER: uk.ac.ebi.beam.CharBuffer#getIf(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
	CALLEE: uk.ac.ebi.beam.CharBuffer#nextIs(char)
CALLER: uk.ac.ebi.beam.CharBuffer#getNumber()
	CALLEE: uk.ac.ebi.beam.CharBuffer#nextIsDigit()
	CALLEE: uk.ac.ebi.beam.CharBuffer#getAsDigit()
CALLER: uk.ac.ebi.beam.CharBuffer#nextIsDigit()
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
	CALLEE: uk.ac.ebi.beam.CharBuffer#next()
	CALLEE: static uk.ac.ebi.beam.CharBuffer#isDigit(char)
CALLER: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractSetMultimap#asMap()
CALLER: com.google.common.collect.HashMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#put(java.lang.Object,java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfHour(int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFraction(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfMinute(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFraction(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfDay()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFraction(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfDay()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#getFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#isPrinter(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#isParser(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatter#<init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#toParser()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#getFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#isParser(java.lang.Object)
	CALLEE: static org.joda.time.format.InternalParserDateTimeParser#of(org.joda.time.format.InternalParser)
CALLER: org.joda.time.format.DateTimeParserInternalParser#estimateParsedLength()
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#estimateParsedLength()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendWeekOfWeekyear(int)
	CALLEE: static org.joda.time.DateTimeFieldType#weekOfWeekyear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendSecondOfMinute(int)
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfMinute()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendMinuteOfHour(int)
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfHour()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfYear(int)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeek(int)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfMonth(int)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfMonth()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYear(int)
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
CALLER: uk.ac.ebi.beam.Graph#kekule()
	CALLEE: static uk.ac.ebi.beam.Localise#localiseInPlace(uk.ac.ebi.beam.Graph)
CALLER: uk.ac.ebi.beam.Graph#neighbors(int)
	CALLEE: uk.ac.ebi.beam.Graph#edges(int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
CALLER: uk.ac.ebi.beam.Graph#configurationOf(int)
	CALLEE: static uk.ac.ebi.beam.Topology#unknown()
	CALLEE: uk.ac.ebi.beam.Graph#topologyOf(int)
	CALLEE: uk.ac.ebi.beam.Topology.1#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.1#configuration()
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#configuration()
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#configuration()
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#configuration()
CALLER: uk.ac.ebi.beam.Graph#edges()
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
CALLER: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#label()
	CALLEE: uk.ac.ebi.beam.Element#symbol()
CALLER: uk.ac.ebi.beam.AtomImpl.AromaticSubset#label()
	CALLEE: uk.ac.ebi.beam.Element#symbol()
CALLER: org.apache.http.entity.ContentType#toString()
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)
CALLER: org.apache.http.entity.mime.FormBodyPartBuilder#build()
	CALLEE: org.apache.http.entity.ContentType#toString()
	CALLEE: org.apache.http.entity.mime.Header#<init>()
	CALLEE: static org.apache.http.util.Asserts#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.mime.Header#getFields()
	CALLEE: org.apache.http.entity.mime.Header#addField(org.apache.http.entity.mime.MinimalField)
	CALLEE: org.apache.http.entity.mime.Header#getField(java.lang.String)
	CALLEE: static org.apache.http.entity.mime.FormBodyPartBuilder#encodeForHeader(java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#getFilename()
	CALLEE: org.apache.http.entity.mime.content.StringBody#getFilename()
	CALLEE: org.apache.http.entity.mime.MinimalField#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.mime.content.AbstractContentBody#getContentType()
	CALLEE: org.apache.http.entity.mime.content.AbstractContentBody#getMimeType()
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#getCharset()
	CALLEE: org.apache.http.entity.mime.content.AbstractContentBody#getCharset()
	CALLEE: org.apache.http.entity.mime.content.ByteArrayBody#getTransferEncoding()
	CALLEE: org.apache.http.entity.mime.content.StringBody#getTransferEncoding()
	CALLEE: org.apache.http.entity.mime.FormBodyPart#<init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody,org.apache.http.entity.mime.Header)
CALLER: org.apache.http.pool.AbstractConnPool#shutdown()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.pool.RouteSpecificPool#shutdown()
CALLER: org.apache.http.config.RegistryBuilder#register(java.lang.String,java.lang.Object)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notEmpty(java.lang.CharSequence,java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#read()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#pushBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readTLDs()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#popBindings()
CALLER: org.sbolstandard.core.io.json.JsonIo.2#read()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo.2#$SWITCH_TABLE$javax$json$JsonValue$ValueType()
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readTLDs(javax.json.JsonArray)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
CALLER: org.sbolstandard.core2.ComparableVersion.ListItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#getType()
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#getType()
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#getType()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeStartDocument()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeStartElement(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#setPrefix(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeNamespace(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndDocument()
	CALLEE: org.sbolstandard.core.io.CoreIoException#<init>(java.lang.Throwable)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#pushBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#popBindings()
CALLER: org.sbolstandard.core.io.json.StringifyQName.1#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#transformName(javax.xml.namespace.QName)
CALLER: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.DocumentRoot)
	CALLEE: org.sbolstandard.core.datatree.DocumentRoot.Impl#getTopLevelDocuments()
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: org.sbolstandard.core2.Plan#copy(org.sbolstandard.core2.Plan)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Agent#copy(org.sbolstandard.core2.Agent)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Activity#copy(org.sbolstandard.core2.Activity)
	CALLEE: org.sbolstandard.core2.Activity#addWasInformedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#copy(org.sbolstandard.core2.Usage)
	CALLEE: org.sbolstandard.core2.Association#copy(org.sbolstandard.core2.Association)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Activity#getUsages()
	CALLEE: org.sbolstandard.core2.Activity#getAssociations()
	CALLEE: org.sbolstandard.core2.Activity#setStartedAtTime(org.joda.time.DateTime)
	CALLEE: org.sbolstandard.core2.Activity#setEndedAtTime(org.joda.time.DateTime)
	CALLEE: org.sbolstandard.core2.Activity#addType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#getWasInformedByURIs()
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.Activity#getTypes()
	CALLEE: org.sbolstandard.core2.Activity#isSetStartedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#getStartedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#isSetEndedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#getEndedAtTime()
	CALLEE: org.sbolstandard.core2.Association#getAgentURI()
	CALLEE: org.sbolstandard.core2.Activity#createAssociation(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#getEntityURI()
	CALLEE: org.sbolstandard.core2.Activity#createUsage(java.lang.String,java.net.URI)
CALLER: org.sbolstandard.core2.GenericTopLevel#copy(org.sbolstandard.core2.GenericTopLevel)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Sequence#copy(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Implementation#copy(org.sbolstandard.core2.Implementation)
	CALLEE: org.sbolstandard.core2.Implementation#setBuilt(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
CALLER: org.sbolstandard.core2.ModuleDefinition#copy(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#setModels(java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
	CALLEE: org.sbolstandard.core2.Interaction#copy(org.sbolstandard.core2.Interaction)
	CALLEE: org.sbolstandard.core2.Module#copy(org.sbolstandard.core2.Module)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#copy(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#copy(org.sbolstandard.core2.MapsTo)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getDirection()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.Module#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createModule(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Interaction#getTypes()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createInteraction(java.lang.String,java.util.Set)
CALLER: org.sbolstandard.core2.Model#copy(org.sbolstandard.core2.Model)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Attachment#copy(org.sbolstandard.core2.Attachment)
	CALLEE: org.sbolstandard.core2.Attachment#setSource(java.net.URI)
	CALLEE: org.sbolstandard.core2.Attachment#setFormat(java.net.URI)
	CALLEE: org.sbolstandard.core2.Attachment#setSize(long)
	CALLEE: org.sbolstandard.core2.Attachment#setHash(java.lang.String)
	CALLEE: org.sbolstandard.core2.Attachment#getSource()
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.Attachment#isSetFormat()
	CALLEE: org.sbolstandard.core2.Attachment#getFormat()
	CALLEE: org.sbolstandard.core2.Attachment#isSetSize()
	CALLEE: org.sbolstandard.core2.Attachment#getSize()
	CALLEE: org.sbolstandard.core2.Attachment#isSetHash()
	CALLEE: org.sbolstandard.core2.Attachment#getHash()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#copy(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#setStrategy(org.sbolstandard.core2.StrategyType)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#isSetStrategy()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getStrategy()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#createVariableComponent(java.lang.String,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#copy(org.sbolstandard.core2.VariableComponent)
CALLER: org.sbolstandard.core2.ComponentDefinition#addSequence(org.sbolstandard.core2.Sequence)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.ComponentDefinition#copy(org.sbolstandard.core2.ComponentDefinition)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#copy(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.Component#copy(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#copy(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Component#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#copy(org.sbolstandard.core2.MapsTo)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setSequences(java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
CALLER: org.sbolstandard.core2.ExperimentalData#copy(org.sbolstandard.core2.ExperimentalData)
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Experiment#copy(org.sbolstandard.core2.Experiment)
	CALLEE: org.sbolstandard.core2.Experiment#addExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Experiment#getExperimentalDataURIs()
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.sbolstandard.core2.Collection#copy(org.sbolstandard.core2.Collection)
	CALLEE: org.sbolstandard.core2.Collection#addMember(java.net.URI)
	CALLEE: org.sbolstandard.core2.Collection#getMemberURIs()
	CALLEE: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
CALLER: org.openscience.cdk.DefaultChemObjectBuilder#newInstance(java.lang.Class,java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory#ofClass(java.lang.Class,java.lang.Object[])
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#read()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: org.sbolstandard.core.io.CoreIoException#<init>(java.lang.Throwable)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#readBindings()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#readTopLevelDocuments()
CALLER: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.SBOLDocument#<init>()
	CALLEE: org.sbolstandard.core2.SBOLDocument#createRecursiveCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.TopLevel)
CALLER: org.oboparser.obo.OBOOntology#isDescendantOf(org.oboparser.obo.OBOStanza,org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOStanza#getId()
	CALLEE: org.oboparser.obo.OBOValue#getValue()
	CALLEE: org.oboparser.obo.OBOOntology#isDescendantOf(org.oboparser.obo.OBOStanza,org.oboparser.obo.OBOStanza)
	CALLEE: org.oboparser.obo.OBOOntology#getStanza(java.lang.String)
	CALLEE: org.oboparser.obo.OBOStanza#values(java.lang.String)
	CALLEE: org.oboparser.obo.OBOStanza#hasValue(java.lang.String)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#equals(java.lang.Object)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#hashCode()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
CALLER: org.sbolstandard.core2.Annotation#getNestedQName()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
CALLER: org.sbolstandard.core2.Annotation#copy()
	CALLEE: org.sbolstandard.core2.Annotation#deepCopy()
CALLER: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.Annotation#toString()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#isDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#isIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#isStringValue()
CALLER: org.sbolstandard.core2.SequenceAnnotation#toString()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
CALLER: org.sbolstandard.core2.ModuleDefinition#getModels()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequences()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Experiment#getExperimentalData()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getExperimentalData(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Collection#getMembers()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#toString()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.sbolstandard.core2.Collection#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Experiment#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.ExperimentalData#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.ComponentDefinition#toString()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceURIs()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#toString()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#isSetStrategy()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getStrategy()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Attachment#toString()
	CALLEE: org.sbolstandard.core2.Attachment#getSource()
	CALLEE: org.sbolstandard.core2.Attachment#isSetFormat()
	CALLEE: org.sbolstandard.core2.Attachment#getFormat()
	CALLEE: org.sbolstandard.core2.Attachment#isSetSize()
	CALLEE: org.sbolstandard.core2.Attachment#getSize()
	CALLEE: org.sbolstandard.core2.Attachment#isSetHash()
	CALLEE: org.sbolstandard.core2.Attachment#getHash()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Model#toString()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
CALLER: org.sbolstandard.core2.ModuleDefinition#toString()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModelURIs()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModels()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Implementation#toString()
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
	CALLEE: org.sbolstandard.core2.Implementation#getBuiltURI()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Sequence#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.GenericTopLevel#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Activity#toString()
	CALLEE: org.sbolstandard.core2.Activity#isSetStartedAtTime()
	CALLEE: org.sbolstandard.core2.Activity#isSetEndedAtTime()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Agent#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Plan#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.ComponentDefinition#getSortedComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#isGenericSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSuccessorComponents(java.util.HashMap,org.sbolstandard.core2.Component,java.util.Set)
CALLER: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentInstance#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SequenceConstraint#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectIdentity()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectIdentity()
CALLER: org.sbolstandard.core2.Module#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measured#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Module#getDefinitionIdentity()
CALLER: org.sbolstandard.core2.Interaction#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measured#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.FunctionalComponent#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentInstance#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.SequenceAnnotation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentIdentity()
CALLER: org.sbolstandard.core2.Association#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Association#getAgentIdentity()
	CALLEE: org.sbolstandard.core2.Association#getPlanIdentity()
CALLER: org.sbolstandard.core2.Usage#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Usage#getEntityIdentity()
CALLER: org.sbolstandard.core2.Range#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequence()
CALLER: org.sbolstandard.core2.GenericLocation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequence()
CALLER: org.sbolstandard.core2.MapsTo#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalIdentity()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteIdentity()
CALLER: org.sbolstandard.core2.Measure#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.Participation#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measured#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Participation#getParticipantIdentity()
CALLER: org.sbolstandard.core2.Cut#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Sequence#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequence()
CALLER: org.sbolstandard.core2.Collection#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.Experiment#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.ExperimentalData#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.ComponentDefinition#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Attachment#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
	CALLEE: org.sbolstandard.core2.Attachment#isSetFormat()
	CALLEE: org.sbolstandard.core2.Attachment#isSetSize()
	CALLEE: org.sbolstandard.core2.Attachment#isSetHash()
CALLER: org.sbolstandard.core2.Model#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.ModuleDefinition#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.Implementation#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
	CALLEE: org.sbolstandard.core2.Implementation#isSetBuilt()
CALLER: org.sbolstandard.core2.Sequence#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.GenericTopLevel#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
CALLER: org.sbolstandard.core2.Activity#hashCode()
	CALLEE: org.sbolstandard.core2.TopLevel#hashCode()
	CALLEE: org.joda.time.base.AbstractInstant#hashCode()
CALLER: org.sbolstandard.core2.TopLevel#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Component#hashCode()
	CALLEE: org.sbolstandard.core2.ComponentInstance#hashCode()
CALLER: org.sbolstandard.core2.SequenceConstraint#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Module#hashCode()
	CALLEE: org.sbolstandard.core2.Measured#hashCode()
CALLER: org.sbolstandard.core2.Interaction#hashCode()
	CALLEE: org.sbolstandard.core2.Measured#hashCode()
CALLER: org.sbolstandard.core2.FunctionalComponent#hashCode()
	CALLEE: org.sbolstandard.core2.ComponentInstance#hashCode()
CALLER: org.sbolstandard.core2.SequenceAnnotation#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Association#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Usage#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Range#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
CALLER: org.sbolstandard.core2.GenericLocation#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
CALLER: org.sbolstandard.core2.MapsTo#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Measure#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core2.Participation#hashCode()
	CALLEE: org.sbolstandard.core2.Measured#hashCode()
CALLER: org.sbolstandard.core2.Cut#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
CALLER: org.sbolstandard.core.datatree.NamedProperty.Impl#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#equals(java.lang.Object)
CALLER: org.apache.http.message.BasicNameValuePair#equals(java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
CALLER: uk.ac.ebi.beam.Edge#equals(java.lang.Object)
	CALLEE: uk.ac.ebi.beam.Bond#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.1#inverse()
	CALLEE: uk.ac.ebi.beam.Bond.2#inverse()
CALLER: org.sbolstandard.core.datatree.NamedProperty.Impl#hashCode()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#hashCode()
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#hashCode()
CALLER: org.apache.http.message.BasicNameValuePair#hashCode()
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
CALLER: org.sbolstandard.core.datatree.NameTransformer.2#apply(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapVP(org.sbolstandard.core.datatree.NamedProperty)
CALLER: uk.ac.ebi.beam.Edge#invalidEndpointMessage(int)
	CALLEE: uk.ac.ebi.beam.Edge#toString()
CALLER: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
CALLER: uk.ac.ebi.beam.CharBuffer#getAsDigit()
	CALLEE: uk.ac.ebi.beam.CharBuffer#get()
	CALLEE: static uk.ac.ebi.beam.CharBuffer#toDigit(char)
CALLER: uk.ac.ebi.beam.CharBuffer#nextIs(char)
	CALLEE: uk.ac.ebi.beam.CharBuffer#hasRemaining()
CALLER: com.google.common.collect.AbstractSetMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
CALLER: com.google.common.collect.AbstractSetMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendFraction(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#<init>(org.joda.time.DateTimeFieldType,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#getFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#<init>(java.util.List)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#isPrinter(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#isPrinter()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#isParser(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#isParser()
CALLER: static org.joda.time.format.InternalParserDateTimeParser#of(org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#<init>(org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#getUnderlying()
CALLER: static uk.ac.ebi.beam.Localise#localiseInPlace(uk.ac.ebi.beam.Graph)
	CALLEE: uk.ac.ebi.beam.Graph#getFlags(int)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String)
	CALLEE: static uk.ac.ebi.beam.Localise#buildSet(uk.ac.ebi.beam.Graph,java.util.BitSet)
	CALLEE: static uk.ac.ebi.beam.Localise#hasOddCardinality(java.util.BitSet)
	CALLEE: static uk.ac.ebi.beam.Localise#generateKekuleForm(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,boolean)
CALLER: uk.ac.ebi.beam.Graph#topologyOf(int)
	CALLEE: static uk.ac.ebi.beam.Topology#unknown()
CALLER: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
CALLER: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#expand(int)
CALLER: static org.apache.http.message.BasicHeaderValueFormatter#<clinit>()
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#<init>()
CALLER: static org.apache.http.util.Asserts#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
CALLER: org.apache.http.entity.mime.Header#addField(org.apache.http.entity.mime.MinimalField)
	CALLEE: org.apache.http.entity.mime.MinimalField#getName()
CALLER: org.apache.http.entity.mime.content.AbstractContentBody#getMimeType()
	CALLEE: org.apache.http.entity.ContentType#getMimeType()
CALLER: org.apache.http.entity.mime.content.AbstractContentBody#getCharset()
	CALLEE: org.apache.http.entity.ContentType#getCharset()
CALLER: org.apache.http.entity.mime.FormBodyPart#<init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody,org.apache.http.entity.mime.Header)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.mime.Header#<init>()
CALLER: static org.apache.http.util.Args#notEmpty(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isEmpty(java.lang.CharSequence)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readBindings()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readTLDs()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#pushBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#popBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readPfxURI()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readType()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readProperty()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext()
CALLER: static org.sbolstandard.core.io.json.JsonIo.2#$SWITCH_TABLE$javax$json$JsonValue$ValueType()
	CALLEE: static javax.json.JsonValue.ValueType#values()
CALLER: org.sbolstandard.core.io.json.JsonIo.2#readTLDs(javax.json.JsonArray)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readTLD(javax.json.JsonObject)
CALLER: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#DocumentRoot(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,org.sbolstandard.core.datatree.Datatree.TopLevelDocuments)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
CALLER: org.sbolstandard.core2.ComparableVersion.StringItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#getType()
	CALLEE: static org.sbolstandard.core2.ComparableVersion.StringItem#comparableQualifier(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#getType()
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#getType()
CALLER: org.sbolstandard.core2.ComparableVersion.IntegerItem#compareTo(org.sbolstandard.core2.ComparableVersion.Item)
	CALLEE: org.sbolstandard.core2.ComparableVersion.ListItem#getType()
	CALLEE: org.sbolstandard.core2.ComparableVersion.StringItem#getType()
	CALLEE: org.sbolstandard.core2.ComparableVersion.IntegerItem#getType()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeStartDocument()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#beforeMarkup()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterMarkup()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#writeStartElement(javax.xml.namespace.QName)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeStartElement(java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#setPrefix(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#setPrefix(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#writeNamespace(org.sbolstandard.core.datatree.NamespaceBinding)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#writeNamespace(java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeStartElement(javax.xml.namespace.QName)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeAttribute(javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.NamedProperty)
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#beforeEndElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterEndElement()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeEndDocument()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterEndDocument()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#write(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeIndent()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#pushBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#popBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeIndent()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.net.URI)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#pushIndent()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeType(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#popIndent()
CALLER: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$0(org.sbolstandard.core.io.json.JsonIo)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$1(org.sbolstandard.core.io.json.JsonIo,java.util.List)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.PropertyValue)
CALLER: org.sbolstandard.core2.TopLevel#copy(org.sbolstandard.core2.TopLevel)
	CALLEE: org.sbolstandard.core2.TopLevel#addAttachment(java.net.URI)
	CALLEE: org.sbolstandard.core2.TopLevel#getAttachmentURIs()
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.Activity#createAssociation(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Activity#createAssociation(java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.Activity#createUsage(java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Activity#createUsage(java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
CALLER: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.ModuleDefinition#createModule(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createModule(java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.ModuleDefinition#createInteraction(java.lang.String,java.util.Set)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createInteraction(java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#createVariableComponent(java.lang.String,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#createVariableComponent(java.net.URI,org.sbolstandard.core2.OperatorType,java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,org.sbolstandard.core2.Location)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToRestrictionType(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,org.sbolstandard.core2.OrientationType)
CALLER: org.openscience.cdk.DynamicFactory#ofClass(java.lang.Class,java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#<init>(java.lang.Class,java.lang.Object[],org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory#get(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ReflectionCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ModifiedCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ArrayWrapCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.1#create(java.lang.Object[])
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#readBindings()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBinding(java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#readTopLevelDocuments()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#QName(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#addToStack(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#updateDocumentInStack(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(org.sbolstandard.core.datatree.TopLevelDocument[])
CALLER: org.sbolstandard.core2.Annotation#deepCopy()
	CALLEE: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core2.Annotation)
CALLER: org.sbolstandard.core2.Identified#toString()
	CALLEE: org.sbolstandard.core2.Identified#isSetPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
CALLER: org.sbolstandard.core2.ComponentDefinition#isGenericSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
CALLER: org.sbolstandard.core2.ComponentDefinition#getSuccessorComponents(java.util.HashMap,org.sbolstandard.core2.Component,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSuccessorComponents(java.util.HashMap,org.sbolstandard.core2.Component,java.util.Set)
CALLER: org.sbolstandard.core2.ComponentInstance#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Measured#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionIdentity()
CALLER: org.sbolstandard.core2.SequenceConstraint#getSubjectIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.SequenceConstraint#getObjectIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.Measured#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#equals(java.lang.Object)
CALLER: org.sbolstandard.core2.Module#getDefinitionIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.SequenceAnnotation#getComponentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.Association#getAgentIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Association#getPlanIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Usage#getEntityIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Location#getSequence()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.MapsTo#getLocalIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.MapsTo#getRemoteIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
CALLER: org.sbolstandard.core2.Participation#getParticipantIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentInstance#hashCode()
	CALLEE: org.sbolstandard.core2.Measured#hashCode()
CALLER: org.sbolstandard.core2.Measured#hashCode()
	CALLEE: org.sbolstandard.core2.Identified#hashCode()
CALLER: org.sbolstandard.core.datatree.Literal.Abstract#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
	CALLEE: org.apache.http.HttpHost#equals(java.lang.Object)
CALLER: org.sbolstandard.core.datatree.Literal.Abstract#hashCode()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,int)
	CALLEE: org.apache.http.HttpHost#hashCode()
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapVP(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapV(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: static uk.ac.ebi.beam.Element.1#<clinit>()
	CALLEE: static uk.ac.ebi.beam.Element#values()
CALLER: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner)
CALLER: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Composite#<init>(java.util.List)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#decompose(java.util.List,java.util.List,java.util.List)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#estimateParsedLength()
CALLER: static uk.ac.ebi.beam.Localise#buildSet(uk.ac.ebi.beam.Graph,java.util.BitSet)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#aromatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#aromatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#aromatic()
	CALLEE: static uk.ac.ebi.beam.Localise#predetermined(uk.ac.ebi.beam.Graph,int)
CALLER: static uk.ac.ebi.beam.Localise#generateKekuleForm(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,boolean)
	CALLEE: uk.ac.ebi.beam.InvalidSmilesException#<init>(java.lang.String)
	CALLEE: static uk.ac.ebi.beam.Matching#empty(uk.ac.ebi.beam.Graph)
	CALLEE: static uk.ac.ebi.beam.ArbitraryMatching#initial(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,java.util.BitSet)
	CALLEE: static uk.ac.ebi.beam.ArbitraryMatching#augmentOnce(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,java.util.BitSet)
	CALLEE: static uk.ac.ebi.beam.IntSet#fromBitSet(java.util.BitSet)
	CALLEE: static uk.ac.ebi.beam.MaximumMatching#maximise(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,uk.ac.ebi.beam.IntSet)
	CALLEE: static uk.ac.ebi.beam.Localise#assign(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,uk.ac.ebi.beam.Matching)
	CALLEE: static uk.ac.ebi.beam.Localise#copyAndAssign(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,uk.ac.ebi.beam.Matching)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextIfNeeded()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextIfNeeded()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readPfxURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#resolveByPrefix(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readType()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readQName()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readProperty()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readQName()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readND()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readLiteral()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextIfNeeded()
CALLER: static javax.json.JsonValue.ValueType#<clinit>()
	CALLEE: javax.json.JsonValue.ValueType#<init>(java.lang.String,int)
CALLER: org.sbolstandard.core.io.json.JsonIo.2#readTLD(javax.json.JsonObject)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$0(org.sbolstandard.core.io.json.JsonIo)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readPV(javax.json.JsonValue)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#compareTo(java.lang.Object)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#compareTo(org.openscience.cdk.DynamicFactory.ConstructorKey)
CALLER: org.sbolstandard.core2.SequenceAnnotation#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#compareTo(org.sbolstandard.core2.SequenceAnnotation)
CALLER: org.sbolstandard.core2.Range#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Range#compareTo(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.GenericLocation#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericLocation#compareTo(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Cut#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Cut#compareTo(org.sbolstandard.core2.Location)
CALLER: javanet.staxutils.IndentingXMLStreamWriter#beforeMarkup()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterMarkup()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeNewLine(int)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#getIndent()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeStartElement(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#beforeStartElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterStartElement()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#writeAttribute(javax.xml.namespace.QName,java.lang.String)
	CALLEE: javanet.staxutils.helpers.StreamWriterDelegate#writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.1#<init>(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.NamedProperty,javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#visit(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#beforeEndElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeNewLine(int)
CALLER: javanet.staxutils.IndentingXMLStreamWriter#afterEndDocument()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeNewLine(int)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getNamespaceURI()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.net.URI)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#writeType(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeIndent()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeQName(javax.xml.namespace.QName)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#visit(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.1#<init>(org.sbolstandard.core.io.turtle.TurtleIo.1,java.io.PrintWriter)
CALLER: static org.sbolstandard.core.io.json.JsonIo#access$1(org.sbolstandard.core.io.json.JsonIo,java.util.List)
	CALLEE: org.sbolstandard.core.io.json.JsonIo#cholate(java.util.List)
CALLER: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#visit(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.1#<init>(org.sbolstandard.core.io.json.JsonIo.1,javax.json.stream.JsonGenerator)
CALLER: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#setDescription(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#isSetDescription()
	CALLEE: org.sbolstandard.core2.Identified#getDescription()
	CALLEE: org.sbolstandard.core2.Identified#setName(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getWasDerivedFroms()
	CALLEE: org.sbolstandard.core2.Identified#addWasGeneratedBy(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#hasAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getWasGeneratedBys()
	CALLEE: org.sbolstandard.core2.Identified#isSetName()
	CALLEE: org.sbolstandard.core2.Identified#getName()
	CALLEE: org.sbolstandard.core2.Annotation#copy()
CALLER: org.sbolstandard.core2.Activity#createAssociation(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#addAssociation(org.sbolstandard.core2.Association)
CALLER: org.sbolstandard.core2.Activity#createUsage(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Usage#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Activity#addUsage(org.sbolstandard.core2.Usage)
CALLER: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addFunctionalComponent(org.sbolstandard.core2.FunctionalComponent)
CALLER: org.sbolstandard.core2.ModuleDefinition#createModule(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#<init>(java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addModule(org.sbolstandard.core2.Module)
CALLER: org.sbolstandard.core2.ModuleDefinition#createInteraction(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Interaction#<init>(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.ModuleDefinition#addInteraction(org.sbolstandard.core2.Interaction)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#createVariableComponent(java.net.URI,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#<init>(java.net.URI,org.sbolstandard.core2.OperatorType,java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#addVariableComponent(org.sbolstandard.core2.VariableComponent)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#<init>(java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.ComponentDefinition#createComponent(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#<init>(java.net.URI,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addComponent(org.sbolstandard.core2.Component)
CALLER: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getDefaultURIprefix()
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isTypesInURIs()
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.net.URI,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceAnnotation(java.lang.String,org.sbolstandard.core2.Location)
CALLER: org.openscience.cdk.DynamicFactory.ObjectBasedKey#<init>(java.lang.Class,java.lang.Object[],org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#<init>(java.lang.Class,java.lang.Object[])
CALLER: org.openscience.cdk.DynamicFactory#get(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory#register(org.openscience.cdk.DynamicFactory.ConstructorKey,org.openscience.cdk.DynamicFactory.Creator)
	CALLEE: org.openscience.cdk.DynamicFactory#find(org.openscience.cdk.DynamicFactory.ConstructorKey)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#addToStack(javax.xml.namespace.QName)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#readBindings()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#updateDocumentInStack(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#updateDocumentInStackWithProperty(org.sbolstandard.core.datatree.NamedProperty)
CALLER: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(org.sbolstandard.core.datatree.TopLevelDocument[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocuments(java.util.List)
CALLER: org.sbolstandard.core2.Annotation#<init>(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Annotation#setAnnotations(java.util.List)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedIdentity()
	CALLEE: org.sbolstandard.core2.Annotation#setQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setStringValue(java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#setNestedQName(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#setBooleanValue(boolean)
	CALLEE: org.sbolstandard.core2.Annotation#setDoubleValue(double)
	CALLEE: org.sbolstandard.core2.Annotation#setIntegerValue(int)
	CALLEE: org.sbolstandard.core2.Annotation#setURIValue(java.net.URI)
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedQName()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#isDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#isIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#isStringValue()
	CALLEE: org.sbolstandard.core2.Annotation#getBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#getDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#getIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
CALLER: org.sbolstandard.core2.ComponentInstance#getDefinitionIdentity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
CALLER: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
CALLER: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
CALLER: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapV(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapND(org.sbolstandard.core.datatree.NestedDocument)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Composite#decompose(java.util.List,java.util.List,java.util.List)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#addArrayToList(java.util.List,java.lang.Object[])
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimatePrintedLength()
CALLER: static uk.ac.ebi.beam.Localise#predetermined(uk.ac.ebi.beam.Graph,int)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Graph#bondedValence(int)
	CALLEE: uk.ac.ebi.beam.Graph#implHCount(int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Bond#order()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#charge()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#element()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#element()
CALLER: static uk.ac.ebi.beam.Matching#empty(uk.ac.ebi.beam.Graph)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.Matching#<init>(int)
CALLER: static uk.ac.ebi.beam.ArbitraryMatching#initial(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,java.util.BitSet)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Matching#unmatched(int)
	CALLEE: uk.ac.ebi.beam.Matching#match(int,int)
	CALLEE: uk.ac.ebi.beam.Matching#matched(int)
CALLER: static uk.ac.ebi.beam.ArbitraryMatching#augmentOnce(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,java.util.BitSet)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: static uk.ac.ebi.beam.ArbitraryMatching#findPath(uk.ac.ebi.beam.Graph,int,int,java.util.BitSet,int[],int,uk.ac.ebi.beam.Matching,boolean)
	CALLEE: uk.ac.ebi.beam.Matching#match(int,int)
	CALLEE: uk.ac.ebi.beam.Matching#matched(int)
CALLER: static uk.ac.ebi.beam.IntSet#fromBitSet(java.util.BitSet)
	CALLEE: uk.ac.ebi.beam.IntSet.BinarySet#<init>(java.util.BitSet,uk.ac.ebi.beam.IntSet.1)
CALLER: static uk.ac.ebi.beam.IntSet#<clinit>()
	CALLEE: uk.ac.ebi.beam.IntSet.1#<init>()
CALLER: static uk.ac.ebi.beam.MaximumMatching#maximise(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,uk.ac.ebi.beam.IntSet)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#<init>(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,uk.ac.ebi.beam.IntSet)
CALLER: static uk.ac.ebi.beam.Localise#assign(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,uk.ac.ebi.beam.Matching)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Graph#getFlags()
	CALLEE: uk.ac.ebi.beam.Graph#setFlags(int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#toAliphatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#toAliphatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#toAliphatic()
	CALLEE: uk.ac.ebi.beam.Graph#setAtom(int,uk.ac.ebi.beam.Atom)
	CALLEE: uk.ac.ebi.beam.Edge#bond(uk.ac.ebi.beam.Bond)
	CALLEE: uk.ac.ebi.beam.Graph#updateBondedValence(int,int)
	CALLEE: uk.ac.ebi.beam.Matching#other(int)
CALLER: static uk.ac.ebi.beam.Localise#copyAndAssign(uk.ac.ebi.beam.Graph,java.util.BitSet,java.util.BitSet,uk.ac.ebi.beam.Matching)
	CALLEE: uk.ac.ebi.beam.Graph#<init>(int)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Graph#addAtom(uk.ac.ebi.beam.Atom)
	CALLEE: uk.ac.ebi.beam.Graph#addEdge(uk.ac.ebi.beam.Edge)
	CALLEE: uk.ac.ebi.beam.Graph#atom(int)
	CALLEE: uk.ac.ebi.beam.Graph#addTopology(uk.ac.ebi.beam.Topology)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Edge#bond()
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.Graph#topologyOf(int)
	CALLEE: uk.ac.ebi.beam.Graph#getFlags()
	CALLEE: uk.ac.ebi.beam.Graph#setFlags(int)
	CALLEE: uk.ac.ebi.beam.AtomImpl.AliphaticSubset#toAliphatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.AromaticSubset#toAliphatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#toAliphatic()
	CALLEE: uk.ac.ebi.beam.Bond#edge(int,int)
	CALLEE: uk.ac.ebi.beam.Matching#other(int)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextIfNeeded()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextToken()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#resolveByPrefix(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#getPrefix()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readQName()
	CALLEE: org.sbolstandard.core.datatree.NamespaceBinding#withLocalPart(java.lang.String)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#resolveByPrefix(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readND()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamespaceBindings.Impl#getBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#pushBindings(java.util.List)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#popBindings()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readPfxURI()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readType()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readProperty()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readLiteral()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(int)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(double)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#hasNext(java.util.regex.Pattern)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readPfxURI()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#QName(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.2#readQtdURI()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String,javax.xml.namespace.QName)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(boolean)
CALLER: org.sbolstandard.core.io.json.JsonIo.2#readPV(javax.json.JsonValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(int)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo.2#$SWITCH_TABLE$javax$json$JsonValue$ValueType()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(boolean)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readNdOrUri(javax.json.JsonObject)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#compareTo(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#toString()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.sbolstandard.core2.SequenceAnnotation#compareTo(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.Range#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.GenericLocation#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Cut#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getSortedLocations()
CALLER: org.sbolstandard.core2.Range#compareTo(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
CALLER: org.sbolstandard.core2.Cut#compareTo(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeNewLine(int)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#getIndent()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#getNewLine()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#beforeStartElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#beforeMarkup()
CALLER: javanet.staxutils.IndentingXMLStreamWriter#afterStartElement()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterMarkup()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.1#<init>(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.NamedProperty,javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#<init>()
CALLER: org.sbolstandard.core.datatree.PropertyValue.Visitor#visit(org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.1#<init>(org.sbolstandard.core.io.turtle.TurtleIo.1,java.io.PrintWriter)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#<init>()
CALLER: org.sbolstandard.core.io.json.JsonIo#cholate(java.util.List)
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.1#<init>(org.sbolstandard.core.io.json.JsonIo.1,javax.json.stream.JsonGenerator)
	CALLEE: org.sbolstandard.core.datatree.PropertyValue.Visitor#<init>()
CALLER: org.sbolstandard.core2.ModuleDefinition#addFunctionalComponent(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#setModuleDefinition(org.sbolstandard.core2.ModuleDefinition)
	CALLEE: org.sbolstandard.core2.MapsTo#setComponentInstance(org.sbolstandard.core2.ComponentInstance)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#addVariableComponent(org.sbolstandard.core2.VariableComponent)
	CALLEE: org.sbolstandard.core2.Identified#addChildSafely(org.sbolstandard.core2.Identified,java.util.Map,java.lang.String,java.util.Map[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.SBOLValidate#checkCombinatorialDerivationCycle(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setSBOLDocument(org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.SBOLDocument#isComplete()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#setCombinatorialDerivation(org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
CALLER: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.net.URI,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#addSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#<init>(java.net.URI,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
CALLER: org.openscience.cdk.DynamicFactory.ObjectBasedKey#<init>(java.lang.Class,java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#<init>()
CALLER: org.openscience.cdk.DynamicFactory#find(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#<init>(java.lang.Class,java.lang.Object[],org.openscience.cdk.DynamicFactory.1)
	CALLEE: org.openscience.cdk.DynamicFactory#get(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorLookup#getCandidates(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#isAssignable(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorKey#isUniform()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ArrayWrapCreator#<init>(org.openscience.cdk.DynamicFactory.Creator)
	CALLEE: org.openscience.cdk.DynamicFactory.1#<init>(org.openscience.cdk.DynamicFactory,org.openscience.cdk.DynamicFactory.ConstructorKey)
CALLER: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(org.sbolstandard.core.datatree.NamedProperty[])
CALLER: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(org.sbolstandard.core.datatree.NamedProperty[])
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#updateDocumentInStackWithProperty(org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.2#addProperty(org.sbolstandard.core.datatree.IdentifiableDocument,org.sbolstandard.core.datatree.NamedProperty)
CALLER: org.sbolstandard.core2.Annotation#getBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#isBooleanValue()
CALLER: org.sbolstandard.core2.Annotation#getDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#isDoubleValue()
CALLER: org.sbolstandard.core2.Annotation#getIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#isIntegerValue()
CALLER: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: org.sbolstandard.core2.Annotation#isStringValue()
CALLER: org.sbolstandard.core2.Annotation#getNestedIdentity()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
CALLER: org.sbolstandard.core.datatree.NameTransformer#mapND(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.2#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NameTransformer#mapVPs(java.util.List)
	CALLEE: org.sbolstandard.core.io.json.StringifyQName.1#transformName(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
	CALLEE: com.google.common.collect.Maps.ViewCachingAbstractMap#<init>()
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: static uk.ac.ebi.beam.Localise.1#<clinit>()
	CALLEE: static uk.ac.ebi.beam.Bond#values()
	CALLEE: static uk.ac.ebi.beam.Element#values()
CALLER: static uk.ac.ebi.beam.ArbitraryMatching#findPath(uk.ac.ebi.beam.Graph,int,int,java.util.BitSet,int[],int,uk.ac.ebi.beam.Matching,boolean)
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: static uk.ac.ebi.beam.ArbitraryMatching#findPath(uk.ac.ebi.beam.Graph,int,int,java.util.BitSet,int[],int,uk.ac.ebi.beam.Matching,boolean)
	CALLEE: uk.ac.ebi.beam.Matching#other(int)
CALLER: uk.ac.ebi.beam.IntSet.BinarySet#<init>(java.util.BitSet,uk.ac.ebi.beam.IntSet.1)
	CALLEE: uk.ac.ebi.beam.IntSet.BinarySet#<init>(java.util.BitSet)
CALLER: uk.ac.ebi.beam.IntSet.1#<init>()
	CALLEE: uk.ac.ebi.beam.IntSet#<init>()
CALLER: uk.ac.ebi.beam.MaximumMatching#<init>(uk.ac.ebi.beam.Graph,uk.ac.ebi.beam.Matching,int,uk.ac.ebi.beam.IntSet)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#<init>(int,uk.ac.ebi.beam.MaximumMatching.1)
	CALLEE: uk.ac.ebi.beam.UnionFind#<init>(int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#augment()
CALLER: uk.ac.ebi.beam.AtomImpl.AromaticSubset#toAliphatic()
	CALLEE: static uk.ac.ebi.beam.AtomImpl.AliphaticSubset#ofElement(uk.ac.ebi.beam.Element)
CALLER: uk.ac.ebi.beam.AtomImpl.BracketAtom#toAliphatic()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,java.lang.String,int,int,int,boolean)
CALLER: uk.ac.ebi.beam.Bond#edge(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#<init>(int,int,uk.ac.ebi.beam.Bond)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#readNextToken()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#isWhitespace(char)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.2#readQtdURI()
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.WSScanner#next(java.util.regex.Pattern)
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(java.lang.String,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#<init>(java.lang.String,javax.xml.namespace.QName)
CALLER: static org.sbolstandard.core.datatree.Datatree#Literal(boolean)
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#<init>(java.lang.Boolean)
CALLER: org.sbolstandard.core.io.json.JsonIo.2#readNdOrUri(javax.json.JsonObject)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(java.net.URI)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$2(org.sbolstandard.core.io.json.JsonIo)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readND(javax.json.JsonObject)
CALLER: org.sbolstandard.core2.SequenceAnnotation#getSortedLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
CALLER: org.sbolstandard.core2.Identified#getAnnotation(javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$0(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName)
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$1(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$0(org.sbolstandard.core.io.turtle.TurtleIo.1)
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$1(org.sbolstandard.core.io.turtle.TurtleIo.1)
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$2(org.sbolstandard.core.io.turtle.TurtleIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$3(org.sbolstandard.core.io.turtle.TurtleIo.1)
CALLER: org.sbolstandard.core.io.json.JsonIo.1.1#visit(org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo.1#access$0(org.sbolstandard.core.io.json.JsonIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEndElement()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$0(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName)
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$2(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.Literal)
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$3(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName)
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$4(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$4(org.sbolstandard.core.io.turtle.TurtleIo.1,org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core.io.json.JsonIo.1.1#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo.1#access$1(org.sbolstandard.core.io.json.JsonIo.1,org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core2.SequenceConstraint#<init>(java.net.URI,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setRestriction(org.sbolstandard.core2.RestrictionType)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorLookup#getCandidates(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorLookup#getCandidates(java.lang.Class,int)
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#isAssignable(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: org.openscience.cdk.DynamicFactory.ConstructorKey#isUniform()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#n()
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#type(int)
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#n()
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperties(org.sbolstandard.core.datatree.NamedProperty[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.2#addProperty(org.sbolstandard.core.datatree.IdentifiableDocument,org.sbolstandard.core.datatree.NamedProperty)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamespaceBindings(org.sbolstandard.core.datatree.NamespaceBinding[])
	CALLEE: static org.sbolstandard.core.datatree.Datatree#TopLevelDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(org.sbolstandard.core.datatree.Datatree.NamespaceBindings,java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core.datatree.Datatree.NamedProperties.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getType()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getIdentity()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getProperties()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(org.sbolstandard.core.datatree.NamedProperty[])
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getNamespaceBindings()
	CALLEE: org.sbolstandard.core.datatree.NestedDocument.Impl#getNamespaceBindings()
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
CALLER: uk.ac.ebi.beam.IntSet.BinarySet#<init>(java.util.BitSet)
	CALLEE: uk.ac.ebi.beam.IntSet#<init>()
CALLER: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#<init>(int,uk.ac.ebi.beam.MaximumMatching.1)
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#<init>(int)
CALLER: uk.ac.ebi.beam.MaximumMatching#augment()
	CALLEE: uk.ac.ebi.beam.Graph#degree(int)
	CALLEE: uk.ac.ebi.beam.Graph#edgeAt(int,int)
	CALLEE: uk.ac.ebi.beam.Edge#other(int)
	CALLEE: uk.ac.ebi.beam.Graph#order()
	CALLEE: uk.ac.ebi.beam.UnionFind#clear()
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#clear()
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#enqueue(int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#empty()
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#poll()
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#check(int,int)
	CALLEE: uk.ac.ebi.beam.IntSet.BinarySet#contains(int)
	CALLEE: uk.ac.ebi.beam.Matching#other(int)
	CALLEE: uk.ac.ebi.beam.Matching#unmatched(int)
CALLER: org.sbolstandard.core.datatree.Literal.TypedLiteral#<init>(java.lang.String,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: org.sbolstandard.core.datatree.Literal.BooleanLiteral#<init>(java.lang.Boolean)
	CALLEE: org.sbolstandard.core.datatree.Literal.Abstract#<init>()
CALLER: org.sbolstandard.core.io.json.JsonIo.2#readND(javax.json.JsonObject)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$0(org.sbolstandard.core.io.json.JsonIo)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.2#readPV(javax.json.JsonValue)
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$0(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeStartElement(javax.xml.namespace.QName)
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$1(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$0(org.sbolstandard.core.io.turtle.TurtleIo.1)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#pushIndent()
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$1(org.sbolstandard.core.io.turtle.TurtleIo.1)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeIndent()
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$2(org.sbolstandard.core.io.turtle.TurtleIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$3(org.sbolstandard.core.io.turtle.TurtleIo.1)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#popIndent()
CALLER: static org.sbolstandard.core.io.json.JsonIo.1#access$0(org.sbolstandard.core.io.json.JsonIo.1,org.sbolstandard.core.datatree.IdentifiableDocument)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.IdentifiableDocument)
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$2(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#isEmptyElementValue(org.sbolstandard.core.datatree.Literal)
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$3(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeEmptyElement(javax.xml.namespace.QName)
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$4(org.sbolstandard.core.io.rdf.RdfIo.1,org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.Literal)
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$4(org.sbolstandard.core.io.turtle.TurtleIo.1,org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.Literal)
CALLER: static org.sbolstandard.core.io.json.JsonIo.1#access$1(org.sbolstandard.core.io.json.JsonIo.1,org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core2.SequenceConstraint#setRestriction(org.sbolstandard.core2.RestrictionType)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.RestrictionType#convertToURI(org.sbolstandard.core2.RestrictionType)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
CALLER: org.openscience.cdk.DynamicFactory.ConstructorLookup#getCandidates(java.lang.Class,int)
	CALLEE: static org.openscience.cdk.DynamicFactory#access$600()
CALLER: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
CALLER: uk.ac.ebi.beam.MaximumMatching#check(int,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: uk.ac.ebi.beam.UnionFind#connected(int,int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#parent(java.util.BitSet,int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#blossom(int,int,int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#augment(int)
	CALLEE: uk.ac.ebi.beam.Matching#match(int,int)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#writeEmptyElement(javax.xml.namespace.QName)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1#write(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#<init>(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#visit(org.sbolstandard.core.datatree.Literal)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1#write(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#<init>(org.sbolstandard.core.io.turtle.TurtleIo.1,java.io.PrintWriter)
CALLER: org.sbolstandard.core.io.json.JsonIo.1#write(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#<init>(org.sbolstandard.core.io.json.JsonIo.1,javax.json.stream.JsonGenerator)
CALLER: uk.ac.ebi.beam.UnionFind#connected(int,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
CALLER: uk.ac.ebi.beam.MaximumMatching#parent(java.util.BitSet,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
CALLER: uk.ac.ebi.beam.MaximumMatching#blossom(int,int,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#blossomSupports(int,int,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#union(int,int)
CALLER: uk.ac.ebi.beam.MaximumMatching#augment(int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#buildPath(int[],int,int,int)
	CALLEE: uk.ac.ebi.beam.Matching#match(int,int)
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeEmptyElement(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#beforeMarkup()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterMarkup()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#<init>(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.stream.XMLStreamWriter)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#<init>()
CALLER: org.sbolstandard.core.datatree.Literal.Visitor#visit(org.sbolstandard.core.datatree.Literal)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
	CALLEE: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#<init>(org.sbolstandard.core.io.turtle.TurtleIo.1,java.io.PrintWriter)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#<init>()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#<init>(org.sbolstandard.core.io.json.JsonIo.1,javax.json.stream.JsonGenerator)
	CALLEE: org.sbolstandard.core.datatree.Literal.Visitor#<init>()
CALLER: uk.ac.ebi.beam.MaximumMatching#blossomSupports(int,int,int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching.FixedSizeQueue#enqueue(int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: static uk.ac.ebi.beam.Tuple#of(int,int)
CALLER: uk.ac.ebi.beam.UnionFind#union(int,int)
	CALLEE: uk.ac.ebi.beam.UnionFind#find(int)
	CALLEE: uk.ac.ebi.beam.UnionFind#join(int,int)
CALLER: uk.ac.ebi.beam.MaximumMatching#buildPath(int[],int,int,int)
	CALLEE: uk.ac.ebi.beam.MaximumMatching#buildPath(int[],int,int,int)
	CALLEE: static uk.ac.ebi.beam.MaximumMatching#reverse(int[],int,int)
	CALLEE: uk.ac.ebi.beam.Matching#other(int)
	CALLEE: uk.ac.ebi.beam.Matching#unmatched(int)
	CALLEE: uk.ac.ebi.beam.Tuple#second()
	CALLEE: uk.ac.ebi.beam.Tuple#first()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.StringLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.StringLiteral#getValue()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: static org.sbolstandard.core.io.rdf.RdfIo.1#access$5(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName,java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$5(org.sbolstandard.core.io.turtle.TurtleIo.1,java.net.URI)
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.UriLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.UriLiteral#getValue()
	CALLEE: static org.sbolstandard.core.io.json.JsonIo#access$2(org.sbolstandard.core.io.json.JsonIo)
	CALLEE: static org.sbolstandard.core.io.json.JsonIo.1#access$2(org.sbolstandard.core.io.json.JsonIo.1)
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.IntegerLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.IntegerLiteral#getValue()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.DoubleLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.DoubleLiteral#getValue()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getType()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getType()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.TypedLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getType()
CALLER: org.sbolstandard.core.io.rdf.RdfIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: org.sbolstandard.core.io.turtle.TurtleIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: org.sbolstandard.core.io.json.JsonIo.1.2#visit(org.sbolstandard.core.datatree.Literal.BooleanLiteral)
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: static uk.ac.ebi.beam.Tuple#of(int,int)
	CALLEE: uk.ac.ebi.beam.Tuple#<init>(int,int)
CALLER: javanet.staxutils.IndentingXMLStreamWriter#writeCharacters(java.lang.String)
	CALLEE: javanet.staxutils.IndentingXMLStreamWriter#afterData()
CALLER: static org.sbolstandard.core.io.rdf.RdfIo.1#access$5(org.sbolstandard.core.io.rdf.RdfIo.1,javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core.io.rdf.RdfIo.1#writeAttribute(javax.xml.namespace.QName,java.lang.String)
CALLER: static org.sbolstandard.core.io.turtle.TurtleIo.1#access$5(org.sbolstandard.core.io.turtle.TurtleIo.1,java.net.URI)
	CALLEE: org.sbolstandard.core.io.turtle.TurtleIo.1#writeURI(java.net.URI)
CALLER: org.sbolstandard.core2.Module#getDefinition()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getModuleDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.SequenceConstraint#getObjectDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
CALLER: org.sbolstandard.core2.SequenceConstraint#getSubjectDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
CALLER: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
CALLER: org.joda.time.format.DateTimeFormatter#withZoneUTC()
	CALLEE: org.joda.time.format.DateTimeFormatter#withZone(org.joda.time.DateTimeZone)
CALLER: org.joda.time.format.DateTimeFormatter#getParser()
	CALLEE: static org.joda.time.format.InternalParserDateTimeParser#of(org.joda.time.format.InternalParser)
CALLER: org.joda.time.format.DateTimeFormatter#parseDateTime(java.lang.String)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.chrono.ISOChronology#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatter#requireParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#selectChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeParserBucket#<init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket#getOffsetInteger()
	CALLEE: static org.joda.time.DateTimeZone#forOffsetMillis(int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#getZone()
	CALLEE: org.joda.time.DateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: org.joda.time.DateTime#withZone(org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.format.FormatUtils#createErrorMessage(java.lang.String,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.sbolstandard.core2.ComparableVersion.StringItem#isNull()
	CALLEE: static org.sbolstandard.core2.ComparableVersion.StringItem#comparableQualifier(java.lang.String)
CALLER: org.apache.http.config.RegistryBuilder#build()
	CALLEE: org.apache.http.config.Registry#<init>(java.util.Map)
CALLER: org.apache.http.impl.client.HttpClientBuilder#build()
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor#<init>(org.apache.http.conn.HttpClientConnectionManager,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder.1#<init>(org.apache.http.impl.client.HttpClientBuilder,org.apache.http.impl.client.IdleConnectionEvictor)
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor#start()
	CALLEE: org.apache.http.impl.client.HttpClientBuilder.2#<init>(org.apache.http.impl.client.HttpClientBuilder,org.apache.http.conn.HttpClientConnectionManager)
	CALLEE: org.apache.http.impl.client.InternalHttpClient#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.config.Lookup,org.apache.http.config.Lookup,org.apache.http.client.CookieStore,org.apache.http.client.CredentialsProvider,org.apache.http.client.config.RequestConfig,java.util.List)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#build()
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpRequestInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#add(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#add(org.apache.http.HttpRequestInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addAll(org.apache.http.HttpRequestInterceptor[])
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addFirst(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addFirst(org.apache.http.HttpRequestInterceptor)
	CALLEE: static org.apache.http.config.RegistryBuilder#create()
	CALLEE: static org.apache.http.conn.socket.PlainConnectionSocketFactory#getSocketFactory()
	CALLEE: static org.apache.http.ssl.SSLContexts#createDefault()
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#<init>(org.apache.http.config.Registry,org.apache.http.conn.HttpConnectionFactory,org.apache.http.conn.SchemePortResolver,org.apache.http.conn.DnsResolver,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.conn.util.PublicSuffixMatcherLoader#getDefault()
	CALLEE: org.apache.http.conn.ssl.DefaultHostnameVerifier#<init>(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLSocketFactory,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
	CALLEE: org.apache.http.config.RegistryBuilder#register(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.config.RegistryBuilder#build()
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#<init>()
	CALLEE: static org.apache.http.impl.client.HttpClientBuilder#split(java.lang.String)
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLContext,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultSocketConfig(org.apache.http.config.SocketConfig)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultMaxPerRoute(int)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setMaxTotal(int)
	CALLEE: static org.apache.http.util.VersionInfo#getUserAgent(java.lang.String,java.lang.String,java.lang.Class)
	CALLEE: org.apache.http.protocol.RequestTargetHost#<init>()
	CALLEE: org.apache.http.protocol.RequestUserAgent#<init>(java.lang.String)
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#<init>(org.apache.http.HttpRequestInterceptor[])
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#createMainExec(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.protocol.HttpProcessor,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#decorateMainExec(org.apache.http.impl.execchain.ClientExecChain)
	CALLEE: static org.apache.http.protocol.HttpProcessorBuilder#create()
	CALLEE: org.apache.http.client.protocol.RequestDefaultHeaders#<init>(java.util.Collection)
	CALLEE: org.apache.http.protocol.RequestContent#<init>()
	CALLEE: org.apache.http.client.protocol.RequestClientConnControl#<init>()
	CALLEE: org.apache.http.client.protocol.RequestExpectContinue#<init>()
	CALLEE: org.apache.http.client.protocol.RequestAddCookies#<init>()
	CALLEE: org.apache.http.client.protocol.RequestAcceptEncoding#<init>(java.util.List)
	CALLEE: org.apache.http.client.protocol.RequestAcceptEncoding#<init>()
	CALLEE: org.apache.http.client.protocol.RequestAuthCache#<init>()
	CALLEE: org.apache.http.client.protocol.ResponseProcessCookies#<init>()
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding#<init>(org.apache.http.config.Lookup)
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding#<init>()
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.protocol.HttpProcessor)
	CALLEE: org.apache.http.impl.client.HttpClientBuilder#decorateProtocolExec(org.apache.http.impl.execchain.ClientExecChain)
	CALLEE: org.apache.http.impl.execchain.RetryExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.HttpRequestRetryHandler)
	CALLEE: org.apache.http.impl.conn.DefaultProxyRoutePlanner#<init>(org.apache.http.HttpHost,org.apache.http.conn.SchemePortResolver)
	CALLEE: org.apache.http.impl.conn.SystemDefaultRoutePlanner#<init>(org.apache.http.conn.SchemePortResolver,java.net.ProxySelector)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#<init>(org.apache.http.conn.SchemePortResolver)
	CALLEE: org.apache.http.impl.execchain.RedirectExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.client.RedirectStrategy)
	CALLEE: org.apache.http.impl.execchain.ServiceUnavailableRetryExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.ServiceUnavailableRetryStrategy)
	CALLEE: org.apache.http.impl.execchain.BackoffStrategyExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.ConnectionBackoffStrategy,org.apache.http.client.BackoffManager)
	CALLEE: org.apache.http.impl.auth.BasicSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.DigestSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.NTLMSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.SPNegoSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.KerberosSchemeFactory#<init>()
	CALLEE: static org.apache.http.impl.client.CookieSpecRegistries#createDefault(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.impl.client.BasicCookieStore#<init>()
	CALLEE: org.apache.http.impl.client.SystemDefaultCredentialsProvider#<init>()
	CALLEE: org.apache.http.impl.client.BasicCredentialsProvider#<init>()
CALLER: org.sbolstandard.core2.SequenceAnnotation#deepCopy()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#<init>(org.sbolstandard.core2.SequenceAnnotation)
CALLER: org.sbolstandard.core2.SequenceConstraint#deepCopy()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#<init>(org.sbolstandard.core2.SequenceConstraint)
CALLER: org.sbolstandard.core2.Component#deepCopy()
	CALLEE: org.sbolstandard.core2.Component#<init>(org.sbolstandard.core2.Component)
CALLER: org.sbolstandard.core2.MapsTo#getRemote()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.Module#getDefinition()
CALLER: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperties(java.util.List)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.NestedDocument)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NestedDocument(java.lang.Object,java.net.URI,org.sbolstandard.core.datatree.Datatree.NamedProperties)
	CALLEE: org.sbolstandard.core2.Annotation#getNestedQName()
	CALLEE: org.sbolstandard.core2.Annotation#getNestedIdentity()
	CALLEE: org.sbolstandard.core2.Annotation#getValue()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.net.URI)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.String)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,int)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.Double)
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#getAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#isNestedAnnotations()
	CALLEE: org.sbolstandard.core2.Annotation#getURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isURIValue()
	CALLEE: org.sbolstandard.core2.Annotation#isBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#isDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#isIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#isStringValue()
	CALLEE: org.sbolstandard.core2.Annotation#getBooleanValue()
	CALLEE: org.sbolstandard.core2.Annotation#getDoubleValue()
	CALLEE: org.sbolstandard.core2.Annotation#getIntegerValue()
	CALLEE: org.sbolstandard.core2.Annotation#getStringValue()
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.Boolean)
CALLER: org.sbolstandard.core2.VariableComponent#getVariants()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.CombinatorialDerivation#enumerate()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#enumerate(org.sbolstandard.core2.SBOLDocument)
CALLER: org.sbolstandard.core2.TopLevel#isURIcompliant()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isURIcompliant(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#getRule()
	CALLEE: org.sbolstandard.core2.Collection#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Experiment#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.ExperimentalData#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Attachment#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Model#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Implementation#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Sequence#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.GenericTopLevel#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Activity#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Agent#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.Plan#checkDescendantsURIcompliance()
CALLER: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Sequence#getEncoding()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequences()
CALLER: org.sbolstandard.core2.SequenceAnnotation#getComponentDefinition()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
CALLER: org.sbolstandard.core2.Usage#getEntity()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getTopLevel(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.VariableComponent#getVariantCollections()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.ComponentDefinition#getImpliedNucleicAcidSequence()
	CALLEE: static org.sbolstandard.core2.Sequence#reverseComplement(java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getSortedLocations()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Sequence#getElements()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinition()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceByEncoding(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getImpliedNucleicAcidSequence()
	CALLEE: org.sbolstandard.core2.Component#getSortedSourceLocations()
CALLER: org.joda.time.format.InternalParserDateTimeParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#estimateParsedLength()
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimateParsedLength()
CALLER: uk.ac.ebi.beam.Topology.Tetrahedral#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.Tetrahedral#<init>(int,int[],int)
	CALLEE: static uk.ac.ebi.beam.Topology#sort(int[],int[])
	CALLEE: static uk.ac.ebi.beam.Topology#parity4(int[],int[])
CALLER: uk.ac.ebi.beam.Topology.Trigonal#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.Trigonal#<init>(int,int[],int)
	CALLEE: static uk.ac.ebi.beam.Topology#sort(int[],int[])
	CALLEE: static uk.ac.ebi.beam.Topology#parity(int[],int[])
CALLER: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#orderBy(int[])
	CALLEE: uk.ac.ebi.beam.Topology.ExtendedTetrahedral#<init>(int,int[],int)
	CALLEE: static uk.ac.ebi.beam.Topology#sort(int[],int[])
	CALLEE: static uk.ac.ebi.beam.Topology#parity4(int[],int[])
CALLER: org.apache.http.message.BasicHeaderValueFormatter#formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#estimateParametersLen(org.apache.http.NameValuePair[])
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)
CALLER: org.sbolstandard.core.datatree.IdentifiableDocument.Abstract#getPropertyValues(java.lang.Object)
	CALLEE: org.sbolstandard.core.datatree.TopLevelDocument.Impl#getProperties()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getName()
	CALLEE: org.sbolstandard.core.datatree.NamedProperty.Impl#getValue()
CALLER: org.oboparser.obo.OBOStanza#getName()
	CALLEE: org.oboparser.obo.OBOValue#toFullString()
CALLER: org.sbolstandard.core2.Association#getPlan()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Association#getAgent()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getAgent(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
CALLER: org.sbolstandard.core2.Annotation#compareTo(java.lang.Object)
	CALLEE: org.sbolstandard.core2.Annotation#compareTo(org.sbolstandard.core2.Annotation)
CALLER: uk.ac.ebi.beam.AtomBuilder#build()
	CALLEE: uk.ac.ebi.beam.AtomImpl.BracketAtom#<init>(int,uk.ac.ebi.beam.Element,int,int,int,boolean)
CALLER: org.sbolstandard.core2.SequenceAnnotation#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Location#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
CALLER: org.sbolstandard.core2.SequenceConstraint#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
CALLER: org.sbolstandard.core2.Component#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#isSetDisplayId()
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.Location#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#extractDisplayId(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addMapsTo(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.MapsTo#setLocal(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#removeChildSafely(org.sbolstandard.core2.Identified,java.util.Map)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
CALLER: org.sbolstandard.core2.Component#toString()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.ComponentInstance#toString()
CALLER: org.sbolstandard.core2.SequenceConstraint#toString()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
	CALLEE: org.sbolstandard.core2.Identified#toString()
	CALLEE: org.sbolstandard.core2.RestrictionType#toString()
CALLER: org.sbolstandard.core2.Module#toString()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.Measured#toString()
CALLER: org.sbolstandard.core2.Interaction#toString()
	CALLEE: org.sbolstandard.core2.Measured#toString()
CALLER: org.sbolstandard.core2.FunctionalComponent#toString()
	CALLEE: org.sbolstandard.core2.ComponentInstance#toString()
CALLER: org.sbolstandard.core2.VariableComponent#toString()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplateURI()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Association#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Usage#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Range#toString()
	CALLEE: org.sbolstandard.core2.Location#toString()
CALLER: org.sbolstandard.core2.GenericLocation#toString()
	CALLEE: org.sbolstandard.core2.Location#toString()
CALLER: org.sbolstandard.core2.MapsTo#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Measure#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Participation#toString()
	CALLEE: org.sbolstandard.core2.Measured#toString()
CALLER: org.sbolstandard.core2.Cut#toString()
	CALLEE: org.sbolstandard.core2.Location#toString()
CALLER: org.sbolstandard.core2.SequenceConstraint#copy(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.ComponentDefinition#getSortedSequenceAnnotationsByDisplayId()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition.SADisplayIdComparator#<init>(org.sbolstandard.core2.ComponentDefinition)
CALLER: uk.ac.ebi.beam.Matching#other(int)
	CALLEE: uk.ac.ebi.beam.Matching#unmatched(int)
CALLER: uk.ac.ebi.beam.Matching#matched(int)
	CALLEE: uk.ac.ebi.beam.Matching#unmatched(int)
CALLER: org.sbolstandard.core2.Component#copy(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#removeLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#addCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addCut(java.lang.String,int)
	CALLEE: org.sbolstandard.core2.Component#addGenericLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addGenericLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.Component#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.Component#addSourceRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addSourceRange(java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.Component#addSourceCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addSourceCut(java.lang.String,int)
	CALLEE: org.sbolstandard.core2.Component#addGenericSourceLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addGenericSourceLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.Range#copy(org.sbolstandard.core2.Range)
	CALLEE: org.sbolstandard.core2.Cut#copy(org.sbolstandard.core2.Cut)
	CALLEE: org.sbolstandard.core2.GenericLocation#copy(org.sbolstandard.core2.GenericLocation)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Component#setRoleIntegration(org.sbolstandard.core2.RoleIntegrationType)
	CALLEE: org.sbolstandard.core2.Component#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.Component#getRoles()
	CALLEE: org.sbolstandard.core2.Component#getRoleIntegration()
	CALLEE: org.sbolstandard.core2.ComponentInstance#copy(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.Component#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addRange(java.lang.String,int,int)
CALLER: org.sbolstandard.core2.SequenceAnnotation#copy(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#removeLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.Cut#copy(org.sbolstandard.core2.Cut)
	CALLEE: org.sbolstandard.core2.GenericLocation#copy(org.sbolstandard.core2.GenericLocation)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Range#copy(org.sbolstandard.core2.Range)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addCut(java.lang.String,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addGenericLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addGenericLocation(java.lang.String)
CALLER: org.sbolstandard.core2.VariableComponent#copy(org.sbolstandard.core2.VariableComponent)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariant(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantCollection(java.net.URI)
	CALLEE: org.sbolstandard.core2.VariableComponent#addVariantDerivation(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivationURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollectionURIs()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantURIs()
CALLER: org.sbolstandard.core2.Interaction#copy(org.sbolstandard.core2.Interaction)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Measured#copy(org.sbolstandard.core2.Measured)
	CALLEE: org.sbolstandard.core2.Participation#getParticipant()
	CALLEE: org.sbolstandard.core2.Participation#getRoles()
	CALLEE: org.sbolstandard.core2.Interaction#createParticipation(java.lang.String,java.lang.String,java.util.Set)
	CALLEE: org.sbolstandard.core2.Participation#copy(org.sbolstandard.core2.Participation)
CALLER: org.sbolstandard.core2.Module#copy(org.sbolstandard.core2.Module)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getLocal()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
	CALLEE: org.sbolstandard.core2.Measured#copy(org.sbolstandard.core2.Measured)
	CALLEE: org.sbolstandard.core2.Module#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#copy(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.FunctionalComponent#copy(org.sbolstandard.core2.FunctionalComponent)
	CALLEE: org.sbolstandard.core2.ComponentInstance#copy(org.sbolstandard.core2.ComponentInstance)
CALLER: org.sbolstandard.core2.Usage#copy(org.sbolstandard.core2.Usage)
	CALLEE: org.sbolstandard.core2.Usage#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Usage#getRoles()
CALLER: org.sbolstandard.core2.Association#copy(org.sbolstandard.core2.Association)
	CALLEE: org.sbolstandard.core2.Association#setPlan(java.net.URI)
	CALLEE: org.sbolstandard.core2.Association#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Association#getPlanURI()
	CALLEE: org.sbolstandard.core2.Association#getRoles()
	CALLEE: org.sbolstandard.core2.Association#isSetPlan()
CALLER: com.google.common.collect.Maps.ViewCachingAbstractMap#entrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#createEntrySet()
CALLER: org.sbolstandard.core2.Identified#createAnnotation(javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core2.Annotation#<init>(javax.xml.namespace.QName,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#addAnnotation(org.sbolstandard.core2.Annotation)
CALLER: org.apache.http.message.BasicHeader#toString()
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.message.BasicLineFormatter#formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)
CALLER: org.openscience.cdk.DynamicFactory.ModifiedCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ReflectionCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.1#modify(java.lang.Object)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.2#modify(java.lang.Object)
CALLER: org.openscience.cdk.DynamicFactory.ArrayWrapCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ReflectionCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ModifiedCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.ArrayWrapCreator#create(java.lang.Object[])
	CALLEE: org.openscience.cdk.DynamicFactory.1#create(java.lang.Object[])
CALLER: org.openscience.cdk.DynamicFactory.1#create(java.lang.Object[])
	CALLEE: static org.openscience.cdk.DynamicFactory#access$400(org.openscience.cdk.DynamicFactory,org.openscience.cdk.DynamicFactory.ConstructorKey)
CALLER: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getValue()
CALLER: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
	CALLEE: org.sbolstandard.core.datatree.Literal.BooleanLiteral#getValue()
CALLER: org.sbolstandard.core2.Component#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Component#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: org.joda.time.format.InternalParserDateTimeParser#equals(java.lang.Object)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#equals(java.lang.Object)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
CALLER: org.joda.time.format.DateTimeFormatter#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.format.DateTimeFormatter#<init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)
CALLER: org.joda.time.format.DateTimeFormatter#selectChronology(org.joda.time.Chronology)
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.ISOChronology#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withZone(org.joda.time.DateTimeZone)
CALLER: org.joda.time.format.DateTimeParserBucket#<init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.ISOChronology#withUTC()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withUTC()
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#getZone()
CALLER: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.CharSequence)
CALLER: static org.joda.time.DateTimeZone#forOffsetMillis(int)
	CALLEE: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: static org.joda.time.DateTimeZone#fixedOffsetZone(java.lang.String,int)
CALLER: org.joda.time.DateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.Chronology)
CALLER: org.joda.time.DateTime#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.DateTime#withChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.ISOChronology#withZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withZone(org.joda.time.DateTimeZone)
CALLER: org.apache.http.protocol.HttpRequestExecutor#<init>()
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#<init>(int)
CALLER: static org.apache.http.impl.client.HttpClientBuilder#split(java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
CALLER: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLContext,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.conn.ssl.SSLConnectionSocketFactory#<init>(javax.net.ssl.SSLSocketFactory,java.lang.String[],java.lang.String[],javax.net.ssl.HostnameVerifier)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultSocketConfig(org.apache.http.config.SocketConfig)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#setDefaultSocketConfig(org.apache.http.config.SocketConfig)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setDefaultMaxPerRoute(int)
	CALLEE: org.apache.http.pool.AbstractConnPool#setDefaultMaxPerRoute(int)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#setMaxTotal(int)
	CALLEE: org.apache.http.pool.AbstractConnPool#setMaxTotal(int)
CALLER: static org.apache.http.impl.DefaultConnectionReuseStrategy#<clinit>()
	CALLEE: org.apache.http.impl.DefaultConnectionReuseStrategy#<init>()
CALLER: static org.apache.http.impl.NoConnectionReuseStrategy#<clinit>()
	CALLEE: org.apache.http.impl.NoConnectionReuseStrategy#<init>()
CALLER: static org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy#<clinit>()
	CALLEE: org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy#<init>()
CALLER: static org.apache.http.impl.client.TargetAuthenticationStrategy#<clinit>()
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#<init>()
CALLER: static org.apache.http.impl.client.ProxyAuthenticationStrategy#<clinit>()
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#<init>()
CALLER: static org.apache.http.impl.client.DefaultUserTokenHandler#<clinit>()
	CALLEE: org.apache.http.impl.client.DefaultUserTokenHandler#<init>()
CALLER: static org.apache.http.impl.client.NoopUserTokenHandler#<clinit>()
	CALLEE: org.apache.http.impl.client.NoopUserTokenHandler#<init>()
CALLER: static org.apache.http.util.VersionInfo#getUserAgent(java.lang.String,java.lang.String,java.lang.Class)
	CALLEE: static org.apache.http.util.VersionInfo#loadVersionInfo(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.apache.http.util.VersionInfo#getRelease()
CALLER: org.apache.http.protocol.ImmutableHttpProcessor#<init>(org.apache.http.HttpRequestInterceptor[])
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#<init>(org.apache.http.HttpRequestInterceptor[],org.apache.http.HttpResponseInterceptor[])
CALLER: org.apache.http.impl.client.HttpClientBuilder#createMainExec(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.protocol.HttpProcessor,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler)
	CALLEE: org.apache.http.impl.execchain.MainClientExec#<init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.protocol.HttpProcessor,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler)
CALLER: static org.apache.http.protocol.HttpProcessorBuilder#create()
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#<init>()
CALLER: org.apache.http.protocol.RequestContent#<init>()
	CALLEE: org.apache.http.protocol.RequestContent#<init>(boolean)
CALLER: org.apache.http.client.protocol.RequestClientConnControl#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.client.protocol.RequestAddCookies#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.client.protocol.RequestAcceptEncoding#<init>()
	CALLEE: org.apache.http.client.protocol.RequestAcceptEncoding#<init>(java.util.List)
CALLER: org.apache.http.client.protocol.RequestAuthCache#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.client.protocol.ResponseProcessCookies#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.client.protocol.ResponseContentEncoding#<clinit>()
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding.1#<init>()
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding.2#<init>()
CALLER: org.apache.http.client.protocol.ResponseContentEncoding#<init>(org.apache.http.config.Lookup)
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding#<init>(org.apache.http.config.Lookup,boolean)
CALLER: org.apache.http.client.protocol.ResponseContentEncoding#<init>()
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding#<init>(org.apache.http.config.Lookup)
CALLER: org.apache.http.impl.execchain.ProtocolExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.protocol.HttpProcessor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<clinit>()
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<init>()
CALLER: org.apache.http.impl.execchain.RetryExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.HttpRequestRetryHandler)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.impl.conn.DefaultProxyRoutePlanner#<init>(org.apache.http.HttpHost,org.apache.http.conn.SchemePortResolver)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#<init>(org.apache.http.conn.SchemePortResolver)
CALLER: org.apache.http.impl.conn.SystemDefaultRoutePlanner#<init>(org.apache.http.conn.SchemePortResolver,java.net.ProxySelector)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#<init>(org.apache.http.conn.SchemePortResolver)
CALLER: static org.apache.http.impl.client.DefaultRedirectStrategy#<clinit>()
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#<init>()
CALLER: org.apache.http.impl.execchain.RedirectExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.client.RedirectStrategy)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.impl.execchain.ServiceUnavailableRetryExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.ServiceUnavailableRetryStrategy)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.impl.execchain.BackoffStrategyExec#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.client.ConnectionBackoffStrategy,org.apache.http.client.BackoffManager)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.auth.BasicSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.BasicSchemeFactory#<init>(java.nio.charset.Charset)
CALLER: org.apache.http.impl.auth.DigestSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.DigestSchemeFactory#<init>(java.nio.charset.Charset)
CALLER: org.apache.http.impl.auth.SPNegoSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.SPNegoSchemeFactory#<init>(boolean,boolean)
CALLER: org.apache.http.impl.auth.KerberosSchemeFactory#<init>()
	CALLEE: org.apache.http.impl.auth.KerberosSchemeFactory#<init>(boolean,boolean)
CALLER: static org.apache.http.impl.client.CookieSpecRegistries#createDefault(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.config.RegistryBuilder#build()
	CALLEE: static org.apache.http.impl.client.CookieSpecRegistries#createDefaultBuilder(org.apache.http.conn.util.PublicSuffixMatcher)
CALLER: org.apache.http.impl.client.BasicCookieStore#<init>()
	CALLEE: org.apache.http.cookie.CookieIdentityComparator#<init>()
CALLER: org.apache.http.impl.client.SystemDefaultCredentialsProvider#<init>()
	CALLEE: org.apache.http.impl.client.BasicCredentialsProvider#<init>()
CALLER: org.apache.http.impl.client.IdleConnectionEvictor#<init>(org.apache.http.conn.HttpClientConnectionManager,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor#<init>(org.apache.http.conn.HttpClientConnectionManager,java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)
CALLER: static org.apache.http.client.config.RequestConfig#<clinit>()
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#<init>()
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#build()
CALLER: org.apache.http.impl.client.InternalHttpClient#<init>(org.apache.http.impl.execchain.ClientExecChain,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.config.Lookup,org.apache.http.config.Lookup,org.apache.http.client.CookieStore,org.apache.http.client.CredentialsProvider,org.apache.http.client.config.RequestConfig,java.util.List)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#<init>()
CALLER: org.sbolstandard.core2.SequenceAnnotation#<init>(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#setComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getRoles()
	CALLEE: org.sbolstandard.core2.Range#deepCopy()
	CALLEE: org.sbolstandard.core2.GenericLocation#deepCopy()
	CALLEE: org.sbolstandard.core2.Cut#deepCopy()
CALLER: org.sbolstandard.core2.SequenceConstraint#<init>(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setRestriction(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubjectURI()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestrictionURI()
CALLER: org.sbolstandard.core2.Component#<init>(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Component#setMapsTos(java.util.Set)
	CALLEE: org.sbolstandard.core2.Component#addRole(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#getLocations()
	CALLEE: org.sbolstandard.core2.Component#getRoles()
	CALLEE: org.sbolstandard.core2.Range#deepCopy()
	CALLEE: org.sbolstandard.core2.GenericLocation#deepCopy()
	CALLEE: org.sbolstandard.core2.Cut#deepCopy()
	CALLEE: org.sbolstandard.core2.ComponentInstance#<init>(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.MapsTo#deepCopy()
CALLER: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,java.lang.Boolean)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#NamedProperty(java.lang.Object,org.sbolstandard.core.datatree.PropertyValue)
	CALLEE: static org.sbolstandard.core.datatree.Datatree#Literal(boolean)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#enumerate(org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#access$000(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
CALLER: org.sbolstandard.core2.ComponentDefinition#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocations()
	CALLEE: org.sbolstandard.core2.Component#getMapsTos()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#getRule()
	CALLEE: static org.sbolstandard.core2.URIcompliance#isChildURIcompliant(org.sbolstandard.core2.Identified,org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.CombinatorialDerivation#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.SBOLValidationException#getRule()
	CALLEE: static org.sbolstandard.core2.URIcompliance#isChildURIcompliant(org.sbolstandard.core2.Identified,org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.ModuleDefinition#checkDescendantsURIcompliance()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponents()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getModules()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getInteractions()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#getMapsTos()
	CALLEE: org.sbolstandard.core2.Interaction#getParticipations()
	CALLEE: org.sbolstandard.core2.Module#getMapsTos()
	CALLEE: org.sbolstandard.core2.SBOLValidationException#getRule()
	CALLEE: static org.sbolstandard.core2.URIcompliance#isChildURIcompliant(org.sbolstandard.core2.Identified,org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.Component#getSortedSourceLocations()
	CALLEE: org.sbolstandard.core2.Component#getSourceLocations()
CALLER: org.apache.http.message.BasicHeaderValueFormatter#estimateParametersLen(org.apache.http.NameValuePair[])
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#estimateNameValuePairLen(org.apache.http.NameValuePair)
CALLER: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#expand(int)
CALLER: org.apache.http.message.BasicHeaderValueFormatter#formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#estimateNameValuePairLen(org.apache.http.NameValuePair)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)
CALLER: org.sbolstandard.core2.Annotation#compareTo(org.sbolstandard.core2.Annotation)
	CALLEE: org.sbolstandard.core2.Annotation#getQName()
	CALLEE: org.sbolstandard.core2.Annotation#hashCode()
CALLER: org.sbolstandard.core2.Location#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
CALLER: org.sbolstandard.core2.MapsTo#updateCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#setIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
CALLER: org.sbolstandard.core2.ComponentInstance#toString()
	CALLEE: org.sbolstandard.core2.Measured#toString()
CALLER: org.sbolstandard.core2.Measured#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
CALLER: org.sbolstandard.core2.Location#toString()
	CALLEE: org.sbolstandard.core2.Identified#toString()
	CALLEE: org.sbolstandard.core2.Location#isSetOrientation()
CALLER: org.sbolstandard.core2.ComponentInstance#copy(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.Measured#copy(org.sbolstandard.core2.Measured)
CALLER: org.sbolstandard.core2.Component#addRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addRange(java.lang.String,int,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
CALLER: org.sbolstandard.core2.Component#addCut(java.lang.String,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
CALLER: org.sbolstandard.core2.Component#addGenericLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addGenericLocation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#getLocation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.Component#addSourceRange(java.lang.String,int,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addSourceRange(java.lang.String,int,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Range#<init>(java.net.URI,int,int)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addSourceCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
CALLER: org.sbolstandard.core2.Component#addSourceCut(java.lang.String,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
CALLER: org.sbolstandard.core2.Component#addGenericSourceLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Component#addGenericSourceLocation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addSourceLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Range#copy(org.sbolstandard.core2.Range)
	CALLEE: org.sbolstandard.core2.Location#copy(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addCut(java.lang.String,int,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addCut(java.lang.String,int)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Cut#<init>(java.net.URI,int)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addGenericLocation(java.lang.String,org.sbolstandard.core2.OrientationType)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.SequenceAnnotation#addGenericLocation(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#addLocation(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Measured#copy(org.sbolstandard.core2.Measured)
	CALLEE: static org.sbolstandard.core2.URIcompliance#findDisplayId(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
	CALLEE: org.sbolstandard.core2.Measure#getNumericalValue()
	CALLEE: org.sbolstandard.core2.Measure#getUnitURI()
	CALLEE: org.sbolstandard.core2.Measured#createMeasure(java.lang.String,java.lang.Double,java.net.URI)
	CALLEE: org.sbolstandard.core2.Measure#copy(org.sbolstandard.core2.Measure)
CALLER: org.sbolstandard.core2.Participation#getParticipant()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
CALLER: org.sbolstandard.core2.Interaction#createParticipation(java.lang.String,java.lang.String,java.util.Set)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.Interaction#createParticipation(java.lang.String,java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.Module#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.lang.String,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#getFunctionalComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isCreateDefaults()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.Module#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#createEntrySet()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
CALLER: org.apache.http.message.BasicLineFormatter#formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicLineFormatter#initBuffer(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BasicLineFormatter#doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)
	CALLEE: org.apache.http.message.BufferedHeader#getBuffer()
CALLER: org.openscience.cdk.DefaultChemObjectBuilder.1#modify(java.lang.Object)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.1#modify(org.openscience.cdk.stereo.TetrahedralChirality)
CALLER: org.openscience.cdk.DefaultChemObjectBuilder.2#modify(java.lang.Object)
	CALLEE: org.openscience.cdk.DefaultChemObjectBuilder.2#modify(org.openscience.cdk.stereo.DoubleBondStereochemistry)
CALLER: static org.openscience.cdk.DynamicFactory#access$400(org.openscience.cdk.DynamicFactory,org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory#getSuggestionMessage(org.openscience.cdk.DynamicFactory.ConstructorKey)
CALLER: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.lang.String,java.lang.String,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getDefaultURIprefix()
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.sbolstandard.core2.Identified#getSBOLDocument()
	CALLEE: org.sbolstandard.core2.ModuleDefinition#createFunctionalComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI,org.sbolstandard.core2.DirectionType)
	CALLEE: org.sbolstandard.core2.SBOLDocument#isTypesInURIs()
CALLER: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: org.sbolstandard.core2.Component#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Component#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static org.joda.time.UTCDateTimeZone#<clinit>()
	CALLEE: org.joda.time.UTCDateTimeZone#<init>()
CALLER: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance()
CALLER: static org.joda.time.DateTimeUtils#<clinit>()
	CALLEE: org.joda.time.DateTimeUtils.SystemMillisProvider#<init>()
CALLER: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.CharSequence)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.DateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.IllegalFieldValueException#prependMessage(java.lang.String)
	CALLEE: static org.joda.time.DateTimeFieldType#year()
	CALLEE: static org.joda.time.DurationFieldType#days()
	CALLEE: static org.joda.time.DurationFieldType#months()
	CALLEE: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.CharSequence)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#sort(org.joda.time.format.DateTimeParserBucket.SavedField[],int)
	CALLEE: org.joda.time.DurationFieldType.StandardDurationFieldType#getField(org.joda.time.Chronology)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.IllegalInstantException#<init>(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#set(long,boolean)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
CALLER: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.StringBuffer,int,int)
CALLER: static org.joda.time.DateTimeZone#fixedOffsetZone(java.lang.String,int)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#<init>(java.lang.String,java.lang.String,int,int)
CALLER: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: org.joda.time.base.AbstractDateTime#<init>()
	CALLEE: org.joda.time.base.BaseDateTime#checkChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.base.BaseDateTime#checkInstant(long,org.joda.time.Chronology)
	CALLEE: org.joda.time.base.BaseDateTime#adjustForMinMax()
CALLER: org.joda.time.DateTime#withChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.DateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
CALLER: org.apache.http.protocol.HttpRequestExecutor#<init>(int)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#<init>()
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#<init>(int,java.lang.String)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#<init>()
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#<init>(int,java.lang.String)
CALLER: static org.apache.http.util.VersionInfo#loadVersionInfo(java.lang.String,java.lang.ClassLoader)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.VersionInfo#fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)
CALLER: org.apache.http.impl.execchain.MainClientExec#<init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.protocol.HttpProcessor,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#<init>()
	CALLEE: org.apache.http.conn.routing.BasicRouteDirector#<init>()
CALLER: org.apache.http.client.protocol.ResponseContentEncoding#<init>(org.apache.http.config.Lookup,boolean)
	CALLEE: static org.apache.http.config.RegistryBuilder#create()
	CALLEE: org.apache.http.config.RegistryBuilder#register(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.config.RegistryBuilder#build()
CALLER: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<init>()
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<init>(int,boolean)
CALLER: org.apache.http.impl.client.DefaultRedirectStrategy#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.impl.client.CookieSpecRegistries#createDefaultBuilder(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: static org.apache.http.config.RegistryBuilder#create()
	CALLEE: org.apache.http.config.RegistryBuilder#register(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.impl.cookie.DefaultCookieSpecProvider#<init>(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.impl.cookie.RFC6265CookieSpecProvider#<init>(org.apache.http.impl.cookie.RFC6265CookieSpecProvider.CompatibilityLevel,org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.impl.cookie.NetscapeDraftSpecProvider#<init>()
	CALLEE: org.apache.http.impl.cookie.IgnoreSpecProvider#<init>()
CALLER: org.apache.http.impl.client.IdleConnectionEvictor#<init>(org.apache.http.conn.HttpClientConnectionManager,java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor.DefaultThreadFactory#<init>()
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor.1#<init>(org.apache.http.impl.client.IdleConnectionEvictor,org.apache.http.conn.HttpClientConnectionManager)
	CALLEE: org.apache.http.impl.client.IdleConnectionEvictor.DefaultThreadFactory#newThread(java.lang.Runnable)
CALLER: org.apache.http.client.config.RequestConfig.Builder#build()
	CALLEE: org.apache.http.client.config.RequestConfig#<init>(boolean,org.apache.http.HttpHost,java.net.InetAddress,boolean,java.lang.String,boolean,boolean,boolean,int,boolean,java.util.Collection,java.util.Collection,int,int,int,boolean)
CALLER: org.apache.http.impl.client.CloseableHttpClient#<init>()
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.sbolstandard.core2.Range#deepCopy()
	CALLEE: org.sbolstandard.core2.Range#<init>(org.sbolstandard.core2.Range)
CALLER: org.sbolstandard.core2.GenericLocation#deepCopy()
	CALLEE: org.sbolstandard.core2.GenericLocation#deepCopy()
CALLER: org.sbolstandard.core2.Cut#deepCopy()
	CALLEE: org.sbolstandard.core2.Cut#deepCopy()
CALLER: org.sbolstandard.core2.ComponentInstance#<init>(org.sbolstandard.core2.ComponentInstance)
	CALLEE: org.sbolstandard.core2.ComponentInstance#setAccess(org.sbolstandard.core2.AccessType)
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.Measured#<init>(org.sbolstandard.core2.Measured)
CALLER: org.sbolstandard.core2.MapsTo#deepCopy()
	CALLEE: org.sbolstandard.core2.MapsTo#<init>(org.sbolstandard.core2.MapsTo)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#access$000(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#enumerate(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
CALLER: static org.sbolstandard.core2.URIcompliance#isChildURIcompliant(org.sbolstandard.core2.Identified,org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.SBOLValidationException#<init>(java.lang.String,org.sbolstandard.core2.Identified[])
	CALLEE: static org.sbolstandard.core2.URIcompliance#isURIcompliant(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#isSetVersion()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.util.CharArrayBuffer#expand(int)
CALLER: org.apache.http.message.BasicHeaderValueFormatter#doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#isSeparator(char)
	CALLEE: org.apache.http.message.BasicHeaderValueFormatter#isUnsafe(char)
CALLER: org.sbolstandard.core2.Location#copy(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
CALLER: org.sbolstandard.core2.Measured#createMeasure(java.lang.String,java.lang.Double,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Measured#createMeasure(java.net.URI,java.lang.Double,java.net.URI)
CALLER: org.sbolstandard.core2.Interaction#createParticipation(java.lang.String,java.net.URI,java.util.Set)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Interaction#createParticipation(java.net.URI,java.net.URI,java.util.Set)
CALLER: org.sbolstandard.core2.Module#createMapsTo(java.lang.String,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setDisplayId(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#setPersistentIdentity(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#setVersion(java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.Module#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
	CALLEE: com.google.common.collect.Maps.EntrySet#<init>()
CALLER: org.apache.http.message.BasicLineFormatter#initBuffer(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
CALLER: org.apache.http.message.BasicLineFormatter#doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
CALLER: org.openscience.cdk.DynamicFactory#getSuggestionMessage(org.openscience.cdk.DynamicFactory.ConstructorKey)
	CALLEE: org.openscience.cdk.DynamicFactory.ClassBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory.ObjectBasedKey#intf()
	CALLEE: org.openscience.cdk.DynamicFactory#suggest(java.lang.Class)
CALLER: org.sbolstandard.core2.FunctionalComponent#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#<init>(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.FunctionalComponent#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.sbolstandard.core2.Component#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#<init>(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: org.joda.time.UTCDateTimeZone#<init>()
	CALLEE: org.joda.time.DateTimeZone#<init>(java.lang.String)
CALLER: static org.joda.time.chrono.ISOChronology#getInstance()
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance(org.joda.time.DateTimeZone)
CALLER: static org.joda.time.chrono.ISOChronology#<clinit>()
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstanceUTC()
	CALLEE: org.joda.time.chrono.ISOChronology#<init>(org.joda.time.Chronology)
CALLER: static org.joda.time.format.DateTimeParserBucket#sort(org.joda.time.format.DateTimeParserBucket.SavedField[],int)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#compareTo(org.joda.time.format.DateTimeParserBucket.SavedField)
CALLER: org.joda.time.DurationFieldType.StandardDurationFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.BaseChronology#weekyears()
	CALLEE: org.joda.time.chrono.BaseChronology#months()
	CALLEE: org.joda.time.chrono.BaseChronology#years()
	CALLEE: org.joda.time.chrono.BaseChronology#centuries()
	CALLEE: org.joda.time.chrono.BaseChronology#eras()
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.BaseChronology#millis()
	CALLEE: org.joda.time.chrono.BaseChronology#seconds()
	CALLEE: org.joda.time.chrono.BaseChronology#minutes()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: org.joda.time.chrono.BaseChronology#halfdays()
	CALLEE: org.joda.time.chrono.BaseChronology#days()
	CALLEE: org.joda.time.chrono.BaseChronology#weeks()
	CALLEE: org.joda.time.chrono.AssembledChronology#millis()
	CALLEE: org.joda.time.chrono.AssembledChronology#seconds()
	CALLEE: org.joda.time.chrono.AssembledChronology#minutes()
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
	CALLEE: org.joda.time.chrono.AssembledChronology#halfdays()
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
	CALLEE: org.joda.time.chrono.AssembledChronology#weeks()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyears()
	CALLEE: org.joda.time.chrono.AssembledChronology#months()
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
	CALLEE: org.joda.time.chrono.AssembledChronology#centuries()
	CALLEE: org.joda.time.chrono.AssembledChronology#eras()
CALLER: static org.joda.time.format.DateTimeParserBucket#compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.UnsupportedDurationField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#isSupported()
	CALLEE: org.joda.time.field.MillisDurationField#compareTo(java.lang.Object)
CALLER: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#obtainSaveField()
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#init(org.joda.time.DateTimeField,int)
CALLER: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.StringBuffer,int,int)
	CALLEE: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.Appendable,int,int)
CALLER: org.joda.time.tz.FixedDateTimeZone#<init>(java.lang.String,java.lang.String,int,int)
	CALLEE: org.joda.time.DateTimeZone#<init>(java.lang.String)
CALLER: org.joda.time.base.AbstractDateTime#<init>()
	CALLEE: org.joda.time.base.AbstractInstant#<init>()
CALLER: org.joda.time.base.BaseDateTime#checkChronology(org.joda.time.Chronology)
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
CALLER: org.joda.time.base.BaseDateTime#adjustForMinMax()
	CALLEE: org.joda.time.chrono.ISOChronology#withUTC()
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withUTC()
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#<init>(int,java.lang.String)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.util.VersionInfo#fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.VersionInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.apache.http.impl.auth.HttpAuthenticator#<init>()
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#<init>(org.apache.commons.logging.Log)
CALLER: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<init>(int,boolean)
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#<init>(int,boolean,java.util.Collection)
CALLER: org.apache.http.impl.cookie.DefaultCookieSpecProvider#<init>(org.apache.http.conn.util.PublicSuffixMatcher)
	CALLEE: org.apache.http.impl.cookie.DefaultCookieSpecProvider#<init>(org.apache.http.impl.cookie.DefaultCookieSpecProvider.CompatibilityLevel,org.apache.http.conn.util.PublicSuffixMatcher,java.lang.String[],boolean)
CALLER: static org.apache.http.impl.cookie.RFC6265CookieSpecProvider.CompatibilityLevel#<clinit>()
	CALLEE: org.apache.http.impl.cookie.RFC6265CookieSpecProvider.CompatibilityLevel#<init>(java.lang.String,int)
CALLER: org.apache.http.impl.cookie.NetscapeDraftSpecProvider#<init>()
	CALLEE: org.apache.http.impl.cookie.NetscapeDraftSpecProvider#<init>(java.lang.String[])
CALLER: org.sbolstandard.core2.Range#<init>(org.sbolstandard.core2.Range)
	CALLEE: org.sbolstandard.core2.Range#setEnd(int)
	CALLEE: org.sbolstandard.core2.Range#setStart(int)
	CALLEE: org.sbolstandard.core2.Range#getStart()
	CALLEE: org.sbolstandard.core2.Range#getEnd()
	CALLEE: org.sbolstandard.core2.Location#<init>(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.GenericLocation#deepCopy()
	CALLEE: org.sbolstandard.core2.GenericLocation#<init>(org.sbolstandard.core2.GenericLocation)
CALLER: org.sbolstandard.core2.Cut#deepCopy()
	CALLEE: org.sbolstandard.core2.Cut#<init>(org.sbolstandard.core2.Cut)
CALLER: org.sbolstandard.core2.Measured#<init>(org.sbolstandard.core2.Measured)
	CALLEE: org.sbolstandard.core2.Measured#setMeasures(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Measured#getMeasures()
CALLER: org.sbolstandard.core2.MapsTo#<init>(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.MapsTo#setRefinement(org.sbolstandard.core2.RefinementType)
	CALLEE: org.sbolstandard.core2.MapsTo#setLocal(java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#setRemote(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.MapsTo#getLocalURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRemoteURI()
	CALLEE: org.sbolstandard.core2.MapsTo#getRefinement()
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#enumerate(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createCopy(org.sbolstandard.core2.TopLevel,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getVariableComponents()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.net.URI)
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.VariableComponent#getOperator()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariableURI()
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#createTemplateCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#collectVariants(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.VariableComponent)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#group(java.util.HashSet,org.sbolstandard.core2.OperatorType)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getUniqueDisplayId(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,java.lang.String,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#addChildren(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component,org.sbolstandard.core2.ComponentDefinition,java.util.HashSet)
CALLER: org.sbolstandard.core2.Measured#createMeasure(java.net.URI,java.lang.Double,java.net.URI)
	CALLEE: org.sbolstandard.core2.Measure#<init>(java.net.URI,double,java.net.URI)
	CALLEE: org.sbolstandard.core2.Measured#addMeasure(org.sbolstandard.core2.Measure)
CALLER: org.sbolstandard.core2.Interaction#createParticipation(java.net.URI,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Participation#<init>(java.net.URI,java.net.URI,java.util.Set)
	CALLEE: org.sbolstandard.core2.Interaction#addParticipation(org.sbolstandard.core2.Participation)
CALLER: org.sbolstandard.core2.Module#createMapsTo(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.MapsTo#<init>(java.net.URI,org.sbolstandard.core2.RefinementType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.Module#addMapsTo(org.sbolstandard.core2.MapsTo)
CALLER: com.google.common.collect.Maps.EntrySet#<init>()
	CALLEE: com.google.common.collect.Sets.ImprovedAbstractSet#<init>()
CALLER: org.openscience.cdk.DynamicFactory#suggest(java.lang.Class)
	CALLEE: static org.openscience.cdk.DynamicFactory.ConstructorLookup#access$500(org.openscience.cdk.DynamicFactory.ConstructorLookup,java.lang.Class)
CALLER: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.DateTimeZone#forID(java.lang.String)
	CALLEE: static org.joda.time.DateTimeZone#forTimeZone(java.util.TimeZone)
CALLER: static org.joda.time.chrono.ISOChronology#getInstance(org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: org.joda.time.chrono.ISOChronology#<init>(org.joda.time.Chronology)
	CALLEE: static org.joda.time.chrono.ZonedChronology#getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)
CALLER: static org.joda.time.chrono.GregorianChronology#<clinit>()
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstance(org.joda.time.DateTimeZone)
CALLER: static org.joda.time.chrono.BasicChronology#<clinit>()
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfHour()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfMinute()
	CALLEE: static org.joda.time.DurationFieldType#days()
	CALLEE: static org.joda.time.DurationFieldType#weeks()
	CALLEE: static org.joda.time.DurationFieldType#halfdays()
	CALLEE: static org.joda.time.DurationFieldType#hours()
	CALLEE: static org.joda.time.DurationFieldType#minutes()
	CALLEE: static org.joda.time.DurationFieldType#seconds()
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfDay()
	CALLEE: org.joda.time.field.PreciseDurationField#<init>(org.joda.time.DurationFieldType,long)
	CALLEE: static org.joda.time.DateTimeFieldType#millisOfSecond()
	CALLEE: org.joda.time.field.PreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#millisOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfHalfday()
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfDay()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#<init>()
CALLER: org.joda.time.chrono.ISOChronology#<init>(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.AssembledChronology#<init>(org.joda.time.Chronology,java.lang.Object)
CALLER: org.joda.time.format.DateTimeParserBucket#obtainSaveField()
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#<init>()
CALLER: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfYear()
	CALLEE: org.joda.time.chrono.BaseChronology#year()
	CALLEE: org.joda.time.chrono.BaseChronology#yearOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#yearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#centuryOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#era()
	CALLEE: static org.joda.time.DateTimeUtils#getChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.BaseChronology#millisOfSecond()
	CALLEE: org.joda.time.chrono.BaseChronology#millisOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#secondOfMinute()
	CALLEE: org.joda.time.chrono.BaseChronology#secondOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#minuteOfHour()
	CALLEE: org.joda.time.chrono.BaseChronology#minuteOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#clockhourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#halfdayOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfWeek()
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfMonth()
	CALLEE: org.joda.time.chrono.BaseChronology#weekOfWeekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#era()
	CALLEE: org.joda.time.chrono.AssembledChronology#centuryOfEra()
	CALLEE: org.joda.time.chrono.AssembledChronology#yearOfCentury()
	CALLEE: org.joda.time.chrono.AssembledChronology#yearOfEra()
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyearOfCentury()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyear()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekOfWeekyear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfMonth()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfWeek()
	CALLEE: org.joda.time.chrono.AssembledChronology#halfdayOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.AssembledChronology#hourOfHalfday()
	CALLEE: org.joda.time.chrono.AssembledChronology#clockhourOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#hourOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#minuteOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#minuteOfHour()
	CALLEE: org.joda.time.chrono.AssembledChronology#secondOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#secondOfMinute()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfSecond()
CALLER: org.apache.http.util.VersionInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.auth.HttpAuthenticator#<init>(org.apache.commons.logging.Log)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: static org.apache.http.impl.cookie.DefaultCookieSpecProvider.CompatibilityLevel#<clinit>()
	CALLEE: org.apache.http.impl.cookie.DefaultCookieSpecProvider.CompatibilityLevel#<init>(java.lang.String,int)
CALLER: org.sbolstandard.core2.Location#<init>(org.sbolstandard.core2.Location)
	CALLEE: org.sbolstandard.core2.Location#setOrientation(org.sbolstandard.core2.OrientationType)
	CALLEE: org.sbolstandard.core2.Location#setSequence(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#<init>(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Location#getOrientation()
	CALLEE: org.sbolstandard.core2.Location#isSetSequence()
	CALLEE: org.sbolstandard.core2.Location#getSequenceURI()
CALLER: org.sbolstandard.core2.GenericLocation#<init>(org.sbolstandard.core2.GenericLocation)
	CALLEE: org.sbolstandard.core2.Location#<init>(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.Cut#<init>(org.sbolstandard.core2.Cut)
	CALLEE: org.sbolstandard.core2.Cut#setAt(int)
	CALLEE: org.sbolstandard.core2.Cut#getAt()
	CALLEE: org.sbolstandard.core2.Location#<init>(org.sbolstandard.core2.Location)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#createTemplateCopy(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#setRoles(java.util.Set)
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponents()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
	CALLEE: org.sbolstandard.core2.CombinatorialDerivation#getTemplate()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getTypes()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getRoles()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSortedComponents()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getAccess()
	CALLEE: org.sbolstandard.core2.ComponentInstance#getDefinitionURI()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getUniqueDisplayId(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,java.lang.String,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.util.Set)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#collectVariants(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.VariableComponent)
	CALLEE: org.sbolstandard.core2.Collection#getMembers()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariants()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantDerivations()
	CALLEE: org.sbolstandard.core2.VariableComponent#getVariantCollections()
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#enumerate(org.sbolstandard.core2.SBOLDocument,org.sbolstandard.core2.CombinatorialDerivation)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#group(java.util.HashSet,org.sbolstandard.core2.OperatorType)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#generateCombinations(java.util.HashSet,org.sbolstandard.core2.ComponentDefinition[],int,java.util.HashSet)
	CALLEE: org.sbolstandard.core2.OperatorType#toString()
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getUniqueDisplayId(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,java.lang.String,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.SBOLDocument#getComponentDefinition(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotation(java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getLocation(java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraint(java.lang.String)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#addChildren(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component,org.sbolstandard.core2.ComponentDefinition,java.util.HashSet)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createSequenceConstraint(java.lang.String,org.sbolstandard.core2.RestrictionType,java.net.URI,java.net.URI)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getAfterComponent(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceAnnotations()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
	CALLEE: org.sbolstandard.core2.Identified#addWasDerivedFrom(java.net.URI)
	CALLEE: org.sbolstandard.core2.Component#setDefinition(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeComponent(org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequenceAnnotation(org.sbolstandard.core2.SequenceAnnotation)
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#isSetComponent()
	CALLEE: org.sbolstandard.core2.SequenceAnnotation#getComponentURI()
	CALLEE: org.sbolstandard.core2.ComponentDefinition#createComponent(java.lang.String,org.sbolstandard.core2.AccessType,java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getComponent(java.lang.String)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getUniqueDisplayId(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.CombinatorialDerivation,java.lang.String,java.lang.String,java.lang.String,org.sbolstandard.core2.SBOLDocument)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#removeConstraintReferences(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getBeforeComponent(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
CALLER: static org.openscience.cdk.DynamicFactory.ConstructorLookup#access$500(org.openscience.cdk.DynamicFactory.ConstructorLookup,java.lang.Class)
	CALLEE: org.openscience.cdk.DynamicFactory.ConstructorLookup#getConstructors(java.lang.Class)
CALLER: static org.joda.time.DateTimeZone#forID(java.lang.String)
	CALLEE: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: static org.joda.time.DateTimeZone#fixedOffsetZone(java.lang.String,int)
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.DateTimeZone#getProvider()
	CALLEE: static org.joda.time.DateTimeZone#parseOffset(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getZone(java.lang.String)
	CALLEE: org.joda.time.tz.UTCProvider#getZone(java.lang.String)
CALLER: static org.joda.time.DateTimeZone#forTimeZone(java.util.TimeZone)
	CALLEE: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: static org.joda.time.DateTimeZone#fixedOffsetZone(java.lang.String,int)
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.DateTimeZone#getProvider()
	CALLEE: static org.joda.time.DateTimeZone#parseOffset(java.lang.String)
	CALLEE: static org.joda.time.DateTimeZone#getConvertedId(java.lang.String)
	CALLEE: static org.joda.time.DateTimeZone#convertToAsciiNumber(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getZone(java.lang.String)
	CALLEE: org.joda.time.tz.UTCProvider#getZone(java.lang.String)
CALLER: static org.joda.time.chrono.ZonedChronology#getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.chrono.ISOChronology#withUTC()
	CALLEE: org.joda.time.chrono.ZonedChronology#<init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.chrono.GregorianChronology#withUTC()
CALLER: static org.joda.time.chrono.GregorianChronology#getInstance(org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstance(org.joda.time.DateTimeZone,int)
CALLER: static org.joda.time.field.MillisDurationField#<clinit>()
	CALLEE: org.joda.time.field.MillisDurationField#<init>()
CALLER: org.joda.time.field.PreciseDurationField#<init>(org.joda.time.DurationFieldType,long)
	CALLEE: org.joda.time.field.BaseDurationField#<init>(org.joda.time.DurationFieldType)
CALLER: org.joda.time.field.PreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#isPrecise()
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#isPrecise()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DecoratedDurationField#isPrecise()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#isPrecise()
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
CALLER: org.joda.time.chrono.BasicChronology.HalfdayField#<init>()
	CALLEE: org.joda.time.field.PreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#halfdayOfDay()
	CALLEE: static org.joda.time.chrono.BasicChronology#access$000()
	CALLEE: static org.joda.time.chrono.BasicChronology#access$100()
CALLER: org.joda.time.chrono.AssembledChronology#<init>(org.joda.time.Chronology,java.lang.Object)
	CALLEE: org.joda.time.chrono.BaseChronology#<init>()
	CALLEE: org.joda.time.chrono.AssembledChronology#setFields()
CALLER: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.util.Set)
	CALLEE: org.sbolstandard.core2.SBOLDocument#createComponentDefinition(java.lang.String,java.lang.String,java.lang.String,java.util.Set)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#generateCombinations(java.util.HashSet,org.sbolstandard.core2.ComponentDefinition[],int,java.util.HashSet)
	CALLEE: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#generateCombinations(java.util.HashSet,org.sbolstandard.core2.ComponentDefinition[],int,java.util.HashSet)
CALLER: org.sbolstandard.core2.SBOLDocument#getSequence(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getSequence(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.SBOLDocument#getCombinatorialDerivation(java.net.URI)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#removeConstraintReferences(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Identified#getIdentity()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setSubject(java.net.URI)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#setObject(java.net.URI)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#removeSequenceConstraint(org.sbolstandard.core2.SequenceConstraint)
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getBeforeComponent(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
CALLER: static org.sbolstandard.core2.CombinatorialDerivation.CombinatorialExpansionUtil#getAfterComponent(org.sbolstandard.core2.ComponentDefinition,org.sbolstandard.core2.Component)
	CALLEE: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraints()
	CALLEE: org.sbolstandard.core2.Component#equals(java.lang.Object)
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getSubject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getObject()
	CALLEE: org.sbolstandard.core2.SequenceConstraint#getRestriction()
CALLER: static org.joda.time.DateTimeZone#getProvider()
	CALLEE: static org.joda.time.DateTimeZone#getDefaultProvider()
CALLER: static org.joda.time.DateTimeZone#parseOffset(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatter#parseMillis(java.lang.String)
CALLER: org.joda.time.chrono.ZonedChronology#<init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.chrono.AssembledChronology#<init>(org.joda.time.Chronology,java.lang.Object)
CALLER: static org.joda.time.chrono.GregorianChronology#getInstance(org.joda.time.DateTimeZone,int)
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.chrono.ZonedChronology#getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstance(org.joda.time.DateTimeZone,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
CALLER: org.joda.time.field.MillisDurationField#<init>()
	CALLEE: org.joda.time.DurationField#<init>()
CALLER: org.joda.time.field.BaseDurationField#<init>(org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.DurationField#<init>()
CALLER: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#isPrecise()
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#isPrecise()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DecoratedDurationField#isPrecise()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#isPrecise()
CALLER: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.BaseDateTimeField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isSupported()
CALLER: org.joda.time.chrono.BaseChronology#<init>()
	CALLEE: org.joda.time.Chronology#<init>()
CALLER: org.joda.time.chrono.AssembledChronology#setFields()
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfMonth()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfDay()
	CALLEE: org.joda.time.chrono.ZonedChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.GregorianChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.AssembledChronology.Fields#<init>()
	CALLEE: org.joda.time.chrono.AssembledChronology.Fields#copyFieldsFrom(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.ISOChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.BaseChronology#millis()
	CALLEE: org.joda.time.chrono.BaseChronology#seconds()
	CALLEE: org.joda.time.chrono.BaseChronology#minutes()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: org.joda.time.chrono.BaseChronology#halfdays()
	CALLEE: org.joda.time.chrono.BaseChronology#days()
	CALLEE: org.joda.time.chrono.BaseChronology#weeks()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyears()
	CALLEE: org.joda.time.chrono.BaseChronology#months()
	CALLEE: org.joda.time.chrono.BaseChronology#years()
	CALLEE: org.joda.time.chrono.BaseChronology#centuries()
	CALLEE: org.joda.time.chrono.BaseChronology#eras()
	CALLEE: org.joda.time.chrono.BaseChronology#millisOfSecond()
	CALLEE: org.joda.time.chrono.BaseChronology#millisOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#secondOfMinute()
	CALLEE: org.joda.time.chrono.BaseChronology#secondOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#minuteOfHour()
	CALLEE: org.joda.time.chrono.BaseChronology#minuteOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#clockhourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#halfdayOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfWeek()
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfMonth()
	CALLEE: org.joda.time.chrono.BaseChronology#dayOfYear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekOfWeekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.BaseChronology#year()
	CALLEE: org.joda.time.chrono.BaseChronology#yearOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#yearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#centuryOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#era()
	CALLEE: org.joda.time.chrono.AssembledChronology#hourOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#minuteOfHour()
	CALLEE: org.joda.time.chrono.AssembledChronology#secondOfMinute()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfSecond()
CALLER: static org.joda.time.DateTimeZone#getDefaultProvider()
	CALLEE: static org.joda.time.DateTimeZone#validateProvider(org.joda.time.tz.Provider)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#<init>(java.io.File)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#<init>(java.lang.String)
	CALLEE: org.joda.time.tz.UTCProvider#<init>()
CALLER: static org.joda.time.DateTimeZone.LazyInit#<clinit>()
	CALLEE: static org.joda.time.DateTimeZone.LazyInit#buildMap()
	CALLEE: static org.joda.time.DateTimeZone.LazyInit#buildFormatter()
CALLER: org.joda.time.chrono.GregorianChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
CALLER: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.DateTimeField#<init>()
CALLER: org.joda.time.chrono.AssembledChronology.Fields#copyFieldsFrom(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.AssembledChronology#millis()
	CALLEE: org.joda.time.chrono.AssembledChronology#seconds()
	CALLEE: org.joda.time.chrono.AssembledChronology#minutes()
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
	CALLEE: org.joda.time.chrono.AssembledChronology#halfdays()
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
	CALLEE: org.joda.time.chrono.AssembledChronology#weeks()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyears()
	CALLEE: org.joda.time.chrono.AssembledChronology#months()
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
	CALLEE: org.joda.time.chrono.AssembledChronology#centuries()
	CALLEE: org.joda.time.chrono.AssembledChronology#eras()
	CALLEE: org.joda.time.chrono.AssembledChronology#secondOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#secondOfMinute()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfSecond()
	CALLEE: static org.joda.time.chrono.AssembledChronology.Fields#isSupported(org.joda.time.DurationField)
	CALLEE: static org.joda.time.chrono.AssembledChronology.Fields#isSupported(org.joda.time.DateTimeField)
	CALLEE: org.joda.time.chrono.AssembledChronology#era()
	CALLEE: org.joda.time.chrono.AssembledChronology#centuryOfEra()
	CALLEE: org.joda.time.chrono.AssembledChronology#yearOfCentury()
	CALLEE: org.joda.time.chrono.AssembledChronology#yearOfEra()
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyearOfCentury()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyear()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekOfWeekyear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfMonth()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfWeek()
	CALLEE: org.joda.time.chrono.AssembledChronology#halfdayOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.AssembledChronology#hourOfHalfday()
	CALLEE: org.joda.time.chrono.AssembledChronology#clockhourOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#hourOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#minuteOfDay()
	CALLEE: org.joda.time.chrono.AssembledChronology#minuteOfHour()
CALLER: org.joda.time.chrono.ISOChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.AssembledChronology#getBase()
	CALLEE: static org.joda.time.DateTimeFieldType#centuryOfEra()
	CALLEE: org.joda.time.field.DividedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfCentury()
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: static org.joda.time.DateTimeFieldType#weekyearOfCentury()
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.BasicChronology#getZone()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
CALLER: org.joda.time.chrono.BaseChronology#millis()
	CALLEE: static org.joda.time.DurationFieldType#millis()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#seconds()
	CALLEE: static org.joda.time.DurationFieldType#seconds()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#minutes()
	CALLEE: static org.joda.time.DurationFieldType#minutes()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: static org.joda.time.DurationFieldType#hours()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#halfdays()
	CALLEE: static org.joda.time.DurationFieldType#halfdays()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#days()
	CALLEE: static org.joda.time.DurationFieldType#days()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#weeks()
	CALLEE: static org.joda.time.DurationFieldType#weeks()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#weekyears()
	CALLEE: static org.joda.time.DurationFieldType#weekyears()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#months()
	CALLEE: static org.joda.time.DurationFieldType#months()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#years()
	CALLEE: static org.joda.time.DurationFieldType#years()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#centuries()
	CALLEE: static org.joda.time.DurationFieldType#centuries()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#eras()
	CALLEE: static org.joda.time.DurationFieldType#eras()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.BaseChronology#millisOfSecond()
	CALLEE: static org.joda.time.DateTimeFieldType#millisOfSecond()
	CALLEE: org.joda.time.chrono.BaseChronology#millis()
	CALLEE: org.joda.time.chrono.AssembledChronology#millis()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.chrono.BaseChronology#millisOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#millisOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#millis()
	CALLEE: org.joda.time.chrono.AssembledChronology#millis()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.chrono.BaseChronology#secondOfMinute()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfMinute()
	CALLEE: org.joda.time.chrono.BaseChronology#seconds()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#seconds()
CALLER: org.joda.time.chrono.BaseChronology#secondOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#secondOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#seconds()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#seconds()
CALLER: org.joda.time.chrono.BaseChronology#minuteOfHour()
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfHour()
	CALLEE: org.joda.time.chrono.BaseChronology#minutes()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#minutes()
CALLER: org.joda.time.chrono.BaseChronology#minuteOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#minuteOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#minutes()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#minutes()
CALLER: org.joda.time.chrono.BaseChronology#hourOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
CALLER: org.joda.time.chrono.BaseChronology#clockhourOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
CALLER: org.joda.time.chrono.BaseChronology#hourOfHalfday()
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
CALLER: org.joda.time.chrono.BaseChronology#clockhourOfHalfday()
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfHalfday()
	CALLEE: org.joda.time.chrono.BaseChronology#hours()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#hours()
CALLER: org.joda.time.chrono.BaseChronology#halfdayOfDay()
	CALLEE: static org.joda.time.DateTimeFieldType#halfdayOfDay()
	CALLEE: org.joda.time.chrono.BaseChronology#halfdays()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#halfdays()
CALLER: org.joda.time.chrono.BaseChronology#dayOfWeek()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.chrono.BaseChronology#days()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
CALLER: org.joda.time.chrono.BaseChronology#dayOfMonth()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfMonth()
	CALLEE: org.joda.time.chrono.BaseChronology#days()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
CALLER: org.joda.time.chrono.BaseChronology#dayOfYear()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfYear()
	CALLEE: org.joda.time.chrono.BaseChronology#days()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
CALLER: org.joda.time.chrono.BaseChronology#weekOfWeekyear()
	CALLEE: static org.joda.time.DateTimeFieldType#weekOfWeekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weeks()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#weeks()
CALLER: org.joda.time.chrono.BaseChronology#weekyear()
	CALLEE: static org.joda.time.DateTimeFieldType#weekyear()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyears()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyears()
CALLER: org.joda.time.chrono.BaseChronology#weekyearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyears()
	CALLEE: static org.joda.time.DateTimeFieldType#weekyearOfCentury()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyears()
CALLER: org.joda.time.chrono.BaseChronology#monthOfYear()
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.chrono.BaseChronology#months()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#months()
CALLER: org.joda.time.chrono.BaseChronology#year()
	CALLEE: static org.joda.time.DateTimeFieldType#year()
	CALLEE: org.joda.time.chrono.BaseChronology#years()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
CALLER: org.joda.time.chrono.BaseChronology#yearOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#years()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfEra()
CALLER: org.joda.time.chrono.BaseChronology#yearOfCentury()
	CALLEE: org.joda.time.chrono.BaseChronology#years()
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfCentury()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
CALLER: org.joda.time.chrono.BaseChronology#centuryOfEra()
	CALLEE: org.joda.time.chrono.BaseChronology#centuries()
	CALLEE: static org.joda.time.DateTimeFieldType#centuryOfEra()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.AssembledChronology#centuries()
CALLER: org.joda.time.chrono.BaseChronology#era()
	CALLEE: org.joda.time.chrono.BaseChronology#eras()
	CALLEE: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#era()
	CALLEE: org.joda.time.chrono.AssembledChronology#eras()
CALLER: static org.joda.time.DateTimeZone#validateProvider(org.joda.time.tz.Provider)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getAvailableIDs()
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getZone(java.lang.String)
	CALLEE: org.joda.time.UTCDateTimeZone#equals(java.lang.Object)
CALLER: org.joda.time.tz.ZoneInfoProvider#<init>(java.io.File)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#openResource(java.lang.String)
	CALLEE: static org.joda.time.tz.ZoneInfoProvider#loadZoneInfoMap(java.io.InputStream)
CALLER: org.joda.time.tz.ZoneInfoProvider#<init>(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#<init>(java.lang.String,java.lang.ClassLoader,boolean)
CALLER: static org.joda.time.DateTimeZone.LazyInit#buildFormatter()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,boolean,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatter#withChronology(org.joda.time.Chronology)
CALLER: org.joda.time.chrono.BasicGJChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
	CALLEE: org.joda.time.chrono.BasicChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
CALLER: static org.joda.time.chrono.AssembledChronology.Fields#isSupported(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.UnsupportedDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#isSupported()
	CALLEE: org.joda.time.field.MillisDurationField#isSupported()
CALLER: static org.joda.time.chrono.AssembledChronology.Fields#isSupported(org.joda.time.DateTimeField)
	CALLEE: org.joda.time.field.BaseDateTimeField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isSupported()
CALLER: static org.joda.time.chrono.ISOYearOfEraDateTimeField#<clinit>()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#<init>()
CALLER: org.joda.time.field.DividedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
CALLER: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
CALLER: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
CALLER: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.field.UnsupportedDurationField#<init>(org.joda.time.DurationFieldType)
CALLER: static org.joda.time.field.UnsupportedDateTimeField#getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
CALLER: org.joda.time.tz.ZoneInfoProvider#getZone(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getZone(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#loadZoneData(java.lang.String)
CALLER: org.joda.time.tz.ZoneInfoProvider#openResource(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider.1#<init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)
CALLER: static org.joda.time.tz.ZoneInfoProvider#loadZoneInfoMap(java.io.InputStream)
	CALLEE: static org.joda.time.tz.ZoneInfoProvider#readZoneInfoMap(java.io.DataInputStream,java.util.Map)
CALLER: org.joda.time.tz.ZoneInfoProvider#<init>(java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#openResource(java.lang.String)
	CALLEE: static org.joda.time.tz.ZoneInfoProvider#loadZoneInfoMap(java.io.InputStream)
CALLER: org.joda.time.DateTimeZone.LazyInit.1#<init>()
	CALLEE: org.joda.time.chrono.BaseChronology#<init>()
CALLER: org.joda.time.format.DateTimeFormatter#withChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeFormatter#<init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)
CALLER: org.joda.time.chrono.BasicChronology#<init>(org.joda.time.Chronology,java.lang.Object,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#<init>(org.joda.time.Chronology,java.lang.Object)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#<init>()
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstanceUTC()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfEra()
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
CALLER: org.joda.time.field.DividedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.ScaledDurationField#<init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getDurationType()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMinimumValue()
CALLER: org.joda.time.field.UnsupportedDurationField#<init>(org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.DurationField#<init>()
CALLER: org.joda.time.field.UnsupportedDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
	CALLEE: org.joda.time.DateTimeField#<init>()
CALLER: org.joda.time.tz.ZoneInfoProvider#loadZoneData(java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#openResource(java.lang.String)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readFrom(java.io.InputStream,java.lang.String)
	CALLEE: org.joda.time.tz.ZoneInfoProvider#uncaughtException(java.lang.Exception)
CALLER: org.joda.time.field.ScaledDurationField#<init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)
	CALLEE: org.joda.time.field.DecoratedDurationField#<init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)
CALLER: static org.joda.time.tz.DateTimeZoneBuilder#readFrom(java.io.InputStream,java.lang.String)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readFrom(java.io.DataInput,java.lang.String)
CALLER: org.joda.time.field.DecoratedDurationField#<init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.field.BaseDurationField#<init>(org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.field.UnsupportedDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#isSupported()
	CALLEE: org.joda.time.field.MillisDurationField#isSupported()
CALLER: static org.joda.time.tz.DateTimeZoneBuilder#readFrom(java.io.DataInput,java.lang.String)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#<init>(java.lang.String,java.lang.String,int,int)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readMillis(java.io.DataInput)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#equals(java.lang.Object)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#readFrom(java.io.DataInput,java.lang.String)
	CALLEE: static org.joda.time.tz.CachedDateTimeZone#forZone(org.joda.time.DateTimeZone)
CALLER: org.joda.time.tz.FixedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: static org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#readFrom(java.io.DataInput,java.lang.String)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readMillis(java.io.DataInput)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder.DSTZone#readFrom(java.io.DataInput,java.lang.String)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#<init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder.DSTZone)
CALLER: static org.joda.time.tz.CachedDateTimeZone#forZone(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#<init>(org.joda.time.DateTimeZone)
CALLER: static org.joda.time.tz.DateTimeZoneBuilder.DSTZone#readFrom(java.io.DataInput,java.lang.String)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readMillis(java.io.DataInput)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder.Recurrence#readFrom(java.io.DataInput)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#<init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder.Recurrence,org.joda.time.tz.DateTimeZoneBuilder.Recurrence)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#<init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder.DSTZone)
	CALLEE: org.joda.time.DateTimeZone#<init>(java.lang.String)
CALLER: org.joda.time.tz.CachedDateTimeZone#<init>(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.DateTimeZone#<init>(java.lang.String)
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: static org.joda.time.tz.DateTimeZoneBuilder.Recurrence#readFrom(java.io.DataInput)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readMillis(java.io.DataInput)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder.OfYear#readFrom(java.io.DataInput)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#<init>(org.joda.time.tz.DateTimeZoneBuilder.OfYear,java.lang.String,int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#<init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder.Recurrence,org.joda.time.tz.DateTimeZoneBuilder.Recurrence)
	CALLEE: org.joda.time.DateTimeZone#<init>(java.lang.String)
CALLER: static org.joda.time.tz.DateTimeZoneBuilder.OfYear#readFrom(java.io.DataInput)
	CALLEE: static org.joda.time.tz.DateTimeZoneBuilder#readMillis(java.io.DataInput)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#<init>(char,int,int,int,boolean,int)
CALLER: org.sbolstandard.core2.ComponentDefinition#getSequenceConstraint(java.lang.String)
	CALLEE: static org.sbolstandard.core2.URIcompliance#createCompliantURI(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.sbolstandard.core2.Identified#getPersistentIdentity()
	CALLEE: org.sbolstandard.core2.Identified#getVersion()
CALLER: org.sbolstandard.core2.ComponentDefinition.SADisplayIdComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.sbolstandard.core2.Identified#getDisplayId()
CALLER: org.apache.http.impl.client.IdleConnectionEvictor.1#run()
	CALLEE: static org.apache.http.impl.client.IdleConnectionEvictor#access$000(org.apache.http.impl.client.IdleConnectionEvictor)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#closeExpiredConnections()
	CALLEE: static org.apache.http.impl.client.IdleConnectionEvictor#access$100(org.apache.http.impl.client.IdleConnectionEvictor)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#closeIdleConnections(long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.impl.client.IdleConnectionEvictor#access$202(org.apache.http.impl.client.IdleConnectionEvictor,java.lang.Exception)
CALLER: org.joda.time.base.AbstractInstant#hashCode()
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: org.joda.time.chrono.ISOChronology#hashCode()
CALLER: org.joda.time.base.AbstractInstant#equals(java.lang.Object)
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: static org.joda.time.field.FieldUtils#equals(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
CALLER: org.joda.time.base.AbstractDateTime#toString()
	CALLEE: org.joda.time.base.AbstractInstant#toString()
CALLER: org.joda.time.format.DateTimeParserBucket.SavedField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#compareTo(org.joda.time.format.DateTimeParserBucket.SavedField)
CALLER: org.sbolstandard.core.datatree.Literal.TypedLiteral#getType()
	CALLEE: org.sbolstandard.core.datatree.Literal.TypedLiteral#getType()
CALLER: org.joda.time.field.UnsupportedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#getName()
CALLER: org.joda.time.field.UnsupportedDurationField#hashCode()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getName()
CALLER: org.apache.http.pool.AbstractConnPool#setMaxTotal(int)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
CALLER: org.sbolstandard.core2.MapsTo#copy(org.sbolstandard.core2.MapsTo)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
CALLER: org.joda.time.format.DateTimeParserBucket.SavedField#set(long,boolean)
	CALLEE: org.joda.time.DateTimeField#setExtended(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#setExtended(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
CALLER: org.joda.time.format.DateTimeParserBucket.SavedField#compareTo(org.joda.time.format.DateTimeParserBucket.SavedField)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getRangeDurationField()
	CALLEE: static org.joda.time.format.DateTimeParserBucket#compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DividedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
CALLER: org.sbolstandard.core2.Participation#copy(org.sbolstandard.core2.Participation)
	CALLEE: org.sbolstandard.core2.Measured#copy(org.sbolstandard.core2.Measured)
CALLER: org.joda.time.tz.FixedDateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: org.joda.time.DateTimeFieldType#toString()
	CALLEE: org.joda.time.DateTimeFieldType#getName()
CALLER: org.joda.time.DurationFieldType#toString()
	CALLEE: org.joda.time.DurationFieldType#getName()
CALLER: org.joda.time.field.UnsupportedDurationField#toString()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getName()
CALLER: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.chrono.AssembledChronology#getParam()
CALLER: org.joda.time.field.UnsupportedDurationField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#compareTo(org.joda.time.DurationField)
CALLER: org.apache.http.entity.mime.content.ByteArrayBody#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[])
CALLER: org.apache.http.entity.mime.content.StringBody#writeTo(java.io.OutputStream)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#flush()
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#flush()
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#flush()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket#setOffset(java.lang.Integer)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#digitCount(java.lang.CharSequence,int,int)
	CALLEE: static org.joda.time.format.FormatUtils#parseTwoDigits(java.lang.CharSequence,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveState()
	CALLEE: org.joda.time.format.DateTimeParserBucket#restoreState(java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,int)
CALLER: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: static org.joda.time.DateTimeFieldType#millisOfSecond()
	CALLEE: org.joda.time.field.PreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.format.DateTimeParserBucket#getChronology()
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeField,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.sbolstandard.core2.Cut#copy(org.sbolstandard.core2.Cut)
	CALLEE: org.sbolstandard.core2.Location#copy(org.sbolstandard.core2.Location)
CALLER: org.sbolstandard.core2.GenericLocation#copy(org.sbolstandard.core2.GenericLocation)
	CALLEE: org.sbolstandard.core2.Location#copy(org.sbolstandard.core2.Location)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.AsMap)
CALLER: org.sbolstandard.core2.Measure#copy(org.sbolstandard.core2.Measure)
	CALLEE: org.sbolstandard.core2.Measure#addType(java.net.URI)
	CALLEE: org.sbolstandard.core2.Identified#copy(org.sbolstandard.core2.Identified)
	CALLEE: org.sbolstandard.core2.Measure#getTypes()
CALLER: org.joda.time.chrono.ZonedChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.ZonedChronology#convertField(org.joda.time.DurationField,java.util.HashMap)
	CALLEE: org.joda.time.chrono.ZonedChronology#convertField(org.joda.time.DateTimeField,java.util.HashMap)
CALLER: org.joda.time.chrono.GregorianChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.chrono.AssembledChronology#getBase()
	CALLEE: org.joda.time.chrono.BasicChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
CALLER: org.joda.time.UTCDateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: static org.joda.time.chrono.GregorianChronology#getInstanceUTC()
	CALLEE: org.joda.time.chrono.AssembledChronology#eras()
CALLER: org.joda.time.format.DateTimeFormatter#parseMillis(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatter#requireParser()
	CALLEE: org.joda.time.format.DateTimeFormatter#selectChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeParserBucket#<init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
CALLER: org.joda.time.chrono.BasicChronology#getZone()
	CALLEE: org.joda.time.chrono.AssembledChronology#getBase()
	CALLEE: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.chrono.BasicChronology#getZone()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
CALLER: org.apache.http.cookie.CookieIdentityComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.apache.http.cookie.CookieIdentityComparator#compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#build()
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#<init>(java.util.List,java.util.List)
	CALLEE: org.apache.http.protocol.ChainBuilder#build()
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#getResponseChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#addLast(java.lang.Object)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpRequestInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#getRequestChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#addLast(java.lang.Object)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#add(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpResponseInterceptor)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#add(org.apache.http.HttpRequestInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addLast(org.apache.http.HttpRequestInterceptor)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addAll(org.apache.http.HttpRequestInterceptor[])
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#addAllLast(org.apache.http.HttpRequestInterceptor[])
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addFirst(org.apache.http.HttpResponseInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#getResponseChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#addFirst(java.lang.Object)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addFirst(org.apache.http.HttpRequestInterceptor)
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#getRequestChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#addFirst(java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool#setDefaultMaxPerRoute(int)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
CALLER: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.chrono.BasicChronology#getZone()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
CALLER: org.joda.time.chrono.ISOChronology#withZone(org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.DateTimeZone#getDefault()
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance(org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#equals(java.lang.Object)
	CALLEE: org.joda.time.DateTimeZone#getID()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#equals(java.lang.Object)
CALLER: org.joda.time.tz.CachedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#equals(java.lang.Object)
CALLER: org.joda.time.DateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: org.joda.time.tz.CachedDateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#hashCode()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#closeExpiredConnections()
	CALLEE: org.apache.http.pool.AbstractConnPool#closeExpired()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#closeIdleConnections(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.AbstractConnPool#closeIdle(long,java.util.concurrent.TimeUnit)
CALLER: org.joda.time.chrono.ISOChronology#hashCode()
	CALLEE: org.joda.time.tz.FixedDateTimeZone#hashCode()
	CALLEE: org.joda.time.UTCDateTimeZone#hashCode()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.DateTimeZone#hashCode()
	CALLEE: org.joda.time.tz.CachedDateTimeZone#hashCode()
CALLER: static org.joda.time.field.FieldUtils#equals(java.lang.Object,java.lang.Object)
	CALLEE: org.joda.time.chrono.ISOChronology#equals(java.lang.Object)
CALLER: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
CALLER: org.joda.time.base.AbstractInstant#toString()
	CALLEE: static org.joda.time.format.ISODateTimeFormat#dateTime()
	CALLEE: org.joda.time.format.DateTimeFormatter#print(org.joda.time.ReadableInstant)
CALLER: org.joda.time.field.UnsupportedDurationField#getName()
	CALLEE: org.joda.time.DurationFieldType#getName()
CALLER: org.joda.time.format.DateTimeParserBucket#saveState()
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedState#<init>(org.joda.time.format.DateTimeParserBucket)
CALLER: org.joda.time.format.DateTimeParserBucket#restoreState(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedState#restoreState(org.joda.time.format.DateTimeParserBucket)
CALLER: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeField,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#obtainSaveField()
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#init(org.joda.time.DateTimeField,int)
CALLER: org.joda.time.chrono.ZonedChronology#convertField(org.joda.time.DurationField,java.util.HashMap)
	CALLEE: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.field.UnsupportedDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#isSupported()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#<init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.field.MillisDurationField#isSupported()
CALLER: org.joda.time.chrono.ZonedChronology#convertField(org.joda.time.DateTimeField,java.util.HashMap)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.BaseDateTimeField#isSupported()
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology#getZone()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology#convertField(org.joda.time.DurationField,java.util.HashMap)
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DividedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.BaseDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getRangeDurationField()
CALLER: org.joda.time.chrono.BasicChronology#assemble(org.joda.time.chrono.AssembledChronology.Fields)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: static org.joda.time.DateTimeFieldType#centuryOfEra()
	CALLEE: org.joda.time.field.DividedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfCentury()
	CALLEE: static org.joda.time.DateTimeFieldType#weekyearOfCentury()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField)
	CALLEE: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
CALLER: org.joda.time.format.DateTimeParserBucket#doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)
	CALLEE: static org.joda.time.format.FormatUtils#createErrorMessage(java.lang.String,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#computeMillis(boolean,java.lang.CharSequence)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.FixedNumber#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.MatchingParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.NumberFormatter#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserInternalParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.InternalParserDateTimeParser#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
CALLER: org.apache.http.protocol.HttpProcessorBuilder#getResponseChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#<init>()
CALLER: org.apache.http.protocol.HttpProcessorBuilder#getRequestChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#<init>()
CALLER: org.apache.http.protocol.HttpProcessorBuilder#addAllLast(org.apache.http.HttpRequestInterceptor[])
	CALLEE: org.apache.http.protocol.HttpProcessorBuilder#getRequestChainBuilder()
	CALLEE: org.apache.http.protocol.ChainBuilder#addAllLast(java.lang.Object[])
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#equals(java.lang.Object)
	CALLEE: org.joda.time.DateTimeZone#getID()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#equals(java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool#closeExpired()
	CALLEE: org.apache.http.pool.AbstractConnPool.4#<init>(org.apache.http.pool.AbstractConnPool,long)
	CALLEE: org.apache.http.pool.AbstractConnPool#enumAvailable(org.apache.http.pool.PoolEntryCallback)
CALLER: org.apache.http.pool.AbstractConnPool#closeIdle(long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.pool.AbstractConnPool#enumAvailable(org.apache.http.pool.PoolEntryCallback)
	CALLEE: org.apache.http.pool.AbstractConnPool.3#<init>(org.apache.http.pool.AbstractConnPool,long)
CALLER: org.joda.time.chrono.ISOChronology#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.UTCDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#equals(java.lang.Object)
CALLER: org.apache.http.impl.client.CloseableHttpClient#execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.impl.client.CloseableHttpClient#determineTarget(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.impl.client.InternalHttpClient#doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
CALLER: org.joda.time.format.DateTimeFormatter#print(org.joda.time.ReadableInstant)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatter#requirePrinter()
	CALLEE: org.joda.time.format.DateTimeFormatter#printTo(java.lang.Appendable,org.joda.time.ReadableInstant)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#estimatePrintedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimatePrintedLength()
CALLER: org.joda.time.format.DateTimeParserBucket.SavedState#<init>(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$000(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$100(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$200(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$300(org.joda.time.format.DateTimeParserBucket)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#<init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.field.BaseDurationField#<init>(org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.field.UnsupportedDurationField#isSupported()
	CALLEE: org.joda.time.field.BaseDurationField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getType()
	CALLEE: org.joda.time.field.BaseDurationField#getType()
	CALLEE: static org.joda.time.chrono.ZonedChronology#useTimeArithmetic(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.MillisDurationField#isSupported()
	CALLEE: org.joda.time.field.MillisDurationField#getType()
CALLER: org.joda.time.field.DividedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)
	CALLEE: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.BaseDateTimeField#isSupported()
	CALLEE: static org.joda.time.chrono.ZonedChronology#useTimeArithmetic(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getType()
CALLER: org.joda.time.chrono.BasicYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: static org.joda.time.DateTimeFieldType#year()
	CALLEE: org.joda.time.chrono.GregorianChronology#getAverageMillisPerYear()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,long)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfEra()
CALLER: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
	CALLEE: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getType()
CALLER: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField)
	CALLEE: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
CALLER: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)
CALLER: org.joda.time.chrono.GJEraDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: static org.joda.time.DateTimeFieldType#era()
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfMonth()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfYear()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.chrono.GJMonthOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,int)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#<init>(org.joda.time.chrono.BasicChronology)
	CALLEE: static org.joda.time.DateTimeFieldType#weekyear()
	CALLEE: org.joda.time.chrono.GregorianChronology#getAverageMillisPerYear()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,long)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)
	CALLEE: static org.joda.time.DateTimeFieldType#weekOfWeekyear()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#<init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)
CALLER: org.joda.time.field.RemainderDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
CALLER: org.apache.http.protocol.ChainBuilder#addAllLast(java.lang.Object[])
	CALLEE: org.apache.http.protocol.ChainBuilder#addLast(java.lang.Object)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#equals(java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool#enumAvailable(org.apache.http.pool.PoolEntryCallback)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isClosed()
	CALLEE: org.apache.http.pool.AbstractConnPool.4#process(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.AbstractConnPool.3#process(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.AbstractConnPool#getPool(java.lang.Object)
	CALLEE: org.apache.http.pool.AbstractConnPool#purgePoolMap()
	CALLEE: org.apache.http.pool.RouteSpecificPool#remove(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
CALLER: static org.apache.http.impl.client.CloseableHttpClient#determineTarget(org.apache.http.client.methods.HttpUriRequest)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: static org.apache.http.client.utils.URIUtils#extractHost(java.net.URI)
	CALLEE: org.apache.http.client.ClientProtocolException#<init>(java.lang.String)
CALLER: org.apache.http.impl.client.InternalHttpClient#doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.methods.HttpRequestWrapper#wrap(org.apache.http.HttpRequest,org.apache.http.HttpHost)
	CALLEE: org.apache.http.protocol.BasicHttpContext#<init>()
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getConfig()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: static org.apache.http.client.params.HttpClientParamConfig#getRequestConfig(org.apache.http.params.HttpParams)
	CALLEE: org.apache.http.impl.client.InternalHttpClient#setupContext(org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.impl.client.InternalHttpClient#determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RedirectExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.ServiceUnavailableRetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.BackoffStrategyExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.client.ClientProtocolException#<init>(java.lang.Throwable)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#setRequestConfig(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.params.BasicHttpParams#getNames()
CALLER: org.joda.time.format.DateTimeFormatter#printTo(java.lang.Appendable,org.joda.time.ReadableInstant)
	CALLEE: static org.joda.time.DateTimeUtils#getInstantMillis(org.joda.time.ReadableInstant)
	CALLEE: static org.joda.time.DateTimeUtils#getInstantChronology(org.joda.time.ReadableInstant)
	CALLEE: org.joda.time.format.DateTimeFormatter#printTo(java.lang.Appendable,long,org.joda.time.Chronology)
CALLER: static org.joda.time.chrono.ZonedChronology#useTimeArithmetic(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.DividedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getRangeDurationField()
CALLER: org.joda.time.field.ImpreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,long)
	CALLEE: org.joda.time.field.BaseDateTimeField#<init>(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getDurationType()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#<init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)
CALLER: org.joda.time.field.OffsetDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#<init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#<init>(org.joda.time.chrono.BasicChronology,int)
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#<init>(org.joda.time.DateTimeFieldType,long)
	CALLEE: org.joda.time.chrono.GregorianChronology#getAverageMillisPerMonth()
	CALLEE: org.joda.time.chrono.BasicChronology#getMaxMonth()
CALLER: org.apache.http.protocol.ChainBuilder#addLast(java.lang.Object)
	CALLEE: org.apache.http.protocol.ChainBuilder#ensureUnique(java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool.4#process(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isExpired(long)
CALLER: org.apache.http.pool.AbstractConnPool.3#process(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.pool.PoolEntry#getUpdated()
CALLER: org.apache.http.pool.AbstractConnPool#getPool(java.lang.Object)
	CALLEE: org.apache.http.pool.AbstractConnPool.1#<init>(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool#purgePoolMap()
	CALLEE: org.apache.http.pool.RouteSpecificPool#getPendingCount()
	CALLEE: org.apache.http.pool.RouteSpecificPool#getAllocatedCount()
CALLER: static org.apache.http.client.utils.URIUtils#extractHost(java.net.URI)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
CALLER: static org.apache.http.client.methods.HttpRequestWrapper#wrap(org.apache.http.HttpRequest,org.apache.http.HttpHost)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#<init>(org.apache.http.HttpEntityEnclosingRequest,org.apache.http.HttpHost)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#<init>(org.apache.http.HttpRequest,org.apache.http.HttpHost)
CALLER: org.apache.http.protocol.BasicHttpContext#<init>()
	CALLEE: org.apache.http.protocol.BasicHttpContext#<init>(org.apache.http.protocol.HttpContext)
CALLER: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#<init>(org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: org.apache.http.params.BasicHttpParams#<init>()
CALLER: static org.apache.http.client.params.HttpClientParamConfig#getRequestConfig(org.apache.http.params.HttpParams)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#build()
	CALLEE: static org.apache.http.client.config.RequestConfig#custom()
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setSocketTimeout(int)
	CALLEE: org.apache.http.params.AbstractHttpParams#getBooleanParameter(java.lang.String,boolean)
	CALLEE: org.apache.http.params.AbstractHttpParams#getIntParameter(java.lang.String,int)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
	CALLEE: org.apache.http.params.AbstractHttpParams#getLongParameter(java.lang.String,long)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setStaleConnectionCheckEnabled(boolean)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setConnectTimeout(int)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setExpectContinueEnabled(boolean)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setProxy(org.apache.http.HttpHost)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setLocalAddress(java.net.InetAddress)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setProxyPreferredAuthSchemes(java.util.Collection)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setTargetPreferredAuthSchemes(java.util.Collection)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setAuthenticationEnabled(boolean)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setCircularRedirectsAllowed(boolean)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setConnectionRequestTimeout(int)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setCookieSpec(java.lang.String)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setMaxRedirects(int)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setRedirectsEnabled(boolean)
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#setRelativeRedirectsAllowed(boolean)
CALLER: org.apache.http.impl.client.InternalHttpClient#setupContext(org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.auth.AuthState#<init>()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.impl.client.InternalHttpClient#determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCredentialsProvider()
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#setURI(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getOriginal()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getURI()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#close()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#setCredentialsProvider(org.apache.http.client.CredentialsProvider)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.client.BasicCredentialsProvider#<init>()
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#rewriteRequestURI(org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.auth.AuthScope#<init>(org.apache.http.HttpHost)
	CALLEE: org.apache.http.auth.UsernamePasswordCredentials#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.client.BasicCredentialsProvider#setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)
	CALLEE: org.apache.http.impl.execchain.MainClientExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getTarget()
CALLER: org.apache.http.impl.execchain.RetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.MessageConstraintException#getMessage()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.client.methods.AbstractExecutionAwareRequest#isAborted()
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.client.NonRepeatableRequestException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.NoHttpResponseException#<init>(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.HttpHost#toHostString()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
CALLER: org.apache.http.impl.execchain.RedirectExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getTargetAuthState()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getProxyAuthState()
	CALLEE: org.apache.http.message.AbstractHttpMessage#headerIterator()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#close()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.client.config.RequestConfig#isRedirectsEnabled()
	CALLEE: org.apache.http.client.config.RequestConfig#getMaxRedirects()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRedirectLocations()
	CALLEE: org.apache.http.HttpHost#equals(java.lang.Object)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.utils.URIUtils#extractHost(java.net.URI)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.RedirectException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.client.methods.HttpRequestWrapper#wrap(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#enhance(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: static org.apache.http.util.EntityUtils#consume(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getOriginal()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getURI()
CALLER: org.apache.http.impl.execchain.ServiceUnavailableRetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RedirectExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#close()
CALLER: org.apache.http.impl.execchain.BackoffStrategyExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.execchain.ProtocolExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.RedirectExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.impl.execchain.ServiceUnavailableRetryExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
CALLER: static org.joda.time.DateTimeUtils#getInstantMillis(org.joda.time.ReadableInstant)
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: static org.joda.time.DateTimeUtils#currentTimeMillis()
	CALLEE: org.joda.time.Instant#getMillis()
CALLER: static org.joda.time.DateTimeUtils#getInstantChronology(org.joda.time.ReadableInstant)
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance()
	CALLEE: org.joda.time.Instant#getChronology()
CALLER: org.joda.time.format.DateTimeFormatter#printTo(java.lang.Appendable,long,org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatter#selectChronology(org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.ISOChronology#withUTC()
	CALLEE: org.joda.time.chrono.AssembledChronology#getZone()
	CALLEE: org.joda.time.format.DateTimeFormatter#requirePrinter()
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#withUTC()
	CALLEE: org.joda.time.DateTimeZone.LazyInit.1#getZone()
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
CALLER: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DecoratedDurationField#getWrappedField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#<init>(org.joda.time.field.ImpreciseDateTimeField,org.joda.time.DurationFieldType)
	CALLEE: org.joda.time.field.BaseDurationField#<init>(org.joda.time.DurationFieldType)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.apache.http.pool.AbstractConnPool.1#<init>(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object)
	CALLEE: org.apache.http.pool.RouteSpecificPool#<init>(java.lang.Object)
CALLER: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.apache.http.util.Args#containsNoBlanks(java.lang.CharSequence,java.lang.String)
CALLER: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#<init>(org.apache.http.HttpEntityEnclosingRequest,org.apache.http.HttpHost)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#<init>(org.apache.http.HttpRequest,org.apache.http.HttpHost,org.apache.http.client.methods.HttpRequestWrapper.1)
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#getEntity()
CALLER: org.apache.http.client.methods.HttpRequestWrapper#<init>(org.apache.http.HttpRequest,org.apache.http.HttpHost)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#<init>()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
CALLER: org.apache.http.client.protocol.HttpClientContext#<init>(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#<init>(org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.params.BasicHttpParams#<init>()
	CALLEE: org.apache.http.params.AbstractHttpParams#<init>()
CALLER: static org.apache.http.client.config.RequestConfig#custom()
	CALLEE: org.apache.http.client.config.RequestConfig.Builder#<init>()
CALLER: org.apache.http.impl.conn.DefaultRoutePlanner#determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.impl.conn.DefaultProxyRoutePlanner#determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.SystemDefaultRoutePlanner#determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.DefaultRoutePlanner#determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.impl.conn.DefaultSchemePortResolver#resolve(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)
	CALLEE: org.apache.http.client.config.RequestConfig#getProxy()
	CALLEE: org.apache.http.client.config.RequestConfig#getLocalAddress()
CALLER: org.apache.http.impl.execchain.ProtocolExec#rewriteRequestURI(org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.conn.routing.HttpRoute)
	CALLEE: static org.apache.http.client.utils.URIUtils#rewriteURIForRoute(java.net.URI,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#setURI(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getURI()
CALLER: static org.apache.http.auth.AuthScope#<clinit>()
	CALLEE: org.apache.http.auth.AuthScope#<init>(java.lang.String,int,java.lang.String,java.lang.String)
CALLER: org.apache.http.auth.AuthScope#<init>(org.apache.http.HttpHost)
	CALLEE: org.apache.http.auth.AuthScope#<init>(org.apache.http.HttpHost,java.lang.String,java.lang.String)
CALLER: org.apache.http.auth.UsernamePasswordCredentials#<init>(java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.auth.BasicUserPrincipal#<init>(java.lang.String)
CALLER: org.apache.http.impl.client.BasicCredentialsProvider#setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.execchain.MainClientExec#execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware)
	CALLEE: org.apache.http.message.BasicHttpResponse#getEntity()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isStreaming()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.auth.AuthState#<init>()
	CALLEE: org.apache.http.client.methods.AbstractExecutionAwareRequest#isAborted()
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#enhance(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: static org.apache.http.util.EntityUtils#consume(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)
	CALLEE: org.apache.http.impl.execchain.RequestAbortedException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.AbstractExecutionAwareRequest#setCancellable(org.apache.http.concurrent.Cancellable)
	CALLEE: org.apache.http.impl.execchain.RequestAbortedException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#<init>(org.apache.commons.logging.Log,org.apache.http.conn.HttpClientConnectionManager,org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.client.NonRepeatableRequestException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.execchain.MainClientExec#establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.auth.AuthState#getState()
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.DefaultConnectionReuseStrategy#keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.NoConnectionReuseStrategy#keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy#getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#setValidFor(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#markReusable()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#markNonReusable()
	CALLEE: org.apache.http.impl.execchain.MainClientExec#needAuthentication(org.apache.http.auth.AuthState,org.apache.http.auth.AuthState,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpResponse,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#isReusable()
	CALLEE: org.apache.http.auth.AuthState#getAuthScheme()
	CALLEE: org.apache.http.auth.AuthState#reset()
	CALLEE: org.apache.http.impl.client.DefaultUserTokenHandler#getUserToken(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.NoopUserTokenHandler#getUserToken(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#setState(java.lang.Object)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#<init>(org.apache.http.HttpResponse,org.apache.http.impl.execchain.ConnectionHolder)
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#abortConnection()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getTargetAuthState()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getProxyAuthState()
	CALLEE: org.apache.http.message.AbstractHttpMessage#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.conn.routing.HttpRoute#isTunnelled()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getOriginal()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.1#get(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.1#cancel()
	CALLEE: org.apache.http.impl.execchain.TunnelRefusedException#getResponse()
	CALLEE: org.apache.http.client.config.RequestConfig#getSocketTimeout()
	CALLEE: org.apache.http.client.config.RequestConfig#isStaleConnectionCheckEnabled()
	CALLEE: org.apache.http.client.config.RequestConfig#getConnectionRequestTimeout()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getUserToken()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#close()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#setSocketTimeout(int)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#isOpen()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#isStale()
CALLER: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getRequest()
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#requestIsAborted(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.impl.client.DefaultHttpRequestRetryHandler#handleAsIdempotent(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.protocol.HttpCoreContext#isRequestSent()
CALLER: static org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#isEnhanced(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isConsumed()
	CALLEE: org.apache.http.entity.StringEntity#isRepeatable()
CALLER: org.apache.http.client.NonRepeatableRequestException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.apache.http.impl.client.DefaultRedirectStrategy#isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#isRedirectable(java.lang.String)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getStatusLine()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.client.RedirectException#<init>(java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
CALLER: org.apache.http.impl.client.DefaultRedirectStrategy#getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#getLocationURI(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.methods.HttpHead#<init>(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpGet#<init>(java.net.URI)
	CALLEE: static org.apache.http.client.methods.RequestBuilder#copy(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getStatusLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.RequestBuilder#setUri(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.client.methods.RequestBuilder#build()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: static org.apache.http.client.methods.HttpRequestWrapper#wrap(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.client.methods.HttpRequestWrapper#wrap(org.apache.http.HttpRequest,org.apache.http.HttpHost)
CALLER: static org.apache.http.impl.execchain.RequestEntityProxy#enhance(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: static org.apache.http.impl.execchain.RequestEntityProxy#isEnhanced(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#<init>(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable()
	CALLEE: org.apache.http.entity.StringEntity#isRepeatable()
CALLER: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
CALLER: static org.apache.http.util.EntityUtils#consume(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isStreaming()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
CALLER: static org.joda.time.DateTimeUtils#currentTimeMillis()
	CALLEE: org.joda.time.DateTimeUtils.SystemMillisProvider#getMillis()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.Appendable,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.Appendable,int,int)
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#appendUnknownString(java.lang.Appendable,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: static org.joda.time.format.FormatUtils#appendUnpaddedInteger(java.lang.Appendable,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
CALLER: org.joda.time.format.DateTimePrinterInternalPrinter#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#estimatePrintedLength()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Fraction#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#printTo(java.lang.Appendable,long,org.joda.time.Chronology)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Composite#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.StringLiteral#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.PaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimePrinterInternalPrinter#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Composite#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
CALLER: static org.apache.http.util.Args#containsNoBlanks(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#containsBlanks(java.lang.CharSequence)
CALLER: org.apache.http.client.methods.HttpRequestWrapper#<init>(org.apache.http.HttpRequest,org.apache.http.HttpHost,org.apache.http.client.methods.HttpRequestWrapper.1)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#<init>(org.apache.http.HttpRequest,org.apache.http.HttpHost)
CALLER: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.message.HeaderGroup#getAllHeaders()
CALLER: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.message.HeaderGroup#setHeaders(org.apache.http.Header[])
CALLER: static org.apache.http.auth.AuthProtocolState#<clinit>()
	CALLEE: org.apache.http.auth.AuthProtocolState#<init>(java.lang.String,int)
CALLER: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.conn.SystemDefaultRoutePlanner#determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
	CALLEE: org.apache.http.HttpHost#toURI()
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.impl.conn.SystemDefaultRoutePlanner#chooseProxy(java.util.List)
	CALLEE: org.apache.http.impl.conn.SystemDefaultRoutePlanner#getHost(java.net.InetSocketAddress)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int)
CALLER: org.apache.http.impl.conn.DefaultSchemePortResolver#resolve(org.apache.http.HttpHost)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.conn.UnsupportedSchemeException#<init>(java.lang.String)
CALLER: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,java.util.List,boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
CALLER: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,java.util.List,boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
CALLER: static org.apache.http.client.utils.URIUtils#rewriteURIForRoute(java.net.URI,org.apache.http.conn.routing.RouteInfo)
	CALLEE: static org.apache.http.client.utils.URIUtils#rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)
	CALLEE: static org.apache.http.client.utils.URIUtils#rewriteURI(java.net.URI)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#isTunnelled()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
CALLER: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.apache.http.auth.AuthScope#<init>(org.apache.http.HttpHost,java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
CALLER: org.apache.http.auth.BasicUserPrincipal#<init>(java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#format(org.apache.http.conn.routing.HttpRoute,java.lang.Object)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#formatStats(org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.pool.AbstractConnPool#lease(java.lang.Object,java.lang.Object,org.apache.http.concurrent.FutureCallback)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.1#<init>(org.apache.http.impl.conn.PoolingHttpClientConnectionManager,java.util.concurrent.Future)
CALLER: org.apache.http.client.NonRepeatableRequestException#<init>(java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
CALLER: org.apache.http.impl.execchain.MainClientExec#establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopTarget(int)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
	CALLEE: org.apache.http.client.config.RequestConfig#getConnectTimeout()
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
	CALLEE: org.apache.http.conn.routing.RouteTracker#<init>(org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.conn.routing.RouteTracker#toRoute()
	CALLEE: org.apache.http.conn.routing.BasicRouteDirector#nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.RouteTracker#connectTarget(boolean)
	CALLEE: org.apache.http.conn.routing.RouteTracker#connectProxy(org.apache.http.HttpHost,boolean)
	CALLEE: org.apache.http.impl.execchain.MainClientExec#createTunnelToTarget(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.conn.routing.RouteTracker#tunnelTarget(boolean)
	CALLEE: org.apache.http.impl.execchain.MainClientExec#createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.conn.routing.RouteTracker#tunnelProxy(org.apache.http.HttpHost,boolean)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.RouteTracker#layerProtocol(boolean)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#routeComplete(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.HttpRoute#isSecure()
CALLER: org.apache.http.impl.auth.HttpAuthenticator#generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#getState()
	CALLEE: org.apache.http.auth.AuthState#getAuthScheme()
	CALLEE: org.apache.http.auth.AuthState#getCredentials()
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#ensureAuthScheme(org.apache.http.auth.AuthScheme)
	CALLEE: org.apache.http.auth.AuthState#getAuthOptions()
	CALLEE: org.apache.http.auth.AuthState#update(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(org.apache.http.Header)
	CALLEE: org.apache.http.auth.AuthOption#getCredentials()
	CALLEE: org.apache.http.auth.AuthOption#getAuthScheme()
CALLER: org.apache.http.protocol.HttpRequestExecutor#execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.protocol.HttpRequestExecutor#closeConnection(org.apache.http.HttpClientConnection)
CALLER: org.apache.http.impl.DefaultConnectionReuseStrategy#keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.impl.DefaultConnectionReuseStrategy#canResponseHaveBody(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.message.BasicHeaderIterator#<init>(org.apache.http.Header[],java.lang.String)
	CALLEE: org.apache.http.message.BasicTokenIterator#<init>(org.apache.http.HeaderIterator)
	CALLEE: org.apache.http.message.BasicTokenIterator#hasNext()
	CALLEE: org.apache.http.message.BasicTokenIterator#nextToken()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getHeaders(java.lang.String)
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.message.BasicStatusLine#getProtocolVersion()
CALLER: org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy#getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#<init>(org.apache.http.HeaderIterator)
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#nextElement()
	CALLEE: org.apache.http.message.BasicHeaderElement#getValue()
	CALLEE: org.apache.http.message.BasicHeaderElement#getName()
	CALLEE: org.apache.http.message.AbstractHttpMessage#headerIterator(java.lang.String)
CALLER: org.apache.http.impl.execchain.MainClientExec#needAuthentication(org.apache.http.auth.AuthState,org.apache.http.auth.AuthState,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpResponse,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
	CALLEE: org.apache.http.client.config.RequestConfig#isAuthenticationEnabled()
CALLER: org.apache.http.impl.client.DefaultUserTokenHandler#getUserToken(org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getTargetAuthState()
	CALLEE: static org.apache.http.impl.client.DefaultUserTokenHandler#getAuthPrincipal(org.apache.http.auth.AuthState)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getProxyAuthState()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getConnection()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#isOpen()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getSSLSession()
CALLER: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection(boolean)
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#<init>(org.apache.http.HttpResponse,org.apache.http.impl.execchain.ConnectionHolder)
	CALLEE: static org.apache.http.impl.execchain.ResponseEntityProxy#enchance(org.apache.http.HttpResponse,org.apache.http.impl.execchain.ConnectionHolder)
CALLER: org.apache.http.impl.execchain.ConnectionHolder#abortConnection()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#shutdown()
CALLER: org.apache.http.protocol.HttpCoreContext#getRequest()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.protocol.HttpCoreContext#isRequestSent()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.client.DefaultRedirectStrategy#getLocationURI(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.client.CircularRedirectException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.client.RedirectLocations#add(java.net.URI)
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getStatusLine()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.http.client.utils.URIUtils#rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)
	CALLEE: org.apache.http.impl.client.DefaultRedirectStrategy#createLocationURI(java.lang.String)
	CALLEE: org.apache.http.client.config.RequestConfig#isRelativeRedirectsAllowed()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: static org.apache.http.client.utils.URIUtils#resolve(java.net.URI,java.net.URI)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
	CALLEE: org.apache.http.impl.client.RedirectLocations#<init>()
	CALLEE: org.apache.http.client.config.RequestConfig#isCircularRedirectsAllowed()
	CALLEE: org.apache.http.impl.client.RedirectLocations#contains(java.net.URI)
CALLER: org.apache.http.client.methods.HttpHead#<init>(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setURI(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#<init>()
CALLER: org.apache.http.client.methods.HttpGet#<init>(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setURI(java.net.URI)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#<init>()
CALLER: static org.apache.http.client.methods.RequestBuilder#copy(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.client.methods.RequestBuilder#<init>()
	CALLEE: org.apache.http.client.methods.RequestBuilder#doCopy(org.apache.http.HttpRequest)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Fraction#printTo(java.lang.Appendable,long,org.joda.time.Chronology)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#appendUnknownString(java.lang.Appendable,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.Fraction#getFractionData(long,org.joda.time.DateTimeField)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
CALLER: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
CALLER: org.apache.http.HttpHost#<init>(java.lang.String,int)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
CALLER: static org.apache.http.conn.routing.RouteInfo.TunnelType#<clinit>()
	CALLEE: org.apache.http.conn.routing.RouteInfo.TunnelType#<init>(java.lang.String,int)
CALLER: static org.apache.http.conn.routing.RouteInfo.LayerType#<clinit>()
	CALLEE: org.apache.http.conn.routing.RouteInfo.LayerType#<init>(java.lang.String,int)
CALLER: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,java.util.List,boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: static org.apache.http.conn.routing.HttpRoute#normalize(org.apache.http.HttpHost)
CALLER: static org.apache.http.client.utils.URIUtils#rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isEmpty(java.lang.CharSequence)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#setScheme(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#setHost(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#setPort(int)
	CALLEE: org.apache.http.client.utils.URIBuilder#setFragment(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getPath()
	CALLEE: org.apache.http.client.utils.URIBuilder#setPath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#build()
CALLER: static org.apache.http.client.utils.URIUtils#rewriteURI(java.net.URI)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isEmpty(java.lang.CharSequence)
	CALLEE: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#setHost(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#setFragment(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getPath()
	CALLEE: org.apache.http.client.utils.URIBuilder#setPath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#build()
	CALLEE: org.apache.http.client.utils.URIBuilder#getUserInfo()
	CALLEE: org.apache.http.client.utils.URIBuilder#setUserInfo(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getHost()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#formatStats(org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.pool.AbstractConnPool#getTotalStats()
	CALLEE: org.apache.http.pool.AbstractConnPool#getStats(java.lang.Object)
	CALLEE: org.apache.http.pool.PoolStats#getMax()
	CALLEE: org.apache.http.pool.PoolStats#getAvailable()
	CALLEE: org.apache.http.pool.PoolStats#getLeased()
CALLER: org.apache.http.pool.AbstractConnPool#lease(java.lang.Object,java.lang.Object,org.apache.http.concurrent.FutureCallback)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
	CALLEE: org.apache.http.pool.AbstractConnPool.2#<init>(org.apache.http.pool.AbstractConnPool,java.util.concurrent.locks.Lock,org.apache.http.concurrent.FutureCallback,java.lang.Object,java.lang.Object)
CALLER: org.apache.http.conn.routing.RouteTracker#<init>(org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.conn.routing.RouteTracker#<init>(org.apache.http.HttpHost,java.net.InetAddress)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getLocalAddress()
CALLER: org.apache.http.conn.routing.RouteTracker#toRoute()
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
CALLER: org.apache.http.conn.routing.BasicRouteDirector#nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.conn.routing.BasicRouteDirector#firstStep(org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.BasicRouteDirector#proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.BasicRouteDirector#directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#getPoolEntry(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#getSocketConfig(org.apache.http.HttpHost)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#getDefaultSocketConfig()
	CALLEE: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getLocalSocketAddress()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
CALLER: org.apache.http.conn.routing.RouteTracker#connectTarget(boolean)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.conn.routing.RouteTracker#connectProxy(org.apache.http.HttpHost,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.impl.execchain.MainClientExec#createTunnelToTarget(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.HttpHost#toHostString()
	CALLEE: org.apache.http.client.config.RequestConfig#getConnectTimeout()
	CALLEE: org.apache.http.client.config.RequestConfig#isAuthenticationEnabled()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#close()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#isOpen()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicHttpResponse#getEntity()
	CALLEE: org.apache.http.message.BasicHttpResponse#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
	CALLEE: static org.apache.http.util.EntityUtils#consume(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.DefaultConnectionReuseStrategy#keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.NoConnectionReuseStrategy#keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.auth.HttpAuthenticator#handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.BasicHttpRequest#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.AbstractHttpMessage#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#<init>(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.impl.execchain.TunnelRefusedException#<init>(java.lang.String,org.apache.http.HttpResponse)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getProtocolVersion()
CALLER: org.apache.http.conn.routing.RouteTracker#tunnelTarget(boolean)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.impl.execchain.MainClientExec#createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.client.protocol.HttpClientContext)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
CALLER: org.apache.http.conn.routing.RouteTracker#tunnelProxy(org.apache.http.HttpHost,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#getPoolEntry(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
CALLER: org.apache.http.conn.routing.RouteTracker#layerProtocol(boolean)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#routeComplete(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#getPoolEntry(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#markRouteComplete()
CALLER: static org.apache.http.impl.auth.HttpAuthenticator.1#<clinit>()
	CALLEE: static org.apache.http.auth.AuthProtocolState#values()
CALLER: org.apache.http.impl.auth.HttpAuthenticator#ensureAuthScheme(org.apache.http.auth.AuthScheme)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.auth.AuthState#update(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.protocol.HttpRequestExecutor#doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#expectContinue()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#flush()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#receiveResponseEntity(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#receiveResponseHeader()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#isResponseAvailable(int)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#sendRequestHeader(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.protocol.HttpRequestExecutor#doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.protocol.HttpRequestExecutor#canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#receiveResponseEntity(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#receiveResponseHeader()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: static org.apache.http.protocol.HttpRequestExecutor#closeConnection(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#close()
CALLER: org.apache.http.impl.DefaultConnectionReuseStrategy#canResponseHaveBody(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.message.BasicHeaderIterator#<init>(org.apache.http.Header[],java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeaderIterator#findNext(int)
CALLER: org.apache.http.message.BasicTokenIterator#<init>(org.apache.http.HeaderIterator)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicTokenIterator#findNext(int)
CALLER: org.apache.http.message.BasicTokenIterator#nextToken()
	CALLEE: org.apache.http.message.BasicTokenIterator#findNext(int)
CALLER: org.apache.http.message.BasicHeaderElementIterator#<init>(org.apache.http.HeaderIterator)
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#<init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)
CALLER: org.apache.http.message.BasicHeaderElementIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#parseNextElement()
CALLER: org.apache.http.message.BasicHeaderElementIterator#nextElement()
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#parseNextElement()
CALLER: org.apache.http.impl.auth.HttpAuthenticator#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#getState()
	CALLEE: org.apache.http.auth.AuthState#getAuthScheme()
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#setState(org.apache.http.auth.AuthProtocolState)
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.auth.HttpAuthenticator#handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#getState()
	CALLEE: org.apache.http.auth.AuthState#getAuthScheme()
	CALLEE: org.apache.http.auth.AuthState#reset()
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#setState(org.apache.http.auth.AuthProtocolState)
	CALLEE: org.apache.http.HttpHost#toHostString()
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.auth.AuthState#update(java.util.Queue)
CALLER: org.apache.http.client.protocol.HttpClientContext#getTargetAuthState()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.protocol.HttpClientContext#getProxyAuthState()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.protocol.HttpCoreContext#getConnection()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection(boolean)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#close()
CALLER: static org.apache.http.impl.execchain.ResponseEntityProxy#enchance(org.apache.http.HttpResponse,org.apache.http.impl.execchain.ConnectionHolder)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#<init>(org.apache.http.HttpEntity,org.apache.http.impl.execchain.ConnectionHolder)
	CALLEE: org.apache.http.message.BasicHttpResponse#getEntity()
	CALLEE: org.apache.http.message.BasicHttpResponse#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isStreaming()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#formatStats(org.apache.http.conn.routing.HttpRoute)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#detach(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#format(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.pool.AbstractConnPool#release(org.apache.http.pool.PoolEntry,boolean)
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isOpen()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isRouteComplete()
	CALLEE: org.apache.http.pool.PoolEntry#updateExpiry(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.PoolEntry#setState(java.lang.Object)
CALLER: org.apache.http.impl.client.DefaultRedirectStrategy#createLocationURI(java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isEmpty(java.lang.CharSequence)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#setHost(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getPath()
	CALLEE: org.apache.http.client.utils.URIBuilder#setPath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#build()
	CALLEE: org.apache.http.client.utils.URIBuilder#getHost()
CALLER: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: static org.apache.http.client.utils.URIUtils#resolve(java.net.URI,java.net.URI)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.utils.URIUtils#normalizeSyntax(java.net.URI)
CALLER: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
	CALLEE: org.apache.http.protocol.BasicHttpContext#getAttribute(java.lang.String)
CALLER: org.apache.http.client.CircularRedirectException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.RedirectException#<init>(java.lang.String)
CALLER: org.apache.http.client.methods.RequestBuilder#<init>()
	CALLEE: org.apache.http.client.methods.RequestBuilder#<init>(java.lang.String)
CALLER: org.apache.http.client.methods.RequestBuilder#doCopy(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getConfig()
	CALLEE: org.apache.http.message.HeaderGroup#<init>()
	CALLEE: org.apache.http.entity.ContentType#getMimeType()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#getEntity()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.message.HeaderGroup#clear()
	CALLEE: org.apache.http.message.HeaderGroup#setHeaders(org.apache.http.Header[])
	CALLEE: static org.apache.http.entity.ContentType#get(org.apache.http.HttpEntity)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#parse(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getURI()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.Fraction#getFractionData(long,org.joda.time.DateTimeField)
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: static org.apache.http.conn.routing.HttpRoute#normalize(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.HttpHost#getAddress()
	CALLEE: static org.apache.http.conn.routing.HttpRoute#getDefaultPort(java.lang.String)
	CALLEE: org.apache.http.HttpHost#<init>(java.net.InetAddress,int,java.lang.String)
CALLER: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#digestURI(java.net.URI)
CALLER: org.apache.http.client.utils.URIBuilder#build()
	CALLEE: org.apache.http.client.utils.URIBuilder#buildString()
CALLER: org.apache.http.pool.AbstractConnPool#getTotalStats()
	CALLEE: org.apache.http.pool.PoolStats#<init>(int,int,int,int)
CALLER: org.apache.http.pool.AbstractConnPool#getStats(java.lang.Object)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.pool.AbstractConnPool#getPool(java.lang.Object)
	CALLEE: org.apache.http.pool.PoolStats#<init>(int,int,int,int)
	CALLEE: org.apache.http.pool.RouteSpecificPool#getLeasedCount()
	CALLEE: org.apache.http.pool.RouteSpecificPool#getPendingCount()
	CALLEE: org.apache.http.pool.RouteSpecificPool#getAvailableCount()
	CALLEE: org.apache.http.pool.AbstractConnPool#getMax(java.lang.Object)
CALLER: org.apache.http.pool.AbstractConnPool.2#<init>(org.apache.http.pool.AbstractConnPool,java.util.concurrent.locks.Lock,org.apache.http.concurrent.FutureCallback,java.lang.Object,java.lang.Object)
	CALLEE: org.apache.http.pool.PoolEntryFuture#<init>(java.util.concurrent.locks.Lock,org.apache.http.concurrent.FutureCallback)
CALLER: org.apache.http.conn.routing.RouteTracker#<init>(org.apache.http.HttpHost,java.net.InetAddress)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
	CALLEE: org.apache.http.conn.routing.HttpRoute#<init>(org.apache.http.HttpHost,java.net.InetAddress,java.util.List,boolean,org.apache.http.conn.routing.RouteInfo.TunnelType,org.apache.http.conn.routing.RouteInfo.LayerType)
CALLER: org.apache.http.conn.routing.BasicRouteDirector#firstStep(org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
CALLER: org.apache.http.conn.routing.BasicRouteDirector#proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#isTunnelled()
	CALLEE: org.apache.http.conn.routing.HttpRoute#isSecure()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopTarget(int)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
	CALLEE: org.apache.http.conn.routing.HttpRoute#isLayered()
	CALLEE: org.apache.http.HttpHost#equals(java.lang.Object)
CALLER: org.apache.http.conn.routing.BasicRouteDirector#directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#isSecure()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getLocalAddress()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
	CALLEE: org.apache.http.HttpHost#equals(java.lang.Object)
CALLER: static org.apache.http.impl.conn.CPoolProxy#getPoolEntry(org.apache.http.HttpClientConnection)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#getProxy(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.ConnectionShutdownException#<init>()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getPoolEntry()
CALLER: static org.apache.http.config.SocketConfig#<clinit>()
	CALLEE: org.apache.http.config.SocketConfig.Builder#<init>()
	CALLEE: org.apache.http.config.SocketConfig.Builder#build()
CALLER: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#bind(java.net.Socket)
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.impl.conn.DefaultSchemePortResolver#resolve(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.conn.UnsupportedSchemeException#<init>(java.lang.String)
	CALLEE: org.apache.http.HttpHost#getAddress()
	CALLEE: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#getSocketFactoryRegistry(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.conn.SystemDefaultDnsResolver#resolve(java.lang.String)
	CALLEE: org.apache.http.conn.ConnectTimeoutException#<init>(java.io.IOException,org.apache.http.HttpHost,java.net.InetAddress[])
	CALLEE: org.apache.http.conn.HttpHostConnectException#<init>(java.io.IOException,org.apache.http.HttpHost,java.net.InetAddress[])
	CALLEE: org.apache.http.config.SocketConfig#getSoLinger()
	CALLEE: org.apache.http.config.SocketConfig#isSoKeepAlive()
	CALLEE: org.apache.http.config.SocketConfig#isTcpNoDelay()
	CALLEE: org.apache.http.config.SocketConfig#isSoReuseAddress()
	CALLEE: org.apache.http.config.SocketConfig#getSoTimeout()
	CALLEE: org.apache.http.config.Registry#lookup(java.lang.String)
CALLER: org.apache.http.message.BasicHttpRequest#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicRequestLine#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicHttpRequest#<init>(org.apache.http.RequestLine)
CALLER: org.apache.http.protocol.HttpRequestExecutor#preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.message.AbstractHttpMessage#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.HeaderGroup#iterator()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#remove()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.apache.http.entity.BufferedHttpEntity#<init>(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.entity.HttpEntityWrapper#<init>(org.apache.http.HttpEntity)
	CALLEE: static org.apache.http.util.EntityUtils#toByteArray(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentLength()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentLength()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#isRepeatable()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isRepeatable()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isRepeatable()
CALLER: org.apache.http.impl.execchain.TunnelRefusedException#<init>(java.lang.String,org.apache.http.HttpResponse)
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
CALLER: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.impl.conn.DefaultSchemePortResolver#resolve(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#getSchemeName()
	CALLEE: org.apache.http.conn.UnsupportedSchemeException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#getSocketFactoryRegistry(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.config.Registry#lookup(java.lang.String)
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#bind(java.net.Socket)
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getSocket()
CALLER: org.apache.http.protocol.HttpRequestExecutor#canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.message.BasicHeaderIterator#findNext(int)
	CALLEE: org.apache.http.message.BasicHeaderIterator#filterHeader(int)
CALLER: org.apache.http.message.BasicTokenIterator#findNext(int)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.message.BasicTokenIterator#findTokenSeparator(int)
	CALLEE: org.apache.http.message.BasicTokenIterator#findTokenStart(int)
	CALLEE: org.apache.http.message.BasicTokenIterator#findTokenEnd(int)
	CALLEE: org.apache.http.message.BasicTokenIterator#createToken(java.lang.String,int,int)
	CALLEE: org.apache.http.message.BasicHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
CALLER: static org.apache.http.message.BasicHeaderValueParser#<clinit>()
	CALLEE: org.apache.http.message.BasicHeaderValueParser#<init>()
	CALLEE: static org.apache.http.message.TokenParser#INIT_BITSET(int[])
CALLER: org.apache.http.message.BasicHeaderElementIterator#<init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.message.BasicHeaderElementIterator#parseNextElement()
	CALLEE: org.apache.http.message.BasicHeaderElementIterator#bufferHeaderValue()
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.BasicHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderElement#getValue()
	CALLEE: org.apache.http.message.BasicHeaderElement#getName()
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.auth.AuthState#update(java.util.Queue)
	CALLEE: static org.apache.http.util.Args#notEmpty(java.util.Collection,java.lang.String)
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#<init>(org.apache.http.HttpEntity,org.apache.http.impl.execchain.ConnectionHolder)
	CALLEE: org.apache.http.entity.HttpEntityWrapper#<init>(org.apache.http.HttpEntity)
CALLER: static org.apache.http.impl.conn.CPoolProxy#detach(org.apache.http.HttpClientConnection)
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#getProxy(org.apache.http.HttpClientConnection)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#detach()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#format(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
	CALLEE: org.apache.http.pool.PoolEntry#getState()
	CALLEE: org.apache.http.pool.PoolEntry#getId()
CALLER: org.apache.http.pool.AbstractConnPool#release(org.apache.http.pool.PoolEntry,boolean)
	CALLEE: org.apache.http.pool.AbstractConnPool#getPool(java.lang.Object)
	CALLEE: org.apache.http.pool.RouteSpecificPool#free(org.apache.http.pool.PoolEntry,boolean)
	CALLEE: org.apache.http.pool.AbstractConnPool#onRelease(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.RouteSpecificPool#nextPending()
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.pool.PoolEntryFuture#wakeup()
CALLER: static org.apache.http.client.utils.URIUtils#normalizeSyntax(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#build()
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#setScheme(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#setHost(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getPath()
	CALLEE: org.apache.http.client.utils.URIBuilder#setPath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#getHost()
	CALLEE: org.apache.http.client.utils.URIBuilder#getScheme()
CALLER: org.apache.http.protocol.BasicHttpContext#getAttribute(java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.message.HeaderGroup#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.message.HeaderGroup#clear()
CALLER: static org.apache.http.entity.ContentType#get(org.apache.http.HttpEntity)
	CALLEE: static org.apache.http.entity.ContentType#create(org.apache.http.HeaderElement,boolean)
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentType()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentType()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentType()
	CALLEE: org.apache.http.message.BasicHeader#getElements()
	CALLEE: org.apache.http.message.BufferedHeader#getElements()
CALLER: static org.apache.http.client.utils.URLEncodedUtils#parse(org.apache.http.HttpEntity)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: org.apache.http.entity.ContentType#getCharset()
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.entity.ContentType#getMimeType()
	CALLEE: static org.apache.http.entity.ContentType#get(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char[],int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#parse(org.apache.http.util.CharArrayBuffer,java.nio.charset.Charset,char[])
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContent()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentLength()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentLength()
	CALLEE: org.apache.http.entity.StringEntity#getContent()
	CALLEE: org.apache.http.entity.StringEntity#getContentLength()
CALLER: org.apache.http.HttpHost#<init>(java.net.InetAddress,int,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.HttpHost#<init>(java.net.InetAddress,java.lang.String,int,java.lang.String)
CALLER: org.apache.http.client.utils.URIBuilder#digestURI(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#parseQuery(java.lang.String,java.nio.charset.Charset)
CALLER: org.apache.http.client.utils.URIBuilder#buildString()
	CALLEE: org.apache.http.client.utils.URIBuilder#encodeUserInfo(java.lang.String)
	CALLEE: static org.apache.http.conn.util.InetAddressUtils#isIPv6Address(java.lang.String)
	CALLEE: static org.apache.http.client.utils.URIBuilder#normalizePath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#encodePath(java.lang.String)
	CALLEE: org.apache.http.client.utils.URIBuilder#encodeUrlForm(java.util.List)
	CALLEE: org.apache.http.client.utils.URIBuilder#encodeUric(java.lang.String)
CALLER: org.apache.http.config.SocketConfig.Builder#build()
	CALLEE: org.apache.http.config.SocketConfig#<init>(int,boolean,int,boolean,boolean,int,int,int)
CALLER: org.apache.http.impl.conn.DefaultHttpClientConnectionOperator#getSocketFactoryRegistry(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
CALLER: org.apache.http.conn.ConnectTimeoutException#<init>(java.io.IOException,org.apache.http.HttpHost,java.net.InetAddress[])
	CALLEE: org.apache.http.HttpHost#toHostString()
CALLER: org.apache.http.conn.HttpHostConnectException#<init>(java.io.IOException,org.apache.http.HttpHost,java.net.InetAddress[])
	CALLEE: org.apache.http.HttpHost#toHostString()
CALLER: org.apache.http.message.BasicRequestLine#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.message.BasicHttpRequest#<init>(org.apache.http.RequestLine)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#<init>()
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
CALLER: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.RequestTargetHost#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestDefaultHeaders#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.RequestContent#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestClientConnControl#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.RequestUserAgent#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestExpectContinue#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestAddCookies#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestAcceptEncoding#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.RequestAuthCache#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.entity.HttpEntityWrapper#<init>(org.apache.http.HttpEntity)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.util.EntityUtils#toByteArray(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.EmptyInputStream#read(byte[])
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[])
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#toByteArray()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentLength()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentLength()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContentLength()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#read(byte[])
CALLER: org.apache.http.message.BasicTokenIterator#findTokenSeparator(int)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
	CALLEE: org.apache.http.message.BasicTokenIterator#isTokenSeparator(char)
	CALLEE: org.apache.http.message.BasicTokenIterator#isWhitespace(char)
	CALLEE: org.apache.http.message.BasicTokenIterator#isTokenChar(char)
	CALLEE: org.apache.http.ParseException#<init>(java.lang.String)
CALLER: org.apache.http.message.BasicTokenIterator#findTokenStart(int)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.message.BasicTokenIterator#isTokenSeparator(char)
	CALLEE: org.apache.http.message.BasicTokenIterator#isWhitespace(char)
	CALLEE: org.apache.http.message.BasicTokenIterator#isTokenChar(char)
	CALLEE: org.apache.http.ParseException#<init>(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
CALLER: org.apache.http.message.BasicTokenIterator#findTokenEnd(int)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
	CALLEE: org.apache.http.message.BasicTokenIterator#isTokenChar(char)
CALLER: static org.apache.http.message.TokenParser#<clinit>()
	CALLEE: org.apache.http.message.TokenParser#<init>()
CALLER: org.apache.http.message.BasicHeaderElementIterator#bufferHeaderValue()
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.message.BasicHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BasicHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.message.BufferedHeader#getBuffer()
	CALLEE: org.apache.http.message.BufferedHeader#getValuePos()
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getAuthCache()
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getAuthCache()
	CALLEE: org.apache.http.impl.client.AuthenticationStrategyImpl#isCachable(org.apache.http.auth.AuthScheme)
	CALLEE: org.apache.http.impl.client.BasicAuthCache#<init>()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#setAuthCache(org.apache.http.client.AuthCache)
	CALLEE: org.apache.http.impl.client.BasicAuthCache#put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.auth.MalformedChallengeException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: static org.apache.http.protocol.HTTP#isWhitespace(char)
	CALLEE: org.apache.http.util.CharArrayBuffer#substring(int,int)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getHeaders(java.lang.String)
CALLER: org.apache.http.impl.client.AuthenticationStrategyImpl#select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.auth.AuthScope#<init>(java.lang.String,int,java.lang.String,java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getAuthSchemeRegistry()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCredentialsProvider()
	CALLEE: org.apache.http.impl.client.TargetAuthenticationStrategy#getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.impl.client.ProxyAuthenticationStrategy#getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.auth.AuthOption#<init>(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)
CALLER: org.apache.http.pool.RouteSpecificPool#free(org.apache.http.pool.PoolEntry,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String,java.lang.Object)
CALLER: static org.apache.http.entity.ContentType#create(org.apache.http.HeaderElement,boolean)
	CALLEE: static org.apache.http.entity.ContentType#create(java.lang.String,org.apache.http.NameValuePair[],boolean)
CALLER: org.apache.http.util.CharArrayBuffer#append(char[],int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#expand(int)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#parse(org.apache.http.util.CharArrayBuffer,java.nio.charset.Charset,char[])
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicNameValuePair#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.TokenParser#parseToken(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.TokenParser#parseValue(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#decodeFormFields(java.lang.String,java.nio.charset.Charset)
CALLER: org.apache.http.HttpHost#<init>(java.net.InetAddress,java.lang.String,int,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.client.utils.URIBuilder#parseQuery(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#parse(java.lang.String,java.nio.charset.Charset)
CALLER: org.apache.http.client.utils.URIBuilder#encodeUserInfo(java.lang.String)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#encUserInfo(java.lang.String,java.nio.charset.Charset)
CALLER: static org.apache.http.conn.util.InetAddressUtils#isIPv6Address(java.lang.String)
	CALLEE: static org.apache.http.conn.util.InetAddressUtils#isIPv6StdAddress(java.lang.String)
	CALLEE: static org.apache.http.conn.util.InetAddressUtils#isIPv6HexCompressedAddress(java.lang.String)
CALLER: org.apache.http.client.utils.URIBuilder#encodePath(java.lang.String)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#encPath(java.lang.String,java.nio.charset.Charset)
CALLER: org.apache.http.client.utils.URIBuilder#encodeUrlForm(java.util.List)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#format(java.lang.Iterable,java.nio.charset.Charset)
CALLER: org.apache.http.client.utils.URIBuilder#encodeUric(java.lang.String)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#encUric(java.lang.String,java.nio.charset.Charset)
CALLER: org.apache.http.message.BasicTokenIterator#isTokenChar(char)
	CALLEE: org.apache.http.message.BasicTokenIterator#isHttpSeparator(char)
CALLER: org.apache.http.client.protocol.HttpClientContext#getAuthCache()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.client.BasicAuthCache#<init>()
	CALLEE: org.apache.http.impl.client.BasicAuthCache#<init>(org.apache.http.conn.SchemePortResolver)
CALLER: org.apache.http.client.protocol.HttpClientContext#setAuthCache(org.apache.http.client.AuthCache)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.impl.client.BasicAuthCache#put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.client.BasicAuthCache#getKey(org.apache.http.HttpHost)
CALLER: org.apache.http.auth.MalformedChallengeException#<init>(java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
CALLER: org.apache.http.client.protocol.HttpClientContext#getAuthSchemeRegistry()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getLookup(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.protocol.HttpClientContext#getCredentialsProvider()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.client.TargetAuthenticationStrategy#getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.client.config.RequestConfig#getTargetPreferredAuthSchemes()
CALLER: org.apache.http.impl.client.ProxyAuthenticationStrategy#getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.client.config.RequestConfig#getProxyPreferredAuthSchemes()
CALLER: org.apache.http.auth.AuthOption#<init>(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.message.TokenParser#parseToken(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: static org.apache.http.message.TokenParser#isWhitespace(char)
	CALLEE: org.apache.http.message.TokenParser#skipWhiteSpace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.TokenParser#copyContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet,java.lang.StringBuilder)
CALLER: org.apache.http.message.TokenParser#parseValue(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: static org.apache.http.message.TokenParser#isWhitespace(char)
	CALLEE: org.apache.http.message.TokenParser#skipWhiteSpace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.TokenParser#copyQuotedContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.lang.StringBuilder)
	CALLEE: org.apache.http.message.TokenParser#copyUnquotedContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet,java.lang.StringBuilder)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#decodeFormFields(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#urlDecode(java.lang.String,java.nio.charset.Charset,boolean)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#parse(java.lang.String,java.nio.charset.Charset)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#parse(org.apache.http.util.CharArrayBuffer,java.nio.charset.Charset,char[])
CALLER: static org.apache.http.client.utils.URLEncodedUtils#encUserInfo(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#urlEncode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#encPath(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#urlEncode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#format(java.lang.Iterable,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#format(java.lang.Iterable,char,java.nio.charset.Charset)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#encUric(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#urlEncode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean)
CALLER: org.apache.http.impl.client.BasicAuthCache#<init>(org.apache.http.conn.SchemePortResolver)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
CALLER: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.protocol.BasicHttpContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.impl.client.BasicAuthCache#getKey(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.HttpHost#getPort()
	CALLEE: org.apache.http.HttpHost#getHostName()
	CALLEE: org.apache.http.impl.conn.DefaultSchemePortResolver#resolve(org.apache.http.HttpHost)
	CALLEE: org.apache.http.HttpHost#getSchemeName()
CALLER: org.apache.http.client.protocol.HttpClientContext#getLookup(java.lang.String,java.lang.Class)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.message.TokenParser#skipWhiteSpace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: static org.apache.http.message.TokenParser#isWhitespace(char)
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
CALLER: org.apache.http.message.TokenParser#copyContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet,java.lang.StringBuilder)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: static org.apache.http.message.TokenParser#isWhitespace(char)
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
CALLER: org.apache.http.message.TokenParser#copyQuotedContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.lang.StringBuilder)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
CALLER: org.apache.http.message.TokenParser#copyUnquotedContent(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet,java.lang.StringBuilder)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: static org.apache.http.message.TokenParser#isWhitespace(char)
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
CALLER: static org.apache.http.client.utils.URLEncodedUtils#format(java.lang.Iterable,char,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#encodeFormFields(java.lang.String,java.nio.charset.Charset)
	CALLEE: org.apache.http.message.BasicNameValuePair#getValue()
	CALLEE: org.apache.http.message.BasicNameValuePair#getName()
CALLER: org.apache.http.protocol.BasicHttpContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.client.utils.URLEncodedUtils#encodeFormFields(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#urlEncode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean)
CALLER: org.apache.http.message.AbstractHttpMessage#addHeader(org.apache.http.Header)
	CALLEE: org.apache.http.message.HeaderGroup#addHeader(org.apache.http.Header)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#eras()
CALLER: org.joda.time.field.ScaledDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.BaseDurationField#getType()
	CALLEE: org.joda.time.field.DecoratedDurationField#getWrappedField()
	CALLEE: org.joda.time.field.ScaledDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.PreciseDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#equals(java.lang.Object)
CALLER: org.joda.time.field.BaseDurationField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.field.BaseDurationField#compareTo(org.joda.time.DurationField)
CALLER: org.joda.time.field.ScaledDurationField#hashCode()
	CALLEE: org.joda.time.DurationFieldType.StandardDurationFieldType#hashCode()
	CALLEE: org.joda.time.field.UnsupportedDurationField#hashCode()
	CALLEE: org.joda.time.field.BaseDurationField#getType()
	CALLEE: org.joda.time.field.DecoratedDurationField#getWrappedField()
	CALLEE: org.joda.time.field.ScaledDurationField#hashCode()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#hashCode()
	CALLEE: org.joda.time.field.PreciseDurationField#hashCode()
	CALLEE: org.joda.time.field.MillisDurationField#hashCode()
CALLER: org.apache.http.pool.RouteSpecificPool#shutdown()
	CALLEE: org.apache.http.pool.PoolEntryFuture#cancel(boolean)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.UTCDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.field.ScaledDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.PreciseDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#equals(java.lang.Object)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.field.UnsupportedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.UTCDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#equals(java.lang.Object)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#equals(java.lang.Object)
	CALLEE: org.joda.time.field.ScaledDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.PreciseDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#equals(java.lang.Object)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#hashCode()
	CALLEE: org.joda.time.field.UnsupportedDurationField#hashCode()
	CALLEE: org.joda.time.tz.FixedDateTimeZone#hashCode()
	CALLEE: org.joda.time.UTCDateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#hashCode()
	CALLEE: org.joda.time.tz.CachedDateTimeZone#hashCode()
	CALLEE: org.joda.time.field.ScaledDurationField#hashCode()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#hashCode()
	CALLEE: org.joda.time.field.PreciseDurationField#hashCode()
	CALLEE: org.joda.time.field.MillisDurationField#hashCode()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#hashCode()
	CALLEE: org.joda.time.tz.FixedDateTimeZone#hashCode()
	CALLEE: org.joda.time.UTCDateTimeZone#hashCode()
	CALLEE: org.joda.time.DateTimeZone#hashCode()
	CALLEE: org.joda.time.tz.CachedDateTimeZone#hashCode()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#hashCode()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
CALLER: org.apache.http.protocol.ChainBuilder#addFirst(java.lang.Object)
	CALLEE: org.apache.http.protocol.ChainBuilder#ensureUnique(java.lang.Object)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
CALLER: org.apache.http.pool.RouteSpecificPool#remove(org.apache.http.pool.PoolEntry)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.params.BasicHttpParams#copy()
CALLER: org.apache.http.message.HeaderGroup#iterator()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#<init>(java.util.List,java.lang.String)
CALLER: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#containsHeader(java.lang.String)
CALLER: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getProtocolVersion()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
CALLER: org.apache.http.conn.routing.HttpRoute#getHopTarget(int)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
CALLER: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.UnsupportedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.OffsetDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getLeapDurationField()
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#weeks()
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyears()
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#years()
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#weeks()
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getRangeDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#months()
CALLER: org.joda.time.chrono.BasicYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.AssembledChronology#days()
CALLER: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: static org.joda.time.DurationFieldType#eras()
	CALLEE: static org.joda.time.field.UnsupportedDurationField#getInstance(org.joda.time.DurationFieldType)
CALLER: org.joda.time.field.MillisDurationField#getType()
	CALLEE: static org.joda.time.DurationFieldType#millis()
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getLeapDurationField()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getLeapDurationField()
CALLER: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.ImmutableHttpProcessor#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.ResponseProcessCookies#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.ResponseContentEncoding#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInMonthMax()
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInYearMax()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMinimumValue()
CALLER: org.joda.time.chrono.BasicYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.1#get(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.1#cancel()
	CALLEE: org.apache.http.pool.PoolEntryFuture#cancel(boolean)
CALLER: org.joda.time.field.DecoratedDurationField#isPrecise()
	CALLEE: org.joda.time.field.PreciseDurationField#isPrecise()
	CALLEE: org.joda.time.field.MillisDurationField#isPrecise()
	CALLEE: org.joda.time.field.UnsupportedDurationField#isPrecise()
	CALLEE: org.joda.time.field.DecoratedDurationField#isPrecise()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#isPrecise()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#isPrecise()
	CALLEE: org.joda.time.field.PreciseDurationField#isPrecise()
	CALLEE: org.joda.time.field.MillisDurationField#isPrecise()
	CALLEE: org.joda.time.field.UnsupportedDurationField#isPrecise()
	CALLEE: org.joda.time.field.DecoratedDurationField#isPrecise()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#isPrecise()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#isPrecise()
	CALLEE: org.joda.time.UTCDateTimeZone#isFixed()
	CALLEE: org.joda.time.tz.FixedDateTimeZone#isFixed()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#isFixed()
	CALLEE: org.joda.time.tz.CachedDateTimeZone#isFixed()
CALLER: org.joda.time.DateTimeField#setExtended(long,int)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
CALLER: org.apache.http.message.AbstractHttpMessage#headerIterator()
	CALLEE: org.apache.http.message.HeaderGroup#iterator()
CALLER: org.joda.time.field.UnsupportedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.BaseDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#convertText(java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#convertText(java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#convertText(java.lang.String,java.util.Locale)
CALLER: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.MillisDurationField#compareTo(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#compareTo(org.joda.time.DurationField)
CALLER: org.joda.time.format.DateTimeParserBucket.SavedState#restoreState(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$300(org.joda.time.format.DateTimeParserBucket)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket.SavedField[])
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$402(org.joda.time.format.DateTimeParserBucket,boolean)
	CALLEE: static org.joda.time.format.DateTimeParserBucket#access$302(org.joda.time.format.DateTimeParserBucket,int)
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#close()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#close()
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.message.BasicHttpResponse#getEntity()
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#getStatusLine()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
CALLER: org.apache.http.HttpHost#toString()
	CALLEE: org.apache.http.HttpHost#toURI()
CALLER: org.apache.http.HttpHost#hashCode()
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,int)
CALLER: org.apache.http.client.methods.HttpRequestWrapper#getProtocolVersion()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getProtocolVersion()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getProtocolVersion()
	CALLEE: org.apache.http.message.BasicHttpRequest#getProtocolVersion()
CALLER: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
CALLER: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.apache.http.auth.AuthScope#equals(java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.auth.AuthScope#hashCode()
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,int)
CALLER: org.apache.http.client.protocol.HttpClientContext#setRequestConfig(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.client.protocol.HttpClientContext#getRedirectLocations()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#expectContinue()
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
CALLER: org.apache.http.client.protocol.HttpClientContext#setCredentialsProvider(org.apache.http.client.CredentialsProvider)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.apache.http.client.protocol.HttpClientContext#getUserToken()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String)
CALLER: org.apache.http.params.AbstractHttpParams#getBooleanParameter(java.lang.String,boolean)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.params.AbstractHttpParams#getIntParameter(java.lang.String,int)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.params.AbstractHttpParams#getLongParameter(java.lang.String,long)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.message.BasicHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicHeaderIterator#findNext(int)
CALLER: org.apache.http.message.BasicHeaderValueParser#parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.BasicNameValuePair#getValue()
	CALLEE: org.apache.http.message.BasicNameValuePair#getName()
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])
CALLER: org.joda.time.field.PreciseDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.BaseDurationField#getType()
CALLER: org.joda.time.field.MillisDurationField#equals(java.lang.Object)
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
CALLER: org.joda.time.field.PreciseDurationField#hashCode()
	CALLEE: org.joda.time.DurationFieldType.StandardDurationFieldType#hashCode()
	CALLEE: org.joda.time.field.BaseDurationField#getType()
CALLER: org.joda.time.field.MillisDurationField#hashCode()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
CALLER: org.apache.http.conn.routing.HttpRoute#equals(java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.conn.routing.HttpRoute#hashCode()
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,boolean)
CALLER: org.joda.time.field.BaseDurationField#toString()
	CALLEE: org.joda.time.field.BaseDurationField#getName()
CALLER: org.joda.time.field.BaseDateTimeField#toString()
	CALLEE: org.joda.time.field.BaseDateTimeField#getName()
CALLER: org.apache.http.conn.routing.HttpRoute#toString()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getHopCount()
CALLER: org.apache.http.client.methods.HttpRequestBase#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: org.apache.http.message.BasicRequestLine#<init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getProtocolVersion()
	CALLEE: org.apache.http.client.methods.HttpPost#getMethod()
	CALLEE: org.apache.http.client.methods.HttpGet#getMethod()
	CALLEE: org.apache.http.client.methods.HttpHead#getMethod()
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalRequest#getMethod()
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalEntityEclosingRequest#getMethod()
CALLER: org.joda.time.DateTimeZone#toString()
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#getOffset(long)
CALLER: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getInfo(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getOffset(long)
CALLER: org.joda.time.DateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#nextTransition(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.UTCDateTimeZone#previousTransition(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#previousTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#previousTransition(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#previousTransition(long)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#setExtended(long,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
CALLER: org.joda.time.chrono.BasicChronology.HalfdayField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#halfdayTextToValue(java.lang.String)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean,long)
CALLER: org.joda.time.chrono.GJEraDateTimeField#set(long,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#eraTextToValue(java.lang.String)
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
CALLER: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getOffsetToAdd(long)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMonthMillis(int,int)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.AssembledChronology#weekOfWeekyear()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
CALLER: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getUnitMillis()
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#get(long)
CALLER: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfWeek(long)
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long)
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfYear(long)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getMonthOfYear(long)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekyear(long)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long)
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
CALLER: org.joda.time.field.BaseDurationField#compareTo(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#wrapEntry(java.util.Map.Entry)
CALLER: org.apache.http.params.BasicHttpParams#copy()
	CALLEE: org.apache.http.params.BasicHttpParams#clone()
CALLER: org.apache.http.message.BasicListHeaderIterator#<init>(java.util.List,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#findNext(int)
CALLER: org.apache.http.message.HeaderGroup#containsHeader(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#formatStats(org.apache.http.conn.routing.HttpRoute)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager#format(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.pool.PoolEntryFuture#get(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.PoolEntryFuture#isCancelled()
	CALLEE: static org.apache.http.impl.conn.CPoolProxy#newProxy(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.conn.ConnectionPoolTimeoutException#<init>(java.lang.String)
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
CALLER: org.joda.time.tz.CachedDateTimeZone#isFixed()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#isFixed()
CALLER: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
CALLER: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
CALLER: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#getRemainder(int)
CALLER: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDivided(int)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)
	CALLEE: org.joda.time.DateTimeZone#getID()
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getType()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean,long)
	CALLEE: org.joda.time.IllegalInstantException#<init>(long,java.lang.String)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#set(long,int)
CALLER: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#set(long,int)
CALLER: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
CALLER: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValueForSet(long,int)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getDaysInYearMonth(int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMonthDayMillis(int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getMillisOfDay(long)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfWeek()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfWeek(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeeksInYear(int)
CALLER: org.joda.time.field.BaseDateTimeField#convertText(java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#convertText(java.lang.String,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#dayOfWeekTextToValue(java.lang.String)
CALLER: org.joda.time.chrono.GJMonthOfYearDateTimeField#convertText(java.lang.String,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#monthOfYearTextToValue(java.lang.String)
CALLER: org.joda.time.field.MillisDurationField#compareTo(org.joda.time.DurationField)
	CALLEE: org.joda.time.field.PreciseDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.MillisDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.UnsupportedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ScaledDurationField#getUnitMillis()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getUnitMillis()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#getUnitMillis()
CALLER: org.apache.http.impl.execchain.ConnectionHolder#close()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection(boolean)
CALLER: org.apache.http.client.methods.HttpRequestBase#getProtocolVersion()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: static org.apache.http.params.HttpProtocolParams#getVersion(org.apache.http.params.HttpParams)
CALLER: org.apache.http.message.BasicHttpRequest#getProtocolVersion()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
CALLER: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#getFirstHeader(java.lang.String)
CALLER: org.apache.http.message.BasicHeaderValueParser#parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicNameValuePair#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.TokenParser#parseToken(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.TokenParser#parseValue(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,java.util.BitSet)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#createNameValuePair(java.lang.String,java.lang.String)
CALLER: org.apache.http.message.BasicHeaderValueParser#parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.TokenParser#skipWhiteSpace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
CALLER: org.apache.http.message.BasicHeaderValueParser#createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])
	CALLEE: org.apache.http.message.BasicHeaderElement#<init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])
CALLER: static org.apache.http.util.LangUtils#hashCode(int,boolean)
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,int)
CALLER: org.joda.time.field.BaseDurationField#getName()
	CALLEE: org.joda.time.DurationFieldType#getName()
CALLER: org.joda.time.field.BaseDateTimeField#getName()
	CALLEE: org.joda.time.DateTimeFieldType#getName()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#findMatchingRecurrence(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#getSaveMillis()
CALLER: org.joda.time.tz.CachedDateTimeZone#getInfo(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#createInfo(long)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#nextTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#nextTransition(long)
CALLER: org.joda.time.tz.CachedDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#nextTransition(long)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#previousTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#previousTransition(long)
CALLER: org.joda.time.tz.CachedDateTimeZone#previousTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#previousTransition(long)
CALLER: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#getType()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)
CALLER: org.joda.time.chrono.BasicGJChronology#setYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMonthDayMillis(int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getMillisOfDay(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfYear(long,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#<init>(java.util.Locale)
CALLER: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
CALLER: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean,long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#roundFloor(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#roundFloor(long)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#set(long,int)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getOffsetToAdd(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
CALLER: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearInfo(int)
CALLER: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#getAverageMillisPerYearDividedByTwo()
	CALLEE: org.joda.time.chrono.GregorianChronology#getApproxMillisAtEpochDividedByTwo()
CALLER: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.chrono.BasicChronology#getYearMonthMillis(int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getTotalMillisByYearMonth(int,int)
CALLER: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long,int)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.field.DecoratedDateTimeField#get(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#get(long)
CALLER: org.joda.time.chrono.BasicChronology#getDayOfMonth(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int,int)
CALLER: org.joda.time.chrono.BasicChronology#getDayOfYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfYear(long,int)
CALLER: org.joda.time.chrono.BasicChronology#getMonthOfYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
CALLER: org.joda.time.chrono.BasicChronology#getWeekyear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long,int)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#remainder(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#remainder(long)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#remainder(long)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#wrapEntry(java.util.Map.Entry)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: static com.google.common.collect.Maps#immutableEntry(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.params.BasicHttpParams#clone()
	CALLEE: org.apache.http.params.BasicHttpParams#copyParams(org.apache.http.params.HttpParams)
CALLER: org.apache.http.message.BasicListHeaderIterator#findNext(int)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#filterHeader(int)
CALLER: org.apache.http.pool.PoolEntryFuture#get(long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.pool.AbstractConnPool.2#getPoolEntry(long,java.util.concurrent.TimeUnit)
CALLER: static org.apache.http.impl.conn.CPoolProxy#newProxy(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#<init>(org.apache.http.impl.conn.CPoolEntry)
CALLER: org.apache.http.conn.ConnectionPoolTimeoutException#<init>(java.lang.String)
	CALLEE: org.apache.http.conn.ConnectTimeoutException#<init>(java.lang.String)
CALLER: org.joda.time.IllegalInstantException#<init>(long,java.lang.String)
	CALLEE: static org.joda.time.IllegalInstantException#createMessage(long,java.lang.String)
CALLER: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)
	CALLEE: org.joda.time.DateTimeFieldType#getName()
	CALLEE: static org.joda.time.IllegalFieldValueException#createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)
CALLER: org.joda.time.field.DecoratedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#set(long,int)
CALLER: org.joda.time.field.PreciseDurationDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue(long)
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getDaysInMonthMaxForSet(long,int)
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInYearMax()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue(long)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValueForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue(long)
CALLER: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int,int)
CALLER: org.joda.time.chrono.BasicGJChronology#getDaysInYearMonth(int,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.chrono.BasicChronology#getYearMonthDayMillis(int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getTotalMillisByYearMonth(int,int)
CALLER: org.joda.time.chrono.BasicChronology#getWeeksInYear(int)
	CALLEE: org.joda.time.chrono.BasicChronology#getFirstWeekOfYearMillis(int)
CALLER: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
	CALLEE: org.joda.time.DateTimeFieldType#getName()
	CALLEE: static org.joda.time.IllegalFieldValueException#createMessage(java.lang.String,java.lang.String)
CALLER: static org.apache.http.params.HttpProtocolParams#getVersion(org.apache.http.params.HttpParams)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.message.HeaderGroup#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.apache.http.message.BasicHeaderValueParser#createNameValuePair(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.message.BasicNameValuePair#<init>(java.lang.String,java.lang.String)
CALLER: org.apache.http.message.BasicHeaderElement#<init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#findMatchingRecurrence(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#getSaveMillis()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#next(long,int,int)
CALLER: org.joda.time.tz.CachedDateTimeZone#createInfo(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#nextTransition(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#<init>(org.joda.time.DateTimeZone,long)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#nextTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#getSaveMillis()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#next(long,int,int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#previousTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#getSaveMillis()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#previous(long,int,int)
CALLER: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)
	CALLEE: org.joda.time.DateTimeFieldType#getName()
	CALLEE: static org.joda.time.IllegalFieldValueException#createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)
CALLER: org.joda.time.chrono.BasicChronology#getDayOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
CALLER: org.joda.time.chrono.GJLocaleSymbols#<init>(java.util.Locale)
	CALLEE: static org.joda.time.DateTimeUtils#getDateFormatSymbols(java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#realignDaysOfWeek(java.lang.String[])
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#realignMonths(java.lang.String[])
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#maxLength(java.lang.String[])
CALLER: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean)
	CALLEE: org.joda.time.DateTimeZone#getID()
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#nextTransition(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#nextTransition(long)
	CALLEE: org.joda.time.IllegalInstantException#<init>(long,java.lang.String)
CALLER: org.joda.time.chrono.BasicChronology#getYearInfo(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#calculateFirstDayOfYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicChronology.YearInfo#<init>(int,long)
CALLER: org.joda.time.chrono.BasicGJChronology#getTotalMillisByYearMonth(int,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.chrono.BasicChronology#getWeekOfWeekyear(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeeksInYear(int)
	CALLEE: org.joda.time.chrono.BasicChronology#getFirstWeekOfYearMillis(int)
CALLER: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getTotalMillisByYearMonth(int,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: static com.google.common.collect.Maps#immutableEntry(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.params.BasicHttpParams#copyParams(org.apache.http.params.HttpParams)
	CALLEE: org.apache.http.params.BasicHttpParams#setParameter(java.lang.String,java.lang.Object)
CALLER: org.apache.http.message.BasicListHeaderIterator#filterHeader(int)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.apache.http.pool.AbstractConnPool.2#getPoolEntry(long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.AbstractConnPool.2#getPoolEntry(long,java.util.concurrent.TimeUnit)
CALLER: static org.joda.time.IllegalInstantException#createMessage(long,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatter#print(org.joda.time.ReadableInstant)
	CALLEE: static org.joda.time.format.DateTimeFormat#forPattern(java.lang.String)
	CALLEE: org.joda.time.Instant#<init>(long)
CALLER: org.joda.time.field.BaseDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInMonthMax(long)
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInYear(int)
CALLER: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekyear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeeksInYear(int)
CALLER: org.joda.time.chrono.BasicGJChronology#getDaysInMonthMaxForSet(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getDaysInMonthMax(long)
CALLER: org.joda.time.chrono.BasicChronology#getFirstWeekOfYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMillis(int)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfWeek(long)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#next(long,int,int)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#next(long,int,int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#previous(long,int,int)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#previous(long,int,int)
CALLER: org.joda.time.chrono.GregorianChronology#calculateFirstDayOfYearMillis(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.ImmutableEntry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapEntry#<init>()
CALLER: org.apache.http.pool.AbstractConnPool.2#getPoolEntry(long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.pool.AbstractConnPool#access$000(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)
	CALLEE: org.apache.http.pool.AbstractConnPool#onLease(org.apache.http.pool.PoolEntry)
CALLER: static org.joda.time.format.DateTimeFormat#forPattern(java.lang.String)
	CALLEE: static org.joda.time.format.DateTimeFormat#createFormatterForPattern(java.lang.String)
CALLER: org.joda.time.Instant#<init>(long)
	CALLEE: org.joda.time.base.AbstractInstant#<init>()
CALLER: org.joda.time.chrono.BasicChronology#getDaysInMonthMax(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getDaysInYearMonth(int,int)
CALLER: org.joda.time.chrono.BasicChronology#getDaysInYear(int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#next(long,int,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfDay()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstanceUTC()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonthNext(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfWeek(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#previous(long,int,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#millisOfDay()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstanceUTC()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfWeek(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonthPrevious(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: static org.apache.http.pool.AbstractConnPool#access$000(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)
	CALLEE: org.apache.http.pool.AbstractConnPool#getPoolEntryBlocking(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)
CALLER: static org.joda.time.format.DateTimeFormat#createFormatterForPattern(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#<init>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#toFormatter()
	CALLEE: static org.joda.time.format.DateTimeFormat#parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonthNext(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonth(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfWeek(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfWeek()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonthPrevious(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonth(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
CALLER: org.apache.http.pool.AbstractConnPool#getPoolEntryBlocking(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#create(java.lang.Object)
	CALLEE: org.apache.http.pool.RouteSpecificPool#add(java.lang.Object)
	CALLEE: org.apache.http.pool.RouteSpecificPool#queue(org.apache.http.pool.PoolEntryFuture)
	CALLEE: org.apache.http.pool.PoolEntryFuture#await(java.util.Date)
	CALLEE: org.apache.http.pool.RouteSpecificPool#unqueue(org.apache.http.pool.PoolEntryFuture)
	CALLEE: org.apache.http.pool.PoolEntry#getRoute()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isClosed()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isExpired(long)
	CALLEE: org.apache.http.pool.PoolEntry#getUpdated()
	CALLEE: org.apache.http.pool.AbstractConnPool#getPool(java.lang.Object)
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
	CALLEE: org.apache.http.pool.AbstractConnPool#getMax(java.lang.Object)
	CALLEE: org.apache.http.pool.RouteSpecificPool#free(org.apache.http.pool.PoolEntry,boolean)
	CALLEE: org.apache.http.pool.RouteSpecificPool#remove(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.RouteSpecificPool#getAllocatedCount()
	CALLEE: org.apache.http.pool.RouteSpecificPool#getFree(java.lang.Object)
	CALLEE: org.apache.http.impl.conn.CPool#validate(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.AbstractConnPool#onReuse(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.pool.RouteSpecificPool#getLastUsed()
CALLER: static org.joda.time.format.DateTimeFormat#parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendYear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(char)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendWeekyear(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendLiteral(java.lang.String)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendHourOfDay(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendFractionOfSecond(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendWeekOfWeekyear(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendSecondOfMinute(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMinuteOfHour(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfYear(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeek(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfMonth(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYear(int)
	CALLEE: static org.joda.time.format.DateTimeFormat#parseToken(java.lang.String,int[])
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendEraText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendCenturyOfEra(int,int)
	CALLEE: static org.joda.time.format.DateTimeFormat#isNumericToken(java.lang.String)
	CALLEE: org.joda.time.DateTime#<init>()
	CALLEE: org.joda.time.base.AbstractDateTime#getWeekyear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTwoDigitWeekyear(int,boolean)
	CALLEE: org.joda.time.base.AbstractDateTime#getYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTwoDigitYear(int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendYearOfEra(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYearText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYearShortText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendHalfdayOfDayText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendClockhourOfHalfday(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendClockhourOfDay(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendHourOfHalfday(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeekText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeekShortText()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneName()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneShortName(java.util.Map)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneId()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.OfYear#setDayOfMonth(org.joda.time.Chronology,long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfMonth()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
CALLER: org.apache.http.pool.RouteSpecificPool#getFree(java.lang.Object)
	CALLEE: org.apache.http.pool.PoolEntry#getState()
CALLER: org.apache.http.impl.conn.CPool#validate(org.apache.http.pool.PoolEntry)
	CALLEE: org.apache.http.impl.conn.CPool#validate(org.apache.http.impl.conn.CPoolEntry)
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#create(java.lang.Object)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#create(org.apache.http.conn.routing.HttpRoute)
CALLER: org.apache.http.pool.RouteSpecificPool#add(java.lang.Object)
	CALLEE: org.apache.http.pool.AbstractConnPool.1#createEntry(java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendEraText()
	CALLEE: static org.joda.time.DateTimeFieldType#era()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendCenturyOfEra(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#centuryOfEra()
CALLER: org.joda.time.DateTime#<init>()
	CALLEE: org.joda.time.base.BaseDateTime#<init>()
CALLER: org.joda.time.base.AbstractDateTime#getWeekyear()
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: org.joda.time.chrono.BaseChronology#weekyear()
	CALLEE: org.joda.time.chrono.AssembledChronology#weekyear()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTwoDigitWeekyear(int,boolean)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: static org.joda.time.DateTimeFieldType#weekyear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#<init>(org.joda.time.DateTimeFieldType,int,boolean)
CALLER: org.joda.time.base.AbstractDateTime#getYear()
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: org.joda.time.chrono.BaseChronology#year()
	CALLEE: org.joda.time.chrono.AssembledChronology#year()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTwoDigitYear(int,boolean)
	CALLEE: static org.joda.time.DateTimeFieldType#year()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#<init>(org.joda.time.DateTimeFieldType,int,boolean)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendYearOfEra(int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#yearOfEra()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYearText()
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendMonthOfYearShortText()
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendShortText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendHalfdayOfDayText()
	CALLEE: static org.joda.time.DateTimeFieldType#halfdayOfDay()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendClockhourOfHalfday(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfHalfday()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendClockhourOfDay(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#clockhourOfDay()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendHourOfHalfday(int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendDecimal(org.joda.time.DateTimeFieldType,int,int)
	CALLEE: static org.joda.time.DateTimeFieldType#hourOfHalfday()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeekText()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendDayOfWeekShortText()
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#appendShortText(org.joda.time.DateTimeFieldType)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneName()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#<init>(int,java.util.Map)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneShortName(java.util.Map)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#<init>(int,java.util.Map)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneOffset#<init>(java.lang.String,java.lang.String,boolean,int,int)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendTimeZoneId()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)
CALLER: org.apache.http.impl.conn.CPool#validate(org.apache.http.impl.conn.CPoolEntry)
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isStale()
CALLER: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.InternalConnectionFactory#create(org.apache.http.conn.routing.HttpRoute)
	CALLEE: org.apache.http.conn.routing.HttpRoute#getTargetHost()
	CALLEE: org.apache.http.conn.routing.HttpRoute#getProxyHost()
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#getConnectionConfig(org.apache.http.HttpHost)
	CALLEE: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.ConfigData#getDefaultConnectionConfig()
	CALLEE: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#create(java.lang.Object,org.apache.http.config.ConnectionConfig)
CALLER: org.apache.http.pool.AbstractConnPool.1#createEntry(java.lang.Object)
	CALLEE: org.apache.http.impl.conn.CPool#createEntry(java.lang.Object,java.lang.Object)
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendText(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#<init>(org.joda.time.DateTimeFieldType,boolean)
CALLER: org.joda.time.base.BaseDateTime#<init>()
	CALLEE: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance()
	CALLEE: static org.joda.time.DateTimeUtils#currentTimeMillis()
CALLER: org.joda.time.format.DateTimeFormatterBuilder#appendShortText(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder#append0(java.lang.Object)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#<init>(org.joda.time.DateTimeFieldType,boolean)
CALLER: static org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#<clinit>()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#<init>(java.lang.String,int)
	CALLEE: static org.joda.time.DateTimeZone#getAvailableIDs()
CALLER: static org.apache.http.config.ConnectionConfig#<clinit>()
	CALLEE: org.apache.http.config.ConnectionConfig.Builder#<init>()
	CALLEE: org.apache.http.config.ConnectionConfig.Builder#build()
CALLER: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#create(java.lang.Object,org.apache.http.config.ConnectionConfig)
	CALLEE: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#create(org.apache.http.conn.routing.HttpRoute,org.apache.http.config.ConnectionConfig)
CALLER: org.apache.http.impl.conn.CPool#createEntry(java.lang.Object,java.lang.Object)
	CALLEE: org.apache.http.impl.conn.CPool#createEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.ManagedHttpClientConnection)
CALLER: static org.joda.time.DateTimeZone#getAvailableIDs()
	CALLEE: static org.joda.time.DateTimeZone#getProvider()
	CALLEE: org.joda.time.tz.ZoneInfoProvider#getAvailableIDs()
	CALLEE: org.joda.time.tz.UTCProvider#getAvailableIDs()
CALLER: org.apache.http.config.ConnectionConfig.Builder#build()
	CALLEE: org.apache.http.config.ConnectionConfig#<init>(int,int,java.nio.charset.Charset,java.nio.charset.CodingErrorAction,java.nio.charset.CodingErrorAction,org.apache.http.config.MessageConstraints)
CALLER: org.apache.http.impl.conn.ManagedHttpClientConnectionFactory#create(org.apache.http.conn.routing.HttpRoute,org.apache.http.config.ConnectionConfig)
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#<init>(java.lang.String,org.apache.commons.logging.Log,org.apache.commons.logging.Log,org.apache.commons.logging.Log,int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.config.ConnectionConfig#getMessageConstraints()
	CALLEE: org.apache.http.config.ConnectionConfig#getFragmentSizeHint()
	CALLEE: org.apache.http.config.ConnectionConfig#getBufferSize()
	CALLEE: org.apache.http.config.ConnectionConfig#getUnmappableInputAction()
	CALLEE: org.apache.http.config.ConnectionConfig#getMalformedInputAction()
	CALLEE: org.apache.http.config.ConnectionConfig#getCharset()
CALLER: org.apache.http.impl.conn.CPool#createEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.ManagedHttpClientConnection)
	CALLEE: org.apache.http.impl.conn.CPoolEntry#<init>(org.apache.commons.logging.Log,java.lang.String,org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.ManagedHttpClientConnection,long,java.util.concurrent.TimeUnit)
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#<init>(java.lang.String,org.apache.commons.logging.Log,org.apache.commons.logging.Log,org.apache.commons.logging.Log,int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#<init>(java.lang.String,int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.impl.conn.Wire#<init>(org.apache.commons.logging.Log,java.lang.String)
CALLER: org.apache.http.impl.conn.CPoolEntry#<init>(org.apache.commons.logging.Log,java.lang.String,org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.ManagedHttpClientConnection,long,java.util.concurrent.TimeUnit)
	CALLEE: org.apache.http.pool.PoolEntry#<init>(java.lang.String,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)
CALLER: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#<init>(java.lang.String,int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#<init>(int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
CALLER: org.apache.http.pool.PoolEntry#<init>(java.lang.String,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#<init>(int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy,org.apache.http.io.HttpMessageWriterFactory,org.apache.http.io.HttpMessageParserFactory)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#<init>(int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSessionOutputBuffer()
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriterFactory#create(org.apache.http.io.SessionOutputBuffer)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSessionInputBuffer()
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParserFactory#create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParserFactory#create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
CALLER: org.apache.http.impl.BHttpConnectionBase#<init>(int,int,java.nio.charset.CharsetDecoder,java.nio.charset.CharsetEncoder,org.apache.http.config.MessageConstraints,org.apache.http.entity.ContentLengthStrategy,org.apache.http.entity.ContentLengthStrategy)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
	CALLEE: org.apache.http.impl.io.HttpTransportMetricsImpl#<init>()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#<init>(org.apache.http.impl.io.HttpTransportMetricsImpl,int,int,org.apache.http.config.MessageConstraints,java.nio.charset.CharsetDecoder)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#<init>(org.apache.http.impl.io.HttpTransportMetricsImpl,int,int,java.nio.charset.CharsetEncoder)
	CALLEE: org.apache.http.impl.HttpConnectionMetricsImpl#<init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)
CALLER: org.apache.http.impl.io.DefaultHttpRequestWriterFactory#create(org.apache.http.io.SessionOutputBuffer)
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriter#<init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter)
CALLER: static org.apache.http.impl.io.DefaultHttpResponseParserFactory#<clinit>()
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParserFactory#<init>()
CALLER: org.apache.http.impl.conn.DefaultHttpResponseParserFactory#create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.config.MessageConstraints)
CALLER: static org.apache.http.config.MessageConstraints#<clinit>()
	CALLEE: org.apache.http.config.MessageConstraints.Builder#<init>()
	CALLEE: org.apache.http.config.MessageConstraints.Builder#build()
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#<init>(org.apache.http.impl.io.HttpTransportMetricsImpl,int,int,org.apache.http.config.MessageConstraints,java.nio.charset.CharsetDecoder)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#<init>(int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#<init>(org.apache.http.impl.io.HttpTransportMetricsImpl,int,int,java.nio.charset.CharsetEncoder)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#positive(int,java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#<init>(int)
CALLER: org.apache.http.impl.io.DefaultHttpRequestWriter#<init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter)
	CALLEE: org.apache.http.impl.io.AbstractMessageWriter#<init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter)
CALLER: org.apache.http.impl.io.DefaultHttpResponseParserFactory#<init>()
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParserFactory#<init>(org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory)
CALLER: org.apache.http.impl.conn.DefaultHttpResponseParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.config.MessageConstraints)
	CALLEE: static org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.impl.io.AbstractMessageParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.config.MessageConstraints)
CALLER: org.apache.http.config.MessageConstraints.Builder#build()
	CALLEE: org.apache.http.config.MessageConstraints#<init>(int,int)
CALLER: org.apache.http.impl.io.AbstractMessageWriter#<init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
CALLER: org.apache.http.impl.io.AbstractMessageParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.config.MessageConstraints)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.message.BasicListHeaderIterator#remove()
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#findNext(int)
CALLER: org.apache.http.entity.mime.MultipartFormEntity#getContent()
	CALLEE: org.apache.http.ContentTooLongException#<init>(java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#writeTo(java.io.OutputStream)
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#getContent()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContent()
	CALLEE: org.apache.http.entity.StringEntity#getContent()
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#getContentLength()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentLength()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentLength()
	CALLEE: org.apache.http.entity.StringEntity#getContentLength()
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#getContentType()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentType()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentType()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentType()
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isRepeatable()
	CALLEE: org.apache.http.entity.StringEntity#isRepeatable()
CALLER: org.apache.http.client.methods.RequestBuilder#build()
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setURI(java.net.URI)
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.message.HeaderGroup#getAllHeaders()
	CALLEE: org.apache.http.client.utils.URIBuilder#<init>(java.net.URI)
	CALLEE: org.apache.http.client.utils.URIBuilder#build()
	CALLEE: org.apache.http.client.entity.UrlEncodedFormEntity#<init>(java.lang.Iterable,java.nio.charset.Charset)
	CALLEE: org.apache.http.client.utils.URIBuilder#setCharset(java.nio.charset.Charset)
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalRequest#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalEntityEclosingRequest#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setProtocolVersion(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#setConfig(org.apache.http.client.config.RequestConfig)
	CALLEE: org.apache.http.client.utils.URIBuilder#addParameters(java.util.List)
CALLER: org.joda.time.chrono.GJLocaleSymbols#halfdayTextToValue(java.lang.String)
	CALLEE: static org.joda.time.DateTimeFieldType#halfdayOfDay()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
CALLER: org.joda.time.chrono.GJLocaleSymbols#eraTextToValue(java.lang.String)
	CALLEE: static org.joda.time.DateTimeFieldType#era()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
CALLER: org.apache.http.impl.conn.CPoolProxy#close()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#closeConnection()
CALLER: org.apache.http.impl.conn.CPoolProxy#setSocketTimeout(int)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#setSocketTimeout(int)
CALLER: org.apache.http.impl.conn.CPoolProxy#isOpen()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#isClosed()
CALLER: org.apache.http.impl.conn.CPoolProxy#isStale()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isStale()
CALLER: org.apache.http.impl.conn.CPoolProxy#shutdown()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#shutdownConnection()
CALLER: org.apache.http.impl.conn.CPoolProxy#flush()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#flush()
CALLER: org.apache.http.impl.conn.CPoolProxy#sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)
CALLER: org.apache.http.impl.conn.CPoolProxy#receiveResponseEntity(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#receiveResponseEntity(org.apache.http.HttpResponse)
CALLER: org.apache.http.impl.conn.CPoolProxy#receiveResponseHeader()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#receiveResponseHeader()
CALLER: org.apache.http.impl.conn.CPoolProxy#isResponseAvailable(int)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#isResponseAvailable(int)
CALLER: org.apache.http.impl.conn.CPoolProxy#sendRequestHeader(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#sendRequestHeader(org.apache.http.HttpRequest)
CALLER: org.apache.http.impl.conn.CPoolProxy#getSSLSession()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getSSLSession()
CALLER: org.joda.time.chrono.GJLocaleSymbols#dayOfWeekTextToValue(java.lang.String)
	CALLEE: static org.joda.time.DateTimeFieldType#dayOfWeek()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
CALLER: org.joda.time.chrono.GJLocaleSymbols#monthOfYearTextToValue(java.lang.String)
	CALLEE: static org.joda.time.DateTimeFieldType#monthOfYear()
	CALLEE: org.joda.time.IllegalFieldValueException#<init>(org.joda.time.DateTimeFieldType,java.lang.String)
CALLER: org.joda.time.tz.CachedDateTimeZone.Info#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getOffset(long)
CALLER: org.apache.http.impl.conn.CPoolProxy#toString()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getConnection()
CALLER: org.apache.http.client.methods.HttpRequestBase#toString()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getURI()
	CALLEE: org.apache.http.client.methods.HttpRequestBase#getProtocolVersion()
	CALLEE: org.apache.http.client.methods.HttpPost#getMethod()
	CALLEE: org.apache.http.client.methods.HttpGet#getMethod()
	CALLEE: org.apache.http.client.methods.HttpHead#getMethod()
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalRequest#getMethod()
	CALLEE: org.apache.http.client.methods.RequestBuilder.InternalEntityEclosingRequest#getMethod()
CALLER: org.apache.http.client.methods.HttpRequestWrapper#toString()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
CALLER: org.apache.http.message.BasicRequestLine#toString()
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.message.BasicLineFormatter#formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)
CALLER: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.ImpreciseDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getDurationField()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,int)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,int)
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#add(long,int)
CALLER: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#add(long,int)
CALLER: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getDurationField()
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,int)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,int)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.DateTimeZone#convertLocalToUTC(long,boolean,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getOffsetToAdd(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#safeAdd(int,int)
CALLER: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#add(long,int)
CALLER: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: static org.joda.time.field.FieldUtils#verifyValueBounds(org.joda.time.DateTimeField,int,int,int)
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getDaysInYearMonth(int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMonthDayMillis(int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getMillisOfDay(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int,int)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
CALLER: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
CALLER: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
CALLER: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
CALLER: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#isLeapDay(long)
CALLER: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#isLeapDay(long)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.GregorianChronology#isLeapYear(int)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeekyear(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getWeeksInYear(int)
CALLER: org.joda.time.Instant#getChronology()
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstanceUTC()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: static org.joda.time.DateTimeUtils#getDefaultTimeZoneNames()
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#csStartsWith(java.lang.CharSequence,int,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket#setZone(org.joda.time.DateTimeZone)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: static org.joda.time.DateTimeZone#forID(java.lang.String)
	CALLEE: static org.joda.time.format.DateTimeFormatterBuilder#csStartsWith(java.lang.CharSequence,int,java.lang.String)
	CALLEE: org.joda.time.format.DateTimeParserBucket#setZone(org.joda.time.DateTimeZone)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#print(long,org.joda.time.DateTimeZone,java.util.Locale)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#getID()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimateParsedLength()
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#estimatePrintedLength()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,int)
	CALLEE: org.joda.time.format.DateTimeParserBucket#getPivotYear()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TextField#parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#getMinimumValueOverall()
	CALLEE: static org.joda.time.DateTimeFieldType#era()
	CALLEE: org.joda.time.format.DateTimeParserBucket#getLocale()
	CALLEE: org.joda.time.MutableDateTime#<init>(long,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.MutableDateTime#property(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#getAsText(java.util.Locale)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#getAsShortText(java.util.Locale)
	CALLEE: org.joda.time.MutableDateTime.Property#set(int)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#getMaximumValueOverall()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: static org.joda.time.format.FormatUtils#appendPaddedInteger(java.lang.Appendable,int,int)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#getTwoDigitYear(long,org.joda.time.Chronology)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TextField#printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeFormatterBuilder.TextField#print(long,org.joda.time.Chronology,java.util.Locale)
CALLER: org.apache.http.impl.conn.CPoolEntry#close()
	CALLEE: org.apache.http.impl.conn.CPoolEntry#closeConnection()
CALLER: org.apache.http.impl.io.DefaultHttpResponseParserFactory#create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.config.MessageConstraints)
CALLER: org.apache.http.impl.BHttpConnectionBase#toString()
	CALLEE: static org.apache.http.util.NetUtils#formatAddress(java.lang.StringBuilder,java.net.SocketAddress)
CALLER: org.apache.http.protocol.RequestTargetHost#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int)
	CALLEE: org.apache.http.protocol.HttpCoreContext#getConnection()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: org.apache.http.HttpHost#toHostString()
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: static org.apache.http.protocol.HttpCoreContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getRemoteAddress()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getRemotePort()
CALLER: org.apache.http.client.protocol.RequestDefaultHeaders#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(org.apache.http.Header)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
CALLER: org.apache.http.protocol.RequestContent#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(org.apache.http.Header)
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentEncoding()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentEncoding()
	CALLEE: org.apache.http.entity.StringEntity#getContentLength()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentType()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentEncoding()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#isChunked()
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentLength()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentLength()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentType()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentType()
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isChunked()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isChunked()
CALLER: org.apache.http.client.protocol.RequestClientConnControl#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getHttpRoute()
CALLER: org.apache.http.protocol.RequestUserAgent#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getParams()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getParams()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.params.BasicHttpParams#getParameter(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
CALLER: org.apache.http.client.protocol.RequestExpectContinue#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentLength()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentLength()
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.client.config.RequestConfig#isExpectContinueEnabled()
	CALLEE: org.apache.http.entity.StringEntity#getContentLength()
CALLER: org.apache.http.client.protocol.RequestAddCookies#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.protocol.HttpCoreContext#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(org.apache.http.Header)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isEmpty(java.lang.CharSequence)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getURI()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getHttpRoute()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCookieStore()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCookieSpecRegistry()
	CALLEE: org.apache.http.client.config.RequestConfig#getCookieSpec()
	CALLEE: org.apache.http.cookie.CookieOrigin#<init>(java.lang.String,int,java.lang.String,boolean)
CALLER: org.apache.http.client.protocol.RequestAcceptEncoding#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.message.AbstractHttpMessage#containsHeader(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.client.config.RequestConfig#isContentCompressionEnabled()
CALLER: org.apache.http.client.protocol.RequestAuthCache#process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.HttpHost#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getTargetAuthState()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getProxyAuthState()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getTargetHost()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getAuthCache()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCredentialsProvider()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getHttpRoute()
	CALLEE: org.apache.http.client.protocol.RequestAuthCache#doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider)
CALLER: org.apache.http.client.protocol.ResponseProcessCookies#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCookieStore()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCookieSpec()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getCookieOrigin()
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#headerIterator(java.lang.String)
	CALLEE: org.apache.http.client.protocol.ResponseProcessCookies#processCookies(org.apache.http.HeaderIterator,org.apache.http.cookie.CookieSpec,org.apache.http.cookie.CookieOrigin,org.apache.http.client.CookieStore)
CALLER: org.apache.http.client.protocol.ResponseContentEncoding#process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.BufferedHeader#getElements()
	CALLEE: static org.apache.http.client.protocol.HttpClientContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getRequestConfig()
	CALLEE: org.apache.http.HttpException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#getEntity()
	CALLEE: org.apache.http.config.Registry#lookup(java.lang.String)
	CALLEE: org.apache.http.client.config.RequestConfig#isContentCompressionEnabled()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#<init>(org.apache.http.HttpEntity,org.apache.http.client.entity.InputStreamFactory)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.impl.execchain.HttpResponseProxy#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentEncoding()
	CALLEE: org.apache.http.message.BasicHeader#getElements()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentLength()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentLength()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentEncoding()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentEncoding()
CALLER: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.ProtocolVersion#isComparable(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.ProtocolVersion#compareToVersion(org.apache.http.ProtocolVersion)
CALLER: org.apache.http.impl.conn.CPoolEntry#isClosed()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isOpen()
CALLER: org.apache.http.impl.conn.CPoolEntry#isExpired(long)
	CALLEE: org.apache.http.pool.PoolEntry#isExpired(long)
	CALLEE: org.apache.http.pool.PoolEntry#getExpiry()
CALLER: org.apache.http.entity.mime.MultipartFormEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#writeTo(java.io.OutputStream)
CALLER: org.apache.http.client.entity.UrlEncodedFormEntity#<init>(java.lang.Iterable,java.nio.charset.Charset)
	CALLEE: static org.apache.http.entity.ContentType#create(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.apache.http.client.utils.URLEncodedUtils#format(java.lang.Iterable,java.nio.charset.Charset)
	CALLEE: org.apache.http.entity.StringEntity#<init>(java.lang.String,org.apache.http.entity.ContentType)
CALLER: org.apache.http.client.methods.RequestBuilder.InternalRequest#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestBase#<init>()
CALLER: org.apache.http.client.methods.RequestBuilder.InternalEntityEclosingRequest#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpEntityEnclosingRequestBase#<init>()
CALLER: org.apache.http.impl.conn.CPoolEntry#closeConnection()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#close()
CALLER: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.conn.ConnectionShutdownException#<init>()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getConnection()
CALLER: org.apache.http.impl.conn.CPoolProxy#getConnection()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
CALLER: org.apache.http.impl.conn.CPoolEntry#shutdownConnection()
	CALLEE: org.apache.http.pool.PoolEntry#getConnection()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#shutdown()
CALLER: org.apache.http.message.BasicLineFormatter#formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicLineFormatter#initBuffer(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BasicLineFormatter#doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)
CALLER: org.joda.time.field.PreciseDurationField#add(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#safeAdd(long,long)
CALLER: org.joda.time.field.MillisDurationField#add(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#safeAdd(long,long)
CALLER: org.joda.time.field.UnsupportedDurationField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDurationField#unsupported()
CALLER: org.joda.time.field.ScaledDurationField#add(long,int)
	CALLEE: org.joda.time.field.DecoratedDurationField#getWrappedField()
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,long)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,long)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,int)
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,int)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,int)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetToAdd(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetFromLocalToSubtract(long)
CALLER: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
CALLER: org.joda.time.chrono.ISOYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DecoratedDateTimeField#getWrappedField()
	CALLEE: org.joda.time.field.BaseDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#add(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: org.joda.time.chrono.ISOYearOfEraDateTimeField#add(long,int)
CALLER: org.joda.time.chrono.BasicGJChronology#isLeapDay(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#isLeap(long)
	CALLEE: org.joda.time.chrono.AssembledChronology#monthOfYear()
	CALLEE: org.joda.time.chrono.AssembledChronology#dayOfMonth()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#isLeap(long)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isLeap(long)
CALLER: static org.joda.time.DateTimeUtils#getDefaultTimeZoneNames()
	CALLEE: static org.joda.time.DateTimeUtils#buildDefaultTimeZoneNames()
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName#print(long,org.joda.time.DateTimeZone,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#getName(long,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#getShortName(long,java.util.Locale)
CALLER: org.joda.time.MutableDateTime#<init>(long,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.DateTimeZone)
CALLER: org.joda.time.MutableDateTime#property(org.joda.time.DateTimeFieldType)
	CALLEE: org.joda.time.base.BaseDateTime#getChronology()
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.field.BaseDateTimeField#isSupported()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#isSupported()
	CALLEE: org.joda.time.MutableDateTime.Property#<init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)
CALLER: org.joda.time.format.DateTimeParserBucket#saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)
	CALLEE: org.joda.time.format.DateTimeParserBucket#obtainSaveField()
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.format.DateTimeParserBucket.SavedField#init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TwoDigitYear#getTwoDigitYear(long,org.joda.time.Chronology)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#get(long)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
CALLER: org.joda.time.format.DateTimeFormatterBuilder.TextField#print(long,org.joda.time.Chronology,java.util.Locale)
	CALLEE: org.joda.time.DateTimeFieldType.StandardDateTimeFieldType#getField(org.joda.time.Chronology)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(long,java.util.Locale)
CALLER: org.apache.http.impl.io.DefaultHttpResponseParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.config.MessageConstraints)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.impl.io.AbstractMessageParser#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.config.MessageConstraints)
CALLER: static org.apache.http.util.NetUtils#formatAddress(java.lang.StringBuilder,java.net.SocketAddress)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.protocol.HttpCoreContext#adapt(org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.protocol.HttpCoreContext#<init>(org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.message.AbstractHttpMessage#addHeader(java.lang.String,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#addHeader(org.apache.http.Header)
CALLER: org.apache.http.entity.mime.MultipartFormEntity#isChunked()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isRepeatable()
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#isChunked()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#isChunked()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#isChunked()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#isChunked()
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#getContentEncoding()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#getContentEncoding()
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#getContentEncoding()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentEncoding()
CALLER: org.apache.http.client.protocol.HttpClientContext#getHttpRoute()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.protocol.HttpClientContext#getCookieStore()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.protocol.HttpClientContext#getCookieSpecRegistry()
	CALLEE: org.apache.http.client.protocol.HttpClientContext#getLookup(java.lang.String,java.lang.Class)
CALLER: org.apache.http.cookie.CookieOrigin#<init>(java.lang.String,int,java.lang.String,boolean)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notBlank(java.lang.CharSequence,java.lang.String)
	CALLEE: static org.apache.http.util.TextUtils#isBlank(java.lang.CharSequence)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
CALLER: org.apache.http.client.protocol.RequestAuthCache#doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider)
	CALLEE: org.apache.http.auth.AuthScope#<init>(org.apache.http.HttpHost,java.lang.String,java.lang.String)
CALLER: org.apache.http.client.protocol.HttpClientContext#getCookieSpec()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.client.protocol.HttpClientContext#getCookieOrigin()
	CALLEE: org.apache.http.protocol.HttpCoreContext#getAttribute(java.lang.String,java.lang.Class)
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#headerIterator(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#headerIterator(java.lang.String)
CALLER: org.apache.http.client.protocol.ResponseProcessCookies#processCookies(org.apache.http.HeaderIterator,org.apache.http.cookie.CookieSpec,org.apache.http.cookie.CookieOrigin,org.apache.http.client.CookieStore)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: static org.apache.http.client.protocol.ResponseProcessCookies#formatCooke(org.apache.http.cookie.Cookie)
CALLER: org.apache.http.client.entity.DecompressingEntity#<init>(org.apache.http.HttpEntity,org.apache.http.client.entity.InputStreamFactory)
	CALLEE: org.apache.http.entity.HttpEntityWrapper#<init>(org.apache.http.HttpEntity)
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#setEntity(org.apache.http.HttpEntity)
	CALLEE: org.apache.http.message.BasicHttpResponse#setEntity(org.apache.http.HttpEntity)
CALLER: org.apache.http.impl.execchain.HttpResponseProxy#removeHeaders(java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#removeHeaders(java.lang.String)
CALLER: org.apache.http.ProtocolVersion#compareToVersion(org.apache.http.ProtocolVersion)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String,java.lang.Object[])
	CALLEE: org.apache.http.ProtocolVersion#getMajor()
	CALLEE: org.apache.http.ProtocolVersion#getMinor()
CALLER: org.apache.http.entity.mime.AbstractMultipartForm#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.AbstractMultipartForm#doWriteTo(java.io.OutputStream,boolean)
CALLER: org.apache.http.entity.StringEntity#<init>(java.lang.String,org.apache.http.entity.ContentType)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.ContentType#toString()
	CALLEE: org.apache.http.entity.ContentType#getCharset()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#<init>()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#setContentType(java.lang.String)
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#close()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isOpen()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getId()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#close()
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#shutdown()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getId()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#shutdown()
CALLER: org.apache.http.message.BasicLineFormatter#doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.message.BasicRequestLine#getMethod()
	CALLEE: org.apache.http.message.BasicRequestLine#getUri()
	CALLEE: org.apache.http.message.BasicRequestLine#getProtocolVersion()
	CALLEE: org.apache.http.message.BasicLineFormatter#estimateProtocolVersionLen(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicLineFormatter#appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)
CALLER: org.joda.time.field.PreciseDurationField#add(long,long)
	CALLEE: static org.joda.time.field.FieldUtils#safeAdd(long,long)
	CALLEE: static org.joda.time.field.FieldUtils#safeMultiply(long,long)
CALLER: org.joda.time.field.MillisDurationField#add(long,long)
	CALLEE: static org.joda.time.field.FieldUtils#safeAdd(long,long)
CALLER: org.joda.time.field.UnsupportedDurationField#add(long,long)
	CALLEE: org.joda.time.field.UnsupportedDurationField#unsupported()
CALLER: org.joda.time.field.ScaledDurationField#add(long,long)
	CALLEE: org.joda.time.field.DecoratedDurationField#getWrappedField()
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,long)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,long)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,long)
	CALLEE: static org.joda.time.field.FieldUtils#safeMultiply(long,int)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,long)
	CALLEE: org.joda.time.field.PreciseDurationField#add(long,long)
	CALLEE: org.joda.time.field.MillisDurationField#add(long,long)
	CALLEE: org.joda.time.field.UnsupportedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ScaledDurationField#add(long,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#add(long,long)
	CALLEE: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetToAdd(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetFromLocalToSubtract(long)
CALLER: org.joda.time.field.ImpreciseDateTimeField.LinkedDurationField#add(long,long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetToAdd(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDurationField#getOffsetFromLocalToSubtract(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffsetFromLocal(long)
	CALLEE: org.joda.time.DateTimeZone#getOffsetFromLocal(long)
CALLER: static org.joda.time.DateTimeUtils#buildDefaultTimeZoneNames()
	CALLEE: static org.joda.time.DateTimeUtils#put(java.util.Map,java.lang.String,java.lang.String)
CALLER: org.joda.time.DateTimeZone#getName(long,java.util.Locale)
	CALLEE: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getNameKey(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getNameKey(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getNameKey(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getNameKey(long)
	CALLEE: static org.joda.time.DateTimeZone#getNameProvider()
	CALLEE: org.joda.time.DateTimeZone#isStandardOffset(long)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getName(java.util.Locale,java.lang.String,java.lang.String)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getName(java.util.Locale,java.lang.String,java.lang.String,boolean)
CALLER: org.joda.time.DateTimeZone#getShortName(long,java.util.Locale)
	CALLEE: static org.joda.time.DateTimeZone#printOffset(int)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getNameKey(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getNameKey(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getNameKey(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getNameKey(long)
	CALLEE: static org.joda.time.DateTimeZone#getNameProvider()
	CALLEE: org.joda.time.DateTimeZone#isStandardOffset(long)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getShortName(java.util.Locale,java.lang.String,java.lang.String)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)
CALLER: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.DateTimeZone)
	CALLEE: org.joda.time.base.BaseDateTime#<init>(long,org.joda.time.Chronology)
	CALLEE: static org.joda.time.chrono.ISOChronology#getInstance(org.joda.time.DateTimeZone)
CALLER: org.joda.time.MutableDateTime.Property#<init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)
	CALLEE: org.joda.time.field.AbstractReadableInstantFieldProperty#<init>()
CALLER: org.joda.time.field.BaseDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsShortText(int,java.util.Locale)
CALLER: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(long,java.util.Locale)
CALLER: org.joda.time.field.BaseDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.field.PreciseDateTimeField#get(long)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#get(long)
	CALLEE: org.joda.time.field.DividedDateTimeField#get(long)
	CALLEE: org.joda.time.field.RemainderDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#get(long)
	CALLEE: org.joda.time.field.OffsetDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#get(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsText(int,java.util.Locale)
CALLER: org.joda.time.field.UnsupportedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.DateTimeZone#convertUTCToLocal(long)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(long,java.util.Locale)
CALLER: org.apache.http.entity.AbstractHttpEntity#setContentType(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.http.entity.AbstractHttpEntity#setContentType(org.apache.http.Header)
CALLER: org.apache.http.impl.BHttpConnectionBase#close()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#clear()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#shutdown()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#shutdown()
CALLER: org.apache.http.message.BasicLineFormatter#estimateProtocolVersionLen(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.ProtocolVersion#getProtocol()
CALLER: org.apache.http.message.BasicLineFormatter#appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.ProtocolVersion#getMajor()
	CALLEE: org.apache.http.ProtocolVersion#getMinor()
	CALLEE: org.apache.http.message.BasicLineFormatter#estimateProtocolVersionLen(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.ProtocolVersion#getProtocol()
CALLER: org.joda.time.chrono.BasicYearDateTimeField#add(long,long)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#add(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#safeToInt(long)
CALLER: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,long)
	CALLEE: org.joda.time.chrono.GregorianChronology#getMaxYear()
	CALLEE: org.joda.time.chrono.GregorianChronology#getMinYear()
	CALLEE: org.joda.time.chrono.BasicChronology#getYear(long)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getMonthOfYear(long,int)
	CALLEE: org.joda.time.chrono.BasicGJChronology#getDaysInYearMonth(int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getYearMonthDayMillis(int,int,int)
	CALLEE: org.joda.time.chrono.BasicChronology#getMillisOfDay(long)
	CALLEE: org.joda.time.chrono.BasicChronology#getDayOfMonth(long,int,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#add(long,int)
CALLER: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,long)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#add(long,int)
	CALLEE: static org.joda.time.field.FieldUtils#safeToInt(long)
CALLER: static org.joda.time.DateTimeUtils#put(java.util.Map,java.lang.String,java.lang.String)
	CALLEE: static org.joda.time.DateTimeZone#forID(java.lang.String)
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getNameKey(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#getNameKey(long)
CALLER: org.joda.time.tz.CachedDateTimeZone#getNameKey(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getInfo(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getNameKey(long)
CALLER: static org.joda.time.DateTimeZone#getNameProvider()
	CALLEE: static org.joda.time.DateTimeZone#getDefaultNameProvider()
CALLER: org.joda.time.DateTimeZone#isStandardOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getOffset(long)
	CALLEE: org.joda.time.UTCDateTimeZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.FixedDateTimeZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getStandardOffset(long)
CALLER: org.joda.time.field.BaseDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsText(int,java.util.Locale)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(int,java.util.Locale)
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#dayOfWeekValueToShortText(int)
CALLER: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#monthOfYearValueToShortText(int)
CALLER: org.joda.time.chrono.BasicChronology.HalfdayField#getAsText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#halfdayValueToText(int)
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsText(int,java.util.Locale)
CALLER: org.joda.time.chrono.GJEraDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#eraValueToText(int)
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#dayOfWeekValueToText(int)
CALLER: org.joda.time.chrono.GJMonthOfYearDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#monthOfYearValueToText(int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flushBuffer()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flushStream()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#getNameKey(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#findMatchingRecurrence(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.Recurrence#getNameKey()
CALLER: org.joda.time.tz.CachedDateTimeZone.Info#getNameKey(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getNameKey(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getNameKey(long)
CALLER: static org.joda.time.DateTimeZone#getDefaultNameProvider()
	CALLEE: org.joda.time.tz.DefaultNameProvider#<init>()
CALLER: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.DSTZone#getStandardOffset(long)
CALLER: org.joda.time.tz.CachedDateTimeZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone#getInfo(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getStandardOffset(long)
CALLER: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(int,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.field.UnsupportedDateTimeField#getAsText(int,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#flushBuffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#buffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#streamWrite(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.HttpTransportMetricsImpl#incrementBytesTransferred(long)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#flushStream()
	CALLEE: org.apache.http.impl.conn.LoggingOutputStream#flush()
CALLER: org.joda.time.tz.DefaultNameProvider#<init>()
	CALLEE: org.joda.time.tz.DefaultNameProvider#createCache()
CALLER: org.joda.time.tz.CachedDateTimeZone.Info#getStandardOffset(long)
	CALLEE: org.joda.time.tz.DateTimeZoneBuilder.PrecalculatedZone#getStandardOffset(long)
	CALLEE: org.joda.time.tz.CachedDateTimeZone.Info#getStandardOffset(long)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#streamWrite(byte[],int,int)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.LoggingOutputStream#write(byte[],int,int)
CALLER: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#bind(java.net.Socket)
	CALLEE: org.apache.http.impl.DefaultBHttpClientConnection#bind(java.net.Socket)
CALLER: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getSocket()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSocket()
CALLER: org.apache.http.pool.PoolEntry#updateExpiry(long,java.util.concurrent.TimeUnit)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.BHttpConnectionBase#isStale()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#isOpen()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#fillInputBuffer(int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#size()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: org.joda.time.field.AbstractReadableInstantFieldProperty#getAsText(java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsText(long,java.util.Locale)
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
	CALLEE: org.joda.time.MutableDateTime.Property#getMillis()
CALLER: org.joda.time.field.AbstractReadableInstantFieldProperty#getAsShortText(java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getAsShortText(long,java.util.Locale)
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
	CALLEE: org.joda.time.MutableDateTime.Property#getMillis()
CALLER: org.joda.time.MutableDateTime.Property#set(int)
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
	CALLEE: org.joda.time.field.PreciseDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.DividedDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.RemainderDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.OffsetDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#set(long,int)
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#set(long,int)
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#set(long,int)
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
	CALLEE: org.joda.time.MutableDateTime#setMillis(long)
CALLER: org.joda.time.field.AbstractReadableInstantFieldProperty#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
	CALLEE: org.joda.time.field.BaseDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getMaximumTextLength(java.util.Locale)
CALLER: org.joda.time.field.AbstractReadableInstantFieldProperty#getMaximumValueOverall()
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
CALLER: org.joda.time.field.AbstractReadableInstantFieldProperty#getMinimumValueOverall()
	CALLEE: org.joda.time.field.PreciseDurationDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMinimumValue()
	CALLEE: org.joda.time.MutableDateTime.Property#getField()
CALLER: org.apache.http.impl.conn.CPoolProxy#getRemoteAddress()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getRemoteAddress()
CALLER: org.apache.http.impl.conn.CPoolProxy#getRemotePort()
	CALLEE: org.apache.http.impl.conn.CPoolProxy#getValidConnection()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getRemotePort()
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#setSocketTimeout(int)
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getId()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#setSocketTimeout(int)
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#flush()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#doFlush()
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper.HttpEntityEnclosingRequestWrapper#getEntity()
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#prepareOutput(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.StringEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#close()
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#receiveResponseEntity(org.apache.http.HttpResponse)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#prepareInput(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.message.BasicHttpResponse#setEntity(org.apache.http.HttpEntity)
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#receiveResponseHeader()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.io.AbstractMessageParser#parse()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#onResponseReceived(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#incrementResponseCount()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#isResponseAvailable(int)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#awaitInput(int)
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#sendRequestHeader(org.apache.http.HttpRequest)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.impl.io.AbstractMessageWriter#write(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#onRequestSubmitted(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#incrementRequestCount()
CALLER: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getSSLSession()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSocket()
CALLER: org.joda.time.tz.DefaultNameProvider#getName(java.util.Locale,java.lang.String,java.lang.String)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String)
CALLER: org.joda.time.tz.DefaultNameProvider#getName(java.util.Locale,java.lang.String,java.lang.String,boolean)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)
CALLER: org.joda.time.tz.DefaultNameProvider#getShortName(java.util.Locale,java.lang.String,java.lang.String)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String)
CALLER: org.joda.time.tz.DefaultNameProvider#getShortName(java.util.Locale,java.lang.String,java.lang.String,boolean)
	CALLEE: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)
CALLER: org.apache.http.message.BasicHeader#getElements()
	CALLEE: static org.apache.http.message.BasicHeaderValueParser#parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)
CALLER: org.apache.http.impl.DefaultBHttpClientConnection#bind(java.net.Socket)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#bind(java.net.Socket)
CALLER: org.apache.http.impl.BHttpConnectionBase#fillInputBuffer(int)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#fillBuffer()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$000(com.google.common.collect.AbstractMapBasedMultimap)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
CALLER: org.joda.time.MutableDateTime.Property#getMillis()
	CALLEE: org.joda.time.base.BaseDateTime#getMillis()
CALLER: org.joda.time.MutableDateTime#setMillis(long)
	CALLEE: org.joda.time.base.BaseDateTime#setMillis(long)
CALLER: org.apache.http.impl.BHttpConnectionBase#ensureOpen()
	CALLEE: org.apache.http.ConnectionClosedException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#isBound()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#getSocketInputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#bind(java.io.InputStream)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#isBound()
	CALLEE: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#getSocketOutputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#bind(java.io.OutputStream)
CALLER: org.apache.http.impl.BHttpConnectionBase#doFlush()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.BHttpConnectionBase#prepareOutput(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.entity.StrictContentLengthStrategy#determineLength(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#createOutputStream(long,org.apache.http.io.SessionOutputBuffer)
CALLER: org.apache.http.impl.execchain.RequestEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.mime.MultipartFormEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.execchain.RequestEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.StringEntity#writeTo(java.io.OutputStream)
CALLER: org.apache.http.entity.StringEntity#writeTo(java.io.OutputStream)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#flush()
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#flush()
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#flush()
CALLER: org.apache.http.impl.BHttpConnectionBase#prepareInput(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.entity.AbstractHttpEntity#setContentType(org.apache.http.Header)
	CALLEE: org.apache.http.entity.BasicHttpEntity#<init>()
	CALLEE: org.apache.http.impl.entity.LaxContentLengthStrategy#determineLength(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#createInputStream(long,org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.entity.AbstractHttpEntity#setChunked(boolean)
	CALLEE: org.apache.http.entity.BasicHttpEntity#setContentLength(long)
	CALLEE: org.apache.http.entity.BasicHttpEntity#setContent(java.io.InputStream)
	CALLEE: org.apache.http.entity.AbstractHttpEntity#setContentEncoding(org.apache.http.Header)
CALLER: org.apache.http.impl.io.AbstractMessageParser#parse()
	CALLEE: org.apache.http.message.AbstractHttpMessage#setHeaders(org.apache.http.Header[])
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.config.MessageConstraints#getMaxHeaderCount()
	CALLEE: org.apache.http.config.MessageConstraints#getMaxLineLength()
	CALLEE: static org.apache.http.impl.io.AbstractMessageParser#parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#onResponseReceived(org.apache.http.HttpResponse)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getId()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#toString()
CALLER: org.apache.http.impl.BHttpConnectionBase#incrementResponseCount()
	CALLEE: org.apache.http.impl.HttpConnectionMetricsImpl#incrementResponseCount()
CALLER: org.apache.http.impl.BHttpConnectionBase#awaitInput(int)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#fillInputBuffer(int)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#hasBufferedData()
CALLER: org.apache.http.impl.io.AbstractMessageWriter#write(org.apache.http.HttpMessage)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicLineFormatter#formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)
	CALLEE: org.apache.http.message.AbstractHttpMessage#headerIterator()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#nextHeader()
	CALLEE: org.apache.http.message.BasicListHeaderIterator#hasNext()
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriter#writeHeadLine(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#onRequestSubmitted(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getAllHeaders()
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicRequestLine#toString()
	CALLEE: org.apache.http.impl.conn.DefaultManagedHttpClientConnection#getId()
CALLER: org.apache.http.impl.BHttpConnectionBase#incrementRequestCount()
	CALLEE: org.apache.http.impl.HttpConnectionMetricsImpl#incrementRequestCount()
CALLER: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String)
	CALLEE: static org.joda.time.DateTimeUtils#getDateFormatSymbols(java.util.Locale)
	CALLEE: org.joda.time.tz.DefaultNameProvider#createCache()
CALLER: org.joda.time.tz.DefaultNameProvider#getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)
	CALLEE: static org.joda.time.DateTimeUtils#getDateFormatSymbols(java.util.Locale)
	CALLEE: org.joda.time.tz.DefaultNameProvider#createCache()
CALLER: static org.apache.http.message.BasicHeaderValueParser#parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
CALLER: org.apache.http.impl.BHttpConnectionBase#bind(java.net.Socket)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#bind(java.io.InputStream)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#bind(java.io.OutputStream)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#fillBuffer()
	CALLEE: org.apache.http.impl.io.HttpTransportMetricsImpl#incrementBytesTransferred(long)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#streamRead(byte[],int,int)
CALLER: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#iteratorOrListIterator(java.util.Collection)
CALLER: org.joda.time.base.BaseDateTime#setMillis(long)
	CALLEE: org.joda.time.base.BaseDateTime#checkInstant(long,org.joda.time.Chronology)
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#getSocketInputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSocketInputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.conn.Wire#enabled()
	CALLEE: org.apache.http.impl.conn.LoggingInputStream#<init>(java.io.InputStream,org.apache.http.impl.conn.Wire)
CALLER: org.apache.http.impl.conn.LoggingManagedHttpClientConnection#getSocketOutputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.conn.Wire#enabled()
	CALLEE: org.apache.http.impl.BHttpConnectionBase#getSocketOutputStream(java.net.Socket)
	CALLEE: org.apache.http.impl.conn.LoggingOutputStream#<init>(java.io.OutputStream,org.apache.http.impl.conn.Wire)
CALLER: org.apache.http.impl.entity.StrictContentLengthStrategy#determineLength(org.apache.http.HttpMessage)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getProtocolVersion()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.ProtocolVersion#lessEquals(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
CALLER: org.apache.http.impl.BHttpConnectionBase#createOutputStream(long,org.apache.http.io.SessionOutputBuffer)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#<init>(int,org.apache.http.io.SessionOutputBuffer)
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#<init>(org.apache.http.io.SessionOutputBuffer)
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#<init>(org.apache.http.io.SessionOutputBuffer,long)
CALLER: org.apache.http.entity.BasicHttpEntity#<init>()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#<init>()
CALLER: org.apache.http.impl.entity.LaxContentLengthStrategy#determineLength(org.apache.http.HttpMessage)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.http.message.AbstractHttpMessage#getFirstHeader(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getElements()
	CALLEE: org.apache.http.message.AbstractHttpMessage#getHeaders(java.lang.String)
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.message.BufferedHeader#getElements()
CALLER: org.apache.http.impl.BHttpConnectionBase#createInputStream(long,org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
	CALLEE: org.apache.http.impl.io.IdentityInputStream#<init>(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#<init>(org.apache.http.io.SessionInputBuffer,long)
CALLER: org.apache.http.impl.conn.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
CALLER: org.apache.http.impl.io.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.impl.io.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
CALLER: static org.apache.http.impl.io.AbstractMessageParser#parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#readLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.MessageConstraintException#<init>(java.lang.String)
	CALLEE: org.apache.http.message.BasicLineParser#parseHeader(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(org.apache.http.util.CharArrayBuffer,int,int)
CALLER: org.apache.http.impl.io.DefaultHttpRequestWriter#writeHeadLine(org.apache.http.HttpMessage)
	CALLEE: org.apache.http.impl.io.DefaultHttpRequestWriter#writeHeadLine(org.apache.http.HttpRequest)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flushBuffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#capacity()
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(org.apache.http.util.CharArrayBuffer,int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#isFull()
	CALLEE: org.apache.http.util.CharArrayBuffer#buffer()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeEncoded(java.nio.CharBuffer)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[])
CALLER: org.apache.http.message.BasicHeaderValueParser#parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.ParserCursor#atEnd()
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicHeaderElement#getValue()
	CALLEE: org.apache.http.message.BasicHeaderElement#getName()
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#streamRead(byte[],int,int)
	CALLEE: static org.apache.http.util.Asserts#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.LoggingInputStream#read(byte[],int,int)
CALLER: org.apache.http.impl.io.IdentityOutputStream#<init>(org.apache.http.io.SessionOutputBuffer)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.impl.io.ContentLengthOutputStream#<init>(org.apache.http.io.SessionOutputBuffer,long)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNegative(long,java.lang.String)
CALLER: org.apache.http.impl.io.ChunkedInputStream#<init>(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#<init>(int)
CALLER: org.apache.http.impl.io.IdentityInputStream#<init>(org.apache.http.io.SessionInputBuffer)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: static org.apache.http.impl.io.EmptyInputStream#<clinit>()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#<init>()
CALLER: org.apache.http.impl.io.ContentLengthInputStream#<init>(org.apache.http.io.SessionInputBuffer,long)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNegative(long,java.lang.String)
CALLER: org.apache.http.impl.conn.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.NoHttpResponseException#<init>(java.lang.String)
	CALLEE: org.apache.http.ProtocolException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#readLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BasicLineParser#hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.impl.conn.DefaultHttpResponseParser#reject(org.apache.http.util.CharArrayBuffer,int)
	CALLEE: org.apache.http.message.BasicLineParser#parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.impl.DefaultHttpResponseFactory#newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.io.DefaultHttpResponseParser#parseHead(org.apache.http.io.SessionInputBuffer)
	CALLEE: org.apache.http.NoHttpResponseException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#readLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BasicLineParser#parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.impl.DefaultHttpResponseFactory#newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#readLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#fillBuffer()
	CALLEE: org.apache.http.config.MessageConstraints#getMaxLineLength()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#hasBufferedData()
	CALLEE: org.apache.http.MessageConstraintException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.ByteArrayBuffer#isEmpty()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)
CALLER: org.apache.http.message.BasicLineParser#parseHeader(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BufferedHeader#<init>(org.apache.http.util.CharArrayBuffer)
CALLER: org.apache.http.impl.io.DefaultHttpRequestWriter#writeHeadLine(org.apache.http.HttpRequest)
	CALLEE: org.apache.http.client.methods.HttpRequestWrapper#getRequestLine()
	CALLEE: org.apache.http.message.BasicHttpRequest#getRequestLine()
	CALLEE: org.apache.http.message.BasicLineFormatter#formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(org.apache.http.util.CharArrayBuffer)
CALLER: org.apache.http.util.ByteArrayBuffer#append(org.apache.http.util.CharArrayBuffer,int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#buffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(char[],int,int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#writeEncoded(java.nio.CharBuffer)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#handleEncodingResult(java.nio.charset.CoderResult)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[])
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
CALLER: org.apache.http.message.BasicLineParser#hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: static org.apache.http.protocol.HTTP#isWhitespace(char)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.ProtocolVersion#getProtocol()
CALLER: org.apache.http.message.BasicLineParser#parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.ParseException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#substring(int,int)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
	CALLEE: org.apache.http.message.BasicLineParser#parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.BasicLineParser#skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.util.CharArrayBuffer#indexOf(int,int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
	CALLEE: org.apache.http.message.BasicLineParser#createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)
CALLER: org.apache.http.impl.DefaultHttpResponseFactory#newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.DefaultHttpResponseFactory#determineLocale(org.apache.http.protocol.HttpContext)
	CALLEE: org.apache.http.message.BasicHttpResponse#<init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.ByteArrayBuffer#buffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.util.ByteArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)
	CALLEE: org.apache.http.util.ByteArrayBuffer#byteAt(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(org.apache.http.util.ByteArrayBuffer,int,int)
CALLER: org.apache.http.message.BufferedHeader#<init>(org.apache.http.util.CharArrayBuffer)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.ParseException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#indexOf(int)
CALLER: org.apache.http.util.ByteArrayBuffer#append(char[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#expand(int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#handleEncodingResult(java.nio.charset.CoderResult)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#length()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flushBuffer()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#streamWrite(byte[],int,int)
	CALLEE: org.apache.http.impl.io.HttpTransportMetricsImpl#incrementBytesTransferred(long)
	CALLEE: org.apache.http.util.ByteArrayBuffer#capacity()
CALLER: org.apache.http.message.BasicLineParser#parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.ParseException#<init>(java.lang.String)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#substring(int,int)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
	CALLEE: org.apache.http.ProtocolVersion#getProtocol()
	CALLEE: org.apache.http.message.BasicLineParser#skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.util.CharArrayBuffer#indexOf(int,int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
	CALLEE: org.apache.http.message.BasicLineParser#createProtocolVersion(int,int)
CALLER: org.apache.http.message.BasicLineParser#skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#charAt(int)
	CALLEE: static org.apache.http.protocol.HTTP#isWhitespace(char)
	CALLEE: org.apache.http.message.ParserCursor#getPos()
	CALLEE: org.apache.http.message.ParserCursor#getUpperBound()
CALLER: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
	CALLEE: static org.apache.http.protocol.HTTP#isWhitespace(char)
CALLER: org.apache.http.message.BasicLineParser#createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)
	CALLEE: org.apache.http.message.BasicStatusLine#<init>(org.apache.http.ProtocolVersion,int,java.lang.String)
CALLER: org.apache.http.message.BasicHttpResponse#<init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.AbstractHttpMessage#<init>()
	CALLEE: org.apache.http.message.BasicStatusLine#getReasonPhrase()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
	CALLEE: org.apache.http.message.BasicStatusLine#getProtocolVersion()
CALLER: org.apache.http.util.CharArrayBuffer#append(byte[],int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#expand(int)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)
CALLER: org.apache.http.util.CharArrayBuffer#append(org.apache.http.util.ByteArrayBuffer,int,int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#buffer()
	CALLEE: org.apache.http.util.CharArrayBuffer#append(byte[],int,int)
CALLER: org.apache.http.util.CharArrayBuffer#indexOf(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#indexOf(int,int,int)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#write(int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flushBuffer()
	CALLEE: org.apache.http.util.ByteArrayBuffer#isFull()
	CALLEE: org.apache.http.util.ByteArrayBuffer#append(int)
	CALLEE: org.apache.http.impl.conn.LoggingOutputStream#write(int)
CALLER: org.apache.http.message.BasicLineParser#createProtocolVersion(int,int)
	CALLEE: org.apache.http.HttpVersion#forVersion(int,int)
CALLER: org.apache.http.message.BasicStatusLine#<init>(org.apache.http.ProtocolVersion,int,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNegative(int,java.lang.String)
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
CALLER: org.apache.http.util.ByteArrayBuffer#append(int)
	CALLEE: org.apache.http.util.ByteArrayBuffer#expand(int)
CALLER: org.apache.http.HttpVersion#forVersion(int,int)
	CALLEE: org.apache.http.HttpVersion#<init>(int,int)
CALLER: org.apache.http.message.BasicHeaderElement#equals(java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object[],java.lang.Object[])
CALLER: org.apache.http.message.BasicHeaderElement#hashCode()
	CALLEE: static org.apache.http.util.LangUtils#hashCode(int,java.lang.Object)
CALLER: org.joda.time.field.BaseDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.PreciseDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJYearOfEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.RemainderDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.OffsetDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekyearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.ZeroIsMaxDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.field.DividedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfMonthDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicDayOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicMonthOfYearDateTimeField#getMaximumValue()
	CALLEE: org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField#getMaximumValue()
CALLER: org.joda.time.field.UnsupportedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#unsupported()
CALLER: org.joda.time.chrono.BasicChronology.HalfdayField#getMaximumTextLength(java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#getHalfdayMaxTextLength()
CALLER: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.BaseDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.field.UnsupportedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.BasicChronology.HalfdayField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.ZonedChronology.ZonedDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJEraDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJMonthOfYearDateTimeField#getMaximumTextLength(java.util.Locale)
CALLER: org.joda.time.chrono.GJEraDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#getEraMaxTextLength()
CALLER: org.joda.time.chrono.GJDayOfWeekDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#getDayOfWeekMaxTextLength()
CALLER: org.joda.time.chrono.GJMonthOfYearDateTimeField#getMaximumTextLength(java.util.Locale)
	CALLEE: static org.joda.time.chrono.GJLocaleSymbols#forLocale(java.util.Locale)
	CALLEE: org.joda.time.chrono.GJLocaleSymbols#getMonthMaxTextLength()
CALLER: org.apache.http.impl.io.ChunkedOutputStream#close()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#finish()
CALLER: org.apache.http.impl.io.IdentityOutputStream#close()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.io.ContentLengthOutputStream#close()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.io.ChunkedOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#flushCacheWithAppend(byte[],int,int)
CALLER: org.apache.http.impl.io.IdentityOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
CALLER: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
CALLER: org.apache.http.impl.io.ChunkedOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#write(byte[],int,int)
CALLER: org.apache.http.impl.io.IdentityOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.IdentityOutputStream#write(byte[],int,int)
CALLER: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthOutputStream#write(byte[],int,int)
CALLER: org.apache.http.impl.io.ChunkedOutputStream#flush()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#flushCache()
CALLER: org.apache.http.impl.io.IdentityOutputStream#flush()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.io.ContentLengthOutputStream#flush()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#flush()
CALLER: org.apache.http.impl.conn.LoggingOutputStream#flush()
	CALLEE: org.apache.http.impl.conn.Wire#output(java.lang.String)
CALLER: org.apache.http.impl.conn.LoggingOutputStream#write(byte[],int,int)
	CALLEE: org.apache.http.impl.conn.Wire#output(java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#output(byte[],int,int)
CALLER: org.apache.http.util.CharArrayBuffer#append(org.apache.http.util.CharArrayBuffer,int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char[],int,int)
CALLER: org.apache.http.impl.conn.LoggingInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.conn.Wire#input(java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#input(byte[],int,int)
CALLER: org.apache.http.message.BasicHttpResponse#getStatusLine()
	CALLEE: org.apache.http.message.BasicStatusLine#<init>(org.apache.http.ProtocolVersion,int,java.lang.String)
	CALLEE: org.apache.http.message.BasicHttpResponse#getReason(int)
CALLER: org.apache.http.message.AbstractHttpMessage#headerIterator(java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#iterator(java.lang.String)
CALLER: org.apache.http.message.AbstractHttpMessage#getHeaders(java.lang.String)
	CALLEE: org.apache.http.message.HeaderGroup#getHeaders(java.lang.String)
CALLER: org.apache.http.message.BasicHttpResponse#toString()
	CALLEE: org.apache.http.message.BasicHttpResponse#getStatusLine()
CALLER: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
CALLER: org.apache.http.message.BufferedHeader#toString()
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
CALLER: org.apache.http.impl.conn.LoggingOutputStream#write(int)
	CALLEE: org.apache.http.impl.conn.Wire#output(java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#output(int)
CALLER: org.apache.http.message.BasicStatusLine#toString()
	CALLEE: org.apache.http.util.CharArrayBuffer#toString()
	CALLEE: org.apache.http.message.BasicLineFormatter#formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: org.apache.http.message.BufferedHeader#getElements()
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.message.ParserCursor#<init>(int,int)
	CALLEE: org.apache.http.message.ParserCursor#updatePos(int)
	CALLEE: org.apache.http.message.BasicHeaderValueParser#parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
CALLER: static org.apache.http.util.LangUtils#equals(java.lang.Object[],java.lang.Object[])
	CALLEE: static org.apache.http.util.LangUtils#equals(java.lang.Object,java.lang.Object)
CALLER: org.apache.http.impl.io.ChunkedOutputStream#finish()
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#flushCache()
	CALLEE: org.apache.http.impl.io.ChunkedOutputStream#writeClosingChunk()
CALLER: org.apache.http.impl.io.ChunkedOutputStream#flushCacheWithAppend(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(java.lang.String)
CALLER: org.apache.http.impl.io.ChunkedOutputStream#flushCache()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(java.lang.String)
CALLER: org.apache.http.impl.conn.Wire#output(java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#output(byte[])
CALLER: org.apache.http.impl.conn.Wire#output(byte[],int,int)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#wire(java.lang.String,java.io.InputStream)
CALLER: org.apache.http.impl.conn.Wire#input(java.lang.String)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#input(byte[])
CALLER: org.apache.http.impl.conn.Wire#input(byte[],int,int)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#wire(java.lang.String,java.io.InputStream)
CALLER: org.apache.http.message.BasicHttpResponse#getReason(int)
	CALLEE: org.apache.http.impl.EnglishReasonPhraseCatalog#getReason(int,java.util.Locale)
CALLER: org.apache.http.message.HeaderGroup#iterator(java.lang.String)
	CALLEE: org.apache.http.message.BasicListHeaderIterator#<init>(java.util.List,java.lang.String)
CALLER: org.apache.http.message.HeaderGroup#getHeaders(java.lang.String)
	CALLEE: org.apache.http.message.BasicHeader#getName()
	CALLEE: org.apache.http.message.BufferedHeader#getName()
CALLER: org.apache.http.impl.conn.Wire#output(int)
	CALLEE: org.apache.http.impl.conn.Wire#output(byte[])
CALLER: org.apache.http.message.BasicLineFormatter#formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.message.BasicLineFormatter#initBuffer(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.message.BasicLineFormatter#doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: org.apache.http.impl.io.ChunkedOutputStream#writeClosingChunk()
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(java.lang.String)
CALLER: org.apache.http.impl.io.SessionOutputBufferImpl#writeLine(java.lang.String)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#writeEncoded(java.nio.CharBuffer)
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(byte[])
	CALLEE: org.apache.http.impl.io.SessionOutputBufferImpl#write(int)
CALLER: org.apache.http.impl.conn.Wire#output(byte[])
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#wire(java.lang.String,java.io.InputStream)
CALLER: org.apache.http.impl.conn.Wire#input(byte[])
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.impl.conn.Wire#wire(java.lang.String,java.io.InputStream)
CALLER: org.apache.http.impl.EnglishReasonPhraseCatalog#getReason(int,java.util.Locale)
	CALLEE: static org.apache.http.util.Args#check(boolean,java.lang.String)
CALLER: org.apache.http.message.BasicLineFormatter#doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#ensureCapacity(int)
	CALLEE: org.apache.http.util.CharArrayBuffer#append(char)
	CALLEE: org.apache.http.message.BasicLineFormatter#estimateProtocolVersionLen(org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicLineFormatter#appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)
	CALLEE: org.apache.http.message.BasicStatusLine#getReasonPhrase()
	CALLEE: org.apache.http.message.BasicStatusLine#getStatusCode()
	CALLEE: org.apache.http.message.BasicStatusLine#getProtocolVersion()
CALLER: org.apache.http.entity.AbstractHttpEntity#toString()
	CALLEE: org.apache.http.message.BasicHeader#getValue()
	CALLEE: org.apache.http.message.BufferedHeader#getValue()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContentLength()
CALLER: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContent()
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: org.apache.http.conn.EofSensorInputStream#<init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher)
CALLER: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isStreaming()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getDecompressingStream()
CALLER: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: static org.apache.http.util.Asserts#check(boolean,java.lang.String)
CALLER: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
CALLER: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isStreaming()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isStreaming()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isStreaming()
CALLER: org.apache.http.entity.BufferedHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentLength()
CALLER: org.apache.http.entity.HttpEntityWrapper#getContentLength()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContentLength()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentLength()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentLength()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContentLength()
CALLER: org.apache.http.entity.HttpEntityWrapper#isRepeatable()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#isRepeatable()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#isRepeatable()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#isRepeatable()
	CALLEE: org.apache.http.entity.BasicHttpEntity#isRepeatable()
CALLER: org.apache.http.entity.BufferedHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.HttpEntityWrapper#writeTo(java.io.OutputStream)
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.client.entity.DecompressingEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.BasicHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#cleanup()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#abortConnection()
CALLER: org.apache.http.client.entity.DecompressingEntity#writeTo(java.io.OutputStream)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[])
CALLER: org.apache.http.entity.BasicHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.EmptyInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
CALLER: org.apache.http.entity.HttpEntityWrapper#getContentEncoding()
	CALLEE: org.apache.http.entity.AbstractHttpEntity#getContentEncoding()
	CALLEE: org.apache.http.entity.HttpEntityWrapper#getContentEncoding()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContentEncoding()
CALLER: org.apache.http.entity.HttpEntityWrapper#getContent()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
CALLER: org.apache.http.conn.EofSensorInputStream#<init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher)
	CALLEE: static org.apache.http.util.Args#notNull(java.lang.Object,java.lang.String)
CALLER: org.apache.http.client.entity.DecompressingEntity#getDecompressingStream()
	CALLEE: org.apache.http.entity.BufferedHttpEntity#getContent()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#getContent()
	CALLEE: org.apache.http.client.entity.DecompressingEntity#getContent()
	CALLEE: org.apache.http.entity.BasicHttpEntity#getContent()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#<init>(java.io.InputStream,org.apache.http.client.entity.InputStreamFactory)
CALLER: org.apache.http.entity.HttpEntityWrapper#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.BufferedHttpEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.client.entity.DecompressingEntity#writeTo(java.io.OutputStream)
	CALLEE: org.apache.http.entity.BasicHttpEntity#writeTo(java.io.OutputStream)
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#releaseConnection()
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#cleanup()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#close()
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#abortConnection()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#abortConnection()
CALLER: org.apache.http.impl.io.ChunkedInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[],int,int)
CALLER: org.apache.http.impl.io.ContentLengthInputStream#read(byte[])
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[],int,int)
CALLER: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[])
CALLER: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[])
CALLER: org.apache.http.impl.io.ChunkedInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#nextChunk()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#read(byte[],int,int)
	CALLEE: org.apache.http.TruncatedChunkException#<init>(java.lang.String)
CALLER: org.apache.http.impl.io.ContentLengthInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.ConnectionClosedException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#read(byte[],int,int)
CALLER: org.apache.http.impl.io.ChunkedInputStream#nextChunk()
	CALLEE: org.apache.http.MalformedChunkCodingException#<init>(java.lang.String)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#getChunkSize()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#parseTrailerHeaders()
CALLER: org.apache.http.impl.io.SessionInputBufferImpl#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.HttpTransportMetricsImpl#incrementBytesTransferred(long)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#fillBuffer()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#hasBufferedData()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#streamRead(byte[],int,int)
CALLER: org.apache.http.TruncatedChunkException#<init>(java.lang.String)
	CALLEE: org.apache.http.MalformedChunkCodingException#<init>(java.lang.String)
CALLER: org.apache.http.impl.io.ChunkedInputStream#getChunkSize()
	CALLEE: org.apache.http.util.CharArrayBuffer#length()
	CALLEE: org.apache.http.ConnectionClosedException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#clear()
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#readLine(org.apache.http.util.CharArrayBuffer)
	CALLEE: org.apache.http.util.CharArrayBuffer#substringTrimmed(int,int)
	CALLEE: org.apache.http.util.CharArrayBuffer#indexOf(int)
	CALLEE: org.apache.http.MalformedChunkCodingException#<init>(java.lang.String)
	CALLEE: org.apache.http.util.CharArrayBuffer#isEmpty()
CALLER: org.apache.http.impl.io.ChunkedInputStream#parseTrailerHeaders()
	CALLEE: org.apache.http.config.MessageConstraints#getMaxHeaderCount()
	CALLEE: org.apache.http.config.MessageConstraints#getMaxLineLength()
	CALLEE: org.apache.http.MalformedChunkCodingException#<init>(java.lang.String)
	CALLEE: static org.apache.http.impl.io.AbstractMessageParser#parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)
CALLER: static org.apache.http.impl.io.AbstractMessageParser#parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)
	CALLEE: static org.apache.http.impl.io.AbstractMessageParser#parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)
CALLER: org.apache.http.impl.io.IdentityInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.SessionInputBufferImpl#read(byte[],int,int)
CALLER: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#checkClose()
CALLER: org.apache.http.conn.EofSensorInputStream#read(byte[])
	CALLEE: org.apache.http.conn.EofSensorInputStream#read(byte[],int,int)
CALLER: org.apache.http.conn.EofSensorInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.IdentityInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.impl.io.EmptyInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.conn.EofSensorInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.conn.EofSensorInputStream#isReadAllowed()
	CALLEE: org.apache.http.conn.EofSensorInputStream#checkEOF(int)
	CALLEE: org.apache.http.conn.EofSensorInputStream#checkAbort()
CALLER: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
CALLER: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[])
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#initWrapper()
CALLER: org.apache.http.client.entity.LazyDecompressingInputStream#read(byte[],int,int)
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#initWrapper()
CALLER: org.apache.http.conn.EofSensorInputStream#checkClose()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#streamClosed(java.io.InputStream)
CALLER: org.apache.http.conn.EofSensorInputStream#checkEOF(int)
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#eofDetected(java.io.InputStream)
CALLER: org.apache.http.conn.EofSensorInputStream#checkAbort()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#streamAbort(java.io.InputStream)
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#streamClosed(java.io.InputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#cleanup()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#abortConnection()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
	CALLEE: org.apache.http.impl.execchain.ConnectionHolder#isReleased()
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#eofDetected(java.io.InputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#releaseConnection()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#cleanup()
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#abortConnection()
	CALLEE: org.apache.http.impl.io.ChunkedInputStream#close()
	CALLEE: org.apache.http.impl.io.IdentityInputStream#close()
	CALLEE: org.apache.http.impl.io.ContentLengthInputStream#close()
	CALLEE: org.apache.http.impl.io.EmptyInputStream#close()
	CALLEE: org.apache.http.conn.EofSensorInputStream#close()
	CALLEE: org.apache.http.client.entity.LazyDecompressingInputStream#close()
CALLER: org.apache.http.impl.execchain.ResponseEntityProxy#streamAbort(java.io.InputStream)
	CALLEE: org.apache.http.impl.execchain.ResponseEntityProxy#cleanup()
