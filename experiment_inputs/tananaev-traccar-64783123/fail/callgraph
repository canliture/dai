CALLER: static org.traccar.Main#main(java.lang.String[])
	CALLEE: static org.traccar.Context#init(java.lang.String[])
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.helper.Log#logSystemInfo()
	CALLEE: static org.traccar.Context#getServerManager()
	CALLEE: static org.traccar.Context#getWebServer()
	CALLEE: org.traccar.Main.1#<init>()
	CALLEE: org.traccar.http.WebServer#start()
	CALLEE: org.traccar.ServerManager#start()
CALLER: static org.traccar.Context#init(java.lang.String[])
	CALLEE: static org.traccar.helper.Log#setupLogger(java.util.Properties)
	CALLEE: org.traccar.database.DataManager#<init>(java.util.Properties)
	CALLEE: org.traccar.database.DataCache#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.PermissionsManager#<init>()
	CALLEE: org.traccar.geocode.NominatimReverseGeocoder#<init>(java.lang.String)
	CALLEE: org.traccar.geocode.GisgraphyReverseGeocoder#<init>(java.lang.String)
	CALLEE: org.traccar.geocode.GoogleReverseGeocoder#<init>()
	CALLEE: org.traccar.http.WebServer#<init>()
	CALLEE: org.traccar.ServerManager#<init>()
	CALLEE: org.traccar.ServerManager#init()
CALLER: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#info(java.lang.Object)
	CALLEE: org.apache.log4j.Category#info(java.lang.Object)
CALLER: static org.traccar.helper.Log#logSystemInfo()
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
CALLER: static org.traccar.helper.Log#setupLogger(java.util.Properties)
	CALLEE: org.apache.log4j.PatternLayout#<init>(java.lang.String)
	CALLEE: org.apache.log4j.DailyRollingFileAppender#<init>(org.apache.log4j.Layout,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#resetConfiguration()
	CALLEE: static org.apache.log4j.LogManager#getRootLogger()
	CALLEE: org.apache.log4j.varia.NullAppender#<init>()
	CALLEE: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.Level#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.traccar.helper.Log.1#<init>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#setDefaultFactory(org.jboss.netty.logging.InternalLoggerFactory)
	CALLEE: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
CALLER: org.traccar.database.DataManager#<init>(java.util.Properties)
	CALLEE: org.traccar.database.DataManager.1#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.DataManager.2#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.DataManager#initDatabase(java.util.Properties)
CALLER: org.traccar.database.PermissionsManager#<init>()
	CALLEE: org.traccar.database.PermissionsManager#refresh()
CALLER: org.traccar.http.WebServer#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#<init>()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setWar(java.lang.String)
	CALLEE: org.traccar.database.DataManager#getDataSource()
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.eclipse.jetty.server.Server#<init>(int)
	CALLEE: org.eclipse.jetty.server.Server#<init>(java.net.InetSocketAddress)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.traccar.http.AsyncServlet#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.traccar.http.DeviceServlet#<init>()
	CALLEE: org.traccar.http.PositionServlet#<init>()
	CALLEE: org.traccar.http.MainServlet#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setResourceBase(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setWelcomeFiles(java.lang.String[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#<init>()
CALLER: org.traccar.ServerManager#init()
	CALLEE: org.traccar.ServerManager#initAvl301Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initCastelServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initProtocolDetector()
	CALLEE: org.traccar.ServerManager#initGps103Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTk103Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGl100Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGl200Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initT55Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initXexunServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTotemServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initEnforaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMeiligaoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMaxonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initSuntechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initProgressServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initH02Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initJt600Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initEv603Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initV680Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initPt502Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTr20Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initNavisServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMeitrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initSkypatrolServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGt02Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGt06Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMegastekServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initNavigilServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGpsGateServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTeltonikaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMta6Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMta6CanServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTlt2hServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initSyrusServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initWondexServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initCellocatorServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGalileoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initYwtServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTk102Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initIntellitracServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initXt7Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initWialonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initCarscopServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initApelServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initManPowerServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGlobalSatServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initAtrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initPt3000Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initRuptelaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTopflytechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initLaipacServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initAplicomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGotopServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initSanavServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGatorServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initNoranServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initM2mServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initOsmAndServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initEasyTrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTaipServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initKhdServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initPiligrimServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initStl060Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initCarTrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMiniFinderServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initHaicomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initEelinkServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initBoxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initFreedomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTelikServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTrackboxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initVisiontekServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initOrionServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initRitiServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initUlbotechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTramigoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTr900Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initArdi01Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initXt013Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initAutoFonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initGoSafeServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initAutoFon45Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#initBceServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initXirgoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initCalAmpServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initMtxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#initTytanServer(java.lang.String)
CALLER: static org.traccar.helper.Log#getLogger()
	CALLEE: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
CALLER: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Category#warn(java.lang.Object)
CALLER: org.apache.log4j.PatternLayout#<init>(java.lang.String)
	CALLEE: org.apache.log4j.Layout#<init>()
	CALLEE: org.apache.log4j.PatternLayout#createPatternParser(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#parse()
CALLER: org.apache.log4j.DailyRollingFileAppender#<init>(org.apache.log4j.Layout,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#<init>(org.apache.log4j.Layout,java.lang.String,boolean)
	CALLEE: org.apache.log4j.RollingCalendar#<init>()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#activateOptions()
CALLER: static org.apache.log4j.LogManager#resetConfiguration()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#resetConfiguration()
CALLER: static org.apache.log4j.LogManager#<clinit>()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.spi.RootLogger#<init>(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#<init>(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#<init>(org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#getResource(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.LogManager#getRootLogger()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
CALLER: static org.apache.log4j.varia.NullAppender#<clinit>()
	CALLEE: org.apache.log4j.varia.NullAppender#<init>()
CALLER: org.apache.log4j.varia.NullAppender#<init>()
	CALLEE: org.apache.log4j.AppenderSkeleton#<init>()
CALLER: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#getLogger(java.lang.String)
CALLER: static org.apache.log4j.Logger#<clinit>()
	CALLEE: static org.apache.log4j.Logger#class$(java.lang.String)
CALLER: static org.apache.log4j.Category#<clinit>()
	CALLEE: static org.apache.log4j.Category#class$(java.lang.String)
CALLER: static org.apache.log4j.Level#<clinit>()
	CALLEE: org.apache.log4j.Level#<init>(int,java.lang.String,int)
CALLER: static org.apache.log4j.Priority#<clinit>()
	CALLEE: org.apache.log4j.Level#<init>(int,java.lang.String,int)
CALLER: static org.jboss.netty.logging.InternalLoggerFactory#<clinit>()
	CALLEE: org.jboss.netty.logging.JdkLoggerFactory#<init>()
CALLER: org.traccar.helper.Log.1#<init>()
	CALLEE: org.jboss.netty.logging.InternalLoggerFactory#<init>()
CALLER: org.traccar.database.DataManager#initDatabase(java.util.Properties)
	CALLEE: org.traccar.database.DataManager#createDatabaseSchema()
	CALLEE: org.traccar.helper.DriverDelegate#<init>(java.sql.Driver)
	CALLEE: com.mchange.v2.c3p0.ComboPooledDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setDriverClass(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setJdbcUrl(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setUser(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setPassword(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setIdleConnectionTestPeriod(int)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setTestConnectionOnCheckin(boolean)
	CALLEE: org.traccar.database.NamedParameterStatement#<init>(java.lang.String,javax.sql.DataSource)
	CALLEE: org.traccar.database.NamedParameterStatement#<init>(java.lang.String,javax.sql.DataSource,int)
CALLER: org.traccar.database.PermissionsManager#refresh()
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.PermissionsManager#getNotNull(long)
	CALLEE: org.traccar.database.DataManager#getPermissions()
	CALLEE: org.traccar.model.Permission#getDeviceId()
	CALLEE: org.traccar.model.Permission#getUserId()
CALLER: static org.eclipse.jetty.server.Server#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.server.handler.AbstractHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.component.AggregateLifeCycle#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.component.AbstractLifeCycle#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.Server#<init>(int)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.util.component.Container#<init>()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#<init>()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#setPort(int)
	CALLEE: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
CALLER: org.eclipse.jetty.server.Server#<init>(java.net.InetSocketAddress)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.util.component.Container#<init>()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#<init>()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#setPort(int)
	CALLEE: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
	CALLEE: org.eclipse.jetty.server.AbstractConnector#setHost(java.lang.String)
CALLER: static org.eclipse.jetty.server.handler.ContextHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
CALLER: static org.eclipse.jetty.servlet.ServletHolder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.servlet.Holder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.traccar.http.AsyncServlet#<init>()
	CALLEE: javax.servlet.http.HttpServlet#<init>()
CALLER: org.eclipse.jetty.servlet.ServletHolder#<init>(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(org.eclipse.jetty.servlet.Holder.Source)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#setServlet(javax.servlet.Servlet)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
CALLER: org.traccar.http.DeviceServlet#<init>()
	CALLEE: org.traccar.http.BaseServlet#<init>()
CALLER: org.traccar.http.PositionServlet#<init>()
	CALLEE: org.traccar.http.BaseServlet#<init>()
CALLER: org.traccar.http.MainServlet#<init>()
	CALLEE: org.traccar.http.BaseServlet#<init>()
CALLER: static org.eclipse.jetty.server.handler.ResourceHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.http.MimeTypes#<init>()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#setResourceBase(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setBaseResource(org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setServer(org.eclipse.jetty.server.Server)
CALLER: org.eclipse.jetty.server.handler.HandlerList#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrowRuntime()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
CALLER: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String,java.lang.Throwable)
CALLER: static org.eclipse.jetty.webapp.WebAppContext#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.webapp.WebAppContext#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.webapp.MetaData#<init>()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext.Context#<init>(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setProtectedTargets(java.lang.String[])
CALLER: org.traccar.ServerManager#initGps103Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.3#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.4#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTk103Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.5#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.ServerManager.6#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGl100Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.7#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGl200Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.8#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.ServerManager.9#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initT55Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.10#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initXexunServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.11#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTotemServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.12#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initEnforaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.13#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMeiligaoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.14#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMaxonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.15#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initSuntechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.16#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initProgressServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.17#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
CALLER: org.traccar.ServerManager#initH02Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.18#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initJt600Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.19#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initEv603Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.20#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initV680Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.21#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initPt502Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.22#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTr20Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.23#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initNavisServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.24#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMeitrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.25#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initSkypatrolServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.26#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGt02Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.27#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGt06Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.28#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMegastekServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.29#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initNavigilServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.30#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGpsGateServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.31#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTeltonikaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.32#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMta6Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.33#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMta6CanServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.34#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTlt2hServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.35#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initSyrusServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.36#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initWondexServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.37#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initCellocatorServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.38#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGalileoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.39#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initYwtServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.40#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTk102Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.41#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initIntellitracServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.42#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initXt7Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.43#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initWialonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.44#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initCarscopServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.45#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initApelServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.46#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initManPowerServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.47#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGlobalSatServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.48#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initAtrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.49#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.ServerManager.50#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initPt3000Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.51#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initRuptelaServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.52#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTopflytechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.53#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initLaipacServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.54#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initAplicomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.55#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGotopServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.56#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initSanavServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.57#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGatorServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.58#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initNoranServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.59#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initM2mServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.60#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initOsmAndServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.61#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initEasyTrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.62#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTaipServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.63#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initKhdServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.64#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initPiligrimServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.65#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initStl060Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.66#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initCarTrackServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.67#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMiniFinderServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.68#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initHaicomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.69#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initEelinkServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.70#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initBoxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.71#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initFreedomServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.72#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTelikServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.73#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTrackboxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.74#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initVisiontekServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.75#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initOrionServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.76#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initRitiServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.77#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initUlbotechServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.78#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTramigoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.79#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTr900Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.80#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initArdi01Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.81#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initXt013Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.82#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initAutoFonServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.83#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initGoSafeServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.84#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initAutoFon45Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.85#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initBceServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.86#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initXirgoServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.87#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initCalAmpServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.88#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initMtxServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.89#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initTytanServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.90#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initAvl301Server(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.91#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initCastelServer(java.lang.String)
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.traccar.ServerManager.92#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.ServerManager.93#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
CALLER: org.traccar.ServerManager#initProtocolDetector()
	CALLEE: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.traccar.ServerManager.1#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
	CALLEE: org.traccar.ServerManager.2#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#<init>()
	CALLEE: org.apache.log4j.RollingCalendar#<init>()
	CALLEE: org.apache.log4j.FileAppender#<init>()
CALLER: org.apache.log4j.AppenderSkeleton#finalize()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
CALLER: org.apache.log4j.PatternLayout#createPatternParser(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#<init>(java.lang.String)
CALLER: org.apache.log4j.FileAppender#<init>(org.apache.log4j.Layout,java.lang.String,boolean)
	CALLEE: org.apache.log4j.WriterAppender#<init>()
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
CALLER: org.apache.log4j.DailyRollingFileAppender#activateOptions()
	CALLEE: org.apache.log4j.FileAppender#activateOptions()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#computeCheckPeriod()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#printPeriodicity(int)
	CALLEE: org.apache.log4j.RollingCalendar#setType(int)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#<init>(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#<init>()
	CALLEE: static org.apache.log4j.LogManager#isLikelySafeScenario(java.lang.Exception)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#getLoggerRepository()
CALLER: org.apache.log4j.spi.RootLogger#<init>(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
CALLER: org.apache.log4j.Hierarchy#<init>(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setHierarchy(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.or.RendererMap#<init>()
	CALLEE: org.apache.log4j.DefaultCategoryFactory#<init>()
CALLER: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
CALLER: static org.apache.log4j.helpers.Loader#getResource(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.Loader#getTCL()
	CALLEE: static org.apache.log4j.helpers.Loader#class$(java.lang.String)
CALLER: static org.apache.log4j.helpers.Loader#<clinit>()
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
CALLER: static org.apache.log4j.helpers.LogLog#<clinit>()
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
CALLER: static org.apache.log4j.helpers.OptionConverter#selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#class$(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.PropertyConfigurator#<init>()
	CALLEE: org.apache.log4j.PropertyConfigurator#doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)
CALLER: org.apache.log4j.AppenderSkeleton#<init>()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#<init>()
CALLER: static org.apache.log4j.LogManager#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
CALLER: org.apache.log4j.Level#<init>(int,java.lang.String,int)
	CALLEE: org.apache.log4j.Priority#<init>(int,java.lang.String,int)
CALLER: org.jboss.netty.logging.JdkLoggerFactory#<init>()
	CALLEE: org.jboss.netty.logging.InternalLoggerFactory#<init>()
CALLER: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#<clinit>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#<init>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#setFactoryClassName(java.lang.String)
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#addReferenceProperty(java.lang.String)
CALLER: com.mchange.v2.c3p0.ComboPooledDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#<init>()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setDriverClass(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#setDriverClass(java.lang.String)
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setJdbcUrl(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setJdbcUrl(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getJdbcUrl()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setUser(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setUser(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getUser()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setPassword(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setPassword(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getPassword()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setIdleConnectionTestPeriod(int)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(int,int)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#setIdleConnectionTestPeriod(int)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdleConnectionTestPeriod()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setTestConnectionOnCheckin(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(boolean,boolean)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#setTestConnectionOnCheckin(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#isTestConnectionOnCheckin()
CALLER: org.traccar.database.NamedParameterStatement#<init>(java.lang.String,javax.sql.DataSource)
	CALLEE: org.traccar.database.NamedParameterStatement#<init>(java.lang.String,javax.sql.DataSource,int)
CALLER: org.traccar.database.NamedParameterStatement#<init>(java.lang.String,javax.sql.DataSource,int)
	CALLEE: static org.traccar.database.NamedParameterStatement#parse(java.lang.String,java.util.Map)
CALLER: org.traccar.database.DataManager#createDatabaseSchema()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getConnection()
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.model.User#<init>()
	CALLEE: org.traccar.model.User#setName(java.lang.String)
	CALLEE: org.traccar.model.User#setEmail(java.lang.String)
	CALLEE: org.traccar.model.User#setPassword(java.lang.String)
	CALLEE: org.traccar.model.User#setAdmin(boolean)
	CALLEE: org.traccar.database.DataManager#addUser(org.traccar.model.User)
	CALLEE: org.traccar.model.User#getId()
	CALLEE: org.traccar.database.DataManager#mockData(long)
	CALLEE: org.traccar.database.QueryBuilder#executeUpdate()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#getMetaData()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#getCatalog()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getString(java.lang.String)
CALLER: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: static org.eclipse.jetty.util.log.Log#<clinit>()
	CALLEE: org.eclipse.jetty.util.log.Log.1#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
CALLER: static org.eclipse.jetty.util.component.Container#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setServer(org.eclipse.jetty.server.Server)
CALLER: static org.eclipse.jetty.server.AbstractConnector#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#<init>()
	CALLEE: org.eclipse.jetty.server.nio.AbstractNIOConnector#<init>()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#<init>(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.server.nio.SelectChannelConnector.1)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#setMaxIdleTime(long)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#setAcceptors(int)
CALLER: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
	CALLEE: org.eclipse.jetty.server.AbstractConnector#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)
CALLER: static org.eclipse.jetty.server.handler.ContextHandlerCollection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: javax.servlet.http.HttpServlet#<init>()
	CALLEE: javax.servlet.GenericServlet#<init>()
CALLER: static org.eclipse.jetty.servlet.Holder.Source#<clinit>()
	CALLEE: org.eclipse.jetty.servlet.Holder.Source#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.servlet.ServletHolder#<init>(org.eclipse.jetty.servlet.Holder.Source)
	CALLEE: org.eclipse.jetty.servlet.Holder#<init>(org.eclipse.jetty.servlet.Holder.Source)
CALLER: org.eclipse.jetty.servlet.ServletHolder#setServlet(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.Holder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.servlet.Holder#setName(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newServletHandler()
CALLER: org.traccar.http.BaseServlet#<init>()
	CALLEE: javax.servlet.http.HttpServlet#<init>()
CALLER: static org.eclipse.jetty.http.MimeTypes#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.io.BufferCache#<init>()
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#asciiToLowerCase(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.MimeTypes#normalizeMimeType(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#setAssociate(java.lang.Object,org.eclipse.jetty.io.BufferCache.CachedBuffer)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String,boolean)
CALLER: static org.eclipse.jetty.util.resource.Resource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#<init>()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#<init>(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.ApproveNonExistentDirectoryAliases#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler.AliasCheck)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
CALLER: org.eclipse.jetty.webapp.WebAppContext#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setConfigurationClasses(java.lang.String[])
	CALLEE: org.eclipse.jetty.server.Server#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
CALLER: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.util.MultiException#ifExceptionThrowRuntime()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
CALLER: static org.traccar.helper.Log#warning(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.config.PropertySetterException#getMessage()
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Category#warn(java.lang.Object)
CALLER: static org.eclipse.jetty.webapp.MetaData#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.webapp.WebAppContext.Context#<init>(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
CALLER: static org.eclipse.jetty.server.handler.ErrorHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ErrorPageErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#<init>()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
CALLER: org.traccar.ServerManager#isProtocolEnabled(java.lang.String)
	CALLEE: static org.traccar.Context#getProps()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#<init>()
CALLER: org.traccar.ServerManager.3#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.jboss.netty.bootstrap.ConnectionlessBootstrap#<init>()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#<init>()
CALLER: org.traccar.ServerManager.4#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.5#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.6#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.7#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.8#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.9#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.10#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.11#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.12#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.13#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.14#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.15#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.16#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.17#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.TrackerServer#setEndianness(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#<init>(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#setOption(java.lang.String,java.lang.Object)
CALLER: org.traccar.ServerManager.18#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.19#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.20#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.21#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.22#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.23#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.24#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.25#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.26#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.27#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.28#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.29#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.30#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.31#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.32#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.33#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.34#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.35#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.36#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.37#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.38#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.39#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.40#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.41#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.42#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.43#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.44#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.45#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.46#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.47#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.48#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.49#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.50#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.51#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.52#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.53#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.54#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.55#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.56#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.57#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.58#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.59#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.60#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.61#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.62#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.63#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.64#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.65#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.66#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.67#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.68#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.69#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.70#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.71#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.72#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.73#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.74#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.75#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.76#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.77#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.78#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.79#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.80#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.81#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.82#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.83#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.84#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.85#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.86#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.87#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.88#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.89#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.90#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.91#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.92#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.93#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.1#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.traccar.ServerManager.2#<init>(org.traccar.ServerManager,org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
	CALLEE: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
CALLER: org.apache.log4j.FileAppender#<init>()
	CALLEE: org.apache.log4j.WriterAppender#<init>()
CALLER: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.WriterAppender#writeFooter()
	CALLEE: org.apache.log4j.FileAppender#reset()
CALLER: org.apache.log4j.helpers.PatternParser#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#<init>()
CALLER: org.apache.log4j.WriterAppender#<init>()
	CALLEE: org.apache.log4j.AppenderSkeleton#<init>()
CALLER: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#reset()
	CALLEE: org.apache.log4j.WriterAppender#setImmediateFlush(boolean)
	CALLEE: org.apache.log4j.WriterAppender#createWriter(java.io.OutputStream)
	CALLEE: org.apache.log4j.FileAppender#setQWForFiles(java.io.Writer)
	CALLEE: org.apache.log4j.WriterAppender#writeHeader()
CALLER: org.apache.log4j.FileAppender#activateOptions()
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: org.apache.log4j.DailyRollingFileAppender#computeCheckPeriod()
	CALLEE: org.apache.log4j.RollingCalendar#setType(int)
	CALLEE: org.apache.log4j.RollingCalendar#<init>(java.util.TimeZone,java.util.Locale)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
CALLER: org.apache.log4j.DailyRollingFileAppender#printPeriodicity(int)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
CALLER: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace()
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace()
CALLER: org.apache.log4j.Logger#<init>(java.lang.String)
	CALLEE: org.apache.log4j.Category#<init>(java.lang.String)
CALLER: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.or.RendererMap#<clinit>()
	CALLEE: org.apache.log4j.or.DefaultRenderer#<init>()
CALLER: static org.apache.log4j.helpers.Loader#getTCL()
	CALLEE: static org.apache.log4j.helpers.Loader#class$(java.lang.String)
CALLER: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#<init>()
	CALLEE: org.apache.log4j.DefaultCategoryFactory#<init>()
CALLER: org.apache.log4j.PropertyConfigurator#doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.PropertyConfigurator#doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
CALLER: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.log.MLog#transformer()
	CALLEE: static com.mchange.v2.log.MLog#instance()
	CALLEE: com.mchange.v2.log.FallbackMLog#getMLogger(java.lang.String)
	CALLEE: com.mchange.v2.log.MLog#getMLogger(java.lang.Class)
CALLER: static com.mchange.v2.log.MLog#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#refreshConfig(com.mchange.v2.cfg.MultiPropertiesConfig[],java.lang.String)
CALLER: static com.mchange.v2.naming.JavaBeanReferenceMaker#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.naming.JavaBeanReferenceMaker#<init>()
	CALLEE: com.mchange.v2.naming.ReferenceIndirector#<init>()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#<init>(boolean)
CALLER: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#diff(java.lang.Object,java.lang.Object)
	CALLEE: static com.mchange.v2.lang.ObjectUtils#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#close(boolean)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getPoolManager()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPool()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkoutPooledConnection()
CALLER: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#<init>(javax.sql.DataSource,java.lang.String)
CALLER: org.traccar.database.DataManager#addUser(org.traccar.model.User)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#setObject(java.lang.Object)
	CALLEE: org.traccar.model.User#setId(long)
	CALLEE: org.traccar.database.QueryBuilder#executeUpdate()
CALLER: org.traccar.database.DataManager#mockData(long)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.model.Device#<init>()
	CALLEE: org.traccar.model.Device#setName(java.lang.String)
	CALLEE: org.traccar.model.Device#setUniqueId(java.lang.String)
	CALLEE: org.traccar.database.DataManager#addDevice(org.traccar.model.Device)
	CALLEE: org.traccar.model.Device#getId()
	CALLEE: org.traccar.database.DataManager#linkDevice(long,long)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: static org.traccar.http.JsonConverter#parseDate(java.lang.String)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.database.DataManager#addPosition(org.traccar.model.Position)
CALLER: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#initialized()
	CALLEE: org.eclipse.jetty.util.log.AbstractLogger#getLogger(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#addBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.nio.AbstractNIOConnector#<init>()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#<init>()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#setResponseHeaderType(org.eclipse.jetty.io.Buffers.Type)
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#setResponseBufferType(org.eclipse.jetty.io.Buffers.Type)
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#setRequestHeaderType(org.eclipse.jetty.io.Buffers.Type)
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#setRequestBufferType(org.eclipse.jetty.io.Buffers.Type)
CALLER: static org.eclipse.jetty.io.nio.SelectorManager#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#<init>(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.server.nio.SelectChannelConnector.1)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#<init>(org.eclipse.jetty.server.nio.SelectChannelConnector)
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#contains(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle.Bean#<init>(org.eclipse.jetty.util.component.AggregateLifeCycle,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
CALLER: org.eclipse.jetty.server.AbstractConnector#setAcceptors(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String,boolean)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#<init>(org.eclipse.jetty.server.handler.ContextHandler.Context)
CALLER: org.eclipse.jetty.servlet.Holder#<init>(org.eclipse.jetty.servlet.Holder.Source)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.servlet.Holder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#hashCode()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#newServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#<init>()
CALLER: org.eclipse.jetty.io.BufferCache#<init>()
	CALLEE: org.eclipse.jetty.util.StringMap#<init>(boolean)
CALLER: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#<init>(java.lang.String,int)
	CALLEE: org.eclipse.jetty.util.StringMap#put(java.lang.String,java.lang.Object)
CALLER: static org.eclipse.jetty.util.StringUtil#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.http.MimeTypes#normalizeMimeType(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#toURL(java.io.File)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL,java.net.URLConnection,java.io.File)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
CALLER: org.eclipse.jetty.webapp.WebAppContext#setConfigurationClasses(java.lang.String[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#<init>(org.eclipse.jetty.server.handler.ContextHandler)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
CALLER: org.jboss.netty.bootstrap.Bootstrap#<init>()
	CALLEE: static org.jboss.netty.channel.Channels#pipeline()
	CALLEE: static org.jboss.netty.channel.Channels#pipelineFactory(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.traccar.TrackerServer#<init>(org.jboss.netty.bootstrap.Bootstrap,java.lang.String)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#<init>()
	CALLEE: static org.traccar.GlobalChannelFactory#getFactory()
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#setFactory(org.jboss.netty.channel.ChannelFactory)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#setFactory(org.jboss.netty.channel.ChannelFactory)
	CALLEE: static org.traccar.GlobalChannelFactory#getDatagramFactory()
	CALLEE: org.traccar.TrackerServer.1#<init>(org.traccar.TrackerServer,org.traccar.TrackerServer,java.lang.String)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)
CALLER: static org.jboss.netty.buffer.HeapChannelBufferFactory#<clinit>()
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#<init>(java.nio.ByteOrder)
CALLER: org.jboss.netty.buffer.HeapChannelBufferFactory#<init>(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#<init>(java.nio.ByteOrder)
CALLER: org.apache.log4j.WriterAppender#writeFooter()
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.helpers.QuietWriter#flush()
	CALLEE: org.apache.log4j.Layout#getFooter()
CALLER: org.apache.log4j.FileAppender#reset()
	CALLEE: org.apache.log4j.FileAppender#closeFile()
	CALLEE: org.apache.log4j.WriterAppender#reset()
CALLER: org.apache.log4j.WriterAppender#createWriter(java.io.OutputStream)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.WriterAppender#getEncoding()
CALLER: org.apache.log4j.FileAppender#setQWForFiles(java.io.Writer)
	CALLEE: org.apache.log4j.helpers.QuietWriter#<init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)
CALLER: org.apache.log4j.WriterAppender#writeHeader()
	CALLEE: org.apache.log4j.Layout#getHeader()
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
CALLER: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckDate(java.util.Date)
CALLER: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#getTCL()
CALLER: org.apache.log4j.PropertyConfigurator#doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#setInternalDebugging(boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.apache.log4j.PropertyConfigurator#configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.PropertyConfigurator#configureLoggerFactory(java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.Hierarchy#getThreshold()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getThreshold()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#resetConfiguration()
CALLER: static com.mchange.v2.log.MLog#instance()
	CALLEE: static com.mchange.v2.log.MLog#mlog()
CALLER: static com.mchange.v2.log.MLog#refreshConfig(com.mchange.v2.cfg.MultiPropertiesConfig[],java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.log.MLogConfig#refresh(com.mchange.v2.cfg.MultiPropertiesConfig[],java.lang.String)
	CALLEE: static com.mchange.v2.log.MLogConfig#getProperty(java.lang.String)
	CALLEE: static com.mchange.v1.util.StringTokenizerUtils#tokenizeToArray(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#findByClassnames(java.lang.String[],boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog#<init>()
	CALLEE: static com.mchange.v2.log.MLog#info(java.lang.String)
	CALLEE: com.mchange.v2.log.MLog.1#<init>(java.lang.String)
CALLER: static com.mchange.v2.naming.ReferenceIndirector#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#setNestedDataSource(javax.sql.DataSource)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#setConnectionPoolDataSource(javax.sql.ConnectionPoolDataSource)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setUpPropertyEvents()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getPoolManager()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#assertCpds()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getNumHelperThreads()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getDataSourceName()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#<init>(javax.sql.ConnectionPoolDataSource,java.util.Map,java.util.Map,int,java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: org.traccar.database.QueryBuilder#<init>(javax.sql.DataSource,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getConnection()
	CALLEE: static org.traccar.database.QueryBuilder#parse(java.lang.String,java.util.Map)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String,int)
CALLER: org.traccar.database.QueryBuilder#setObject(java.lang.Object)
	CALLEE: org.traccar.database.QueryBuilder#setBoolean(java.lang.String,boolean)
	CALLEE: org.traccar.database.QueryBuilder#setInteger(java.lang.String,int)
	CALLEE: org.traccar.database.QueryBuilder#setLong(java.lang.String,long)
	CALLEE: org.traccar.database.QueryBuilder#setDouble(java.lang.String,double)
	CALLEE: org.traccar.database.QueryBuilder#setString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#setDate(java.lang.String,java.util.Date)
CALLER: org.traccar.database.DataManager#addDevice(org.traccar.model.Device)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#setObject(java.lang.Object)
	CALLEE: org.traccar.database.QueryBuilder#executeUpdate()
	CALLEE: org.traccar.model.Device#setId(long)
CALLER: org.traccar.database.DataManager#linkDevice(long,long)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#setLong(java.lang.String,long)
	CALLEE: org.traccar.database.QueryBuilder#executeUpdate()
CALLER: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#<init>()
CALLER: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Event#setDeviceTime(java.util.Date)
CALLER: org.traccar.database.DataManager#addPosition(org.traccar.model.Position)
	CALLEE: org.traccar.database.NamedParameterStatement#prepare()
	CALLEE: org.traccar.database.DataManager#assignVariables(org.traccar.database.NamedParameterStatement.Params,org.traccar.model.Position)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#executeUpdate(org.traccar.database.NamedParameterStatement.ResultSetProcessor)
CALLER: static org.eclipse.jetty.util.log.Log#initialized()
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#initStandardLogging(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#<init>()
CALLER: org.eclipse.jetty.server.AbstractConnector#<init>()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#<init>()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#<init>()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object)
CALLER: static org.eclipse.jetty.io.Buffers.Type#<clinit>()
	CALLEE: org.eclipse.jetty.io.Buffers.Type#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#<init>(org.eclipse.jetty.server.nio.SelectChannelConnector)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#<init>()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarting()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#doStart()
	CALLEE: org.eclipse.jetty.server.Server#doStart()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#doStart()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#doStart()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#doStart()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#doStart()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doStart()
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doStart()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#doStart()
CALLER: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.component.Container#remove(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#add(java.lang.Object,java.lang.Object,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#<init>(org.eclipse.jetty.server.handler.ContextHandler.Context)
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.ApproveNonExistentDirectoryAliases#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler.AliasCheck)
CALLER: static org.eclipse.jetty.security.SecurityHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.security.SecurityHandler.2#<init>()
	CALLEE: org.eclipse.jetty.security.SecurityHandler.3#<init>()
CALLER: static org.eclipse.jetty.servlet.Holder.1#<clinit>()
	CALLEE: static org.eclipse.jetty.servlet.Holder.Source#values()
CALLER: static org.eclipse.jetty.servlet.ServletHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
CALLER: org.eclipse.jetty.util.StringMap#<init>(boolean)
	CALLEE: org.eclipse.jetty.util.StringMap#<init>()
CALLER: static org.eclipse.jetty.io.AbstractBuffer#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.BufferCache.CachedBuffer#<init>(java.lang.String,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.StringMap#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#<init>(org.eclipse.jetty.util.StringMap,org.eclipse.jetty.util.StringMap.1)
	CALLEE: org.eclipse.jetty.util.StringMap.Node#<init>(boolean,java.lang.String,int)
	CALLEE: org.eclipse.jetty.util.StringMap.Node#split(org.eclipse.jetty.util.StringMap,int)
CALLER: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
	CALLEE: org.eclipse.jetty.util.StringMap#get(java.lang.String)
CALLER: static org.eclipse.jetty.util.resource.FileResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.resource.URLResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL,java.net.URLConnection,java.io.File)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL,boolean)
CALLER: static org.jboss.netty.channel.Channels#pipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#<init>()
CALLER: static org.jboss.netty.channel.Channels#pipelineFactory(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.Channels.1#<init>(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#<init>()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#<init>(java.lang.String)
CALLER: static org.traccar.GlobalChannelFactory#getFactory()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap#setFactory(org.jboss.netty.channel.ChannelFactory)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#setFactory(org.jboss.netty.channel.ChannelFactory)
CALLER: static org.traccar.GlobalChannelFactory#getDatagramFactory()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#<init>()
CALLER: org.traccar.TrackerServer.1#<init>(org.traccar.TrackerServer,org.traccar.TrackerServer,java.lang.String)
	CALLEE: org.traccar.BasePipelineFactory#<init>(org.traccar.TrackerServer,java.lang.String)
CALLER: org.apache.log4j.FileAppender#closeFile()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.apache.log4j.WriterAppender#reset()
	CALLEE: org.apache.log4j.WriterAppender#closeWriter()
CALLER: org.eclipse.jetty.util.resource.Resource#finalize()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#release()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#release()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#release()
CALLER: org.apache.log4j.helpers.QuietWriter#<init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)
	CALLEE: org.apache.log4j.helpers.QuietWriter#setErrorHandler(org.apache.log4j.spi.ErrorHandler)
CALLER: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
CALLER: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.Level#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#class$(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
CALLER: org.apache.log4j.PropertyConfigurator#configureLoggerFactory(java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)
	CALLEE: static org.apache.log4j.or.RendererMap#addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.Hierarchy#setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)
CALLER: static com.mchange.v2.log.MLogConfig#refresh(com.mchange.v2.cfg.MultiPropertiesConfig[],java.lang.String)
	CALLEE: static com.mchange.v2.cfg.MLogConfigSource#readVmConfig(java.lang.String[],java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: static com.mchange.v2.cfg.MConfig#combine(com.mchange.v2.cfg.MultiPropertiesConfig[])
CALLER: static com.mchange.v2.log.MLogConfig#getProperty(java.lang.String)
	CALLEE: static com.mchange.v2.log.MLogConfig#ensureLoad()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#getProperty(java.lang.String)
CALLER: static com.mchange.v1.util.StringTokenizerUtils#tokenizeToArray(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.util.StringTokenizerUtils#tokenizeToArray(java.lang.String,java.lang.String,boolean)
CALLER: static com.mchange.v2.log.MLog#findByClassnames(java.lang.String[],boolean)
	CALLEE: static com.mchange.v2.log.MLogClasses#resolveIfAlias(java.lang.String)
CALLER: static com.mchange.v2.log.FallbackMLog#<clinit>()
	CALLEE: static com.mchange.v2.log.MLogConfig#getProperty(java.lang.String)
	CALLEE: static com.mchange.v2.log.MLevel#fromSeverity(java.lang.String)
CALLER: com.mchange.v2.log.FallbackMLog#<init>()
	CALLEE: com.mchange.v2.log.MLog#<init>()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#<init>(com.mchange.v2.log.FallbackMLog.1)
CALLER: static com.mchange.v2.log.MLog#info(java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#instance()
	CALLEE: static com.mchange.v2.log.MLog#getLogger()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: com.mchange.v2.log.MLog.1#<init>(java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#access$000()
	CALLEE: static com.mchange.v2.log.MLog#access$100()
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#setUpPropertyEvents()
CALLER: static com.mchange.v2.c3p0.DriverManagerDataSource#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#<clinit>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#<init>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#setFactoryClassName(java.lang.String)
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#addReferenceProperty(java.lang.String)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#<init>(boolean)
CALLER: static com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#<clinit>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#<init>()
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#setFactoryClassName(java.lang.String)
	CALLEE: com.mchange.v2.naming.JavaBeanReferenceMaker#addReferenceProperty(java.lang.String)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#<init>()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#<init>(boolean)
CALLER: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#setNestedDataSource(javax.sql.DataSource)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#setConnectionPoolDataSource(javax.sql.ConnectionPoolDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: static com.mchange.v2.log.MLevel#<clinit>()
	CALLEE: com.mchange.v2.log.MLevel#<init>(java.lang.Object,int,java.lang.String)
	CALLEE: com.mchange.v2.log.MLevel#intValue()
	CALLEE: com.mchange.v2.log.MLevel#getSeverity()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#setUpPropertyEvents()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource.1#<init>(com.mchange.v2.c3p0.AbstractComboPooledDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#addVetoableChangeListener(java.beans.VetoableChangeListener)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource.2#<init>(com.mchange.v2.c3p0.AbstractComboPooledDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#addPropertyChangeListener(java.beans.PropertyChangeListener)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#assertCpds()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getConnectionPoolDataSource()
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(com.mchange.v2.coalesce.CoalesceChecker,boolean,boolean)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getDataSourceName()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getDataSourceName()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#<init>(javax.sql.ConnectionPoolDataSource,java.util.Map,java.util.Map,int,java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#<init>(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#findAuth(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#poolsInit()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getDataSourceName()
	CALLEE: static com.mchange.v2.beans.BeansUtils#appendPropNamesAndValues(java.lang.StringBuffer,java.lang.Object,java.util.Collection)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.traccar.database.QueryBuilder#setBoolean(java.lang.String,boolean)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setBoolean(int,boolean)
CALLER: org.traccar.database.QueryBuilder#setInteger(java.lang.String,int)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setInt(int,int)
CALLER: org.traccar.database.QueryBuilder#setLong(java.lang.String,long)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setLong(int,long)
CALLER: org.traccar.database.QueryBuilder#setDouble(java.lang.String,double)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setDouble(int,double)
CALLER: org.traccar.database.QueryBuilder#setString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setNull(int,int)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setString(int,java.lang.String)
CALLER: org.traccar.database.QueryBuilder#setDate(java.lang.String,java.util.Date)
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setTimestamp(int,java.sql.Timestamp)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setNull(int,int)
CALLER: org.traccar.database.QueryBuilder#executeUpdate()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeUpdate()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#getGeneratedKeys()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(int)
CALLER: org.traccar.database.NamedParameterStatement#prepare()
	CALLEE: org.traccar.database.NamedParameterStatement.Params#<init>(org.traccar.database.NamedParameterStatement)
CALLER: org.traccar.database.DataManager#assignVariables(org.traccar.database.NamedParameterStatement.Params,org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getProtocol()
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.model.Event#getDeviceTime()
	CALLEE: org.traccar.model.Position#getFixTime()
	CALLEE: org.traccar.model.Position#getValid()
	CALLEE: org.traccar.model.Position#getAltitude()
	CALLEE: org.traccar.model.Position#getLatitude()
	CALLEE: org.traccar.model.Position#getLongitude()
	CALLEE: org.traccar.model.Position#getSpeed()
	CALLEE: org.traccar.model.Position#getCourse()
	CALLEE: org.traccar.model.Position#getAddress()
	CALLEE: org.traccar.model.Event#getOther()
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setLong(java.lang.String,java.lang.Long)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setTimestamp(java.lang.String,java.util.Date)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setDouble(java.lang.String,java.lang.Double)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setBoolean(java.lang.String,java.lang.Boolean)
CALLER: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String,boolean)
CALLER: static org.eclipse.jetty.util.log.Log#initStandardLogging(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.http.HttpBuffersImpl#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object,boolean)
CALLER: org.eclipse.jetty.io.nio.SelectorManager#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarting()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.nio.SelectorManager#doStart()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#<init>(org.eclipse.jetty.io.nio.SelectorManager,int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#getSelectSets()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.1#<init>(org.eclipse.jetty.io.nio.SelectorManager,int)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#dispatch(java.lang.Runnable)
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.component.Container#remove(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.Container.Relationship#<init>(org.eclipse.jetty.util.component.Container,java.lang.Object,java.lang.Object,java.lang.String,org.eclipse.jetty.util.component.Container.1)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
CALLER: org.eclipse.jetty.util.component.Container#addBean(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
CALLER: org.eclipse.jetty.util.component.Container#add(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.Container.Relationship#<init>(org.eclipse.jetty.util.component.Container,java.lang.Object,java.lang.Object,java.lang.String,org.eclipse.jetty.util.component.Container.1)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.util.StringMap#<init>()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#<init>()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.StringMap.NullEntry#<init>(org.eclipse.jetty.util.StringMap,org.eclipse.jetty.util.StringMap.1)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#<init>(org.eclipse.jetty.util.StringMap)
CALLER: org.eclipse.jetty.util.StringMap.Node#split(org.eclipse.jetty.util.StringMap,int)
	CALLEE: org.eclipse.jetty.util.StringMap.Node#<init>()
CALLER: org.eclipse.jetty.util.StringMap#get(java.lang.String)
	CALLEE: org.eclipse.jetty.util.StringMap#getEntry(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#getValue()
CALLER: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
	CALLEE: org.eclipse.jetty.util.resource.Resource#<init>()
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL)
	CALLEE: org.eclipse.jetty.util.resource.BadResource#<init>(java.net.URL,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#<init>()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#<init>(java.lang.String)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#<init>()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup.1#<init>(org.jboss.netty.channel.group.DefaultChannelGroup)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#<init>(org.jboss.netty.channel.socket.InternetProtocolFamily)
CALLER: org.traccar.BasePipelineFactory#<init>(org.traccar.TrackerServer,java.lang.String)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.traccar.FilterHandler#<init>()
	CALLEE: static org.traccar.Context#getReverseGeocoder()
CALLER: org.apache.log4j.WriterAppender#closeWriter()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.resource.URLResource#release()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
CALLER: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Category#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.spi.NOPLogger#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#getLevel()
CALLER: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.Category#setAdditivity(boolean)
CALLER: static org.apache.log4j.or.RendererMap#addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
	CALLEE: static org.apache.log4j.or.RendererMap#class$(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
CALLER: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
CALLER: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#class$(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#activate()
CALLER: static com.mchange.v2.cfg.MLogConfigSource#readVmConfig(java.lang.String[],java.lang.String[],java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#readVmConfig(java.lang.String[],java.lang.String[],java.util.List)
CALLER: static com.mchange.v2.cfg.DelayedLogItem.Level#<clinit>()
	CALLEE: com.mchange.v2.cfg.DelayedLogItem.Level#<init>(java.lang.String,int)
CALLER: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String,java.lang.Throwable)
CALLER: static com.mchange.v2.cfg.MConfig#combine(com.mchange.v2.cfg.MultiPropertiesConfig[])
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#combine(com.mchange.v2.cfg.MultiPropertiesConfig[])
CALLER: static com.mchange.v2.cfg.MConfig#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.cfg.DelayedLogItem.Level#values()
	CALLEE: com.mchange.v2.cfg.MConfig.CSManager#<init>(com.mchange.v2.cfg.MConfig.1)
	CALLEE: static com.mchange.v1.cachedstore.CachedStoreFactory#createNoCleanupCachedStore(com.mchange.v1.cachedstore.CachedStore.Manager)
	CALLEE: static com.mchange.v1.cachedstore.CachedStoreUtils#synchronizedCachedStore(com.mchange.v1.cachedstore.CachedStore)
CALLER: static com.mchange.v2.log.MLogConfig#ensureLoad()
	CALLEE: static com.mchange.v2.log.MLogConfig#refresh(com.mchange.v2.cfg.MultiPropertiesConfig[],java.lang.String)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#<init>(com.mchange.v2.log.FallbackMLog.1)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#<init>()
CALLER: static com.mchange.v2.log.MLog#getLogger()
	CALLEE: static com.mchange.v2.log.MLog#transformer()
	CALLEE: static com.mchange.v2.log.MLog#instance()
	CALLEE: com.mchange.v2.log.FallbackMLog#getMLogger(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog#getMLogger()
CALLER: com.mchange.v2.log.MLog.1#run()
	CALLEE: static com.mchange.v2.log.MLogConfig#logDelayedItems(com.mchange.v2.log.MLogger)
	CALLEE: static com.mchange.v2.log.MLogConfig#dump()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenResolvable#<init>()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#dataSourceName()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeStringPropertyVar(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeExtensions()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#factoryClassLocation()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#numHelperThreads()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeIntPropertyVar(java.lang.String,int)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#allocateIdentityToken(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#reregister(com.mchange.v2.c3p0.impl.IdentityTokenized)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#setUpPropertyEvents()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#addPropertyChangeListener(java.beans.PropertyChangeListener)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.1#<init>(com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#<init>(boolean)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeStringPropertyVar(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setUpPropertyListeners()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setUser(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setPassword(java.lang.String)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#<init>(boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#<init>(boolean)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#getDefaultConnectionTester()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#setUpPropertyListeners()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getUserOverridesAsString()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#eqOrBothNull(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#eqOrBothNull(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
CALLER: static com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#<clinit>()
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#<init>()
CALLER: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(com.mchange.v2.coalesce.CoalesceChecker,boolean,boolean)
	CALLEE: com.mchange.v2.coalesce.WeakEqualsCoalescer#<init>()
	CALLEE: com.mchange.v2.coalesce.StrongEqualsCoalescer#<init>()
	CALLEE: com.mchange.v2.coalesce.WeakCcCoalescer#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v2.coalesce.StrongCcCoalescer#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v2.coalesce.SyncedCoalescer#<init>(com.mchange.v2.coalesce.Coalescer)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#finalize()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#close()
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#findAuth(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#<init>(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#<init>(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
	CALLEE: com.mchange.v2.log.jdk14logging.ForwardingLogger#<init>(com.mchange.v2.log.MLogger,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#createEncounterCounter()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getPropsFileConfigProperty(java.lang.String)
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString(java.lang.String)
	CALLEE: static com.mchange.lang.ByteUtils#fromHexAscii(java.lang.String)
	CALLEE: static com.mchange.v2.ser.SerializableUtils#fromByteArray(byte[])
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#poolsInit()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPrivilegeSpawnedThreads()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getContextClassLoaderSource()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager.1ContextClassLoaderPoolsInitThread#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager,java.lang.ClassLoader,boolean)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#maybePrivilegedPoolsInit(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
CALLER: static com.mchange.v2.sql.SqlUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v2.beans.BeansUtils#appendPropNamesAndValues(java.lang.StringBuffer,java.lang.Object,java.util.Collection)
	CALLEE: static com.mchange.v2.beans.BeansUtils#extractAccessiblePropertiesToMap(java.util.Map,java.lang.Object,java.util.Collection)
CALLER: static com.mchange.v2.beans.BeansUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: org.traccar.model.Event#getOther()
	CALLEE: static org.traccar.model.MiscFormatter#toXmlString(java.util.Map)
CALLER: static org.eclipse.jetty.util.log.StdErrLog#<clinit>()
	CALLEE: org.eclipse.jetty.util.DateCache#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#<init>(org.eclipse.jetty.io.nio.SelectorManager,int)
	CALLEE: org.eclipse.jetty.util.thread.Timeout#<init>(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.thread.Timeout#setDuration(long)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$100()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#dispatch(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getThreadPool()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getThreadPool()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dispatch(java.lang.Runnable)
CALLER: org.eclipse.jetty.util.component.Container.Relationship#<init>(org.eclipse.jetty.util.component.Container,java.lang.Object,java.lang.Object,java.lang.String,org.eclipse.jetty.util.component.Container.1)
	CALLEE: org.eclipse.jetty.util.component.Container.Relationship#<init>(org.eclipse.jetty.util.component.Container,java.lang.Object,java.lang.Object,java.lang.String)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
CALLER: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.resource.BadResource#<init>(java.net.URL,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
CALLER: static org.eclipse.jetty.util.resource.JarFileResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.resource.JarResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
CALLER: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
CALLER: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
CALLER: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.String)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap#<init>()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#<init>(int,float,int)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,java.util.concurrent.Executor)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#getMaxThreads(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#<init>(org.jboss.netty.channel.socket.InternetProtocolFamily)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#<init>(java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#<init>(org.jboss.netty.channel.socket.nio.WorkerPool)
CALLER: org.traccar.FilterHandler#<init>()
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#<init>()
CALLER: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.PropertyConfigurator#registryGet(java.lang.String)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.PropertyConfigurator#registryPut(org.apache.log4j.Appender)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getKey()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#getKey()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#getKey()
CALLER: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#introspect()
CALLER: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)
CALLER: static com.mchange.v2.cfg.ConfigUtils#readVmConfig(java.lang.String[],java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#vmCondensedPaths(java.lang.String[],java.lang.String[],java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#stringFromPathsList(java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#read(java.lang.String[],java.util.List)
CALLER: static com.mchange.v2.cfg.ConfigUtils#combine(com.mchange.v2.cfg.MultiPropertiesConfig[])
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#<init>(com.mchange.v2.cfg.MultiPropertiesConfig[])
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#toBasic()
CALLER: com.mchange.v2.cfg.MConfig.CSManager#<init>(com.mchange.v2.cfg.MConfig.1)
	CALLEE: com.mchange.v2.cfg.MConfig.CSManager#<init>()
CALLER: static com.mchange.v1.cachedstore.CachedStoreFactory#createNoCleanupCachedStore(com.mchange.v1.cachedstore.CachedStore.Manager)
	CALLEE: com.mchange.v1.cachedstore.NoCleanupCachedStore#<init>(com.mchange.v1.cachedstore.CachedStore.Manager)
CALLER: static com.mchange.v1.cachedstore.CachedStoreUtils#synchronizedCachedStore(com.mchange.v1.cachedstore.CachedStore)
	CALLEE: static com.mchange.v1.lang.Synchronizer#createSynchronizedWrapper(java.lang.Object)
CALLER: static com.mchange.v2.log.MLogConfig#logDelayedItems(com.mchange.v2.log.MLogger)
	CALLEE: static com.mchange.v2.log.MLogConfig#ensureLoad()
	CALLEE: static com.mchange.v2.log.MLogConfig#ensureDelayedDumpToLogger()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#getDelayedLogItems()
CALLER: static com.mchange.v2.log.MLogConfig#dump()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#toString()
CALLER: com.mchange.v2.c3p0.impl.IdentityTokenResolvable#<init>()
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#<init>()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeStringPropertyVar(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUnspecifiedUserProperty(java.lang.String,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findLibraryMultiPropertiesConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#setLibraryMultiPropertiesConfig(com.mchange.v2.cfg.MultiPropertiesConfig)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findLibraryC3P0Config(boolean)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#setMainConfig(com.mchange.v2.c3p0.cfg.C3P0Config)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MAIN()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(com.mchange.v2.c3p0.cfg.C3P0Config)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeExtensions()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getExtensions(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeIntPropertyVar(java.lang.String,int)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUnspecifiedUserProperty(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#allocateIdentityToken(java.lang.Object)
	CALLEE: com.mchange.v2.encounter.EncounterUtils.1#encounter(java.lang.Object)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#reregister(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#banner()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#attemptRegisterRegistryMBean()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#isIncorporated(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#incorporate(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.SyncedCoalescer#coalesce(java.lang.Object)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(com.mchange.v2.coalesce.CoalesceChecker,boolean,boolean)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#<init>()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#resetConnectionTesterCache()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#getPropsFileConfigProperty(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.management.NullManagementCoordinator#<init>()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenResolvable#<init>()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeStringPropertyVar(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#factoryClassLocation()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#allocateIdentityToken(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#reregister(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#driverClass()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#forceUseNamedDriverClass()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeBooleanPropertyVar(java.lang.String,boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#jdbcUrl()
	CALLEE: com.mchange.v2.c3p0.impl.AuthMaskingProperties#<init>()
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#setUpPropertyListeners()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource.1#<init>(com.mchange.v2.c3p0.DriverManagerDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#addPropertyChangeListener(java.beans.PropertyChangeListener)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#setUser(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getUser()
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#setPassword(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#eqOrBothNull(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getPassword()
CALLER: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenResolvable#<init>()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeStringPropertyVar(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#factoryClassLocation()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeIntPropertyVar(java.lang.String,int)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#allocateIdentityToken(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#reregister(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeBooleanPropertyVar(java.lang.String,boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireIncrement()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireRetryAttempts()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireRetryDelay()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#autoCommitOnClose()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#automaticTestTable()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#breakAfterAcquireFailure()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#checkoutTimeout()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#connectionCustomizerClassName()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#connectionTesterClassName()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#contextClassLoaderSource()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#debugUnreturnedConnectionStackTraces()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#forceIgnoreUnresolvedTransactions()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#idleConnectionTestPeriod()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#initialPoolSize()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxAdministrativeTaskTime()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxConnectionAge()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxIdleTime()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxIdleTimeExcessConnections()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxPoolSize()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxStatements()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxStatementsPerConnection()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#minPoolSize()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#overrideDefaultPassword()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#overrideDefaultUser()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#preferredTestQuery()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#privilegeSpawnedThreads()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#propertyCycle()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#statementCacheNumDeferredCloseThreads()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#testConnectionOnCheckin()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#testConnectionOnCheckout()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#unreturnedConnectionTimeout()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeUserOverridesAsString()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#usesTraditionalReflectiveProxies()
CALLER: static com.mchange.v2.c3p0.C3P0Registry#getDefaultConnectionTester()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#connectionTesterClassName()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#getConnectionTester(java.lang.String)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#setUpPropertyListeners()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.1#<init>(com.mchange.v2.c3p0.WrapperConnectionPoolDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#addVetoableChangeListener(java.beans.VetoableChangeListener)
CALLER: com.mchange.v2.coalesce.WeakEqualsCoalescer#<init>()
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#<init>(java.util.Map)
CALLER: com.mchange.v2.coalesce.StrongEqualsCoalescer#<init>()
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#<init>(java.util.Map)
CALLER: com.mchange.v2.coalesce.WeakCcCoalescer#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#<init>(java.util.Map)
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#<init>(com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v2.coalesce.StrongCcCoalescer#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#<init>(java.util.Map)
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#<init>(com.mchange.v2.coalesce.CoalesceChecker)
	CALLEE: com.mchange.v1.identicator.IdHashMap#<init>(com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#close()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#close(boolean)
CALLER: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
	CALLEE: static com.mchange.v2.log.MLog#transformer()
	CALLEE: static com.mchange.v2.log.MLog#instance()
	CALLEE: com.mchange.v2.log.FallbackMLog#getMLogger(java.lang.String)
CALLER: com.mchange.v2.log.jdk14logging.ForwardingLogger#<init>(com.mchange.v2.log.MLogger,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#getName()
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#createEncounterCounter()
	CALLEE: static com.mchange.v2.encounter.EncounterUtils#createWeak(com.mchange.v1.identicator.Identicator)
	CALLEE: static com.mchange.v2.encounter.EncounterUtils#syncWrap(com.mchange.v2.encounter.EncounterCounter)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#getPropsFileConfigProperty(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
CALLER: static com.mchange.v2.uid.UidUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.uid.UidUtils#generateVmId()
CALLER: static com.mchange.lang.ByteUtils#fromHexAscii(java.lang.String)
	CALLEE: static com.mchange.lang.ByteUtils#fromHexDigit(int)
CALLER: static com.mchange.v2.ser.SerializableUtils#fromByteArray(byte[])
	CALLEE: static com.mchange.v2.ser.SerializableUtils#deserializeFromByteArray(byte[])
CALLER: static com.mchange.v2.ser.SerializableUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPrivilegeSpawnedThreads()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#privilegeSpawnedThreads()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getContextClassLoaderSource()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#contextClassLoaderSource()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#maybePrivilegedPoolsInit(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager.1#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#_poolsInit()
CALLER: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: static com.mchange.v2.beans.BeansUtils#extractAccessiblePropertiesToMap(java.util.Map,java.lang.Object,java.util.Collection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#logp(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: static org.traccar.model.MiscFormatter#toXmlString(java.util.Map)
	CALLEE: static org.traccar.model.MiscFormatter#format(java.lang.Object)
CALLER: org.eclipse.jetty.util.DateCache#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.DateCache#setTimeZone(java.util.TimeZone)
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String,java.util.Properties)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.DateCache#now()
	CALLEE: org.eclipse.jetty.util.DateCache#lastMs()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#tag(java.lang.StringBuilder,java.lang.String,int,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.util.thread.Timeout#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.thread.Timeout#<init>(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.thread.Timeout.Task#<init>()
CALLER: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
CALLER: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.StringBuilder,java.lang.String)
CALLER: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(java.lang.String,int,int,int)
CALLER: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.String)
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getDefaultFactory()
	CALLEE: org.traccar.helper.Log.1#newInstance(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLoggerFactory#newInstance(java.lang.String)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap#<init>(int,float,int)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap.Segment#newArray(int)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#<init>(int,float)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,int,java.util.concurrent.Executor,int)
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.jboss.netty.channel.socket.nio.SelectorUtil#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#debug(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isDebugEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isDebugEnabled()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#<init>(java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<init>(java.util.concurrent.Executor,int)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#<init>(org.jboss.netty.channel.socket.nio.WorkerPool)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#<init>()
CALLER: org.apache.log4j.PropertyConfigurator#parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
CALLER: org.apache.log4j.PropertyConfigurator#parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#activate()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.NameValue#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.SortedKeyEnumeration#<init>(java.util.Hashtable)
	CALLEE: org.apache.log4j.SortedKeyEnumeration#hasMoreElements()
	CALLEE: org.apache.log4j.SortedKeyEnumeration#nextElement()
CALLER: org.apache.log4j.config.PropertySetter#introspect()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: org.apache.log4j.config.PropertySetter#setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetterException#<init>(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#convertArg(java.lang.String,java.lang.Class)
	CALLEE: org.apache.log4j.config.PropertySetterException#<init>(java.lang.Throwable)
CALLER: static com.mchange.v2.cfg.ConfigUtils#vmCondensedPaths(java.lang.String[],java.lang.String[],java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#vmResourcePaths(java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#condensePaths(java.lang.String[][])
CALLER: static com.mchange.v2.cfg.ConfigUtils#read(java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>(java.lang.String[],java.util.List)
CALLER: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#<init>(com.mchange.v2.cfg.MultiPropertiesConfig[])
	CALLEE: com.mchange.v2.cfg.MultiPropertiesConfig#<init>()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#getDelayedLogItems()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#getPropertiesResourcePaths()
CALLER: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#toBasic()
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getPropertiesResourcePaths()
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getPropsByResourcePaths()
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getDelayedLogItems()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>(java.lang.String[],java.util.Map,java.util.List)
CALLER: static com.mchange.v1.lang.Synchronizer#createSynchronizedWrapper(java.lang.Object)
	CALLEE: com.mchange.v1.lang.Synchronizer.1#<init>(java.lang.Object)
	CALLEE: static com.mchange.v1.lang.Synchronizer#recurseFindInterfaces(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#getUnspecifiedUserProperty(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MAIN()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findLibraryMultiPropertiesConfig()
	CALLEE: static com.mchange.v2.cfg.MConfig#readVmConfig(java.lang.String[],java.lang.String[])
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findLibraryC3P0Config(boolean)
	CALLEE: static com.mchange.v2.c3p0.cfg.NamedScope#mergeExtensions(java.util.HashMap,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>(java.util.HashMap,java.util.HashMap,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.C3P0Config#<init>(com.mchange.v2.c3p0.cfg.NamedScope,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#mergedOver(com.mchange.v2.c3p0.cfg.NamedScope)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
	CALLEE: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#<init>(boolean)
	CALLEE: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#findConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractHardcodedC3P0Defaults()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractC3P0PropertiesResources()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#configFromFlatDefaults(java.util.HashMap)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleNamedScopes()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleUserOverridesDefaultConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleExtensionsDefaultConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.NamedScope#mergeUserNamesToOverrides(java.util.HashMap,java.util.HashMap)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(com.mchange.v2.c3p0.cfg.C3P0Config)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(com.mchange.v2.c3p0.cfg.NamedScope)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#getExtensions(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MAIN()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#banner()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#attemptRegisterRegistryMBean()
	CALLEE: com.mchange.v2.c3p0.management.NullManagementCoordinator#attemptManageC3P0Registry()
CALLER: static com.mchange.v2.c3p0.C3P0Registry#isIncorporated(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#keySet()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.UserKeySet#contains(java.lang.Object)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#incorporate(com.mchange.v2.c3p0.impl.IdentityTokenized)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.management.NullManagementCoordinator#attemptManagePooledDataSource(com.mchange.v2.c3p0.PooledDataSource)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
CALLER: com.mchange.v2.util.DoubleWeakHashMap#<init>()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.CheckKeyHolder#<init>()
CALLER: static com.mchange.v2.c3p0.C3P0Registry#resetConnectionTesterCache()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#connectionTesterClassName()
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#recreateDefaultConnectionTester()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#getPropsFileConfigProperty(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getPropsFileConfigProperty(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeBooleanPropertyVar(java.lang.String,boolean)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUnspecifiedUserProperty(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.lang.BooleanUtils#parseBoolean(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#initializeUserOverridesAsString()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUserOverridesAsString(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#getConnectionTester(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#recreateDefaultConnectionTester()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v1.identicator.IdWeakHashMap#<init>(com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v1.identicator.IdMap#<init>(java.util.Map,com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v1.identicator.IdHashMap#<init>(com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v1.identicator.IdMap#<init>(java.util.Map,com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#close(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#poolsDestroy(boolean)
CALLER: static com.mchange.v1.identicator.IdentityHashCodeIdenticator#<clinit>()
	CALLEE: com.mchange.v1.identicator.IdentityHashCodeIdenticator#<init>()
CALLER: static com.mchange.v2.encounter.EncounterUtils#createWeak(com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#<init>(com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v2.encounter.GenericEncounterCounter#<init>(java.util.Map)
CALLER: static com.mchange.v2.encounter.EncounterUtils#syncWrap(com.mchange.v2.encounter.EncounterCounter)
	CALLEE: com.mchange.v2.encounter.EncounterUtils.1#<init>(com.mchange.v2.encounter.EncounterCounter)
CALLER: static com.mchange.v2.uid.UidUtils#generateVmId()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.lang.BooleanUtils#parseBoolean(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getObject(java.lang.String,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#toString()
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#toString()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getObject(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#toString()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle.Bean#toString()
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#toString()
	CALLEE: com.mchange.v2.log.MLevel#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#toString()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#_poolsInit()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#idString()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxAdministrativeTaskTime()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#createTaskRunner(int,int,java.util.Timer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getStatementCacheNumDeferredCloseThreads()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePoolFactory#createNoEventSupportInstance(com.mchange.v2.async.AsynchronousRunner,java.util.Timer)
CALLER: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: static com.mchange.v2.lang.VersionUtils#isAtLeastJavaVersion14()
	CALLEE: static com.mchange.lang.ThrowableUtils#extractStackTrace(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static org.traccar.model.MiscFormatter#format(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#toString()
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#toString()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#toString()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle.Bean#toString()
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#toString()
	CALLEE: com.mchange.v2.log.MLevel#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#toString()
CALLER: org.eclipse.jetty.util.DateCache#setTimeZone(java.util.TimeZone)
	CALLEE: org.eclipse.jetty.util.DateCache#setTzFormatString(java.util.TimeZone)
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String,java.util.Properties)
	CALLEE: org.eclipse.jetty.util.log.AbstractLogger#<init>()
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#condensePackageString(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#getLoggingLevel(java.util.Properties,java.lang.String)
CALLER: org.eclipse.jetty.util.DateCache#now()
	CALLEE: org.eclipse.jetty.util.DateCache#format(long)
CALLER: org.eclipse.jetty.util.log.StdErrLog#tag(java.lang.StringBuilder,java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#condensePackageString(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#escape(java.lang.StringBuilder,java.lang.String)
CALLER: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.StringBuilder,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#toHex(byte,java.lang.Appendable)
CALLER: static org.eclipse.jetty.util.TypeUtil#parseInt(java.lang.String,int,int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(int)
CALLER: static org.eclipse.jetty.util.TypeUtil#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#<init>(int,float)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#newArray(int)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#setTable(org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry[])
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,int,java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorkerPool#<init>(java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<init>(java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<init>(java.util.concurrent.Executor,int,boolean)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#<init>()
	CALLEE: org.jboss.netty.channel.AbstractChannelSink#<init>()
CALLER: org.apache.log4j.config.PropertySetter#convertArg(java.lang.String,java.lang.Class)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.config.PropertySetter#class$(java.lang.String)
CALLER: static com.mchange.v2.cfg.ConfigUtils#vmResourcePaths(java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#vmResourcePathList(java.util.List)
CALLER: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#<clinit>()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>()
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>(java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.MultiPropertiesConfig#<init>()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#firstInit(java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#finishInit(java.util.List)
CALLER: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getPropsByResourcePaths()
	CALLEE: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getPropertiesByResourcePath(java.lang.String)
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>(java.lang.String[],java.util.Map,java.util.List)
	CALLEE: com.mchange.v2.cfg.MultiPropertiesConfig#<init>()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#finishInit(java.util.List)
CALLER: static com.mchange.v2.cfg.MConfig#readVmConfig(java.lang.String[],java.lang.String[])
	CALLEE: com.mchange.v2.cfg.MConfig.PathsKey#<init>(java.lang.String[],java.lang.String[])
CALLER: static com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#findConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getPropsFileConfigProperty(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractHardcodedC3P0Defaults()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractC3P0PropertiesResources()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#configFromFlatDefaults(java.util.HashMap)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractXmlConfigFromDefaultResource()
	CALLEE: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#insertDefaultsUnderNascentConfig(java.util.HashMap,com.mchange.v2.c3p0.cfg.C3P0Config)
	CALLEE: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#mbOverrideWarning(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractXmlConfigFromInputStream(java.io.InputStream)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#findAllC3P0SystemProperties()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractHardcodedC3P0Defaults()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractHardcodedC3P0Defaults(boolean)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractC3P0PropertiesResources()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#findAllOneLevelC3P0Properties()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#configFromFlatDefaults(java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.C3P0Config#<init>(com.mchange.v2.c3p0.cfg.NamedScope,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleNamedScopes()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleUserOverridesDefaultConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findPropStyleExtensionsDefaultConfig()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(com.mchange.v2.c3p0.cfg.NamedScope)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(java.util.Map)
CALLER: com.mchange.v2.util.DoubleWeakHashMap#keySet()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#cleanCleared()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.UserKeySet#<init>(com.mchange.v2.util.DoubleWeakHashMap)
CALLER: com.mchange.v2.util.DoubleWeakHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#cleanCleared()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#doPut(java.lang.Object,java.lang.Object)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#recreateDefaultConnectionTester()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#connectionTesterClassName()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#getUserOverridesAsString(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUserOverrides(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#createUserOverridesAsString(java.util.Map)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#poolsDestroy(boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#close(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#close(boolean)
CALLER: com.mchange.v2.encounter.GenericEncounterCounter#<init>(java.util.Map)
	CALLEE: com.mchange.v2.encounter.AbstractEncounterCounter#<init>(java.util.Map)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getObject(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#getUnspecifiedUserProperty(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractUserOverride(java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxAdministrativeTaskTime()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxAdministrativeTaskTime()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#createTaskRunner(int,int,java.util.Timer,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,java.util.Timer,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getStatementCacheNumDeferredCloseThreads()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#statementCacheNumDeferredCloseThreads()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePoolFactory#createNoEventSupportInstance(com.mchange.v2.async.AsynchronousRunner,java.util.Timer)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePoolFactory#createNoEventSupportInstance(com.mchange.v2.async.AsynchronousRunner,java.util.Timer,int)
CALLER: static com.mchange.v2.resourcepool.ResourcePoolFactory#<clinit>()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>()
CALLER: static com.mchange.v2.lang.VersionUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.lang.VersionUtils#extractVersionNumberArray(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.lang.ThrowableUtils#extractStackTrace(java.lang.Throwable)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintWriter)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintWriter)
CALLER: org.eclipse.jetty.util.DateCache#setTzFormatString(java.util.TimeZone)
	CALLEE: org.eclipse.jetty.util.DateCache#setMinFormatString()
CALLER: static org.eclipse.jetty.util.log.StdErrLog#getLoggingLevel(java.util.Properties,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#getLevelId(java.lang.String,java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.NioWorkerPool#<init>(java.util.concurrent.Executor,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorkerPool#<init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(java.util.concurrent.Executor,int,org.jboss.netty.channel.socket.nio.WorkerPool)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBossPool#<init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(org.jboss.netty.channel.socket.nio.BossPool,org.jboss.netty.channel.socket.nio.WorkerPool)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<init>(java.util.concurrent.Executor,int,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#init()
CALLER: static com.mchange.v2.cfg.ConfigUtils#vmResourcePathList(java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#readResourcePathsFromResourcePathsTextFiles(java.lang.String[],java.util.List)
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#<init>()
	CALLEE: com.mchange.v2.cfg.MultiPropertiesConfig#<init>()
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#firstInit(java.lang.String[],java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#configSource(java.lang.String)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#dumpToSysErr(java.util.List)
	CALLEE: com.mchange.v3.hocon.HoconPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig.SystemPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v2.cfg.BasicPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v2.cfg.PropertiesConfigSource.Parse#getDelayedLogItems()
	CALLEE: com.mchange.v2.cfg.PropertiesConfigSource.Parse#getProperties()
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#finishInit(java.util.List)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#dumpToSysErr(java.util.List)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#extractPrefixMapFromRsrcPathMap(java.lang.String[],java.util.Map,java.util.List)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#extractPropsByKey(java.lang.String[],java.util.Map,java.util.List)
CALLER: com.mchange.v2.cfg.CombinedMultiPropertiesConfig#getPropertiesByResourcePath(java.lang.String)
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#getPropertiesByResourcePath(java.lang.String)
CALLER: com.mchange.v2.cfg.MConfig.PathsKey#<init>(java.lang.String[],java.lang.String[])
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#vmCondensedPaths(java.lang.String[],java.lang.String[],java.util.List)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractXmlConfigFromDefaultResource()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractXmlConfigFromInputStream(java.io.InputStream)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#warnCommonXmlConfigResourceMisspellings()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.cfg.DefaultC3P0ConfigFinder#mbOverrideWarning(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractXmlConfigFromInputStream(java.io.InputStream)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractConfigFromXmlDoc(org.w3c.dom.Document)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#findAllC3P0SystemProperties()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#getKnownProperties(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractHardcodedC3P0Defaults(boolean)
	CALLEE: static com.mchange.v2.lang.Coerce#canCoerce(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#findAllOneLevelC3P0Properties()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#findAllOneLevelC3P0Properties()
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#warnOnUnknownProperties(java.util.Map)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#isKnownProperty(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: com.mchange.v2.util.DoubleWeakHashMap#doPut(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WKey#<init>(java.lang.Object,java.lang.ref.ReferenceQueue)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WVal#<init>(com.mchange.v2.util.DoubleWeakHashMap.WKey,java.lang.Object,java.lang.ref.ReferenceQueue)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#getUserOverrides(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MAIN()
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#createUserOverridesAsString(java.util.Map)
	CALLEE: static com.mchange.v2.ser.SerializableUtils#toByteArray(java.lang.Object)
	CALLEE: static com.mchange.lang.ByteUtils#toHexAscii(byte[])
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getObject(java.lang.String,java.lang.String)
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean,java.lang.String)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,java.util.Timer,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean,java.lang.String)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePoolFactory#createNoEventSupportInstance(com.mchange.v2.async.AsynchronousRunner,java.util.Timer,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,java.util.Timer,int,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer)
CALLER: static com.mchange.v2.lang.VersionUtils#extractVersionNumberArray(java.lang.String)
	CALLEE: static com.mchange.v2.lang.VersionUtils#extractVersionNumberArray(java.lang.String,java.lang.String[])
CALLER: org.jboss.netty.channel.socket.nio.NioWorkerPool#<init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#<init>(java.util.concurrent.Executor,int,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#init()
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioBossPool#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBossPool#<init>(java.util.concurrent.Executor,int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#<init>(java.util.concurrent.Executor,int,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#init()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#<init>(org.jboss.netty.channel.socket.nio.BossPool,org.jboss.netty.channel.socket.nio.WorkerPool)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#<init>()
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#log(java.lang.String,java.lang.Exception)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#init()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#waitForWorkerThreads()
CALLER: static com.mchange.v2.cfg.ConfigUtils#readResourcePathsFromResourcePathsTextFiles(java.lang.String[],java.util.List)
	CALLEE: static com.mchange.v2.cfg.ConfigUtils#readResourcePathsFromResourcePathsTextFile(java.lang.String,java.util.List)
CALLER: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#configSource(java.lang.String)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#isHoconPath(java.lang.String)
	CALLEE: com.mchange.v3.hocon.HoconPropertiesConfigSource#<init>()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig.SystemPropertiesConfigSource#<init>()
	CALLEE: com.mchange.v2.cfg.BasicPropertiesConfigSource#<init>()
CALLER: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#extractPrefixMapFromRsrcPathMap(java.lang.String[],java.util.Map,java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#findProps(java.lang.String,java.util.Map)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#extractPrefix(java.lang.String)
CALLER: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#extractPropsByKey(java.lang.String[],java.util.Map,java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: static com.mchange.v2.cfg.BasicMultiPropertiesConfig#findProps(java.lang.String,java.util.Map)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#warnCommonXmlConfigResourceMisspellings()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractConfigFromXmlDoc(org.w3c.dom.Document)
	CALLEE: com.mchange.v2.c3p0.cfg.C3P0Config#<init>(com.mchange.v2.c3p0.cfg.NamedScope,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>()
	CALLEE: static com.mchange.v1.xml.DomParseUtils#uniqueChild(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractNamedScopeFromLevel(org.w3c.dom.Element)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#immediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#item(int)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#getLength()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.lang.Coerce#canCoerce(java.lang.Object)
	CALLEE: static com.mchange.v2.lang.Coerce#canCoerce(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0Config#findAllOneLevelC3P0Properties()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0Config#MPCONFIG()
CALLER: static com.mchange.v2.ser.SerializableUtils#toByteArray(java.lang.Object)
	CALLEE: static com.mchange.v2.ser.SerializableUtils#serializeToByteArray(java.lang.Object)
CALLER: static com.mchange.lang.ByteUtils#toHexAscii(byte[])
	CALLEE: static com.mchange.lang.ByteUtils#addHexAscii(byte,java.io.StringWriter)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.DeadlockDetector#<init>(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#recreateThreadsAndTasks()
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,java.util.Timer,int,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer,int)
CALLER: static com.mchange.v2.lang.VersionUtils#extractVersionNumberArray(java.lang.String,java.lang.String[])
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#<init>(java.util.concurrent.Executor,int,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#init()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#init()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBossPool#newBoss(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#waitForBossThreads()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#<init>()
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#log(java.lang.String,java.lang.Exception)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#newWorker(java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.NioWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorkerPool#newWorker(java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#waitForWorkerThreads()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
CALLER: static com.mchange.v2.cfg.ConfigUtils#readResourcePathsFromResourcePathsTextFile(java.lang.String,java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
CALLER: static com.mchange.v1.xml.DomParseUtils#uniqueChild(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#uniqueChildByTagName(org.w3c.dom.Element,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractNamedScopeFromLevel(org.w3c.dom.Element)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>(java.util.HashMap,java.util.HashMap,java.util.HashMap)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#immediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractPropertiesFromLevel(org.w3c.dom.Element)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractExtensionsFromLevel(org.w3c.dom.Element)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#item(int)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#getLength()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v1.xml.DomParseUtils#immediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#getImmediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
CALLER: static com.mchange.v2.ser.SerializableUtils#serializeToByteArray(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.lang.ByteUtils#addHexAscii(byte,java.io.StringWriter)
	CALLEE: static com.mchange.lang.ByteUtils#toUnsigned(byte)
	CALLEE: static com.mchange.lang.ByteUtils#toHexDigit(int)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#recreateThreadsAndTasks()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#ensureReplacedThreadsProcessing()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#<init>(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int,boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#gentleStop()
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer,int)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolFactory#<init>()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBossPool#newBoss(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBossPool#newBoss(java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#waitForBossThreads()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#<init>(java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.NioWorkerPool#newWorker(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorker#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: static com.mchange.v1.xml.DomParseUtils#uniqueChildByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v1.util.DebugUtils#myAssert(boolean,java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractPropertiesFromLevel(org.w3c.dom.Element)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#immediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#allTextFromElement(org.w3c.dom.Element,boolean)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#item(int)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#getLength()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractExtensionsFromLevel(org.w3c.dom.Element)
	CALLEE: static com.mchange.v1.xml.DomParseUtils#immediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigXmlUtils#extractPropertiesFromLevel(org.w3c.dom.Element)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#item(int)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#getLength()
CALLER: static com.mchange.v1.xml.DomParseUtils#getImmediateChildElementsByTagName(org.w3c.dom.Element,java.lang.String)
	CALLEE: com.mchange.v1.xml.DomParseUtils.1#<init>(java.util.List)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#ensureReplacedThreadsProcessing()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.ReplacedThreadInterruptor#<init>(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBossPool#newBoss(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioSelector#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#<init>(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#<init>(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#<init>()
CALLER: org.jboss.netty.channel.socket.nio.NioWorker#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: static com.mchange.v1.util.DebugUtils#myAssert(boolean,java.lang.String)
	CALLEE: com.mchange.util.AssertException#<init>(java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#<init>(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#<init>()
CALLER: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#<init>(int,int)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#<init>()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#openSelector(org.jboss.netty.util.ThreadNameDeterminer)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#<init>(java.util.concurrent.Executor,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: static org.jboss.netty.channel.socket.nio.SocketSendBufferPool#<clinit>()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#<init>()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#<init>()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.Preallocation#<init>(int)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#openSelector(org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: static org.jboss.netty.channel.socket.nio.SelectorUtil#open()
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: static org.jboss.netty.util.internal.DeadLockProofWorker#start(java.util.concurrent.Executor,java.lang.Runnable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.util.ThreadRenamingRunnable#<init>(java.lang.Runnable,java.lang.String,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#newThreadRenamingRunnable(int,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.util.ThreadRenamingRunnable#<init>(java.lang.Runnable,java.lang.String,org.jboss.netty.util.ThreadNameDeterminer)
CALLER: static org.jboss.netty.util.internal.DeadLockProofWorker#start(java.util.concurrent.Executor,java.lang.Runnable)
	CALLEE: org.jboss.netty.util.internal.DeadLockProofWorker.1#<init>(java.util.concurrent.Executor,java.lang.Runnable)
CALLER: static org.jboss.netty.util.ThreadRenamingRunnable#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.jboss.netty.util.ThreadNameDeterminer#<clinit>()
	CALLEE: org.jboss.netty.util.ThreadNameDeterminer.1#<init>()
	CALLEE: org.jboss.netty.util.ThreadNameDeterminer.2#<init>()
CALLER: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#getList(java.lang.Object)
CALLER: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getHost()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getLocalPort()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getPort()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#release()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.resource.JarResource#release()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getUseCaches()
CALLER: org.eclipse.jetty.util.resource.JarResource#release()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#release()
CALLER: org.traccar.Main.1#run()
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.Context#getServerManager()
	CALLEE: static org.traccar.Context#getWebServer()
	CALLEE: org.traccar.http.WebServer#stop()
	CALLEE: org.traccar.ServerManager#stop()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager.1ContextClassLoaderPoolsInitThread#run()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#access$100(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager,boolean)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#run()
	CALLEE: org.jboss.netty.util.internal.DeadLockProofWorker.1#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#run()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.3#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.4#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AsyncTestIdleResourceTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1RefurbishCheckinResourceTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.1StmtAcquireTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager.1UncheckedStatementCloseTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.2#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#setMaxIndividualTaskTimeEnforcer()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#cancelMaxIndividualTaskTimeEnforcer()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#purgeTimer()
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$000(com.mchange.v2.async.ThreadPoolAsynchronousRunner,com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#run()
CALLER: com.mchange.v3.hocon.HoconPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v3.hocon.HoconPropertiesConfigSource#propertiesFromSource(java.lang.ClassLoader,java.lang.String)
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig.SystemPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v2.cfg.PropertiesConfigSource.Parse#<init>(java.util.Properties,java.util.List)
CALLER: com.mchange.v2.cfg.BasicPropertiesConfigSource#propertiesFromSource(java.lang.String)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.cfg.PropertiesConfigSource.Parse#<init>(java.util.Properties,java.util.List)
CALLER: com.mchange.v2.util.DoubleWeakHashMap.UserKeySet#contains(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#containsKey(java.lang.Object)
CALLER: com.mchange.v2.encounter.EncounterUtils.1#encounter(java.lang.Object)
	CALLEE: com.mchange.v2.encounter.AbstractEncounterCounter#encounter(java.lang.Object)
CALLER: com.mchange.v2.coalesce.AbstractWeakCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#put(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.coalesce.AbstractStrongCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdHashMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdHashMap#put(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.coalesce.SyncedCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#coalesce(java.lang.Object)
CALLER: com.mchange.v2.cfg.BasicMultiPropertiesConfig#toString()
	CALLEE: com.mchange.v2.cfg.BasicMultiPropertiesConfig#dump()
CALLER: org.eclipse.jetty.util.log.AbstractLogger#getLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.AbstractLogger#isBlank(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#getName()
	CALLEE: static org.eclipse.jetty.util.log.Log#getRootLogger()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLoggers()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#newLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#getMutableLoggers()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPool()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPool(com.mchange.v2.c3p0.impl.DbAuth)
CALLER: com.mchange.v2.log.MLog#getMLogger(java.lang.Class)
	CALLEE: com.mchange.v2.log.FallbackMLog#getMLogger(java.lang.String)
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int,org.apache.log4j.spi.LoggingEvent)
CALLER: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
CALLER: org.eclipse.jetty.http.HttpBuffersImpl#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#getMaxBuffers()
	CALLEE: static org.eclipse.jetty.io.BuffersFactory#newBuffers(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#setJdbcUrl(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#setJdbcUrl(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#clearDriver()
CALLER: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServlets()
	CALLEE: static org.eclipse.jetty.util.LazyList#addToArray(java.lang.Object[],java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServlets(org.eclipse.jetty.servlet.ServletHolder[])
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#setServletName(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#setPathSpec(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])
CALLER: org.eclipse.jetty.server.Server#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.io.View.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#remove(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#add(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#equals(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.StrongIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#equals(java.lang.Object)
CALLER: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.Container#remove(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.Container#add(java.lang.Object,java.lang.Object,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.lang.Object,java.lang.Class)
CALLER: org.traccar.helper.Log.1#newInstance(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#<init>(org.traccar.helper.Log.1)
CALLER: org.jboss.netty.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#<init>(java.util.logging.Logger,java.lang.String)
CALLER: org.apache.log4j.helpers.PatternParser#parse()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#addToList(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#reset()
	CALLEE: org.apache.log4j.helpers.PatternParser#finalizeConverter(char)
CALLER: org.traccar.database.DataManager#getPermissions()
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.model.Permission#<init>()
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(org.traccar.model.Factory)
CALLER: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.Category#setResourceBundle(java.util.ResourceBundle)
	CALLEE: org.apache.log4j.Hierarchy#shutdown()
	CALLEE: org.apache.log4j.Hierarchy#getCurrentLoggers()
	CALLEE: org.apache.log4j.or.RendererMap#clear()
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setAdditivity(boolean)
CALLER: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.Category#setHierarchy(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.CategoryKey#<init>(java.lang.String)
	CALLEE: org.apache.log4j.DefaultCategoryFactory#makeNewLoggerInstance(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#updateParents(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.Hierarchy#updateChildren(org.apache.log4j.ProvisionNode,org.apache.log4j.Logger)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.Hierarchy#setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
	CALLEE: org.apache.log4j.or.RendererMap#put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
CALLER: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
CALLER: org.traccar.http.WebServer#start()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
CALLER: org.traccar.ServerManager#start()
	CALLEE: org.traccar.TrackerServer#start()
CALLER: org.traccar.database.NamedParameterStatement.Params#setString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setType(java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setValue(java.lang.String,java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#setLong(java.lang.String,java.lang.Long)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setType(java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setValue(java.lang.String,java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#setTimestamp(java.lang.String,java.util.Date)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setType(java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setValue(java.lang.String,java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#setDouble(java.lang.String,java.lang.Double)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setType(java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setValue(java.lang.String,java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#setBoolean(java.lang.String,java.lang.Boolean)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setType(java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setValue(java.lang.String,java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#executeUpdate(org.traccar.database.NamedParameterStatement.ResultSetProcessor)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getConnection()
	CALLEE: static org.traccar.database.NamedParameterStatement#access$000(org.traccar.database.NamedParameterStatement)
	CALLEE: static org.traccar.database.NamedParameterStatement#access$100(org.traccar.database.NamedParameterStatement)
	CALLEE: static org.traccar.database.NamedParameterStatement#access$200(org.traccar.database.NamedParameterStatement)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setParams(java.sql.PreparedStatement)
	CALLEE: org.traccar.database.DataManager.2#processNextRow(java.sql.ResultSet)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#closeQuietly(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String,int)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeUpdate()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#getGeneratedKeys()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
CALLER: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString(boolean)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
CALLER: com.mchange.v2.util.DoubleWeakHashMap.WKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#equals(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.StrongIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#hashCode()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
CALLER: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#hashCode()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
CALLER: com.mchange.v2.cfg.DelayedLogItem#equals(java.lang.Object)
	CALLEE: static com.mchange.v2.lang.ObjectUtils#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.cfg.DelayedLogItem#hashCode()
	CALLEE: static com.mchange.v2.lang.ObjectUtils#hashOrZero(java.lang.Object)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#close(boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#gentleStop()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getVirtualHosts()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getContextPath()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getBaseResource()
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#toString()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#toString()
CALLER: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#setDriverClass(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.cfg.NamedScope#mergedOver(com.mchange.v2.c3p0.cfg.NamedScope)
	CALLEE: static com.mchange.v2.c3p0.cfg.NamedScope#mergeUserNamesToOverrides(java.util.HashMap,java.util.HashMap)
	CALLEE: static com.mchange.v2.c3p0.cfg.NamedScope#mergeExtensions(java.util.HashMap,java.util.HashMap)
	CALLEE: com.mchange.v2.c3p0.cfg.NamedScope#<init>(java.util.HashMap,java.util.HashMap,java.util.HashMap)
CALLER: com.mchange.v2.log.MLevel#toString()
	CALLEE: com.mchange.v2.log.MLevel#getLineHeader()
CALLER: static org.eclipse.jetty.util.LazyList#getList(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#getList(java.lang.Object,boolean)
CALLER: org.traccar.http.WebServer#stop()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
CALLER: org.traccar.ServerManager#stop()
	CALLEE: org.traccar.TrackerServer#stop()
	CALLEE: static org.traccar.GlobalChannelFactory#release()
	CALLEE: static org.traccar.GlobalTimer#release()
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#access$100(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager,boolean)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#maybePrivilegedPoolsInit(boolean)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#setMaxIndividualTaskTimeEnforcer()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.MaxIndividualTaskTimeEnforcer#<init>(com.mchange.v2.async.ThreadPoolAsynchronousRunner,com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#purgeTimer()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$000(com.mchange.v2.async.ThreadPoolAsynchronousRunner,com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#shuttingDown(com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread)
CALLER: com.mchange.v3.hocon.HoconPropertiesConfigSource#propertiesFromSource(java.lang.ClassLoader,java.lang.String)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
	CALLEE: com.mchange.v2.cfg.PropertiesConfigSource.Parse#<init>(java.util.Properties,java.util.List)
	CALLEE: static com.mchange.v3.hocon.HoconPropertiesConfigSource#extractConfig(java.lang.ClassLoader,java.lang.String,java.util.List)
	CALLEE: static com.mchange.v3.hocon.HoconUtils#configToProperties(com.typesafe.config.Config)
CALLER: com.mchange.v2.util.DoubleWeakHashMap#containsKey(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap#cleanCleared()
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.CheckKeyHolder#set(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.CheckKeyHolder#clear()
CALLER: com.mchange.v2.encounter.AbstractEncounterCounter#encounter(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#put(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v1.identicator.IdWeakHashMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#cleanCleared()
CALLER: com.mchange.v1.identicator.IdWeakHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#cleanCleared()
	CALLEE: com.mchange.v1.identicator.IdMap#put(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v1.identicator.IdHashMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdMap#get(java.lang.Object)
CALLER: com.mchange.v1.identicator.IdHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdMap#put(java.lang.Object,java.lang.Object)
CALLER: static org.eclipse.jetty.util.log.Log#getRootLogger()
	CALLEE: static org.eclipse.jetty.util.log.Log#initialized()
CALLER: org.eclipse.jetty.util.log.StdErrLog#newLogger(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#setPrintLongNames(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#setSource(boolean)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPool(com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#createPooledConnectionPool(com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getMaskedUserString()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int,org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.View#peek(int,byte[],int,int)
CALLER: static org.eclipse.jetty.io.BuffersFactory#newBuffers(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int)
	CALLEE: org.eclipse.jetty.io.PooledBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int)
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type)
CALLER: org.eclipse.jetty.servlet.ServletHandler#setServlets(org.eclipse.jetty.servlet.ServletHolder[])
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateNameMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#invalidateChainsCache()
CALLER: org.eclipse.jetty.servlet.ServletHandler#setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#invalidateChainsCache()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.lang.Object,java.lang.Class)
CALLER: org.traccar.helper.Log.NettyInternalLogger#<init>(org.traccar.helper.Log.1)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#<init>()
CALLER: org.jboss.netty.logging.JdkLogger#<init>(java.util.logging.Logger,java.lang.String)
	CALLEE: org.jboss.netty.logging.AbstractInternalLogger#<init>()
CALLER: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>()
CALLER: org.apache.log4j.helpers.PatternParser#finalizeConverter(char)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#addConverter(org.apache.log4j.helpers.PatternConverter)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractPrecisionOption()
	CALLEE: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractOption()
	CALLEE: org.apache.log4j.helpers.ISO8601DateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.DateTimeDateFormat#<init>()
	CALLEE: static org.apache.log4j.helpers.PatternParser#class$(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.DatePatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.text.DateFormat)
	CALLEE: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.lang.String)
CALLER: org.traccar.database.QueryBuilder#executeQuery(org.traccar.model.Factory)
	CALLEE: org.traccar.database.QueryBuilder.6#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeQuery()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getMetaData()
	CALLEE: org.traccar.database.QueryBuilder.1#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.2#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.3#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.4#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.5#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.6#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.model.Permission#create()
	CALLEE: org.traccar.database.QueryBuilder.1#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.2#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.3#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.4#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.5#process(java.lang.Object,java.sql.ResultSet)
CALLER: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
CALLER: org.apache.log4j.Hierarchy#shutdown()
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.Hierarchy#getCurrentLoggers()
	CALLEE: org.apache.log4j.Category#closeNestedAppenders()
	CALLEE: org.apache.log4j.Category#removeAllAppenders()
CALLER: org.apache.log4j.DefaultCategoryFactory#makeNewLoggerInstance(java.lang.String)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
CALLER: org.apache.log4j.Hierarchy#updateParents(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.CategoryKey#<init>(java.lang.String)
	CALLEE: org.apache.log4j.ProvisionNode#<init>(org.apache.log4j.Logger)
CALLER: org.traccar.TrackerServer#start()
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#bind(java.net.SocketAddress)
	CALLEE: org.jboss.netty.bootstrap.ConnectionlessBootstrap#bind(java.net.SocketAddress)
	CALLEE: org.traccar.TrackerServer#getChannelGroup()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#add(java.lang.Object)
CALLER: org.traccar.database.NamedParameterStatement.Params#setParams(java.sql.PreparedStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setNull(int,int)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setLong(int,long)
	CALLEE: static org.traccar.database.NamedParameterStatement#access$300(org.traccar.database.NamedParameterStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setTimestamp(int,java.sql.Timestamp)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setString(int,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setDouble(int,double)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setInt(int,int)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setBoolean(int,boolean)
CALLER: org.traccar.database.DataManager.2#processNextRow(java.sql.ResultSet)
	CALLEE: org.traccar.database.DataManager.2#processNextRow(java.sql.ResultSet)
CALLER: org.traccar.database.NamedParameterStatement.Params#closeQuietly(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isHideStacks()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.View#array()
CALLER: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#toString()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#extraToStringInfo()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopping()
	CALLEE: org.eclipse.jetty.server.Server#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopped()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#doStop()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#doStop()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#doStop()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#doStop()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#doStop()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doStop()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#doStop()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doStop()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#doStop()
CALLER: org.traccar.TrackerServer#stop()
	CALLEE: org.traccar.TrackerServer#getChannelGroup()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#close()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#awaitUninterruptibly()
CALLER: static org.traccar.GlobalChannelFactory#release()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#releaseExternalResources()
CALLER: static org.traccar.GlobalTimer#release()
	CALLEE: org.jboss.netty.util.HashedWheelTimer#stop()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.DeadlockDetector#run()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#close(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$100(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$200(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$300(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$400(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#<init>(int,long)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#postRunnable(java.lang.Runnable)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.ReplacedThreadInterruptor#run()
	CALLEE: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$500(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#shuttingDown(com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#<init>(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int,boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#getIndex()
CALLER: static com.mchange.v3.hocon.HoconPropertiesConfigSource#extractConfig(java.lang.ClassLoader,java.lang.String,java.util.List)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#<init>(com.mchange.v2.cfg.DelayedLogItem.Level,java.lang.String)
CALLER: static com.mchange.v3.hocon.HoconUtils#configToProperties(com.typesafe.config.Config)
	CALLEE: com.mchange.v3.hocon.HoconUtils.PropertiesConversion#<init>()
CALLER: com.mchange.v1.identicator.IdMap#get(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#createIdKey(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdHashMap#createIdKey(java.lang.Object)
CALLER: com.mchange.v1.identicator.IdWeakHashMap#cleanCleared()
	CALLEE: com.mchange.v1.identicator.IdMap#removeIdHashKey(com.mchange.v1.identicator.IdHashKey)
CALLER: com.mchange.v1.identicator.IdMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdWeakHashMap#createIdKey(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdHashMap#createIdKey(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#createPooledConnectionPool(com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getDebugUnreturnedConnectionStackTraces(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getTestConnectionOnCheckout(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getTestConnectionOnCheckin(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxStatements(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxStatementsPerConnection(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionTester(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionCustomizer(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#<init>(javax.sql.ConnectionPoolDataSource,com.mchange.v2.c3p0.impl.DbAuth,int,int,int,int,int,int,boolean,int,int,int,int,int,int,int,boolean,boolean,boolean,int,int,com.mchange.v2.c3p0.ConnectionTester,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String,com.mchange.v2.resourcepool.ResourcePoolFactory,com.mchange.v2.async.ThreadPoolAsynchronousRunner,com.mchange.v2.async.ThreadPoolAsynchronousRunner,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#logp(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getUser()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAutomaticTestTable(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#initializeAutomaticTestTable(java.lang.String,com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPreferredTestQuery(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#ensureFirstConnectionAcquisition(com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMinPoolSize(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxPoolSize(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInitialPoolSize(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireIncrement(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireRetryAttempts(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireRetryDelay(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBreakAfterAcquireFailure(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getCheckoutTimeout(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getIdleConnectionTestPeriod(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxIdleTime(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxIdleTimeExcessConnections(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxConnectionAge(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPropertyCycle(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getUnreturnedConnectionTimeout(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.DbAuth#getMaskedUserString()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getMaskedUserString(int,int)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
CALLER: org.eclipse.jetty.io.PooledBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type)
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#<init>(org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type,int,org.eclipse.jetty.io.Buffers.Type)
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers.1#<init>(org.eclipse.jetty.io.ThreadLocalBuffers)
CALLER: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.MultiMap#<init>()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap#<init>()
	CALLEE: org.eclipse.jetty.http.PathMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#initialize()
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.lang.Object,java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
	CALLEE: static org.eclipse.jetty.util.LazyList#addArray(java.lang.Object,java.lang.Object[])
CALLER: org.traccar.helper.Log.NettyInternalLogger#<init>()
	CALLEE: org.jboss.netty.logging.AbstractInternalLogger#<init>()
CALLER: org.apache.log4j.helpers.PatternParser#extractPrecisionOption()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractOption()
CALLER: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
CALLER: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
CALLER: org.apache.log4j.helpers.ISO8601DateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
CALLER: org.apache.log4j.helpers.DateTimeDateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
CALLER: org.apache.log4j.helpers.PatternParser.DatePatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.text.DateFormat)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser#addConverter(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.PatternParser#addToList(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#reset()
CALLER: org.traccar.model.Permission#create()
	CALLEE: org.traccar.model.Permission#create()
CALLER: org.apache.log4j.Category#closeNestedAppenders()
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
	CALLEE: org.apache.log4j.Category#getAllAppenders()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#nextElement()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#hasMoreElements()
CALLER: org.apache.log4j.Category#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#fireRemoveAppenderEvent(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#getAllAppenders()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#removeAllAppenders()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource.1#vetoableChange(java.beans.PropertyChangeEvent)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getNestedDataSource()
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.1#vetoableChange(java.beans.PropertyChangeEvent)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#access$000(com.mchange.v2.c3p0.WrapperConnectionPoolDataSource,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: org.jboss.netty.bootstrap.ServerBootstrap#bind(java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#bindAsync(java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getCause()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#awaitUninterruptibly()
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
CALLER: org.jboss.netty.bootstrap.ConnectionlessBootstrap#bind(java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#awaitUninterruptibly()
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getPipelineFactory()
	CALLEE: org.jboss.netty.channel.ChannelPipelineException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getFactory()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getOptions()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getCause()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.BasePipelineFactory#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.1#getPipeline()
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.AbstractChannel#bind(java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setOptions(java.util.Map)
CALLER: org.traccar.database.DataManager.2#processNextRow(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(int)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable)
	CALLEE: com.mchange.v2.util.ResourceClosedException#getCause()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopping()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.Server#doStop()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.Server#isDumpBeforeStop()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#close()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.server.Server#getStopAtShutdown()
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#deregister(org.eclipse.jetty.util.component.LifeCycle)
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopped()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#releasePools()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#releasePool()
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$100(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getMultiLineStatusString(int)
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$200(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getStackTraces(int)
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$300(com.mchange.v2.async.ThreadPoolAsynchronousRunner,int)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getJvmStackTraces(int)
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$400(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#recreateThreadsAndTasks()
CALLER: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#<init>(int,long)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.DispatchThread#<init>(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#hasIdTimer()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.1#<init>(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.util.ResourceClosedException#<init>(java.lang.String)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#close(boolean)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#closeThreadResources()
CALLER: static com.mchange.v2.async.ThreadPoolAsynchronousRunner#access$500(com.mchange.v2.async.ThreadPoolAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#processReplacedThreads()
CALLER: com.mchange.v1.identicator.IdWeakHashMap#createIdKey(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey#<init>(java.lang.Object,com.mchange.v1.identicator.Identicator,java.lang.ref.ReferenceQueue)
CALLER: com.mchange.v1.identicator.IdHashMap#createIdKey(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.StrongIdHashKey#<init>(java.lang.Object,com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAutomaticTestTable(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#initializeAutomaticTestTable(java.lang.String,com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeQuery()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#getIdentifierQuoteString()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getUser()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getPassword()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.db.sql.ResultSetUtils#attemptClose(java.sql.ResultSet)
	CALLEE: static com.mchange.v1.db.sql.StatementUtils#attemptClose(java.sql.Statement)
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#getMetaData()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeUpdate()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPreferredTestQuery(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: static com.mchange.v2.lang.ObjectUtils#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#ensureFirstConnectionAcquisition(com.mchange.v2.c3p0.impl.DbAuth)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getUser()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getPassword()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMinPoolSize(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#minPoolSize()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxPoolSize(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxPoolSize()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInitialPoolSize(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#initialPoolSize()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireIncrement(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireIncrement()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireRetryAttempts(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireRetryAttempts()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getAcquireRetryDelay(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#acquireRetryDelay()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBreakAfterAcquireFailure(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#breakAfterAcquireFailure()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getCheckoutTimeout(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#checkoutTimeout()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getIdleConnectionTestPeriod(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#idleConnectionTestPeriod()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxIdleTime(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxIdleTime()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxIdleTimeExcessConnections(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxIdleTimeExcessConnections()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxConnectionAge(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxConnectionAge()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getPropertyCycle(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#propertyCycle()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getUnreturnedConnectionTimeout(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#unreturnedConnectionTimeout()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getDebugUnreturnedConnectionStackTraces(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#debugUnreturnedConnectionStackTraces()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getTestConnectionOnCheckout(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#testConnectionOnCheckout()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getTestConnectionOnCheckin(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#testConnectionOnCheckin()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getBoolean(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxStatements(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxStatements()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getMaxStatementsPerConnection(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0Defaults#maxStatementsPerConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getInt(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionTester(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#getConnectionTester(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionTesterClassName(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionCustomizer(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionCustomizerClassName(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#getConnectionCustomizer(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#<init>(javax.sql.ConnectionPoolDataSource,com.mchange.v2.c3p0.impl.DbAuth,int,int,int,int,int,int,boolean,int,int,int,int,int,int,int,boolean,boolean,boolean,int,int,com.mchange.v2.c3p0.ConnectionTester,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String,com.mchange.v2.resourcepool.ResourcePoolFactory,com.mchange.v2.async.ThreadPoolAsynchronousRunner,com.mchange.v2.async.ThreadPoolAsynchronousRunner,java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#createPool(com.mchange.v2.resourcepool.ResourcePool.Manager)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ThrowableHolderPool#<init>()
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int,int)
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,com.mchange.v2.c3p0.ConnectionTester,com.mchange.v2.c3p0.ConnectionCustomizer,com.mchange.v2.c3p0.impl.DbAuth,javax.sql.ConnectionPoolDataSource,java.lang.String,boolean,boolean,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setMin(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setMax(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setStart(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setIncrement(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setIdleResourceTestPeriod(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setResourceMaxIdleTime(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setExcessResourceMaxIdleTime(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setResourceMaxAge(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setExpirationEnforcementDelay(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setDestroyOverdueResourceTime(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setDebugStoreCheckoutStackTrace(boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setAcquisitionRetryAttempts(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setAcquisitionRetryDelay(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#setBreakOnAcquisitionFailure(boolean)
CALLER: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.http.PathMap#<init>()
	CALLEE: org.eclipse.jetty.util.StringMap#<init>()
CALLER: org.eclipse.jetty.http.PathMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.StringMap#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#<init>(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#setMapped(java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getKey()
CALLER: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.http.PathMap#match(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.lang.Object,java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.lang.Object,java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.lang.Object,java.lang.Class)
CALLER: static org.eclipse.jetty.util.LazyList#addArray(java.lang.Object,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.traccar.model.Permission#create()
	CALLEE: org.traccar.model.Permission#<init>()
CALLER: org.apache.log4j.Category#getAllAppenders()
	CALLEE: static org.apache.log4j.helpers.NullEnumeration#getInstance()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#getAllAppenders()
CALLER: org.apache.log4j.Category#fireRemoveAppenderEvent(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.Hierarchy#fireRemoveAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
CALLER: static com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#access$000(com.mchange.v2.c3p0.WrapperConnectionPoolDataSource,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#recreateConnectionTester(java.lang.String)
CALLER: org.jboss.netty.bootstrap.ServerBootstrap#bindAsync(java.net.SocketAddress)
	CALLEE: static org.jboss.netty.channel.Channels#pipeline()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getFactory()
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder#<init>(org.jboss.netty.bootstrap.ServerBootstrap,java.net.SocketAddress)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap#getParentHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#<init>(org.jboss.netty.channel.Channel,boolean)
	CALLEE: static org.jboss.netty.bootstrap.ServerBootstrap.Binder#access$000(org.jboss.netty.bootstrap.ServerBootstrap.Binder)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.1#<init>(org.jboss.netty.bootstrap.ServerBootstrap,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.jboss.netty.channel.ChannelPipelineException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#close()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#removeBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
CALLER: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#deregister(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#unhook()
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#<init>()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#shutdown()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorker#shutdown()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#releasePools()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#releaseExternalResources()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#releasePool()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#releaseExternalResources()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getMultiLineStatusString(int)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#getCurrentTask()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.io.IndentedWriter#<init>(java.io.Writer)
	CALLEE: com.mchange.v2.io.IndentedWriter#upIndent()
	CALLEE: com.mchange.v2.io.IndentedWriter#print(java.lang.String)
	CALLEE: com.mchange.v2.io.IndentedWriter#print(java.lang.Object)
	CALLEE: com.mchange.v2.io.IndentedWriter#println(java.lang.String)
	CALLEE: com.mchange.v2.io.IndentedWriter#println(int)
	CALLEE: com.mchange.v2.io.IndentedWriter#println(java.lang.Object)
	CALLEE: com.mchange.v2.io.IndentedWriter#downIndent()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getStackTraces(int)
	CALLEE: com.mchange.v2.io.IndentedWriter#<init>(java.io.Writer)
	CALLEE: com.mchange.v2.io.IndentedWriter#upIndent()
	CALLEE: com.mchange.v2.io.IndentedWriter#downIndent()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#printStackTraces(com.mchange.v2.io.IndentedWriter,java.lang.Object,java.lang.Object[])
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#getJvmStackTraces(int)
	CALLEE: com.mchange.v2.io.IndentedWriter#<init>(java.io.Writer)
	CALLEE: com.mchange.v2.io.IndentedWriter#upIndent()
	CALLEE: com.mchange.v2.io.IndentedWriter#downIndent()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#printStackTraces(com.mchange.v2.io.IndentedWriter,java.lang.Object,java.lang.Object[])
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#processReplacedThreads()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#stopReplacedThreadsProcessing()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#getCurrentTask()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: com.mchange.v1.identicator.WeakIdHashKey#<init>(java.lang.Object,com.mchange.v1.identicator.Identicator,java.lang.ref.ReferenceQueue)
	CALLEE: com.mchange.v1.identicator.IdHashKey#<init>(com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey.Ref#<init>(com.mchange.v1.identicator.WeakIdHashKey,java.lang.Object,java.lang.ref.ReferenceQueue)
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#hash(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdentityHashCodeIdenticator#hash(java.lang.Object)
CALLER: com.mchange.v1.identicator.StrongIdHashKey#<init>(java.lang.Object,com.mchange.v1.identicator.Identicator)
	CALLEE: com.mchange.v1.identicator.IdHashKey#<init>(com.mchange.v1.identicator.Identicator)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
CALLER: static com.mchange.v1.db.sql.ResultSetUtils#attemptClose(java.sql.ResultSet)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
CALLER: static com.mchange.v1.db.sql.ResultSetUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v1.db.sql.StatementUtils#attemptClose(java.sql.Statement)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#close()
CALLER: static com.mchange.v1.db.sql.StatementUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#close()
CALLER: static com.mchange.v1.db.sql.ConnectionUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#<init>()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#<init>()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionTesterClassName(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getConnectionCustomizerClassName(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPoolManager#getString(java.lang.String,java.lang.String)
CALLER: static com.mchange.v2.c3p0.C3P0Registry#getConnectionCustomizer(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
CALLER: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner)
CALLER: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#createPool(com.mchange.v2.resourcepool.ResourcePool.Manager)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#createThreadResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#<init>(com.mchange.v2.resourcepool.ResourcePool.Manager,int,int,int,int,int,int,long,long,long,long,long,long,boolean,boolean,com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer,com.mchange.v2.resourcepool.BasicResourcePoolFactory)
CALLER: org.eclipse.jetty.http.PathMap#match(java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap#getMatch(java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getValue()
CALLER: static org.apache.log4j.helpers.NullEnumeration#<clinit>()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#<init>()
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#recreateConnectionTester(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.C3P0Registry#getDefaultConnectionTester()
CALLER: static org.jboss.netty.channel.SimpleChannelUpstreamHandler#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.String)
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.Binder#<init>(org.jboss.netty.bootstrap.ServerBootstrap,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#<init>(org.jboss.netty.channel.Channel,boolean)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#<init>()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#init(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#checkDuplicateName(java.lang.String)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#<init>(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: static org.jboss.netty.channel.DefaultChannelFuture#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandlers()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans()
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#doStop()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#shutdown()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#shutdown()
CALLER: org.jboss.netty.channel.socket.nio.NioWorker#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#shutdown()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#shutdown()
	CALLEE: static org.jboss.netty.util.internal.ExecutorUtil#shutdownNow(java.util.concurrent.Executor)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#releaseExternalResources()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#shutdown()
	CALLEE: static org.jboss.netty.util.internal.ExecutorUtil#shutdownNow(java.util.concurrent.Executor)
CALLER: com.mchange.v2.io.IndentedWriter#print(java.lang.String)
	CALLEE: com.mchange.v2.io.IndentedWriter#printIndent()
	CALLEE: com.mchange.v2.io.IndentedWriter#isEol(char)
CALLER: com.mchange.v2.io.IndentedWriter#print(java.lang.Object)
	CALLEE: com.mchange.v2.io.IndentedWriter#print(java.lang.String)
CALLER: com.mchange.v2.io.IndentedWriter#println(java.lang.String)
	CALLEE: com.mchange.v2.io.IndentedWriter#printIndent()
CALLER: com.mchange.v2.io.IndentedWriter#println(int)
	CALLEE: com.mchange.v2.io.IndentedWriter#println(java.lang.String)
CALLER: com.mchange.v2.io.IndentedWriter#println(java.lang.Object)
	CALLEE: com.mchange.v2.io.IndentedWriter#println(java.lang.String)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#printStackTraces(com.mchange.v2.io.IndentedWriter,java.lang.Object,java.lang.Object[])
	CALLEE: com.mchange.v2.io.IndentedWriter#upIndent()
	CALLEE: com.mchange.v2.io.IndentedWriter#println(java.lang.Object)
	CALLEE: com.mchange.v2.io.IndentedWriter#downIndent()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#stopReplacedThreadsProcessing()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
CALLER: com.mchange.v2.coalesce.CoalesceIdenticator#hash(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#coalesceHash(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey.1#coalesceHash(java.lang.Object)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getNestedDataSource()
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getConnection()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getUser()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isUsesTraditionalReflectiveProxies(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isAutoCommitOnClose(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isForceIgnoreUnresolvedTransactions(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPreferredTestQuery(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getNestedDataSource()
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isUsesTraditionalReflectiveProxies(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isAutoCommitOnClose(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isForceIgnoreUnresolvedTransactions(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPreferredTestQuery(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#getConnection(java.lang.String,java.lang.String)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#<init>(com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#createThreadResources()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#<init>(boolean,boolean)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.cfg.MConfig#readVmConfig()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#<init>(com.mchange.v2.resourcepool.ResourcePool.Manager,int,int,int,int,int,int,long,long,long,long,long,long,boolean,boolean,com.mchange.v2.async.AsynchronousRunner,com.mchange.v2.async.RunnableQueue,java.util.Timer,com.mchange.v2.resourcepool.BasicResourcePoolFactory)
	CALLEE: static com.mchange.v2.resourcepool.ResourcePoolUtils#convertThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEventSupport#<init>(com.mchange.v2.resourcepool.ResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureStartResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#mustEnforceExpiration()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#automaticExpirationEnforcementDelay()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.CullTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#minExpirationTime()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.CheckIdleResourcesTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: org.eclipse.jetty.http.PathMap#getMatch(java.lang.String)
	CALLEE: org.eclipse.jetty.util.StringMap#get(java.lang.String)
	CALLEE: org.eclipse.jetty.util.StringMap#getEntry(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#getValue()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#init(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#<init>(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.ChannelHandlerLifeCycleException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#callAfterAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.ChannelHandlerLifeCycleException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#remove(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#afterAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#afterAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#afterAdd(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getState()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans(java.lang.Class)
CALLER: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.2#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.CLDump#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String)
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#shutdown()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#isIoThread()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#error(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#error(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#coalesceHash(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#getConnection()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#ensureDriverLoaded()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#driver()
	CALLEE: org.traccar.helper.DriverDelegate#connect(java.lang.String,java.util.Properties)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getUser()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#findAuth(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getUser()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getNestedDataSource()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isUsesTraditionalReflectiveProxies(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#isUsesTraditionalReflectiveProxies()
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractBooleanOverride(java.lang.String,java.lang.String,java.util.Map)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnection#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnection#createProxyConstructor(java.lang.Class)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isAutoCommitOnClose(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractBooleanOverride(java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#isAutoCommitOnClose()
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#isForceIgnoreUnresolvedTransactions(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractBooleanOverride(java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#isForceIgnoreUnresolvedTransactions()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractC3P0PooledConnection#<init>()
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#<init>(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.util.StatementEventSupport#<init>(javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#supportsMethod(java.lang.Object,java.lang.String,java.lang.Class[])
CALLER: static com.mchange.v2.c3p0.impl.NewPooledConnection#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPreferredTestQuery(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractUserOverride(java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getPreferredTestQuery()
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.ConnectionTester,boolean,boolean,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractC3P0PooledConnection#<init>()
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#<init>(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.util.StatementEventSupport#<init>(javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#supportsMethod(java.lang.Object,java.lang.String,java.lang.Class[])
	CALLEE: static com.mchange.v2.c3p0.impl.NewPooledConnection#carefulCheckHoldability(java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.impl.NewPooledConnection#carefulCheckReadOnly(java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.impl.NewPooledConnection#carefulCheckTypeMap(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#getConnection(java.lang.String,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#ensureDriverLoaded()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#driver()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#overrideProps(java.lang.String,java.lang.String)
	CALLEE: org.traccar.helper.DriverDelegate#connect(java.lang.String,java.util.Properties)
CALLER: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
CALLER: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
CALLER: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#createConnectionStatementManager()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.SimpleConnectionStatementManager#<init>()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,com.mchange.v2.async.AsynchronousRunner)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean)
CALLER: static com.mchange.v2.async.CarefulRunnableQueue#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.async.CarefulRunnableQueue#<init>(boolean,boolean)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue.TaskThread#<init>(com.mchange.v2.async.CarefulRunnableQueue)
CALLER: static com.mchange.v2.cfg.MConfig#readVmConfig()
	CALLEE: static com.mchange.v2.cfg.MConfig#readVmConfig(java.lang.String[],java.lang.String[])
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#finalize()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#close()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#ensureStartResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#recheckResizePool()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#automaticExpirationEnforcementDelay()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#minExpirationTime()
CALLER: static com.mchange.v2.resourcepool.ResourcePoolUtils#convertThrowable(java.lang.Throwable)
	CALLEE: static com.mchange.v2.resourcepool.ResourcePoolUtils#convertThrowable(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: static com.mchange.v2.resourcepool.ResourcePoolUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#remove(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#removeFirst()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#removeLast()
CALLER: static org.eclipse.jetty.util.component.AggregateLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.AbstractLifeCycle#getState(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#ensureDriverLoaded()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#isDriverClassLoaded()
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setDriverClassLoaded(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#driver()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setDriverClassLoaded(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
CALLER: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractBooleanOverride(java.lang.String,java.lang.String,java.util.Map)
	CALLEE: static com.mchange.v2.c3p0.cfg.C3P0ConfigUtils#extractUserOverride(java.lang.String,java.lang.String,java.util.Map)
CALLER: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#supportsMethod(java.lang.Object,java.lang.String,java.lang.Class[])
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.c3p0.impl.NewPooledConnection#carefulCheckHoldability(java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.impl.NewPooledConnection#holdabilityBugKey(java.sql.Connection,java.lang.Error)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#<init>()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.SimpleConnectionStatementManager#<init>()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#<init>()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#<init>(int,boolean,int,int,int,java.util.Timer,boolean,java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#close()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#close(boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#recheckResizePool()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_recheckResizePool()
CALLER: static com.mchange.v2.resourcepool.ResourcePoolUtils#convertThrowable(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.ChannelHandlerLifeCycleException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.ChannelHandlerLifeCycleException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#afterRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#afterRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#afterRemove(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#removeFirst()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#removeLast()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callBeforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#callAfterRemove(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: static org.eclipse.jetty.util.component.AbstractLifeCycle#getState(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource#setDriverClassLoaded(boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#clearDriver()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#close(boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfManaged()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfUnused()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#addToFormerResources(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.5#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.String,java.util.Collection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#markBroken(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#_recheckResizePool()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#shrinkPool(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#expandPool(int)
CALLER: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#<init>(java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#shrinkPool(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#expandPool(int)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1600(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.util.ResourceClosedException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,int,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$600(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1600(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#incrementPendingRemoves()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,int,boolean)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$600(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$600(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#incrementPendingAcquires()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#incrementPendingRemoves()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#incrementPendingAcquires()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#doStop()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
CALLER: org.eclipse.jetty.webapp.WebAppContext#doStop()
	CALLEE: org.eclipse.jetty.webapp.MetaData#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.webapp.MetaData#clear()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setAvailable(boolean)
CALLER: org.eclipse.jetty.server.AbstractConnector#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#close()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#doStop()
CALLER: org.eclipse.jetty.io.nio.SelectorManager#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#stop()
CALLER: org.eclipse.jetty.server.Server#doStart()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.server.Server#getStopAtShutdown()
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#getInstance()
	CALLEE: static org.eclipse.jetty.http.HttpGenerator#setServerVersion(java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>()
	CALLEE: org.eclipse.jetty.server.Server#setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStart()
	CALLEE: org.eclipse.jetty.util.MultiException#size()
	CALLEE: org.eclipse.jetty.server.Server#isDumpAfterStart()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#start()
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#unhook()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#notifyListener(org.jboss.netty.channel.ChannelFutureListener)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close(boolean)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close(java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getCreateNewConnection()
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
CALLER: org.jboss.netty.channel.DefaultChannelFuture#awaitUninterruptibly()
	CALLEE: static org.jboss.netty.channel.DefaultChannelFuture#checkDeadLock()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#close()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#awaitUninterruptibly()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#size()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#values()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#<init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getId()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Values#iterator()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.ValueIterator#next()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#hasNext()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#add(java.lang.Object)
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#add(org.jboss.netty.channel.Channel)
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner.MaxIndividualTaskTimeEnforcer#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#getCurrentTask()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.1#run()
	CALLEE: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$000(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.CullTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1900(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1100(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.CheckIdleResourcesTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1100(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$2000(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: org.traccar.helper.Log.NettyInternalLogger#error(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#error(java.lang.String,java.lang.Throwable)
CALLER: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Category#warn(java.lang.Object)
CALLER: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#<init>()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.Hierarchy#fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.MLevel#intValue()
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#logp(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#logp(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.traccar.BasePipelineFactory#getPipeline()
	CALLEE: static org.jboss.netty.channel.Channels#pipeline()
	CALLEE: static org.traccar.Context#getReverseGeocoder()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: static org.traccar.GlobalTimer#getTimer()
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#<init>(org.jboss.netty.util.Timer,int,int,int)
	CALLEE: org.traccar.BasePipelineFactory.OpenChannelHandler#<init>(org.traccar.BasePipelineFactory,org.traccar.TrackerServer)
	CALLEE: static org.traccar.Context#isLoggerEnabled()
	CALLEE: org.traccar.BasePipelineFactory.StandardLoggingHandler#<init>(org.traccar.BasePipelineFactory)
	CALLEE: org.traccar.TrackerServer.1#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ReverseGeocoderHandler#<init>(org.traccar.geocode.ReverseGeocoder,boolean)
	CALLEE: org.traccar.TrackerEventHandler#<init>()
CALLER: org.jboss.netty.channel.Channels.1#getPipeline()
	CALLEE: static org.jboss.netty.channel.Channels#pipeline(org.jboss.netty.channel.ChannelPipeline)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1700(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1800(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1100(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$700(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$800(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$900(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1000(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#severe(java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1200(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask.1#<init>(com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1100(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$800(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$900(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1000(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#severe(java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1200(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#shouldTry(int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#goodAttemptNumber(int)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$1500(com.mchange.v2.resourcepool.BasicResourcePool)
CALLER: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintWriter)
	CALLEE: static com.mchange.v2.lang.VersionUtils#isAtLeastJavaVersion14()
CALLER: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
CALLER: org.eclipse.jetty.util.StringMap.Node#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString(java.lang.StringBuilder)
CALLER: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#toString()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#extraToStringInfo()
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#getHeaderSize()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#getBufferSize()
CALLER: org.apache.log4j.Category#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: org.apache.log4j.Category#info(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: org.jboss.netty.util.internal.DeadLockProofWorker.1#run()
	CALLEE: org.jboss.netty.util.ThreadRenamingRunnable#run()
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.DispatchThread#run()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#close(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#<init>(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner,java.lang.Runnable)
CALLER: com.mchange.v2.async.CarefulRunnableQueue.TaskThread#run()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#run()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.3#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.4#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AsyncTestIdleResourceTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1RefurbishCheckinResourceTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.1StmtAcquireTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager.1UncheckedStatementCloseTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.2#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#run()
	CALLEE: org.jboss.netty.util.internal.DeadLockProofWorker.1#run()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue.TaskThread#shouldStop()
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$000(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$100(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$200()
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$300(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#close(boolean)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$500(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$402(com.mchange.v2.async.CarefulRunnableQueue,java.util.List)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$502(com.mchange.v2.async.CarefulRunnableQueue,java.util.List)
	CALLEE: static com.mchange.v2.async.CarefulRunnableQueue#access$602(com.mchange.v2.async.CarefulRunnableQueue,com.mchange.v2.async.CarefulRunnableQueue.TaskThread)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.5#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$100(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,boolean)
CALLER: com.mchange.v2.c3p0.impl.DbAuth#hashCode()
	CALLEE: static com.mchange.v2.lang.ObjectUtils#hashOrZero(java.lang.Object)
CALLER: org.traccar.database.QueryBuilder.1#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.1#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.traccar.database.QueryBuilder.2#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.2#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.traccar.database.QueryBuilder.3#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.3#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.traccar.database.QueryBuilder.4#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.4#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.traccar.database.QueryBuilder.5#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.5#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.traccar.database.QueryBuilder.6#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.6#process(org.traccar.model.Factory,java.sql.ResultSet)
CALLER: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: static org.apache.log4j.CategoryKey#class$(java.lang.String)
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#destroy()
CALLER: com.mchange.v1.identicator.WeakIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#identical(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdentityHashCodeIdenticator#identical(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v1.identicator.StrongIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#identical(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdentityHashCodeIdenticator#identical(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v1.identicator.StrongIdHashKey#hashCode()
	CALLEE: com.mchange.v2.coalesce.CoalesceIdenticator#hash(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.IdentityHashCodeIdenticator#hash(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkoutPooledConnection()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkoutAndMarkConnectionInUse()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.util.DoubleWeakHashMap.CheckKeyHolder#equals(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.CheckKeyHolder#get()
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource.2#propertyChange(java.beans.PropertyChangeEvent)
	CALLEE: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#access$000(com.mchange.v2.c3p0.AbstractComboPooledDataSource)
CALLER: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.1#propertyChange(java.beans.PropertyChangeEvent)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#resetPoolManager(boolean)
CALLER: com.mchange.v2.c3p0.DriverManagerDataSource.1#propertyChange(java.beans.PropertyChangeEvent)
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#access$000(com.mchange.v2.c3p0.DriverManagerDataSource,boolean)
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#access$100(com.mchange.v2.c3p0.DriverManagerDataSource)
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#access$200(com.mchange.v2.c3p0.DriverManagerDataSource)
	CALLEE: static com.mchange.v2.c3p0.DriverManagerDataSource#access$302(com.mchange.v2.c3p0.DriverManagerDataSource,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandlers()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans()
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getClassLoader()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.CLDump#<init>(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeEntrySet()
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandlers()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans()
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.io.nio.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#close(boolean)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#close(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#close()
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
CALLER: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintWriter)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintWriter)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintWriter)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doStop()
CALLER: org.eclipse.jetty.webapp.WebAppContext#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getDisplayName()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setAvailable(boolean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#stop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#wakeup()
	CALLEE: org.eclipse.jetty.util.thread.Timeout#cancelAll()
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#hook()
CALLER: static org.eclipse.jetty.http.HttpGenerator#setServerVersion(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
CALLER: static org.eclipse.jetty.http.HttpGenerator#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int,byte[],int,int)
	CALLEE: static org.eclipse.jetty.http.HttpStatus#getCode(int)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.Status#<init>(org.eclipse.jetty.http.HttpGenerator.1)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
CALLER: static org.eclipse.jetty.http.AbstractGenerator#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.thread.QueuedThreadPool#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.3#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool)
CALLER: org.eclipse.jetty.server.Server#setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.Server#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Server#addBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
CALLER: org.eclipse.jetty.util.MultiException#size()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
CALLER: org.jboss.netty.channel.DefaultChannelFuture#notifyListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.2#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close(boolean)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#cleanupUncachedActiveStatements()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeAll()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#close(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close(java.lang.Throwable,boolean)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getCreateNewConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#ensureOkay()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#createProxyConnection()
CALLER: static com.mchange.v2.c3p0.impl.NewProxyConnection#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#<init>(java.sql.Connection,com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#<init>(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#updateConnectionStatus(int)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#fireConnectionErrorOccurred(java.sql.SQLException)
CALLER: static org.jboss.netty.channel.DefaultChannelFuture#checkDeadLock()
	CALLEE: static org.jboss.netty.channel.DefaultChannelFuture#isUseDeadLockChecker()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#size()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#size()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap#values()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Values#<init>(org.jboss.netty.util.internal.ConcurrentHashMap)
CALLER: static org.jboss.netty.channel.group.DefaultChannelGroupFuture#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture#<init>(org.jboss.netty.channel.group.ChannelGroup,java.util.Map)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture.1#<init>(org.jboss.netty.channel.group.DefaultChannelGroupFuture)
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#setDone()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#add(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#putIfAbsent(java.lang.Object,java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getCloseFuture()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getId()
CALLER: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$000(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#checkForDeadlock()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1900(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cullExpired()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1100(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$2000(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#checkIdleResources()
CALLER: org.traccar.helper.Log.NettyInternalLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#error(java.lang.Object)
	CALLEE: org.apache.log4j.Category#error(java.lang.Object)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioBossPool#nextBoss()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.Boss,org.jboss.netty.channel.socket.nio.WorkerPool)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannelFactory#newChannel(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#nextWorker()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#formatString(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static org.traccar.GlobalTimer#getTimer()
	CALLEE: org.jboss.netty.util.HashedWheelTimer#<init>()
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#<init>(org.jboss.netty.util.Timer,int,int,int)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#<init>(org.jboss.netty.util.Timer,long,long,long,java.util.concurrent.TimeUnit)
CALLER: static org.jboss.netty.channel.SimpleChannelHandler#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.String)
CALLER: org.traccar.BasePipelineFactory.OpenChannelHandler#<init>(org.traccar.BasePipelineFactory,org.traccar.TrackerServer)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#<init>()
CALLER: org.traccar.BasePipelineFactory.StandardLoggingHandler#<init>(org.traccar.BasePipelineFactory)
	CALLEE: org.jboss.netty.handler.logging.LoggingHandler#<init>()
CALLER: org.traccar.TrackerServer.1#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.78#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.79#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.80#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.81#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.82#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.83#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.84#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.85#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.86#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.87#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.88#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.89#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.90#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.91#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.92#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.93#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.1#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.2#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.3#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.4#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.5#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.6#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.7#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.8#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.9#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.10#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.11#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.12#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.13#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.14#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.15#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.16#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.17#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.18#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.19#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.20#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.21#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.22#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.23#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.24#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.25#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.26#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.27#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.28#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.29#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.30#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.31#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.32#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.33#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.34#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.35#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.36#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.37#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.38#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.39#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.40#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.41#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.42#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.43#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.44#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.45#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.46#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.47#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.48#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.49#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.50#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.51#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.52#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.53#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.54#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.55#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.56#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.57#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.58#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.59#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.60#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.61#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.62#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.63#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.64#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.65#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.66#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.67#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.68#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.69#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.70#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.71#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.72#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.73#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.74#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.75#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.76#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.traccar.ServerManager.77#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
CALLER: org.traccar.ReverseGeocoderHandler#<init>(org.traccar.geocode.ReverseGeocoder,boolean)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#<init>()
	CALLEE: org.traccar.geocode.AddressFormat#<init>()
CALLER: org.traccar.TrackerEventHandler#<init>()
	CALLEE: org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler#<init>()
CALLER: static org.jboss.netty.channel.Channels#pipeline(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: static org.jboss.netty.channel.Channels#pipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#toMap()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1700(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#synchronousRemoveArbitraryResource()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#recheckResizePool()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1800(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#decrementPendingRemoves()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$700(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#isForceKillAcquiresPending()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$800(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$900(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#decrementPendingAcquires()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1000(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#setLastAcquisitionFailure(java.lang.Throwable)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#severe(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#format(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1200(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#forceKillAcquires()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#shouldTry(int)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$700(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#goodAttemptNumber(int)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$1500(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doAcquireAndDecrementPendingAcquiresWithinLockAlways()
CALLER: org.eclipse.jetty.util.StringMap.Node#toString(java.lang.StringBuilder)
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString(java.lang.StringBuilder)
CALLER: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.LoggingEvent#<init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.NOPLogger#callAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Category#callAppenders(org.apache.log4j.spi.LoggingEvent)
CALLER: org.jboss.netty.util.ThreadRenamingRunnable#run()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.util.ThreadRenamingRunnable#getNewThreadName(java.lang.String)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#run()
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#run()
CALLER: static com.mchange.v2.async.CarefulRunnableQueue#access$000(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#awaitTask()
CALLER: static com.mchange.v2.async.CarefulRunnableQueue#access$100(com.mchange.v2.async.CarefulRunnableQueue)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#dequeueRunnable()
CALLER: com.mchange.v2.async.CarefulRunnableQueue#close(boolean)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue.TaskThread#safeStop()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$100(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean)
CALLER: org.traccar.database.QueryBuilder.1#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getBoolean(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.2#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getInt(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.3#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.4#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getDouble(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.5#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getString(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.6#process(org.traccar.model.Factory,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getTimestamp(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
CALLER: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrowRuntime()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
CALLER: com.mchange.v2.coalesce.CoalesceIdenticator#identical(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#checkCoalesce(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey.1#checkCoalesce(java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkoutAndMarkConnectionInUse()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#checkoutResource(long)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#tryMarkPhysicalConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#checkinResource(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
CALLER: static com.mchange.v2.c3p0.AbstractComboPooledDataSource#access$000(com.mchange.v2.c3p0.AbstractComboPooledDataSource)
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#updateLocalVarsFromCpdsProp()
CALLER: static com.mchange.v2.c3p0.DriverManagerDataSource#access$000(com.mchange.v2.c3p0.DriverManagerDataSource,boolean)
	CALLEE: com.mchange.v2.c3p0.DriverManagerDataSource#setDriverClassLoaded(boolean)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#close()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#isClosed()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#synchronousDestroyStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#close()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#close()
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getState()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#doStop()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
	CALLEE: javax.servlet.ServletContextEvent#<init>(javax.servlet.ServletContext)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#clearAttributes()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#wakeup()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet.2#<init>(org.eclipse.jetty.io.nio.SelectorManager.SelectSet)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#renewSelector()
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#hook()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.server.ShutdownMonitor.Holder#<clinit>()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#<init>(org.eclipse.jetty.server.ShutdownMonitor.1)
CALLER: static org.eclipse.jetty.http.HttpVersions#<clinit>()
	CALLEE: org.eclipse.jetty.io.BufferCache#<init>()
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
CALLER: static org.eclipse.jetty.http.HttpStatus#<clinit>()
	CALLEE: static org.eclipse.jetty.http.HttpStatus.Code#values()
	CALLEE: static org.eclipse.jetty.http.HttpStatus.Code#access$000(org.eclipse.jetty.http.HttpStatus.Code)
CALLER: org.eclipse.jetty.http.HttpGenerator.Status#<init>(org.eclipse.jetty.http.HttpGenerator.1)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.Status#<init>()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
CALLER: org.eclipse.jetty.server.Server#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#removeBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.Server#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.Container#addBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#doStart()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getCause()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
CALLER: static org.jboss.netty.channel.ChannelFutureListener#<clinit>()
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.1#<init>()
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.2#<init>()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#cleanupUncachedActiveStatements()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeAndRemoveResourcesInSet(java.util.Set,java.lang.reflect.Method)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeAll()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#closeAll(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#close(java.lang.Throwable,boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupResultSets(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupUncachedStatements(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#closeAllCachedStatements()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#resetTxnState(java.sql.Connection,boolean,boolean,boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.NewPooledConnection#logCloseExceptions(java.lang.Throwable,java.util.Collection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#createProxyConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection.ProxyConnectionInvocationHandler#<init>(com.mchange.v2.c3p0.impl.C3P0PooledConnection)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#<init>(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection.1#<init>(com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#__setInner(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#fireConnectionErrorOccurred(java.sql.SQLException)
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#fireConnectionErrorOccurred(java.sql.SQLException)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture#setDone()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#notifyListeners()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap#putIfAbsent(java.lang.Object,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap#hashOf(java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#segmentFor(int)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#put(java.lang.Object,int,java.lang.Object,boolean)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#checkForDeadlock()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#acknowledgeComplete(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#getTask()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#cullExpired()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfManaged()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfUnused()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#shouldExpire(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#close(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#checkIdleResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfUnused()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AsyncTestIdleResourceTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
CALLER: org.apache.log4j.Category#error(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: static org.jboss.netty.channel.socket.nio.NioServerSocketChannel#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.jboss.netty.channel.AbstractChannel#<clinit>()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#<init>()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.Boss,org.jboss.netty.channel.socket.nio.WorkerPool)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)
	CALLEE: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#<init>(java.net.ServerSocket)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelOpen(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#nextWorker()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#nextWorker()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.InternetProtocolFamily)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelOpen(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioDatagramChannel#openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.AbstractNioWorker,java.nio.channels.SelectableChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#<init>(java.nio.channels.DatagramChannel)
CALLER: com.mchange.v2.log.FallbackMLog.FallbackMLogger#formatString(com.mchange.v2.log.MLevel,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: static com.mchange.lang.ThrowableUtils#extractStackTrace(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.MLevel#getLineHeader()
CALLER: static org.jboss.netty.util.HashedWheelTimer#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: org.jboss.netty.util.internal.SharedResourceMisuseDetector#<init>(java.lang.Class)
CALLER: org.jboss.netty.util.HashedWheelTimer#<init>()
	CALLEE: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#<init>(org.jboss.netty.util.Timer,long,long,long,java.util.concurrent.TimeUnit)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#<init>()
CALLER: static org.jboss.netty.logging.InternalLogLevel#<clinit>()
	CALLEE: org.jboss.netty.logging.InternalLogLevel#<init>(java.lang.String,int)
CALLER: org.jboss.netty.handler.logging.LoggingHandler#<init>()
	CALLEE: org.jboss.netty.handler.logging.LoggingHandler#<init>(boolean)
CALLER: org.traccar.ServerManager.87#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.XirgoProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.88#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.CalAmpProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.89#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.MtxProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.90#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.TytanProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.91#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.Avl301ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.92#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.CastelProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.93#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.Gps103ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.1#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: static org.traccar.ServerManager#access$000(org.traccar.ServerManager)
	CALLEE: org.traccar.DetectorHandler#<init>(java.util.List)
CALLER: org.traccar.ServerManager.2#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: static org.traccar.ServerManager#access$000(org.traccar.ServerManager)
	CALLEE: org.traccar.DetectorHandler#<init>(java.util.List)
CALLER: org.traccar.ServerManager.3#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.Gps103ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String[])
CALLER: org.traccar.ServerManager.4#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.Gps103ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.5#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Tk103ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.6#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.Tk103ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.7#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Gl100ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.8#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String[])
	CALLEE: org.traccar.protocol.Gl200ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.9#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.Gl200ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.10#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.T55ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.11#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.Xexun2ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.protocol.XexunFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.XexunProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.12#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.TotemFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.TotemProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.13#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.EnforaProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.14#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.MeiligaoFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.MeiligaoProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.15#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.MaxonProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.16#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.SuntechProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.17#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.ProgressProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.18#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.H02FrameDecoder#<init>()
	CALLEE: org.traccar.protocol.H02ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.19#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.Jt600FrameDecoder#<init>()
	CALLEE: org.traccar.protocol.Jt600ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.20#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Ev603ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.21#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.V680ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.22#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.Pt502FrameDecoder#<init>()
	CALLEE: org.traccar.protocol.Pt502ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.23#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.Tr20ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.24#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.25#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.MeitrackFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.MeitrackProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.26#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.SkypatrolProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.27#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.Gt02ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.28#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.Gt06FrameDecoder#<init>()
	CALLEE: org.traccar.protocol.Gt06ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.29#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.MegastekProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.30#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.NavigilFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.31#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.GpsGateProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.32#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.TeltonikaFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.TeltonikaProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.33#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseEncoder#<init>()
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#<init>(java.lang.String,boolean)
CALLER: org.traccar.ServerManager.34#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseEncoder#<init>()
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#<init>(java.lang.String,boolean)
CALLER: org.traccar.ServerManager.35#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.Tlt2hProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.36#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#<init>(java.lang.String,boolean)
CALLER: org.traccar.ServerManager.37#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.WondexFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.WondexProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.38#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.CellocatorFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.CellocatorProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.39#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.GalileoFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.GalileoProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.40#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.YwtProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.41#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Tk102ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.42#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.protocol.IntellitracFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.IntellitracProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.43#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.Xt7ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.44#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.WialonProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.45#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.CarscopProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.46#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.ApelProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.47#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.ManPowerProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.48#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.GlobalSatProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.49#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.AtrackFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.AtrackProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.50#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.AtrackProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.51#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Pt3000ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.52#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.RuptelaProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.53#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.TopflytechProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.54#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.LaipacProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.55#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.AplicomFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.AplicomProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.56#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.GotopProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.57#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.SanavProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.58#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.GatorProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.59#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.NoranProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.60#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.M2mProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.61#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseEncoder#<init>()
	CALLEE: org.traccar.protocol.OsmAndProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.62#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.EasyTrackProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.63#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#<init>(java.lang.String,boolean)
CALLER: org.traccar.ServerManager.64#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int)
	CALLEE: org.traccar.protocol.KhdProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.65#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#<init>(int)
	CALLEE: org.traccar.protocol.PiligrimProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.66#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.Stl060FrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.Stl060ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.67#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.protocol.CarTrackProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.68#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.MiniFinderProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.69#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.HaicomProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.70#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int)
	CALLEE: org.traccar.protocol.EelinkProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.71#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.BoxProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.72#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.FreedomProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.73#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.TelikProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.74#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.TrackboxProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.75#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.VisiontekProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.76#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.OrionFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.OrionProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.77#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.traccar.protocol.RitiProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.78#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.UlbotechFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.UlbotechProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.79#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.TramigoFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.TramigoProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.80#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.Tr900ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.81#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.Ardi01ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.82#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.traccar.protocol.Xt013ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.83#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.AutoFonFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.AutoFonProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.84#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.traccar.protocol.GoSafeProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.85#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.AutoFon45FrameDecoder#<init>()
	CALLEE: org.traccar.protocol.AutoFon45ProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.ServerManager.86#addSpecificHandlers(org.jboss.netty.channel.ChannelPipeline)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)
	CALLEE: org.traccar.protocol.BceFrameDecoder#<init>()
	CALLEE: org.traccar.protocol.BceProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.geocode.AddressFormat#<init>()
	CALLEE: org.traccar.geocode.AddressFormat#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler#<init>()
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#<init>()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#toMap()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#synchronousRemoveArbitraryResource()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfManaged()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#severe(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#excludeResource(java.lang.Object)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#decrementPendingRemoves()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doAcquire(int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#decrementPendingAcquires()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_decrementPendingAcquires()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#forceKillAcquires()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#doAcquireAndDecrementPendingAcquiresWithinLockAlways()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doAcquire(int)
CALLER: org.apache.log4j.spi.LoggingEvent#<init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.Category#getName()
	CALLEE: org.apache.log4j.spi.ThrowableInformation#<init>(java.lang.Throwable,org.apache.log4j.Category)
CALLER: org.apache.log4j.Category#callAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Hierarchy#emitNoAppenderWarning(org.apache.log4j.Category)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#emitNoAppenderWarning(org.apache.log4j.Category)
CALLER: org.jboss.netty.util.ThreadRenamingRunnable#getNewThreadName(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.jboss.netty.util.ThreadRenamingRunnable#getThreadNameDeterminer()
	CALLEE: org.jboss.netty.util.ThreadNameDeterminer.1#determineThreadName(java.lang.String,java.lang.String)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#releaseExternalResources()
CALLER: org.jboss.netty.channel.socket.nio.NioWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#releaseExternalResources()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#run()
CALLER: com.mchange.v2.async.CarefulRunnableQueue#awaitTask()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue.TaskThread#safeStop()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean,boolean)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#destroy()
CALLER: com.mchange.v2.c3p0.impl.IdentityTokenizedCoalesceChecker#checkCoalesce(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#getIdentityToken()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getIdentityToken()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#checkoutResource(long)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#checkoutResource(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#prelimCheckoutResource(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#attemptRefurbishResourceOnCheckout(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceCheckedOut(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.NoGoodResourcesException#<init>(java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#tryMarkPhysicalConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#tryMarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#checkinResource(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doCheckinManaged(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#doCheckinExcluded(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#isFormerResource(java.lang.Object)
CALLER: com.mchange.v2.c3p0.AbstractComboPooledDataSource#updateLocalVarsFromCpdsProp()
	CALLEE: com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#getConnectionPoolDataSource()
	CALLEE: com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase#getNestedDataSource()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#synchronousDestroyStatement(java.lang.Object)
	CALLEE: static com.mchange.v1.db.sql.StatementUtils#attemptClose(java.sql.Statement)
CALLER: org.eclipse.jetty.webapp.WebAppContext#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#clearEventListeners()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#addEventListener(java.util.EventListener)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$300(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$400(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeNames()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setManagedAttribute(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#renewSelector()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.nio.channels.SelectableChannel,java.lang.Object)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#<init>(org.eclipse.jetty.server.ShutdownMonitor.1)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#<init>()
CALLER: static org.eclipse.jetty.http.HttpStatus.Code#<clinit>()
	CALLEE: org.eclipse.jetty.http.HttpStatus.Code#<init>(java.lang.String,int,int,java.lang.String)
CALLER: org.eclipse.jetty.util.component.AggregateLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
CALLER: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#notifyListeners()
CALLER: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#notifyListeners()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeAndRemoveResourcesInSet(java.util.Set,java.lang.reflect.Method)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupResultSets(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupAllStatementResultSets(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupUnclosedResultSetsSet(java.util.Set,java.util.List)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupUncachedStatements(java.util.List)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#closeAllCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#closeAll(java.sql.Connection)
CALLER: static com.mchange.v2.c3p0.impl.NewPooledConnection#logCloseExceptions(java.lang.Throwable,java.util.Collection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.util.ConnectionEventSupport#fireConnectionErrorOccurred(java.sql.SQLException)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection.1#connectionErrorOccurred(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#connectionErrorOccurred(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.1#connectionErrorOccurred(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData.1#connectionErrorOccurred(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet.1#connectionErrorOccurred(javax.sql.ConnectionEvent)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture#notifyListeners()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#notifyListener(org.jboss.netty.channel.group.ChannelGroupFutureListener)
CALLER: static org.jboss.netty.util.internal.ConcurrentHashMap#hashOf(java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap#hash(int)
	CALLEE: org.jboss.netty.channel.AbstractChannel#hashCode()
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#acknowledgeComplete(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#closeThreadResources()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#markCompleted()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#isCompleted()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#shouldExpire(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#recheckResizePool()
CALLER: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#<init>(java.lang.String)
CALLER: org.jboss.netty.channel.AbstractServerChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)
	CALLEE: org.jboss.netty.channel.AbstractChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)
CALLER: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#<init>(java.net.ServerSocket)
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#<init>()
CALLER: static org.jboss.netty.channel.Channels#fireChannelOpen(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getParent()
	CALLEE: static org.jboss.netty.channel.Channels#fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#nextWorker()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorkerPool#nextWorker()
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramChannel#openNonBlockingChannel(org.jboss.netty.channel.socket.InternetProtocolFamily)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#javaVersion()
	CALLEE: static org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter#convert(org.jboss.netty.channel.socket.InternetProtocolFamily)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.AbstractNioWorker,java.nio.channels.SelectableChannel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteTask#<init>(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#<init>(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
CALLER: static org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#<clinit>()
	CALLEE: org.jboss.netty.channel.FixedReceiveBufferSizePredictorFactory#<init>(int)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#<init>(java.nio.channels.DatagramChannel)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#<init>(java.net.DatagramSocket)
CALLER: static org.jboss.netty.util.internal.SharedResourceMisuseDetector#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory)
	CALLEE: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)
CALLER: org.jboss.netty.handler.logging.LoggingHandler#<init>(boolean)
	CALLEE: org.jboss.netty.handler.logging.LoggingHandler#<init>(org.jboss.netty.logging.InternalLogLevel,boolean)
CALLER: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String)
	CALLEE: static org.traccar.CharacterDelimiterFrameDecoder#createDelimiter(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>(java.nio.charset.Charset)
CALLER: org.jboss.netty.handler.codec.string.StringEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#<init>(java.nio.charset.Charset)
CALLER: org.traccar.protocol.XirgoProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.CalAmpProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int,boolean,boolean)
CALLER: org.traccar.protocol.MtxProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TytanProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int,boolean)
CALLER: org.traccar.protocol.Avl301ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.CastelProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Gps103ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.DetectorHandler#<init>(java.util.List)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#<init>()
CALLER: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,java.lang.String[])
	CALLEE: static org.traccar.CharacterDelimiterFrameDecoder#convertDelimiters(java.lang.String[])
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer[])
CALLER: org.traccar.CharacterDelimiterFrameDecoder#<init>(int,char)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.CharacterDelimiterFrameDecoder#createDelimiter(char)
CALLER: org.traccar.protocol.Tk103ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Gl100ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Gl200ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.T55ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Xexun2ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.XexunFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.XexunProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TotemFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.TotemProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.EnforaProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.MeiligaoFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.MeiligaoProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.MaxonProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.SuntechProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.ProgressProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.H02FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.H02ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Jt600FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.Jt600ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Ev603ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.V680ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Pt502FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.Pt502ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Tr20ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.NavisProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.MeitrackFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.MeitrackProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.SkypatrolProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Gt02ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Gt06FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.Gt06ProtocolDecoder#<init>(java.lang.String)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.MegastekProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.NavigilFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GpsGateProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TeltonikaFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.TeltonikaProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpRequestDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#<init>()
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#<clinit>()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
CALLER: org.jboss.netty.handler.codec.http.HttpResponseEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageEncoder#<init>()
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#<init>(java.lang.String,boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Tlt2hProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.SyrusProtocolDecoder#<init>(java.lang.String,boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.WondexFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.WondexProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.CellocatorFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.CellocatorProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GalileoFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.GalileoProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.YwtProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Tk102ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.IntellitracFrameDecoder#<init>(int)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
CALLER: org.traccar.protocol.IntellitracProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Xt7ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.WialonProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.CarscopProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.ApelProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.ManPowerProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GlobalSatProtocolDecoder#<init>(java.lang.String)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.AtrackFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int)
CALLER: org.traccar.protocol.AtrackProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Pt3000ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.RuptelaProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TopflytechProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.LaipacProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.AplicomFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.AplicomProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GotopProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.SanavProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GatorProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.NoranProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#<init>(int)
	CALLEE: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#<init>(int,boolean)
CALLER: org.traccar.protocol.M2mProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.OsmAndProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.EasyTrackProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
CALLER: org.traccar.protocol.KhdProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.HttpChunkAggregator#<clinit>()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
CALLER: org.jboss.netty.handler.codec.http.HttpChunkAggregator#<init>(int)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#<init>()
CALLER: org.traccar.protocol.PiligrimProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Stl060FrameDecoder#<init>(int)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
CALLER: org.traccar.protocol.Stl060ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.CarTrackProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.MiniFinderProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.HaicomProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.EelinkProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.BoxProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.FreedomProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TelikProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TrackboxProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.VisiontekProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.OrionFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.OrionProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.RitiProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.UlbotechFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.UlbotechProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.TramigoFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int)
CALLER: org.traccar.protocol.TramigoProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Tr900ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Ardi01ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.Xt013ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.AutoFonFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.AutoFonProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.GoSafeProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.AutoFon45FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.AutoFon45ProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: org.traccar.protocol.BceFrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.traccar.protocol.BceProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#excludeResource(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceRemoved(java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#doAcquire(int)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_decrementPendingAcquires()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#acquireResource()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#assimilateResource(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#destroyResource(java.lang.Object,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#_decrementPendingAcquires()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
CALLER: org.apache.log4j.helpers.AppenderAttachableImpl#appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.AppenderSkeleton#doAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.varia.NullAppender#doAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.Hierarchy#emitNoAppenderWarning(org.apache.log4j.Category)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.Category#getName()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#run()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#releaseExternalResources()
CALLER: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#releaseExternalResources()
	CALLEE: static org.jboss.netty.util.internal.ByteBufferUtil#destroy(java.nio.ByteBuffer)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#run()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#process(java.nio.channels.Selector)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#debug(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isDebugEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isDebugEnabled()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#select(java.nio.channels.Selector)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#select(java.nio.channels.Selector)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorker#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#processTaskQueue()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#process(java.nio.channels.Selector)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean,boolean)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,boolean)
	CALLEE: static com.mchange.v2.lang.ThreadUtils#reflectiveHoldsLock(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#run()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#prelimCheckoutResource(long)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#shouldExpire(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#prelimCheckoutResource(long)
	CALLEE: com.mchange.v2.resourcepool.NoGoodResourcesException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_recheckResizePool()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureNotBroken()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#awaitAvailable(long)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#attemptRefurbishResourceOnCheckout(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishResourceOnCheckout(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#setLastCheckoutFailure(java.lang.Throwable)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceCheckedOut(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#canFireEvents()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.3#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#postRunnable(java.lang.Runnable)
CALLER: com.mchange.v2.resourcepool.NoGoodResourcesException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String,java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#tryMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#tryMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#tryMarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#doCheckinManaged(java.lang.Object)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1RefurbishCheckinResourceTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#doCheckinExcluded(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.nio.channels.SelectableChannel,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.ChannelAndAttachment#<init>(java.nio.channels.SelectableChannel,java.lang.Object)
CALLER: org.jboss.netty.channel.DefaultChannelFuture#notifyListeners()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#notifyListener(org.jboss.netty.channel.ChannelFutureListener)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupAllStatementResultSets(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupUnclosedResultSetsSet(java.util.Set,java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture#notifyListener(org.jboss.netty.channel.group.ChannelGroupFutureListener)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#addToFormerResources(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean,boolean)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceRemoved(java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.lang.PotentiallySecondaryException#<init>(java.lang.String)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.AbstractChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink)
	CALLEE: org.jboss.netty.channel.SucceededChannelFuture#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#<init>(org.jboss.netty.channel.AbstractChannel)
	CALLEE: static org.jboss.netty.channel.AbstractChannel#allocateId(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#attach(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink)
CALLER: org.jboss.netty.channel.DefaultServerChannelConfig#<init>()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance()
CALLER: static org.jboss.netty.channel.Channels#fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChildChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)
CALLER: static org.jboss.netty.channel.ChannelState#<clinit>()
	CALLEE: org.jboss.netty.channel.ChannelState#<init>(java.lang.String,int)
CALLER: static org.jboss.netty.util.internal.DetectionUtil#<clinit>()
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#javaVersion0()
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#hasUnsafe(java.lang.ClassLoader)
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramChannel.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.socket.InternetProtocolFamily#values()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#<init>(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.util.internal.ThreadLocalBoolean#<init>()
CALLER: org.jboss.netty.channel.FixedReceiveBufferSizePredictorFactory#<init>(int)
	CALLEE: org.jboss.netty.channel.FixedReceiveBufferSizePredictor#<init>(int)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#<init>(java.net.DatagramSocket)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#<init>()
CALLER: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)
	CALLEE: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)
CALLER: org.jboss.netty.handler.logging.LoggingHandler#<init>(org.jboss.netty.logging.InternalLogLevel,boolean)
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static org.traccar.CharacterDelimiterFrameDecoder#createDelimiter(java.lang.String)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.string.StringDecoder#<init>(java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#<init>()
CALLER: org.jboss.netty.handler.codec.string.StringEncoder#<init>(java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#<init>()
CALLER: org.traccar.BaseProtocolDecoder#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#<init>()
CALLER: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int,boolean,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#<init>(int,int,int,int,int,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: static org.traccar.CharacterDelimiterFrameDecoder#convertDelimiters(java.lang.String[])
	CALLEE: static org.traccar.CharacterDelimiterFrameDecoder#createDelimiter(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer[])
CALLER: static org.traccar.CharacterDelimiterFrameDecoder#createDelimiter(char)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>(boolean)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#<init>(int,int,int)
CALLER: static org.jboss.netty.util.CharsetUtil#<clinit>()
	CALLEE: org.jboss.netty.util.CharsetUtil.1#<init>()
	CALLEE: org.jboss.netty.util.CharsetUtil.2#<init>()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#<clinit>()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#<init>()
CALLER: org.jboss.netty.handler.codec.http.HttpMessageEncoder#<init>()
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#<init>()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[])
CALLER: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#<init>(int,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceRemoved(java.lang.Object,boolean,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#canFireEvents()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.4#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#acquireResource()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#destroyResource(java.lang.Object,boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getUser()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection()
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#getPassword()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String)
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#getPooledConnection(java.lang.String,java.lang.String,com.mchange.v2.c3p0.ConnectionCustomizer,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#initStatementCache(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#initStatementCache(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.SQLWarnings#logAndClearWarnings(java.sql.Connection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#assimilateResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.PunchCard#<init>()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceAcquired(java.lang.Object,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#destroyResource(java.lang.Object,boolean)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeMaybeCheckedOut(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#closeMaybeCheckedOut(boolean)
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#releaseExternalResources()
	CALLEE: static org.jboss.netty.util.internal.ByteBufferUtil#destroy(java.nio.ByteBuffer)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#select(java.nio.channels.Selector)
	CALLEE: static org.jboss.netty.channel.socket.nio.SelectorUtil#select(java.nio.channels.Selector)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#rebuildSelector()
CALLER: org.jboss.netty.channel.socket.nio.NioWorker#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#rebuildSelector()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#rebuildSelector()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#rebuildSelector()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#processTaskQueue()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#cleanUpCancelledKeys()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#close(java.nio.channels.SelectionKey)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#process(java.nio.channels.Selector)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#cleanUpCancelledKeys()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#read(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.NioWorker#read(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#writeFromSelectorLoop(java.nio.channels.SelectionKey)
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#process(java.nio.channels.Selector)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: static org.jboss.netty.channel.socket.nio.NioServerBoss#registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread)
CALLER: static com.mchange.v2.lang.ThreadUtils#reflectiveHoldsLock(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: static com.mchange.v2.lang.ThreadUtils#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#destroyResource(java.lang.Object,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#ensureNotBroken()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#awaitAvailable(long)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_recheckResizePool()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#trace()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureNotBroken()
	CALLEE: com.mchange.v2.resourcepool.TimeoutException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.CannotAcquireResourceException#<init>(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishResourceOnCheckout(java.lang.Object)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$400(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$500(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$600(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#canFireEvents()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#isBroken()
CALLER: com.mchange.v2.async.CarefulRunnableQueue#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.util.ResourceClosedException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#tryMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#statementsUnderDestruction(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#access$100()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#destroyResource(java.lang.Object,boolean)
CALLER: static org.jboss.netty.channel.CompleteChannelFuture#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: org.jboss.netty.channel.SucceededChannelFuture#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#<init>(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#<init>(org.jboss.netty.channel.AbstractChannel)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#<init>(org.jboss.netty.channel.Channel,boolean)
CALLER: static org.jboss.netty.channel.AbstractChannel#allocateId(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#putIfAbsent(java.lang.Object,java.lang.Object)
CALLER: static org.jboss.netty.util.internal.DetectionUtil#hasUnsafe(java.lang.ClassLoader)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#hasUnsafeField(java.lang.Class)
CALLER: static org.jboss.netty.channel.socket.InternetProtocolFamily#<clinit>()
	CALLEE: org.jboss.netty.channel.socket.InternetProtocolFamily#<init>(java.lang.String,int)
CALLER: static org.jboss.netty.channel.socket.nio.ProtocolFamilyConverter.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.socket.InternetProtocolFamily#values()
CALLER: org.jboss.netty.util.internal.ThreadLocalBoolean#<init>()
	CALLEE: org.jboss.netty.util.internal.ThreadLocalBoolean#<init>(boolean)
CALLER: org.jboss.netty.channel.DefaultChannelConfig#<init>()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance()
CALLER: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)
	CALLEE: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,org.jboss.netty.util.ThreadNameDeterminer,long,java.util.concurrent.TimeUnit,int)
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>(boolean)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#<init>()
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#<init>(int,int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#<init>(java.lang.Enum,boolean)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.nio.CharBuffer,java.nio.charset.Charset)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[])
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[])
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[])
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(byte[])
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#waitMarkPooledConnectionInUse(javax.sql.PooledConnection)
CALLER: static com.mchange.v2.c3p0.SQLWarnings#logAndClearWarnings(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#getWarnings()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#clearWarnings()
CALLER: static com.mchange.v2.c3p0.SQLWarnings#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.Class)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPooledConnectionInUse(javax.sql.PooledConnection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceAcquired(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#canFireEvents()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#closeMaybeCheckedOut(boolean)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#close(boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#resetTxnState(java.sql.Connection,boolean,boolean,boolean)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#closeMaybeCheckedOut(boolean)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#close(java.lang.Throwable,boolean)
CALLER: static org.jboss.netty.channel.socket.nio.SelectorUtil#select(java.nio.channels.Selector)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isDebugEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isDebugEnabled()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#rebuildSelector()
	CALLEE: static org.jboss.netty.channel.socket.nio.SelectorUtil#open()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#isIoThread()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector.1#<init>(org.jboss.netty.channel.socket.nio.AbstractNioSelector)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#info(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#info(java.lang.String)
CALLER: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.SucceededChannelFuture#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getSucceededFuture()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#increaseCancelledKeys()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelDisconnected(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelUnbound(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelUnboundLater(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelClosed(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelClosedLater(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isBound()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isConnected()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isConnected()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#setClosed()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isBound()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#setClosed()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#increaseCancelledKeys()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelUnbound(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelClosed(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#setClosed()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#isBound()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#read(java.nio.channels.SelectionKey)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#get(int)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.channel.socket.nio.NioWorker#read(java.nio.channels.SelectionKey)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#get(int)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#writeFromSelectorLoop(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
CALLER: static org.jboss.netty.channel.socket.nio.NioServerBoss#registerAcceptedChannel(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,java.nio.channels.SocketChannel,java.lang.Thread)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker,java.lang.Thread)
CALLER: com.mchange.v2.resourcepool.TimeoutException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
CALLER: com.mchange.v2.resourcepool.CannotAcquireResourceException#<init>(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolException#<init>(java.lang.String)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$400(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#waitMarkPhysicalConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.sql.Connection,java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object,java.sql.Connection)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$500(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPhysicalConnectionInUse(java.sql.Connection)
CALLER: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$600(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#pooledConnectionInUse(javax.sql.PooledConnection)
CALLER: static org.jboss.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: static org.jboss.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
CALLER: static org.jboss.netty.util.internal.DetectionUtil#hasUnsafeField(java.lang.Class)
	CALLEE: org.jboss.netty.util.internal.DetectionUtil.1#<init>(java.lang.Class)
CALLER: org.jboss.netty.util.HashedWheelTimer#<init>(java.util.concurrent.ThreadFactory,org.jboss.netty.util.ThreadNameDeterminer,long,java.util.concurrent.TimeUnit,int)
	CALLEE: org.jboss.netty.util.ThreadRenamingRunnable#<init>(java.lang.Runnable,java.lang.String,org.jboss.netty.util.ThreadNameDeterminer)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#<init>(org.jboss.netty.util.HashedWheelTimer,org.jboss.netty.util.HashedWheelTimer.1)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#createWheel(int)
	CALLEE: org.jboss.netty.util.internal.SharedResourceMisuseDetector#increase()
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#<init>(int,boolean,boolean,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#<init>(int,boolean,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>()
	CALLEE: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#validateMaxFrameLength(int)
	CALLEE: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#isLineBased(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#isSubclass()
	CALLEE: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#validateDelimiter(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#slice(int,int)
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder.State#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder.State#<init>(java.lang.String,int)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#<init>(java.lang.Enum,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#<init>(boolean)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#<init>(org.jboss.netty.handler.codec.replay.ReplayingDecoder)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.nio.CharBuffer,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[])
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#encodeString(java.nio.CharBuffer,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[])
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(byte[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[])
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#waitMarkPooledConnectionInUse(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#waitMarkPhysicalConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#getWarnings()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#clearWarnings()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPooledConnectionInUse(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPhysicalConnectionInUse(java.sql.Connection)
CALLER: org.traccar.helper.Log.NettyInternalLogger#info(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#info(java.lang.String,java.lang.Throwable)
CALLER: static org.jboss.netty.channel.Channels#fireChannelDisconnected(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.4#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
CALLER: static org.jboss.netty.channel.Channels#fireChannelUnbound(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireChannelUnboundLater(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.5#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.AbstractChannel#isOpen()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#poll()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isOpen()
CALLER: static org.jboss.netty.channel.Channels#fireChannelClosed(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getParent()
	CALLEE: static org.jboss.netty.channel.Channels#fireChildChannelStateChanged(org.jboss.netty.channel.Channel,org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireChannelClosedLater(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.6#<init>(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
CALLER: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#<init>(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.7#<init>(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
CALLER: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#get(int)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#newBuffer(int)
CALLER: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
CALLER: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getDatagramChannel()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#poll()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#getWriteSpinCount()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#getWriteSpinCount()
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireWriteComplete(org.jboss.netty.channel.Channel,long)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#transferTo(java.nio.channels.DatagramChannel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#finished()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#transferTo(java.nio.channels.WritableByteChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#totalBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#totalBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#writtenBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#writtenBytes()
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireWriteComplete(org.jboss.netty.channel.Channel,long)
	CALLEE: static org.jboss.netty.channel.Channels#fireWriteCompleteLater(org.jboss.netty.channel.Channel,long)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#release()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#totalBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#totalBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.EmptySendBuffer#writtenBytes()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#writtenBytes()
CALLER: org.jboss.netty.channel.socket.nio.NioAcceptedSocketChannel#<init>(org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker,java.lang.Thread)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelOpen(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#setConnected()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#waitMarkPhysicalConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#waitMarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.sql.Connection,java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finer(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$600(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$700()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ThrowableHolderPool#getThrowableHolder()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ThrowableHolderPool#returnThrowableHolder(java.lang.Throwable[])
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#resetPool()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPhysicalConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#unmarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#pooledConnectionInUse(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#inUse(java.sql.Connection)
CALLER: org.jboss.netty.util.HashedWheelTimer.Worker#<init>(org.jboss.netty.util.HashedWheelTimer,org.jboss.netty.util.HashedWheelTimer.1)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#<init>(org.jboss.netty.util.HashedWheelTimer)
CALLER: static org.jboss.netty.util.HashedWheelTimer#createWheel(int)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#normalizeTicksPerWheel(int)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#<init>(org.jboss.netty.util.HashedWheelTimer.1)
CALLER: org.jboss.netty.util.internal.SharedResourceMisuseDetector#increase()
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
CALLER: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#isLineBased(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
CALLER: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#validateDelimiter(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
CALLER: static org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayError#<init>()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#encodeString(java.nio.CharBuffer,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.util.CharsetUtil#getEncoder(java.nio.charset.Charset)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[],int,int)
CALLER: org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#newBuffer(int)
	CALLEE: static org.jboss.netty.util.internal.ByteBufferUtil#destroy(java.nio.ByteBuffer)
	CALLEE: static org.jboss.netty.channel.socket.nio.SocketReceiveBufferAllocator#normalizeCapacity(int)
CALLER: org.jboss.netty.channel.UpstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(org.jboss.netty.channel.FileRegion)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getInternalInterestOps()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setInternalInterestOps(int)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#clearOpWrite(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(java.nio.channels.SelectionKey)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getInternalInterestOps()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setInternalInterestOps(int)
CALLER: static org.jboss.netty.channel.Channels#fireWriteComplete(org.jboss.netty.channel.Channel,long)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#<init>(org.jboss.netty.channel.Channel,long)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireWriteCompleteLater(org.jboss.netty.channel.Channel,long)
	CALLEE: org.jboss.netty.channel.Channels.2#<init>(org.jboss.netty.channel.Channel,long)
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,java.nio.channels.SocketChannel,org.jboss.netty.channel.socket.nio.NioWorker)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFactory,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelSink,org.jboss.netty.channel.socket.nio.AbstractNioWorker,java.nio.channels.SelectableChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#<init>(java.net.Socket)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#waitMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#waitMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#waitMarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#resetPool()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#cloneOfManaged()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#markBrokenNoEnsureMinResources(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#unmarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#unmarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#unmarkConnectionInUse(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#inUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#tvlInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#tvlInUse(java.sql.Connection)
CALLER: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#<init>(org.jboss.netty.util.HashedWheelTimer.1)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#<init>()
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.GatheringSendBuffer#<init>(java.nio.ByteBuffer[])
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#<init>(java.nio.ByteBuffer)
	CALLEE: static org.jboss.netty.channel.socket.nio.SocketSendBufferPool#align(int)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#<init>(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.socket.nio.SocketSendBufferPool.Preallocation,java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#getPreallocation()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#getPreallocation0()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#acquire(org.jboss.netty.channel.FileRegion)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.FileSendBuffer#<init>(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.FileRegion)
CALLER: static org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#<clinit>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory#<init>()
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#<init>(java.net.Socket)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#<init>(java.net.Socket)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#waitMarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#statementsUnderDestruction(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#access$100()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#markBrokenNoEnsureMinResources(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_markBroken(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#unmarkConnectionInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#destroyAllTrackedStatements(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#tvlInUse(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#knownInUse(java.sql.Connection)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#<init>(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.socket.nio.SocketSendBufferPool.Preallocation,java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.UnpooledSendBuffer#<init>(java.nio.ByteBuffer)
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#getPreallocation()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#getPreallocation0()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool#getPreallocation0()
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.Preallocation#<init>(int)
CALLER: org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory#<init>()
	CALLEE: org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory#<init>(int,int,int)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#<init>(java.net.Socket)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#<init>()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#_markBroken(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#excludeResource(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#destroyAllTrackedStatements(java.lang.Object)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#run()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#run()
	CALLEE: static com.mchange.v1.db.sql.StatementUtils#attemptClose(java.sql.Statement)
CALLER: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.2#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner.PoolThread#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.RemoveTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AcquireTask#run()
	CALLEE: org.jboss.netty.util.internal.DeadLockProofWorker.1#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1DestroyResourceTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager.1TrackedDestroyAllStatementsTask#run()
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.3#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.4#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.AsyncTestIdleResourceTask#run()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.1RefurbishCheckinResourceTask#run()
	CALLEE: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$100(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread.1#<init>(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
	CALLEE: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$200(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner,com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.1StmtAcquireTask#run()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager.1UncheckedStatementCloseTask#run()
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#close()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#detach()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markClosedProxyConnection(com.mchange.v2.c3p0.impl.NewProxyConnection,boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#markBroken(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePoolFactory#destroyThreadResources()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: static org.eclipse.jetty.util.resource.FileResource#getCheckAliases()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#isAliases()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.server.Server#getThreadPool()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dispatch(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection.1#<init>(org.eclipse.jetty.server.handler.HandlerCollection,java.lang.ClassLoader,int,org.eclipse.jetty.util.MultiException,java.util.concurrent.CountDownLatch)
CALLER: org.eclipse.jetty.webapp.WebAppContext#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setAvailable(boolean)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#isAllowDuplicateFragmentNames()
	CALLEE: org.eclipse.jetty.webapp.MetaData#setAllowDuplicateFragmentNames(boolean)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#preConfigure()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doStart()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#postConfigure()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#isLogUrlOnStart()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#dumpUrl()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#isThrowUnavailableOnStartupException()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#doStart()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#setMaxIdleTime(long)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getAcceptors()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#setSelectSets(int)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getLowResourcesConnections()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#setLowResourcesConnections(long)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getLowResourcesMaxIdleTime()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#setLowResourcesMaxIdleTime(long)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#doStart()
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#beforeRemove(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.handler.timeout.IdleStateHandler#destroy(org.jboss.netty.channel.ChannelHandlerContext)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#beforeAdd(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getPipeline()
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#initialize(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#isAttached()
CALLER: org.jboss.netty.util.HashedWheelTimer#stop()
	CALLEE: org.jboss.netty.util.internal.SharedResourceMisuseDetector#decrease()
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#unprocessedTimeouts()
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask.1#run()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,int,boolean,com.mchange.v2.resourcepool.BasicResourcePool.1)
CALLER: org.jboss.netty.util.CharsetUtil.1#initialValue()
	CALLEE: org.jboss.netty.util.CharsetUtil.1#initialValue()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#dispatch(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getIdleThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThread(int)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#size()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.3#run()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceCheckedOut(java.lang.Object,int,int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.4#run()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceRemoved(java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#isStatementCaching()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#checkoutStatement(java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement,com.mchange.v2.c3p0.impl.NewPooledConnection,boolean,com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markActiveUncachedStatement(java.sql.Statement)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#getMetaData()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection,com.mchange.v2.c3p0.impl.NewProxyConnection)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture#awaitUninterruptibly()
	CALLEE: static org.jboss.netty.channel.group.DefaultChannelGroupFuture#checkDeadLock()
CALLER: org.apache.log4j.helpers.AppenderAttachableImpl#removeAllAppenders()
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
CALLER: org.jboss.netty.util.HashedWheelTimer.Worker#run()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$202(org.jboss.netty.util.HashedWheelTimer,long)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$200(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$300(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#waitForNextTick()
	CALLEE: org.jboss.netty.util.HashedWheelTimer.Worker#transferTimeoutsToBuckets()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$400(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$500(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$600()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$700(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#expireTimeouts(long)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#clearTimeouts(java.util.Set)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getIdleThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMinThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#size()
CALLER: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: static org.jboss.netty.channel.Channels#close(org.jboss.netty.channel.Channel)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.2#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool,java.lang.Thread,boolean,java.lang.StackTraceElement[])
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.1#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#clear()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#closeAll(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#isClosed()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#synchronousDestroyStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#getNumConnectionsWithCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeStatement(java.lang.Object,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#statsString()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Values#iterator()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.ValueIterator#<init>(org.jboss.netty.util.internal.ConcurrentHashMap)
CALLER: org.jboss.netty.channel.AbstractChannel#bind(java.net.SocketAddress)
	CALLEE: static org.jboss.netty.channel.Channels#bind(org.jboss.netty.channel.Channel,java.net.SocketAddress)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
CALLER: org.eclipse.jetty.server.ShutdownMonitor#start()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#<init>(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#start()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThread(int)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#<init>(int,int)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getActualUpstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
CALLER: com.mchange.v2.c3p0.impl.AuthMaskingProperties#toString()
	CALLEE: com.mchange.v2.c3p0.impl.AuthMaskingProperties#normalToString()
CALLER: org.apache.log4j.AppenderSkeleton#doAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLevel()
	CALLEE: org.apache.log4j.AppenderSkeleton#isAsSevereAsThreshold(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.WriterAppender#append(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.varia.NullAppender#append(org.apache.log4j.spi.LoggingEvent)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String,int)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#isStatementCaching()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#checkoutStatement(java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement,com.mchange.v2.c3p0.impl.NewPooledConnection,boolean,com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markActiveUncachedStatement(java.sql.Statement)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#getCatalog()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#isDetached()
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#put(java.lang.Object,int,java.lang.Object,boolean)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#rehash()
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap.Segment#keyEq(java.lang.Object,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#setValue(java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#value()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#key()
CALLER: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PooledSendBuffer#release()
	CALLEE: static org.jboss.netty.channel.socket.nio.SocketSendBufferPool#access$000(org.jboss.netty.channel.socket.nio.SocketSendBufferPool)
	CALLEE: static org.jboss.netty.channel.socket.nio.SocketSendBufferPool#access$100(org.jboss.netty.channel.socket.nio.SocketSendBufferPool)
	CALLEE: org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PreallocationRef#<init>(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.socket.nio.SocketSendBufferPool.Preallocation,org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PreallocationRef)
	CALLEE: static org.jboss.netty.channel.socket.nio.SocketSendBufferPool#access$102(org.jboss.netty.channel.socket.nio.SocketSendBufferPool,org.jboss.netty.channel.socket.nio.SocketSendBufferPool.PreallocationRef)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.1#run()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceAcquired(java.lang.Object,int,int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.AsyncTestIdleResourceTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishIdleResource(java.lang.Object)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$300(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$2100(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Throwable)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.1RefurbishCheckinResourceTask#run()
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$000()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$300(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$200(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
	CALLEE: static com.mchange.v2.resourcepool.BasicResourcePool#access$500(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#connectionErrorOccurred(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#doMarkPoolStatus(javax.sql.PooledConnection,int)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnectionStatus()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnectionStatus()
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet.3#<init>(org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.util.ArrayList,java.util.concurrent.CountDownLatch)
CALLER: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$100(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#hasIdTimer()
CALLER: static com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#access$200(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner,com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
	CALLEE: com.mchange.v2.async.ThreadPerTaskAsynchronousRunner#acknowledgeComplete(com.mchange.v2.async.ThreadPerTaskAsynchronousRunner.TaskThread)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection#detach()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#markClosedProxyConnection(com.mchange.v2.c3p0.impl.NewProxyConnection,boolean)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#updateConnectionStatus(int)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#fireConnectionErrorOccurred(java.sql.SQLException)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#fireConnectionClosed()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupResultSets(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupUncachedStatements(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#checkinAllCachedStatements(java.util.List)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#reset(boolean)
CALLER: com.mchange.v2.resourcepool.BasicResourcePoolFactory#destroyThreadResources()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#close()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#close()
CALLER: org.eclipse.jetty.webapp.WebAppContext#preConfigure()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getClassLoader()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#loadConfigurations()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#loadSystemClasses()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#loadServerClasses()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#doStart()
	CALLEE: org.eclipse.jetty.http.MimeTypes#<init>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getContextPath()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getDisplayName()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#startContext()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#startContext()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#startContext()
CALLER: org.eclipse.jetty.webapp.WebAppContext#postConfigure()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.webapp.WebAppContext#dumpUrl()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getContextPath()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getDisplayName()
	CALLEE: org.eclipse.jetty.server.Server#getConnectors()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getName()
CALLER: org.eclipse.jetty.server.AbstractConnector#doStart()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.server.Server#getThreadPool()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dispatch(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getAcceptors()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#open()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#<init>(org.eclipse.jetty.server.AbstractConnector,int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#isLowOnThreads()
CALLER: static org.jboss.netty.handler.timeout.IdleStateHandler#destroy(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.handler.timeout.IdleStateHandler#state(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#cancel()
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#initialize(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: static org.jboss.netty.handler.timeout.IdleStateHandler#state(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler.ReaderIdleTimeoutTask#<init>(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.util.HashedWheelTimer#newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler.WriterIdleTimeoutTask#<init>(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler.AllIdleTimeoutTask#<init>(org.jboss.netty.handler.timeout.IdleStateHandler,org.jboss.netty.channel.ChannelHandlerContext)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,int,boolean,com.mchange.v2.resourcepool.BasicResourcePool.1)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.ScatteredAcquireTask#<init>(com.mchange.v2.resourcepool.BasicResourcePool,int,boolean)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#startThread(int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#newThread(java.lang.Runnable)
CALLER: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceCheckedOut(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEvent#<init>(com.mchange.v2.resourcepool.ResourcePool,java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceRemoved(java.lang.Object,boolean,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEvent#<init>(com.mchange.v2.resourcepool.ResourcePool,java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#checkoutStatement(java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
CALLER: static com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement,com.mchange.v2.c3p0.impl.NewPooledConnection,boolean,com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement,com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: static com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection,com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: org.jboss.netty.util.HashedWheelTimer.Worker#waitForNextTick()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$200(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$600()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$900(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#isWindows()
CALLER: org.jboss.netty.util.HashedWheelTimer.Worker#transferTimeoutsToBuckets()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$400(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$500(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$700(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$900(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#access$800(org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#addTimeout(org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout)
CALLER: static org.jboss.netty.channel.Channels#close(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getCloseFuture()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeStatement(java.lang.Object,int)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeFromKeySet(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeFromCheckoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#deferredDestroyStatement(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#deferredDestroyStatement(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#removeStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#removeStatementForConnection(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#statsString()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#getNumConnectionsWithCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#countCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#countConnectionsInUse()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#countConnectionsInUse()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.ValueIterator#<init>(org.jboss.netty.util.internal.ConcurrentHashMap)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#<init>(org.jboss.netty.util.internal.ConcurrentHashMap)
CALLER: static org.jboss.netty.channel.Channels#bind(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.Channels#future(org.jboss.netty.channel.Channel)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#start()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#startListenSocket()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$800(org.eclipse.jetty.server.ShutdownMonitor)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#getActualUpstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#canHandleUpstream()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.traccar.BaseProtocolDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.logging.LoggingHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.protocol.CalAmpProtocolDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
CALLER: org.apache.log4j.AppenderSkeleton#isAsSevereAsThreshold(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
CALLER: org.apache.log4j.WriterAppender#append(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.WriterAppender#checkEntryConditions()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[],int,int)
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(byte[],int,int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#rehash()
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#newArray(int)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#value()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#key()
CALLER: static org.jboss.netty.util.internal.ConcurrentHashMap.Segment#keyEq(java.lang.Object,java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#equals(java.lang.Object)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#<init>(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry,java.lang.Object)
CALLER: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceAcquired(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEvent#<init>(com.mchange.v2.resourcepool.ResourcePool,java.lang.Object,boolean,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishIdleResource(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$300(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#removeResource(java.lang.Object)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$400(com.mchange.v2.resourcepool.BasicResourcePool)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$2100(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Throwable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#setLastIdleCheckFailure(java.lang.Throwable)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$200(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#attemptRefurbishResourceOnCheckin(java.lang.Object)
CALLER: static com.mchange.v2.resourcepool.BasicResourcePool#access$500(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceCheckedIn(java.lang.Object,int,int,int)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#doMarkPoolStatus(javax.sql.PooledConnection,int)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#warning(java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#resetPool()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#markBroken(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#checkinAllCachedStatements(java.util.List)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkinAll(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#reset(boolean)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0ImplUtils#resetTxnState(java.sql.Connection,boolean,boolean,boolean)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#fireConnectionClosed()
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#fireConnectionClosed()
CALLER: com.mchange.v2.async.ThreadPoolAsynchronousRunner#close()
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#close(boolean)
CALLER: com.mchange.v2.async.CarefulRunnableQueue#close()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#close(boolean)
CALLER: org.eclipse.jetty.webapp.WebAppContext#loadConfigurations()
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
CALLER: org.eclipse.jetty.webapp.WebAppContext#loadSystemClasses()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern#<init>(java.lang.String[])
CALLER: org.eclipse.jetty.webapp.WebAppContext#loadServerClasses()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern#<init>(java.lang.String[])
CALLER: org.eclipse.jetty.webapp.WebAppContext#startContext()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#configure()
	CALLEE: org.eclipse.jetty.webapp.MetaData#resolve(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#startContext()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#open()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getHost()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getPort()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getReuseAddress()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getAcceptQueueSize()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#isLowOnThreads()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#size()
CALLER: static org.jboss.netty.handler.timeout.IdleStateHandler#state(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getAttachment()
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler.State#<init>()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#setAttachment(java.lang.Object)
CALLER: org.jboss.netty.util.HashedWheelTimer#newTimeout(org.jboss.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)
	CALLEE: org.jboss.netty.util.HashedWheelTimer#start()
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#<init>(org.jboss.netty.util.HashedWheelTimer,org.jboss.netty.util.TimerTask,long)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.util.ResourceClosedException#<init>(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#statsString()
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#acquireStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#assimilateNewCheckedOutStatement(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.sql.Connection,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement,com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData,com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getActualDownstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getSink()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeFromKeySet(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keySet(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#undeathmarchStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#undeathmarchStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#removeStatementFromDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#undeathmarchStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeFromCheckoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keySet(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.CautiousStatementDestructionManager#deferredDestroyStatement(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#uncheckedDestroyStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.IncautiousStatementDestructionManager#deferredDestroyStatement(java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#uncheckedDestroyStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#removeStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#removeStatementForConnection(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#removeStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#<init>(org.jboss.netty.util.internal.ConcurrentHashMap)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#advance()
CALLER: static org.jboss.netty.channel.Channels#future(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#future(org.jboss.netty.channel.Channel,boolean)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#startListenSocket()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$800(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$900(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$102(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$902(org.eclipse.jetty.server.ShutdownMonitor,int)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$200(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$202(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.ChannelPipelineException#<init>(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannelSink#exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException)
CALLER: org.apache.log4j.WriterAppender#checkEntryConditions()
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
	CALLEE: org.apache.log4j.DailyRollingFileAppender#rollOver()
	CALLEE: org.apache.log4j.WriterAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[],int,int)
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[],int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#attemptRefurbishResourceOnCheckin(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishResourceOnCheckin(java.lang.Object)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#setLastCheckinFailure(java.lang.Throwable)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#asyncFireResourceCheckedIn(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#canFireEvents()
	CALLEE: com.mchange.v2.async.CarefulRunnableQueue#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool.2#<init>(com.mchange.v2.resourcepool.BasicResourcePool,java.lang.Object,int,int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool#markBroken(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#unexpectedBreak()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#ensureMinResources()
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#_markBroken(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkinAll(java.sql.Connection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#statsString()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkinStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.util.ConnectionEventSupport#fireConnectionClosed()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet.1#connectionClosed(javax.sql.ConnectionEvent)
CALLER: org.eclipse.jetty.webapp.ClasspathPattern#<init>(java.lang.String[])
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern#setPatterns(java.lang.String[])
CALLER: org.eclipse.jetty.webapp.WebAppContext#configure()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.webapp.MetaData#resolve(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#setEffectiveMajorVersion(int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#setEffectiveMinorVersion(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getServletContext()
	CALLEE: org.eclipse.jetty.webapp.MetaData#getWebDefault()
	CALLEE: org.eclipse.jetty.webapp.MetaData#getWebXml()
	CALLEE: org.eclipse.jetty.webapp.MetaData#getOverrideWebs()
	CALLEE: org.eclipse.jetty.webapp.MetaData#getOrderedWebInfJars()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#startContext()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServlets()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSecurityHandler()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#startContext()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getFilters()
CALLER: static com.mchange.v2.c3p0.stmt.StatementCacheKey#find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keyRec(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#acquireStatement(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.1StmtAcquireTask#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache,java.lang.Object[],java.lang.reflect.Method,java.sql.Connection,java.lang.Object[],java.lang.Throwable[])
CALLER: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#countCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#getNumStatementsForConnection(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#cullNext()
CALLER: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#getNumStatementsForConnection(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#cullNext()
CALLER: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#prepareAssimilateNewStatement(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#countCachedStatements()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#cullNext()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#assimilateNewCheckedOutStatement(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.sql.Connection,java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#info(java.lang.String)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keySet(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.KeyRec#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache.1)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#addStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#addStatementForConnection(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.util.ResourceClosedException#<init>(java.lang.Throwable)
	CALLEE: com.mchange.v2.util.ResourceClosedException#setRootCause(java.lang.Throwable)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#<init>(java.sql.PreparedStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.1#<init>(com.mchange.v2.c3p0.impl.NewProxyPreparedStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#__setInner(java.sql.PreparedStatement)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#<init>(java.sql.DatabaseMetaData)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData.1#<init>(com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#__setInner(java.sql.DatabaseMetaData)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#getActualDownstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#canHandleDownstream()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getFuture()
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.logging.LoggingHandler#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getFuture()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keySet(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#keyRec(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#uncheckedDestroyStatement(java.lang.Object)
	CALLEE: com.mchange.v2.async.ThreadPoolAsynchronousRunner#postRunnable(java.lang.Runnable)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager.1UncheckedStatementCloseTask#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager,java.lang.Object)
CALLER: static org.jboss.netty.channel.Channels#future(org.jboss.netty.channel.Channel,boolean)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#<init>(org.jboss.netty.channel.Channel,boolean)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
CALLER: org.jboss.netty.channel.ChannelPipelineException#<init>(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.AbstractChannelSink#exceptionCaught(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent,org.jboss.netty.channel.ChannelPipelineException)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#isFireExceptionCaughtLater(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getChannel()
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#rollOver()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#closeFile()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
CALLER: org.apache.log4j.WriterAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.PatternLayout#format(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.PatternLayout#ignoresThrowable()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getThrowableStrRep()
	CALLEE: org.apache.log4j.WriterAppender#shouldFlush(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.QuietWriter#flush()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#refurbishResourceOnCheckin(java.lang.Object)
	CALLEE: static com.mchange.v1.db.sql.ConnectionUtils#attemptClose(java.sql.Connection)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$300(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object,java.sql.Connection)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getConnection()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$200(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.c3p0.SQLWarnings#logAndClearWarnings(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ResourceItselfInUseLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.C3P0PooledConnectionNestedLockLockFetcher#getInUseLock(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$400(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#testPooledConnection(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#access$500(com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.1PooledConnectionResourcePoolManager#finerLoggingTestPooledConnection(java.lang.Object,java.sql.Connection,java.lang.String)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkinStatement(java.lang.Object)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#synchronousDestroyStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeStatement(java.lang.Object,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#statsString()
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkoutQueue(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager#uncheckedDestroyStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#ourResource(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#refreshStatement(java.sql.PreparedStatement)
	CALLEE: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#doCheckinResource(javax.sql.ConnectionEvent)
CALLER: com.mchange.v2.c3p0.impl.NewProxyConnection.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: static com.mchange.v2.c3p0.impl.NewProxyConnection#access$000(com.mchange.v2.c3p0.impl.NewProxyConnection)
CALLER: org.eclipse.jetty.webapp.ClasspathPattern#setPatterns(java.lang.String[])
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern#addPatterns(java.lang.String[])
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newSessionHandler()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getSecurityHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newSecurityHandler()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#startContext()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: javax.servlet.ServletContextEvent#<init>(javax.servlet.ServletContext)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#callContextInitialized(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#callContextInitialized(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
CALLER: static com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: static com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.SyncedCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: static com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#<clinit>()
	CALLEE: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(boolean,boolean)
CALLER: static com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#_find(java.sql.Connection,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: com.mchange.v2.coalesce.AbstractWeakCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.AbstractStrongCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.coalesce.SyncedCoalescer#coalesce(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#<init>()
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#init(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: static com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#<clinit>()
	CALLEE: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(com.mchange.v2.coalesce.CoalesceChecker,boolean,boolean)
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#<init>()
	CALLEE: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey.1#<init>()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#getNumStatementsForConnection(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#cullNext()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#finest(java.lang.String)
	CALLEE: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#access$100()
	CALLEE: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#access$200(com.mchange.v2.c3p0.stmt.GooGooStatementCache,java.lang.Object,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#contains(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.KeyRec#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache.1)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.KeyRec#<init>()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#addStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#<init>(com.mchange.v2.c3p0.stmt.GooGooStatementCache)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#addStatementForConnection(java.lang.Object,java.sql.Connection)
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#addStatementForConnection(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.ConnectionStatementManager#statementSet(java.sql.Connection)
CALLER: com.mchange.v2.util.ResourceClosedException#setRootCause(java.lang.Throwable)
	CALLEE: static com.mchange.v2.lang.VersionUtils#isAtLeastJavaVersion14()
CALLER: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintStream)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintStream)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#isFireExceptionCaughtLater(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getChannel()
CALLER: org.apache.log4j.PatternLayout#format(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.spi.LoggingEvent#getThrowableStrRep()
	CALLEE: org.apache.log4j.spi.ThrowableInformation#getThrowableStrRep()
CALLER: org.apache.log4j.helpers.QuietWriter#flush()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: com.mchange.v2.c3p0.stmt.DoubleMaxStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#deathmarchStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.PerConnectionMaxOnlyStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.DeathmarchConnectionStatementManager#getDeathmarch(java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#deathmarchStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.GlobalMaxOnlyStatementCache#addStatementToDeathmarches(java.lang.Object,java.sql.Connection)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#deathmarchStatement(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.ConnectionEventListenerImpl#doCheckinResource(javax.sql.ConnectionEvent)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkinPooledConnection(javax.sql.PooledConnection)
CALLER: static com.mchange.v2.c3p0.impl.NewProxyConnection#access$000(com.mchange.v2.c3p0.impl.NewProxyConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#detach()
CALLER: org.eclipse.jetty.webapp.ClasspathPattern#addPatterns(java.lang.String[])
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern#createEntry(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#newSessionHandler()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#<init>()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$300(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#callContextInitialized(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getServletContext()
	CALLEE: static org.eclipse.jetty.util.LazyList#contains(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#setEnabled(boolean)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#callContextInitialized(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
CALLER: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(boolean,boolean)
	CALLEE: static com.mchange.v2.coalesce.CoalescerFactory#createCoalescer(com.mchange.v2.coalesce.CoalesceChecker,boolean,boolean)
CALLER: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#<init>()
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#<init>()
CALLER: static com.mchange.v2.c3p0.stmt.GooGooStatementCache#access$200(com.mchange.v2.c3p0.stmt.GooGooStatementCache,java.lang.Object,int)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#removeStatement(java.lang.Object,int)
CALLER: org.apache.log4j.helpers.PatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.DatePatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternConverter#spacePad(java.lang.StringBuffer,int)
CALLER: org.apache.log4j.spi.ThrowableInformation#getThrowableStrRep()
	CALLEE: org.apache.log4j.Category#getLoggerRepository()
	CALLEE: static org.apache.log4j.DefaultThrowableRenderer#render(java.lang.Throwable)
	CALLEE: org.apache.log4j.Hierarchy#getThrowableRenderer()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#deathmarchStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache.Deathmarch#getNextLong()
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#checkinPooledConnection(javax.sql.PooledConnection)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkConnectionInUseAndCheckin(javax.sql.PooledConnection)
CALLER: org.eclipse.jetty.webapp.ClasspathPattern#createEntry(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern.Entry#<init>(org.eclipse.jetty.webapp.ClasspathPattern.1)
CALLER: static org.eclipse.jetty.server.session.SessionHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: org.eclipse.jetty.server.session.SessionHandler#<init>()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#<init>(org.eclipse.jetty.server.SessionManager)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.lang.Object,java.lang.Class)
CALLER: com.mchange.v2.c3p0.stmt.StatementCacheKey#<init>(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#init(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
CALLER: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.helpers.PatternParser.DatePatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#getFileName()
	CALLEE: org.apache.log4j.spi.LocationInfo#getLineNumber()
	CALLEE: org.apache.log4j.spi.LocationInfo#getMethodName()
CALLER: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Priority#toString()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLevel()
	CALLEE: static org.apache.log4j.spi.LoggingEvent#getStartTime()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getThreadName()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getNDC()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getRenderedMessage()
CALLER: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getProperties()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getMDC(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
	CALLEE: com.mchange.v2.c3p0.util.ConnectionEventSupport#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkConnectionInUseAndCheckin(javax.sql.PooledConnection)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.resourcepool.BasicResourcePool#checkinResource(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#getPhysicalConnection()
	CALLEE: com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool#unmarkPhysicalConnectionInUse(java.sql.Connection)
CALLER: org.eclipse.jetty.webapp.ClasspathPattern.Entry#<init>(org.eclipse.jetty.webapp.ClasspathPattern.1)
	CALLEE: org.eclipse.jetty.webapp.ClasspathPattern.Entry#<init>()
CALLER: static javax.servlet.SessionTrackingMode#<clinit>()
	CALLEE: javax.servlet.SessionTrackingMode#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.server.session.AbstractSessionManager#<clinit>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.1#<init>()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#<init>()
CALLER: org.eclipse.jetty.server.session.SessionHandler#<init>(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
CALLER: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLoggerName()
CALLER: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#getClassName()
CALLER: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#<init>(java.lang.Throwable,java.lang.String)
CALLER: org.apache.log4j.spi.LoggingEvent#getNDC()
	CALLEE: static org.apache.log4j.NDC#get()
CALLER: org.apache.log4j.spi.LoggingEvent#getRenderedMessage()
	CALLEE: org.apache.log4j.Category#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getRendererMap()
	CALLEE: org.apache.log4j.or.RendererMap#findAndRender(java.lang.Object)
CALLER: org.apache.log4j.spi.LoggingEvent#getProperties()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getMDCCopy()
CALLER: org.apache.log4j.spi.LoggingEvent#getMDC(java.lang.String)
	CALLEE: static org.apache.log4j.MDC#get(java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#<init>(org.eclipse.jetty.server.session.AbstractSessionManager)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionTrackingModes(java.util.Set)
CALLER: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)
CALLER: static org.apache.log4j.spi.LocationInfo#<clinit>()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.spi.LocationInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.spi.LocationInfo#class$(java.lang.String)
CALLER: org.apache.log4j.spi.LocationInfo#<init>(java.lang.Throwable,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.NDC#get()
	CALLEE: static org.apache.log4j.NDC#getCurrentStack()
CALLER: org.apache.log4j.spi.LoggingEvent#getMDCCopy()
	CALLEE: static org.apache.log4j.MDC#getContext()
CALLER: static org.apache.log4j.MDC#get(java.lang.String)
	CALLEE: org.apache.log4j.MDC#get0(java.lang.String)
CALLER: static org.apache.log4j.MDC#<clinit>()
	CALLEE: org.apache.log4j.MDC#<init>()
CALLER: org.apache.log4j.spi.LocationInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.spi.LocationInfo#appendFragment(java.lang.StringBuffer,java.lang.String)
CALLER: static org.apache.log4j.MDC#getContext()
	CALLEE: org.apache.log4j.MDC#getContext0()
CALLER: org.apache.log4j.MDC#<init>()
	CALLEE: static org.apache.log4j.helpers.Loader#isJava1()
	CALLEE: org.apache.log4j.helpers.ThreadLocalMap#<init>()
	CALLEE: static org.apache.log4j.MDC#class$(java.lang.String)
CALLER: org.apache.log4j.helpers.DateTimeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)
CALLER: org.eclipse.jetty.servlet.ErrorPageErrorHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
CALLER: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey.1#checkCoalesce(java.lang.Object,java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#equals(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#remove(java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeUpdate()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#close()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#checkinStatement(java.sql.Statement)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveUncachedStatement(java.sql.Statement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#detach()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeQuery()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markActiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection,java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection,java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#getIdentifierQuoteString()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#isDetached()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.ValueIterator#next()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#value()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#nextEntry()
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#hasNext()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#advance()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#key()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#getGeneratedKeys()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markActiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection,java.lang.Object,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setTimestamp(int,java.sql.Timestamp)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setNull(int,int)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setString(int,java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setDouble(int,double)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setLong(int,long)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setInt(int,int)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#setBoolean(int,boolean)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#isDetached()
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#slice(int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getByte(int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getByte(int)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorThread#run()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#run()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$102(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$200(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$400(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#getInstance()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$500(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$600(org.eclipse.jetty.server.ShutdownMonitor)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool.3#run()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#take()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#poll()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$000(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#runJob(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$100(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$200(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$300(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$400(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$500(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$800(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$600(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$700()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool.2#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.server.handler.ContextHandler.CLDump#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.CLDump#<init>(java.lang.ClassLoader)
CALLER: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#grow()
CALLER: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#expireTimeouts(long)
	CALLEE: static org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#access$800(org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#remove(org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout)
CALLER: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#clearTimeouts(java.util.Set)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelBucket#pollTimeout()
CALLER: org.jboss.netty.channel.DefaultServerChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setOptions(java.util.Map)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#getWriteBufferHighWaterMark()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setWriteBufferLowWaterMark0(int)
CALLER: org.eclipse.jetty.server.AbstractConnector#getName()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getHost()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getLocalPort()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getPort()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getFuture()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getValue()
	CALLEE: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioDatagramWorker#disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#offer(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getFuture()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: static org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#handleServerSocket(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
CALLER: org.eclipse.jetty.servlet.ServletHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object[],java.lang.Object[],java.lang.String,boolean)
CALLER: org.eclipse.jetty.servlet.ServletHandler#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
	CALLEE: static org.eclipse.jetty.util.LazyList#array2List(java.lang.Object[])
CALLER: org.jboss.netty.channel.SimpleChannelHandler#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.logging.LoggingHandler#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.BasePipelineFactory.StandardLoggingHandler#log(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#handleDownstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
CALLER: org.eclipse.jetty.servlet.ServletHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServlets()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletMappings()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandlers()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBeans()
	CALLEE: static org.eclipse.jetty.util.component.AggregateLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getFilters()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getFilterMappings()
CALLER: com.mchange.v2.c3p0.stmt.GooGooStatementCache.StatementDestructionManager.1UncheckedStatementCloseTask#run()
	CALLEE: static com.mchange.v1.db.sql.StatementUtils#attemptClose(java.sql.Statement)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getSink()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
CALLER: org.eclipse.jetty.server.session.SessionHandler#clearEventListeners()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#clearEventListeners()
CALLER: org.eclipse.jetty.server.session.SessionHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#addEventListener(java.util.EventListener)
CALLER: org.traccar.BaseProtocolDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.protocol.XirgoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.BaseProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.TytanProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.CastelProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.Gps103ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.AtrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.NoranProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.GoSafeProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
CALLER: org.jboss.netty.handler.codec.oneone.OneToOneDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.traccar.FilterHandler#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.ReverseGeocoderHandler#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.BaseProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MtxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Avl301ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tk103ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gl100ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gl200ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.T55ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xexun2ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.XexunProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TotemProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EnforaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MeiligaoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MaxonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SuntechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ProgressProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.H02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Jt600ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Ev603ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.V680ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Pt502ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tr20ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MeitrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SkypatrolProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gt02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gt06ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MegastekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GpsGateProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TeltonikaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tlt2hProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.WondexProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CellocatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GalileoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.YwtProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tk102ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.IntellitracProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xt7ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.WialonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CarscopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ApelProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ManPowerProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GlobalSatProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Pt3000ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.RuptelaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TopflytechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.LaipacProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AplicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GotopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SanavProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.M2mProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.OsmAndProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EasyTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.KhdProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.PiligrimProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Stl060ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CarTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MiniFinderProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.HaicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EelinkProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.BoxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.FreedomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TelikProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TrackboxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.VisiontekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.OrionProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.RitiProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.UlbotechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TramigoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tr900ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Ardi01ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xt013ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AutoFonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AutoFon45ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.BceProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.traccar.TrackerEventHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.traccar.DetectorHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.traccar.BasePipelineFactory.OpenChannelHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.traccar.TrackerEventHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.traccar.TrackerEventHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
CALLER: org.jboss.netty.handler.logging.LoggingHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.BasePipelineFactory.StandardLoggingHandler#log(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.timeout.IdleStateAwareChannelHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.SimpleChannelHandler#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.traccar.TrackerEventHandler#channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)
CALLER: org.traccar.protocol.CalAmpProtocolDecoder#handleUpstream(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.traccar.protocol.CalAmpProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#hashCode()
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#hashCode(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#equals(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#equals(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.ValueIdentityStatementCacheKey#init(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#init(java.sql.Connection,java.lang.String,boolean,int,int,int[],java.lang.String[],java.lang.Integer,java.lang.Integer)
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#hashCode(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: org.eclipse.jetty.servlet.ServletHandler#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateNameMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
CALLER: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#equals(java.lang.Object)
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#equals(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
CALLER: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#hashCode()
	CALLEE: static com.mchange.v2.c3p0.stmt.StatementCacheKey#hashCode(com.mchange.v2.c3p0.stmt.StatementCacheKey)
CALLER: org.jboss.netty.channel.UpstreamChannelStateEvent#toString()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
CALLER: org.jboss.netty.channel.DownstreamChannelStateEvent#toString()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
CALLER: org.apache.log4j.or.RendererMap#findAndRender(java.lang.Object)
	CALLEE: org.apache.log4j.or.RendererMap#get(java.lang.Class)
	CALLEE: org.apache.log4j.or.DefaultRenderer#doRender(java.lang.Object)
CALLER: org.jboss.netty.channel.DefaultExceptionEvent#toString()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
CALLER: com.mchange.v2.c3p0.stmt.StatementCacheKey#toString()
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(int[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.Object[])
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: static com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#access$000(com.mchange.v2.c3p0.impl.NewProxyPreparedStatement)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: static com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#access$000(com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData)
CALLER: org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#cancel()
	CALLEE: static org.jboss.netty.util.HashedWheelTimer#access$700(org.jboss.netty.util.HashedWheelTimer)
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#state()
	CALLEE: org.jboss.netty.util.HashedWheelTimer.HashedWheelTimeout#compareAndSetState(int,int)
CALLER: com.mchange.v2.resourcepool.BasicResourcePool.2#run()
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceCheckedIn(java.lang.Object,int,int,int)
CALLER: org.eclipse.jetty.server.session.SessionHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getContainer()
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
CALLER: org.eclipse.jetty.server.session.SessionHandler#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#doStop()
CALLER: org.eclipse.jetty.server.session.SessionHandler#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
CALLER: static com.mchange.v2.c3p0.stmt.StatementCacheKey#equals(com.mchange.v2.c3p0.stmt.StatementCacheKey,java.lang.Object)
	CALLEE: static com.mchange.v2.lang.ObjectUtils#eqOrBothNull(java.lang.Object,java.lang.Object)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroup#remove(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getCloseFuture()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getId()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#remove(java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#removeListener(org.jboss.netty.channel.ChannelFutureListener)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#maybeDirtyTransaction()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#maybeDirtyTransaction()
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#checkinStatement(java.sql.Statement)
	CALLEE: com.mchange.v2.c3p0.stmt.GooGooStatementCache#checkinStatement(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupStatementResultSets(java.sql.Statement)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveUncachedStatement(java.sql.Statement)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupStatementResultSets(java.sql.Statement)
CALLER: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#detach()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#markActiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#resultSets(java.sql.Statement,boolean)
CALLER: static com.mchange.v2.c3p0.impl.NewProxyResultSet#<clinit>()
	CALLEE: static com.mchange.v2.log.MLog#getLogger(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection,java.lang.Object,java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#nextEntry()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashIterator#advance()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#key()
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$400(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.Socket)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$500(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.ServerSocket)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#runJob(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.1#run()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection.1#run()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.1#run()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#run()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet.1#run()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint.1#run()
CALLER: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$600(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#idleJobPoll()
CALLER: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setReceiveBufferSize(int)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toBoolean(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setBacklog(int)
CALLER: org.jboss.netty.channel.DefaultChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#bind(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getDatagramChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#connect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture,java.net.InetSocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getDatagramChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isBound()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getRemoteAddress()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramWorker#disconnect(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelDisconnected(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelDisconnectedLater(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaughtLater(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getDatagramChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isConnected()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#isIoThread(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker.1#<init>(org.jboss.netty.channel.socket.nio.AbstractNioWorker,org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getInternalInterestOps()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setInternalInterestOps(int)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelInterestChanged(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelInterestChangedLater(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#offer(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#offer(org.jboss.netty.channel.MessageEvent)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioWorker#cleanUpWriteBuffer(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#write0(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isBound()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#scheduleWriteIfNecessary(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isBound()
CALLER: static org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#handleServerSocket(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#close(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getFuture()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss#bind(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)
CALLER: static org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#handleAcceptedSocket(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#close(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getFuture()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getState()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getValue()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#offer(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#writeFromUserCode(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
CALLER: static org.eclipse.jetty.servlet.FilterHolder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#writeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.SimpleChannelHandler.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#closeRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#bindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#unbindRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#connectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#disconnectRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#setInterestOpsRequested(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#notifyHandlerException(org.jboss.netty.channel.ChannelEvent,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getSink()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink#eventSunk(org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#access$000(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
CALLER: org.traccar.BasePipelineFactory.StandardLoggingHandler#log(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getChannel()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getId()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getChannel()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#hexDump(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.helper.Log#debug(java.lang.String)
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getCause()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getMessage()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.handler.codec.oneone.OneToOneEncoder#doEncode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageEncoder#encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.string.StringEncoder#encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getFuture()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline.DiscardingChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getChannel()
	CALLEE: static org.jboss.netty.channel.Channels#failedFuture(org.jboss.netty.channel.Channel,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getChannel()
	CALLEE: org.jboss.netty.channel.socket.ChannelRunnableWrapper#<init>(org.jboss.netty.channel.Channel,java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.AbstractChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#executeInIoThread(java.lang.Runnable)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext,org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.DefaultChannelPipeline#access$100(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
CALLER: org.traccar.protocol.XirgoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromMph(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
CALLER: org.traccar.BaseProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.protocol.BoxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.FreedomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TelikProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TrackboxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.VisiontekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.OrionProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.RitiProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.UlbotechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TramigoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tr900ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Ardi01ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xt013ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AutoFonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AutoFon45ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.BceProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.BaseProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MtxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Avl301ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tk103ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gl100ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gl200ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.T55ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xexun2ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.XexunProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TotemProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EnforaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MeiligaoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MaxonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SuntechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ProgressProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.H02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Jt600ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Ev603ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.V680ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Pt502ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tr20ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MeitrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SkypatrolProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gt02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Gt06ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MegastekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GpsGateProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TeltonikaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tlt2hProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.WondexProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CellocatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GalileoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.YwtProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Tk102ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.IntellitracProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Xt7ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.WialonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CarscopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ApelProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.ManPowerProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GlobalSatProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Pt3000ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.RuptelaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TopflytechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.LaipacProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.AplicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GotopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.SanavProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.M2mProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.OsmAndProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EasyTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.KhdProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.PiligrimProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.Stl060ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.CarTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.MiniFinderProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.HaicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.EelinkProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
CALLER: org.traccar.protocol.TytanProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: org.traccar.protocol.CastelProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapShort(short)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: static org.traccar.helper.Crc#crc16Ccitt(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: org.traccar.protocol.Gps103ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: org.traccar.protocol.AtrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.protocol.AtrackProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.net.SocketAddress,long,int)
	CALLEE: static org.traccar.protocol.AtrackProtocolDecoder#readString(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.NoranProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.GoSafeProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getAttachment()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#getMaxCumulationBufferCapacity()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#slice(int,int)
CALLER: org.jboss.netty.handler.codec.http.HttpChunkAggregator#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpCodecUtil#removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunkAggregator#appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#isLast()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#trailingHeaders()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setChunked(boolean)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunk.1#isLast()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#isLast()
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunk.1#getContent()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#getContent()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#getContent()
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunk.1#trailingHeaders()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#hasNext()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#set(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaders.1#iterator()
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getAttachment()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getWrittenAmount()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.Binder#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.SimpleChannelUpstreamHandler.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.Binder#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getPipelineFactory()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getOptions()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.channel.AbstractChannel#bind(java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)
	CALLEE: org.jboss.netty.bootstrap.ServerBootstrap.Binder.1#<init>(org.jboss.netty.bootstrap.ServerBootstrap.Binder)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.timeout.IdleStateHandler#initialize(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.timeout.IdleStateHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: static org.jboss.netty.handler.timeout.IdleStateHandler#destroy(org.jboss.netty.channel.ChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.Binder#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getCause()
CALLER: org.jboss.netty.channel.SimpleChannelUpstreamHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getCause()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getLast()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getNames()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#get(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.traccar.FilterHandler#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.FilterHandler#filter(org.traccar.model.Position)
CALLER: org.traccar.ReverseGeocoderHandler#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#getValid()
	CALLEE: org.traccar.model.Position#getLatitude()
	CALLEE: org.traccar.model.Position#getLongitude()
	CALLEE: org.traccar.geocode.NominatimReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: org.traccar.geocode.GisgraphyReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: org.traccar.geocode.GoogleReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: org.traccar.model.Position#setAddress(java.lang.String)
CALLER: org.jboss.netty.handler.codec.string.StringDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
CALLER: org.traccar.protocol.MtxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Avl301ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.protocol.Avl301ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.protocol.Avl301ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.Tk103ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Gl100ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Gl200ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.T55ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.Xexun2ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.XexunProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.TotemProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.EnforaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
CALLER: org.traccar.protocol.MeiligaoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.MeiligaoProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeiligaoProtocolDecoder#getMeiligaoServer(org.jboss.netty.channel.Channel)
	CALLEE: org.traccar.protocol.MeiligaoProtocolDecoder#getImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.traccar.protocol.MaxonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.SuntechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
CALLER: org.traccar.protocol.ProgressProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.ProgressProtocolDecoder#loadLastIndex()
	CALLEE: org.traccar.protocol.ProgressProtocolDecoder#requestArchive(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
CALLER: org.traccar.protocol.H02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.H02ProtocolDecoder#decodeText(java.lang.String)
	CALLEE: org.traccar.protocol.H02ProtocolDecoder#decodeBinary(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
CALLER: org.traccar.protocol.Jt600ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.traccar.protocol.Jt600ProtocolDecoder#decodeNormalMessage(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Jt600ProtocolDecoder#decodeAlertMessage(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
CALLER: org.traccar.protocol.Ev603ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#getCourse()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.V680ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.Pt502ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Tr20ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.NavisProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#processSingle(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#processArray(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#processHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.MeitrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.traccar.protocol.MeitrackProtocolDecoder#decodeBinaryMessage(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeitrackProtocolDecoder#decodeRegularMessage(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.traccar.protocol.SkypatrolProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readMedium()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.SkypatrolProtocolDecoder#checkBit(long,int)
	CALLEE: static org.traccar.protocol.SkypatrolProtocolDecoder#convertCoordinate(long)
CALLER: org.traccar.protocol.Gt02ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.protocol.Gt02ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.Gt06ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.Gt06ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.protocol.Gt06ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int,int)
CALLER: org.traccar.protocol.MegastekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.protocol.MegastekProtocolDecoder#parseGPRMC(java.lang.String,org.traccar.model.Position)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String,boolean)
CALLER: org.traccar.protocol.NavigilProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#sendAcknowledgment(org.jboss.netty.channel.Channel,int)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parseUnitReport(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parseTg2Report(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parsePositionReport(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parsePositionReport2(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parseSnapshot4(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.protocol.NavigilProtocolDecoder#parseTrackingData(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.GpsGateProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.GpsGateProtocolDecoder#send(org.jboss.netty.channel.Channel,java.lang.String)
CALLER: org.traccar.protocol.TeltonikaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.TeltonikaProtocolDecoder#parseIdentification(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TeltonikaProtocolDecoder#parseLocation(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#sendContinue(org.jboss.netty.channel.Channel)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,short,short)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#parseFormatA1(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder#parseFormatA(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
CALLER: org.traccar.protocol.Tlt2hProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.SyrusProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromMph(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#getTime(long,long,long)
	CALLEE: org.traccar.protocol.SyrusProtocolDecoder#getTime(long)
CALLER: org.traccar.protocol.WondexProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
CALLER: org.traccar.protocol.CellocatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.protocol.CellocatorProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,long,byte)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromMps(double)
CALLER: org.traccar.protocol.GalileoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#getFixTime()
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: static org.traccar.protocol.GalileoProtocolDecoder#getTagLength(int)
	CALLEE: org.traccar.protocol.GalileoProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.YwtProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
CALLER: org.traccar.protocol.Tk102ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.IntellitracProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
CALLER: org.traccar.protocol.Xt7ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.WialonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.protocol.WialonProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.lang.String,java.lang.Integer)
	CALLEE: org.traccar.protocol.WialonProtocolDecoder#decodePosition(java.lang.String)
CALLER: org.traccar.protocol.CarscopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.ApelProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.ApelProtocolDecoder#sendSimpleMessage(org.jboss.netty.channel.Channel,short)
	CALLEE: org.traccar.protocol.ApelProtocolDecoder#requestArchive(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.ManPowerProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.GlobalSatProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.protocol.GlobalSatProtocolDecoder#decodeOriginal(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: org.traccar.protocol.GlobalSatProtocolDecoder#decodeAlternative(org.jboss.netty.channel.Channel,java.lang.String)
CALLER: org.traccar.protocol.Pt3000ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.RuptelaProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
CALLER: org.traccar.protocol.TopflytechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.LaipacProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.Crc#nmeaChecksum(java.lang.String)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.AplicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapShort(short)
	CALLEE: static org.traccar.protocol.AplicomProtocolDecoder#imeiFromUnitId(long)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.GotopProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.SanavProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.GatorProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readCoordinate(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.M2mProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#setByte(int,int)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.OsmAndProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#getParameters()
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,boolean)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpResponseStatus)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#getUri()
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
CALLER: org.traccar.protocol.EasyTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.KhdProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.traccar.helper.Crc#xorChecksum(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readCoordinate(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.KhdProtocolDecoder#readSerialNumber(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
CALLER: org.traccar.protocol.PiligrimProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#getParameters()
	CALLEE: org.traccar.protocol.PiligrimProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#getUri()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
CALLER: org.traccar.protocol.Stl060ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
CALLER: org.traccar.protocol.CarTrackProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.MiniFinderProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.HaicomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.EelinkProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.EelinkProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int,int)
CALLER: org.traccar.protocol.BoxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
CALLER: org.traccar.protocol.FreedomProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.TelikProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
CALLER: org.traccar.protocol.TrackboxProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.protocol.TrackboxProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel)
CALLER: org.traccar.protocol.VisiontekProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String,boolean)
CALLER: org.traccar.protocol.OrionProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.protocol.OrionProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.protocol.OrionProtocolDecoder#convertCoordinate(int)
CALLER: org.traccar.protocol.RitiProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
CALLER: org.traccar.protocol.UlbotechProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.TramigoProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Tr900ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.Ardi01ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
CALLER: org.traccar.protocol.Xt013ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
CALLER: org.traccar.protocol.AutoFonProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.protocol.AutoFonProtocolDecoder#decodePosition(org.jboss.netty.buffer.ChannelBuffer,boolean)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.AutoFon45ProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(byte[])
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(byte[])
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[],int,int)
	CALLEE: org.traccar.protocol.AutoFon45ProtocolDecoder#crc(byte[],int,int)
	CALLEE: static org.traccar.protocol.AutoFon45ProtocolDecoder#convertCoordinate(short,int)
CALLER: org.traccar.protocol.BceProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.BceProtocolDecoder#checkBit(int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeLong(long)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.traccar.TrackerEventHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.TrackerEventHandler#processSinglePosition(org.traccar.model.Position)
	CALLEE: org.traccar.database.DataManager#updateLatestPosition(org.traccar.model.Position,java.lang.Long)
	CALLEE: static org.traccar.Context#getDataCache()
	CALLEE: org.traccar.database.DataCache#update(org.traccar.model.Position)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: org.traccar.DetectorHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.traccar.BasePipelineFactory#getPipeline()
	CALLEE: org.jboss.netty.channel.Channels.1#getPipeline()
	CALLEE: org.traccar.TrackerServer#getProtocol()
	CALLEE: org.traccar.TrackerServer#getPipelineFactory()
	CALLEE: org.traccar.DetectorHandler#checkPipeline(java.lang.String,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#writeComplete(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.WriteCompletionEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#childChannelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#childChannelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChildChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.traccar.BasePipelineFactory.OpenChannelHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.traccar.TrackerServer#getChannelGroup()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroup#add(java.lang.Object)
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelOpen(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelBound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelUnbound(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.traccar.TrackerEventHandler#channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
CALLER: org.jboss.netty.channel.SimpleChannelHandler#channelInterestChanged(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.SimpleChannelHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getCause()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getLast()
CALLER: org.traccar.TrackerEventHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.DefaultExceptionEvent#getChannel()
CALLER: org.traccar.TrackerEventHandler#channelIdle(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.handler.timeout.IdleStateEvent)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
CALLER: org.traccar.protocol.CalAmpProtocolDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
	CALLEE: org.traccar.protocol.CalAmpProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.net.SocketAddress,int,int,int)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromCps(double)
CALLER: static com.mchange.v2.c3p0.stmt.StatementCacheKey#hashCode(com.mchange.v2.c3p0.stmt.StatementCacheKey)
	CALLEE: static com.mchange.v2.lang.ObjectUtils#hashOrZero(java.lang.Object)
	CALLEE: static com.mchange.v1.util.ArrayUtils#hashOrZeroArray(int[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#hashOrZeroArray(java.lang.Object[])
CALLER: org.jboss.netty.channel.AbstractChannel#toString()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getParent()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isConnected()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#isConnected()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isConnected()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getIdString()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
CALLER: static org.jboss.netty.channel.UpstreamChannelStateEvent.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: static org.jboss.netty.channel.DownstreamChannelStateEvent.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: org.apache.log4j.or.RendererMap#get(java.lang.Class)
	CALLEE: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(int[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(java.lang.Object[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(int[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.Object[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(double[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(float[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(long[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(short[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(char[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(byte[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(boolean[])
CALLER: static com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#access$000(com.mchange.v2.c3p0.impl.NewProxyPreparedStatement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#detach()
CALLER: static com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#access$000(com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#detach()
CALLER: com.mchange.v2.resourcepool.ResourcePoolEventSupport#fireResourceCheckedIn(java.lang.Object,int,int,int)
	CALLEE: com.mchange.v2.resourcepool.ResourcePoolEvent#<init>(com.mchange.v2.resourcepool.ResourcePool,java.lang.Object,boolean,int,int,int)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap#remove(java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap#hashOf(java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#segmentFor(int)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#remove(java.lang.Object,int,java.lang.Object,boolean)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#cleanupStatementResultSets(java.sql.Statement)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#resultSets(java.sql.Statement,boolean)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet,com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#idleJobPoll()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#poll(long,java.util.concurrent.TimeUnit)
CALLER: org.jboss.netty.channel.DefaultServerChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory)
CALLER: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setReceiveBufferSize(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultServerSocketChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setWriteBufferLowWaterMark0(int)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setWriteBufferHighWaterMark0(int)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setWriteSpinCount(int)
CALLER: static org.jboss.netty.channel.Channels#fireChannelBound(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
CALLER: static org.jboss.netty.channel.socket.nio.NioDatagramPipelineSink#close(org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelUnbound(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelClosed(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getDatagramChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isBound()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#setClosed()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isBound()
	CALLEE: org.jboss.netty.channel.AbstractChannel#isOpen()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
CALLER: static org.jboss.netty.channel.Channels#fireChannelConnected(org.jboss.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getInternalInterestOps()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getInternalInterestOps()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setInternalInterestOps(int)
	CALLEE: org.jboss.netty.channel.AbstractChannel#setInternalInterestOps(int)
CALLER: static org.jboss.netty.channel.Channels#fireChannelInterestChanged(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelState,java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendUpstream(org.jboss.netty.channel.ChannelEvent)
CALLER: static org.jboss.netty.channel.Channels#fireChannelInterestChangedLater(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#execute(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.Channels.3#<init>(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#offer(org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#getWriteBufferHighWaterMark()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelInterestChanged(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#getMessageSize(org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioChannel#access$000(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#getWriteBufferHighWaterMark()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#scheduleWriteIfNecessary(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#registerTask(java.lang.Runnable)
CALLER: static org.jboss.netty.channel.socket.nio.NioServerSocketPipelineSink.1#<clinit>()
	CALLEE: static org.jboss.netty.channel.ChannelState#values()
CALLER: org.jboss.netty.channel.socket.nio.NioServerBoss#bind(org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#registerTask(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerBoss.RegisterTask#<init>(org.jboss.netty.channel.socket.nio.NioServerBoss,org.jboss.netty.channel.socket.nio.NioServerSocketChannel,org.jboss.netty.channel.ChannelFuture,java.net.SocketAddress)
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#access$000(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getActualDownstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getLocalAddress()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getLocalAddress()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#hexDump(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#hexDump(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: static org.traccar.helper.Log#debug(java.lang.String)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#debug(java.lang.Object)
	CALLEE: org.apache.log4j.Category#debug(java.lang.Object)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageEncoder#encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[])
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpCodecUtil#removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpCodecUtil#isContentLengthSet(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpCodecUtil#isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseEncoder#encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
CALLER: org.jboss.netty.handler.codec.string.StringEncoder#encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getDefaultOrder()
CALLER: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
CALLER: static org.jboss.netty.channel.Channels#failedFuture(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.FailedChannelFuture#<init>(org.jboss.netty.channel.Channel,java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.ChannelRunnableWrapper#<init>(org.jboss.netty.channel.Channel,java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#<init>(org.jboss.netty.channel.Channel,boolean)
CALLER: org.jboss.netty.channel.AbstractChannelSink#execute(org.jboss.netty.channel.ChannelPipeline,java.lang.Runnable)
	CALLEE: static org.jboss.netty.channel.Channels#succeededFuture(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getChannel()
	CALLEE: static org.jboss.netty.channel.Channels#failedFuture(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.Channels.7#run()
	CALLEE: org.jboss.netty.channel.Channels.4#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker.1#run()
	CALLEE: org.jboss.netty.channel.Channels.3#run()
	CALLEE: org.jboss.netty.channel.Channels.6#run()
	CALLEE: org.jboss.netty.channel.Channels.5#run()
CALLER: static org.jboss.netty.channel.DefaultChannelPipeline#access$100(org.jboss.netty.channel.DefaultChannelPipeline,org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getActualUpstreamContext(org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext)
CALLER: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String,boolean)
CALLER: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#clear()
CALLER: static org.traccar.helper.Crc#crc16Ccitt(java.nio.ByteBuffer)
	CALLEE: static org.traccar.helper.Crc#crc16Reflected(java.nio.ByteBuffer,int,int[])
CALLER: static org.traccar.protocol.AtrackProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.net.SocketAddress,long,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeLong(long)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: static org.traccar.protocol.AtrackProtocolDecoder#readString(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#getChannel()
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.traccar.protocol.Stl060FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.OrionFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.UlbotechFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TramigoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AutoFonFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AutoFon45FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.BceFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.XexunFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TotemFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeiligaoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.H02FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Jt600FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Pt502FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeitrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Gt06FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavigilFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TeltonikaFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.WondexFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.CellocatorFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.GalileoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.IntellitracFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AtrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AplicomFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#updateCumulation(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#slice()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#copy()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#numComponents()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getBuffer(int)
CALLER: static org.jboss.netty.handler.codec.http.HttpHeaders#is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getProtocolVersion()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#contains(java.lang.String,java.lang.String,boolean)
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#compareTo(org.jboss.netty.handler.codec.http.HttpVersion)
CALLER: static org.jboss.netty.handler.codec.http.HttpHeaders#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaders.1#<init>()
CALLER: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
CALLER: static org.jboss.netty.handler.codec.http.HttpCodecUtil#removeTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#getAll(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#set(java.lang.String,java.lang.Iterable)
CALLER: static org.jboss.netty.handler.codec.http.HttpChunk#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpChunk.1#<init>()
CALLER: org.jboss.netty.handler.codec.http.HttpChunkAggregator#appendToCumulation(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#copy()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#decompose(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#numComponents()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getContent()
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#cleanup(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.channel.UpstreamChannelStateEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#sendUpstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#callDecode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer,java.net.SocketAddress)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#terminate()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#getLast()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#getNames()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getName()
CALLER: org.jboss.netty.channel.DefaultChannelPipeline#get(java.lang.String)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getHandler()
CALLER: org.traccar.FilterHandler#filter(org.traccar.model.Position)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.FilterHandler#filterInvalid(org.traccar.model.Position)
	CALLEE: org.traccar.FilterHandler#filterZero(org.traccar.model.Position)
	CALLEE: org.traccar.FilterHandler#filterDuplicate(org.traccar.model.Position)
	CALLEE: org.traccar.FilterHandler#filterDistance(org.traccar.model.Position)
	CALLEE: org.traccar.FilterHandler#filterLimit(org.traccar.model.Position)
CALLER: org.traccar.geocode.NominatimReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.geocode.Address#<init>()
	CALLEE: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: org.traccar.geocode.Address#setHouse(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setStreet(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setSettlement(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setDistrict(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setState(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setCountry(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setPostcode(java.lang.String)
CALLER: org.traccar.geocode.GisgraphyReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.geocode.Address#<init>()
	CALLEE: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: org.traccar.geocode.Address#setStreet(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setSettlement(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setCountry(java.lang.String)
CALLER: org.traccar.geocode.GoogleReverseGeocoder#getAddress(org.traccar.geocode.AddressFormat,double,double)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.geocode.Address#<init>()
	CALLEE: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: org.traccar.geocode.Address#setHouse(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setStreet(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setSettlement(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setDistrict(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setState(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setCountry(java.lang.String)
	CALLEE: org.traccar.geocode.Address#setPostcode(java.lang.String)
CALLER: org.traccar.protocol.Avl301ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: static org.traccar.protocol.Avl301ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: static org.traccar.protocol.TotemProtocolDecoder.MessageFormat#<clinit>()
	CALLEE: org.traccar.protocol.TotemProtocolDecoder.MessageFormat#<init>(java.lang.String,int)
CALLER: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: static org.traccar.protocol.MeiligaoProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(int)
	CALLEE: static org.traccar.helper.Crc#crc16X25Ccitt(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toByteBuffer()
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.MeiligaoProtocolDecoder#getMeiligaoServer(org.jboss.netty.channel.Channel)
	CALLEE: static org.traccar.Context#getProps()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
CALLER: org.traccar.protocol.MeiligaoProtocolDecoder#getImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.helper.Crc#luhnChecksum(java.lang.String)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.traccar.protocol.ProgressProtocolDecoder#requestArchive(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.H02ProtocolDecoder#decodeText(java.lang.String)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.H02ProtocolDecoder#decodeBinary(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.traccar.protocol.H02ProtocolDecoder#readCoordinate(org.jboss.netty.buffer.ChannelBuffer,boolean)
CALLER: org.traccar.protocol.Jt600ProtocolDecoder#decodeNormalMessage(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexString(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
CALLER: org.traccar.protocol.Jt600ProtocolDecoder#decodeAlertMessage(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.NavisProtocolDecoder#processSingle(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.model.Position#getFixTime()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(java.nio.ByteOrder,int)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#parsePosition(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeInt(int)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder.ParseResult#getPosition()
	CALLEE: org.traccar.protocol.NavisProtocolDecoder.ParseResult#getId()
CALLER: org.traccar.protocol.NavisProtocolDecoder#processArray(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.model.Position#getFixTime()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(java.nio.ByteOrder,int)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#parsePosition(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder.ParseResult#getPosition()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.traccar.protocol.NavisProtocolDecoder#processHandshake(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
CALLER: org.traccar.protocol.MeitrackProtocolDecoder#decodeBinaryMessage(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.MeitrackProtocolDecoder#decodeRegularMessage(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
CALLER: org.traccar.protocol.Gt02ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.traccar.protocol.Gt06ProtocolDecoder#readImei(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: static org.traccar.protocol.Gt06ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int,int)
	CALLEE: static org.traccar.helper.Crc#crc16Ccitt(java.nio.ByteBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.MegastekProtocolDecoder#parseGPRMC(java.lang.String,org.traccar.model.Position)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.BaseProtocolDecoder#identify(java.lang.String,boolean)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.model.Device#getId()
	CALLEE: org.traccar.database.DataManager#getDeviceByUniqueId(java.lang.String)
CALLER: org.traccar.protocol.NavigilProtocolDecoder#sendAcknowledgment(org.jboss.netty.channel.Channel,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: static org.traccar.helper.Crc#crc16X25Ccitt(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toByteBuffer()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parseUnitReport(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parseTg2Report(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parsePositionReport(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readMedium()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parsePositionReport2(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parseSnapshot4(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.NavigilProtocolDecoder#parseTrackingData(org.jboss.netty.buffer.ChannelBuffer,int,long)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.protocol.NavigilProtocolDecoder#convertTimestamp(long)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.GpsGateProtocolDecoder#send(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: static org.traccar.helper.Crc#nmeaChecksum(java.lang.String)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.TeltonikaProtocolDecoder#parseIdentification(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.traccar.protocol.TeltonikaProtocolDecoder#parseLocation(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: static org.traccar.protocol.TeltonikaProtocolDecoder#checkBit(long,int)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#sendContinue(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpResponseStatus)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,short,short)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpResponseStatus)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#parseFormatA1(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.protocol.Mta6ProtocolDecoder#checkBit(long,int)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#readFloat(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#readTime(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder#parseFormatA(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.protocol.Mta6ProtocolDecoder#checkBit(long,int)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#readFloat(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#readTime(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.protocol.CellocatorProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,long,byte)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeZero(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeZero(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.GalileoProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.WialonProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.lang.String,java.lang.Integer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.WialonProtocolDecoder#decodePosition(java.lang.String)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.BaseProtocolDecoder#hasDeviceId()
CALLER: org.traccar.protocol.ApelProtocolDecoder#sendSimpleMessage(org.jboss.netty.channel.Channel,short)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: static org.traccar.helper.Crc#crc32(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.ApelProtocolDecoder#requestArchive(org.jboss.netty.channel.Channel)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: static org.traccar.helper.Crc#crc32(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.GlobalSatProtocolDecoder#decodeOriginal(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromMph(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: static org.traccar.helper.UnitsConverter#knotsFromKph(double)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: org.traccar.protocol.GlobalSatProtocolDecoder#decodeAlternative(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#identify(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Position#setValid(boolean)
CALLER: static org.traccar.protocol.AplicomProtocolDecoder#imeiFromUnitId(long)
	CALLEE: static org.traccar.protocol.AplicomProtocolDecoder#validateImei(long)
CALLER: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: static org.traccar.helper.ChannelBufferTools#readCoordinate(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset)
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#getParameters()
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#getPath()
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#decodeParams(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,boolean)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset,boolean)
CALLER: static org.jboss.netty.handler.codec.http.HttpVersion#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#<init>(java.lang.String,int,int,boolean)
CALLER: static org.jboss.netty.handler.codec.http.HttpResponseStatus#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseStatus#<init>(int,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpResponse#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpResponseStatus)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#<init>(org.jboss.netty.handler.codec.http.HttpVersion)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#setStatus(org.jboss.netty.handler.codec.http.HttpResponseStatus)
CALLER: org.traccar.protocol.KhdProtocolDecoder#readSerialNumber(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
CALLER: org.traccar.protocol.PiligrimProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.lang.String)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpResponseStatus)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.EelinkProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.TrackboxProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: static org.traccar.protocol.OrionProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.traccar.protocol.AutoFonProtocolDecoder#decodePosition(org.jboss.netty.buffer.ChannelBuffer,boolean)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setAltitude(double)
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.AutoFonProtocolDecoder#convertCoordinate(int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(byte[],int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[],int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#buffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(int)
CALLER: org.traccar.TrackerEventHandler#processSinglePosition(org.traccar.model.Position)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#addPosition(org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.model.Position#getFixTime()
	CALLEE: org.traccar.model.Position#getLatitude()
	CALLEE: org.traccar.model.Position#getLongitude()
CALLER: org.traccar.database.DataManager#updateLatestPosition(org.traccar.model.Position,java.lang.Long)
	CALLEE: org.traccar.database.NamedParameterStatement#prepare()
	CALLEE: org.traccar.database.DataManager#assignVariables(org.traccar.database.NamedParameterStatement.Params,org.traccar.model.Position)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setLong(java.lang.String,java.lang.Long)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#executeUpdate()
CALLER: org.traccar.TrackerServer#getPipelineFactory()
	CALLEE: org.jboss.netty.bootstrap.Bootstrap#getPipelineFactory()
CALLER: org.traccar.DetectorHandler#checkPipeline(java.lang.String,org.jboss.netty.channel.ChannelPipeline,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.string.StringDecoder#<init>()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#get(java.lang.String)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#duplicate()
CALLER: org.traccar.protocol.CalAmpProtocolDecoder#sendResponse(org.jboss.netty.channel.Channel,java.net.SocketAddress,int,int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeMedium(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: static com.mchange.v1.util.ArrayUtils#hashOrZeroArray(int[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#hashArray(int[])
CALLER: static com.mchange.v1.util.ArrayUtils#hashOrZeroArray(java.lang.Object[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#hashArray(java.lang.Object[])
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getRemoteAddress()
CALLER: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
	CALLEE: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(double[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(float[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(long[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(short[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(char[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(byte[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: static com.mchange.v1.util.ArrayUtils#toString(boolean[])
	CALLEE: static com.mchange.v1.util.ArrayUtils#toString(java.lang.String[],int)
CALLER: com.mchange.v2.c3p0.impl.NewProxyDatabaseMetaData#detach()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#remove(java.lang.Object,int,java.lang.Object,boolean)
	CALLEE: static org.jboss.netty.util.internal.ConcurrentHashMap.Segment#keyEq(java.lang.Object,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.Segment#newHashEntry(java.lang.Object,int,org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry,java.lang.Object)
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#value()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap.HashEntry#key()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#<init>(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet.1#<init>(com.mchange.v2.c3p0.impl.NewProxyResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#__setInner(java.sql.ResultSet)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#attach(com.mchange.v2.c3p0.impl.NewPooledConnection)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#addConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toBoolean(java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setBroadcast(boolean)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReceiveBufferSize(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setSendBufferSize(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setLoopbackModeDisabled(boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setInterface(java.net.InetAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setNetworkInterface(java.net.NetworkInterface)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setTimeToLive(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setTrafficClass(int)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioSelector#register(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#registerTask(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#setClosed()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setClosed()
CALLER: org.jboss.netty.channel.AbstractChannel#isOpen()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isDone()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getLocalSocketAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getLocalSocketAddress()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getRemoteSocketAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getRemoteSocketAddress()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#getMessageSize(org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getMessage()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioChannel#access$000(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#setUnwritable()
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#getLocalAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getLocalAddress()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#hexDump(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
CALLER: org.apache.log4j.Category#debug(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: static org.jboss.netty.handler.codec.http.HttpCodecUtil#isContentLengthSet(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#getAll(java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.HttpCodecUtil#isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#getAll(java.lang.String)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#dynamicBuffer(org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getDefaultOrder()
CALLER: org.jboss.netty.handler.codec.http.HttpResponseEncoder#encodeInitialLine(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getProtocolVersion()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#getStatus()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseStatus#getReasonPhrase()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseStatus#getCode()
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#hasNext()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpChunkTrailer)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)
CALLER: org.jboss.netty.channel.DownstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
CALLER: org.jboss.netty.channel.FailedChannelFuture#<init>(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#<init>(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.Channels.7#run()
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance(java.nio.ByteOrder)
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#indexOf(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,long)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
CALLER: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: static org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#findEndOfLine(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#failIfNecessary(org.jboss.netty.channel.ChannelHandlerContext,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.CorruptedFrameException#<init>(java.lang.String)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedInt(int)
CALLER: org.traccar.protocol.XexunFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.TotemFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.traccar.protocol.MeiligaoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.H02FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.traccar.protocol.Jt600FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.traccar.protocol.Pt502FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getShort(int)
CALLER: org.traccar.protocol.MeitrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.traccar.protocol.Gt06FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.traccar.protocol.NavigilFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedInt(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
CALLER: org.traccar.protocol.TeltonikaFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
CALLER: org.traccar.protocol.WondexFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.CellocatorFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.GalileoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.IntellitracFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.AtrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.AplicomFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
CALLER: org.traccar.protocol.Stl060FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.traccar.helper.ChannelBufferTools#find(org.jboss.netty.buffer.ChannelBuffer,java.lang.Integer,java.lang.Integer,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.OrionFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.UlbotechFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#indexOf(int,int,byte)
CALLER: org.traccar.protocol.TramigoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[])
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getBytes(int,byte[])
CALLER: org.traccar.protocol.AutoFonFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.AutoFon45FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.traccar.protocol.BceFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: static org.traccar.protocol.BceFrameDecoder#checksum(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#unfoldAndFireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#fireMessageReceived(org.jboss.netty.channel.ChannelHandlerContext,java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#newCumulationBuffer(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.DefaultServerChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#getBufferFactory()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getBuffer(int)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder.State)
CALLER: org.jboss.netty.handler.codec.http.HttpHeaders.1#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaders#<init>()
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Stl060FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.OrionFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.UlbotechFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TramigoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AutoFonFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AutoFon45FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.BceFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.XexunFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TotemFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeiligaoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.H02FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Jt600FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Pt502FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.MeitrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Gt06FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.NavigilFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.TeltonikaFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.WondexFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.CellocatorFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.GalileoFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.IntellitracFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AtrackFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.AplicomFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.FixedLengthFrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#decodeLast(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,java.lang.Enum)
CALLER: org.traccar.FilterHandler#filterInvalid(org.traccar.model.Position)
	CALLEE: org.traccar.model.Position#getValid()
CALLER: org.traccar.FilterHandler#filterZero(org.traccar.model.Position)
	CALLEE: org.traccar.model.Position#getLatitude()
	CALLEE: org.traccar.model.Position#getLongitude()
CALLER: org.traccar.FilterHandler#filterDuplicate(org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.model.Position#getFixTime()
CALLER: org.traccar.FilterHandler#filterDistance(org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.model.Position#getLatitude()
	CALLEE: org.traccar.model.Position#getLongitude()
	CALLEE: static org.traccar.helper.DistanceCalculator#distance(double,double,double,double)
CALLER: org.traccar.FilterHandler#filterLimit(org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getDeviceId()
	CALLEE: org.traccar.model.Position#getFixTime()
CALLER: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: static javax.json.spi.JsonProvider#provider()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#buffer(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(java.nio.ByteOrder,int)
CALLER: static org.traccar.helper.Crc#crc16X25Ccitt(java.nio.ByteBuffer)
	CALLEE: static org.traccar.helper.Crc#crc16Unreflected(java.nio.ByteBuffer,int,int[])
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setShort(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setShort(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#setShort(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setShort(int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setInt(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setInt(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setInt(int,int)
CALLER: static org.traccar.protocol.H02ProtocolDecoder#readCoordinate(org.jboss.netty.buffer.ChannelBuffer,boolean)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: static org.traccar.helper.ChannelBufferTools#readHexInteger(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.traccar.protocol.NavisProtocolDecoder#parsePosition(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.traccar.model.Position#setSpeed(double)
	CALLEE: org.traccar.model.Position#setCourse(double)
	CALLEE: org.traccar.protocol.NavisProtocolDecoder.ParseResult#<init>(org.traccar.protocol.NavisProtocolDecoder,long,org.traccar.model.Position)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.traccar.model.Position#<init>()
	CALLEE: org.traccar.model.Event#setDeviceId(long)
	CALLEE: org.traccar.model.Position#setTime(java.util.Date)
	CALLEE: org.traccar.model.Position#setLatitude(double)
	CALLEE: org.traccar.model.Position#setLongitude(double)
	CALLEE: org.traccar.BaseProtocolDecoder#getProtocol()
	CALLEE: org.traccar.model.Event#setProtocol(java.lang.String)
	CALLEE: org.traccar.BaseProtocolDecoder#getDeviceId()
	CALLEE: org.traccar.model.Event#set(java.lang.String,java.lang.Object)
	CALLEE: org.traccar.model.Position#setValid(boolean)
	CALLEE: static org.traccar.protocol.NavisProtocolDecoder#isFormat(int,int[])
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#ensureWritableBytes(int)
CALLER: org.traccar.protocol.NavisProtocolDecoder#sendReply(org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(java.nio.ByteOrder,java.lang.CharSequence,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: static org.traccar.protocol.NavisProtocolDecoder#checksum(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#ensureWritableBytes(int)
CALLER: org.traccar.database.DataManager#getDeviceByUniqueId(java.lang.String)
	CALLEE: org.traccar.database.DataManager#getDevices()
	CALLEE: org.traccar.model.Device#getUniqueId()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setByte(int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#toByteBuffer()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
CALLER: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#<init>()
CALLER: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#readFloat(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
CALLER: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#<init>()
CALLER: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#readTime(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#readFloat(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#writeZero(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkWritableBytes(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeZero(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeInt(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeLong(long)
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset,boolean)
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#decodeParams(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.QueryStringDecoder#decodeComponent(java.lang.String,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#addParam(java.util.Map,java.lang.String,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset,boolean)
	CALLEE: org.jboss.netty.handler.codec.http.QueryStringDecoder#<init>(java.lang.String,java.nio.charset.Charset,boolean,int)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpMessage#<init>(org.jboss.netty.handler.codec.http.HttpVersion)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#<init>(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setProtocolVersion(org.jboss.netty.handler.codec.http.HttpVersion)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[],int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(java.nio.ByteOrder,byte[])
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(int)
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(int)
CALLER: org.traccar.database.NamedParameterStatement.Params#executeUpdate()
	CALLEE: org.traccar.database.NamedParameterStatement.Params#executeUpdate(org.traccar.database.NamedParameterStatement.ResultSetProcessor)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeMedium(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setMedium(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setMedium(int,int)
CALLER: static com.mchange.v1.util.ArrayUtils#hashArray(java.lang.Object[])
	CALLEE: static com.mchange.v2.lang.ObjectUtils#hashOrZero(java.lang.Object)
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
CALLER: org.jboss.netty.channel.DefaultChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setConnectTimeoutMillis(int)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setBufferFactory(org.jboss.netty.buffer.ChannelBufferFactory)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setBroadcast(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReceiveBufferSize(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setSendBufferSize(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setLoopbackModeDisabled(boolean)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#javaVersion()
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setInterface(java.net.InetAddress)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setNetworkInterface(java.net.NetworkInterface)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setNetworkInterface(java.net.NetworkInterface)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#javaVersion()
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#setTimeToLive(int)
	CALLEE: static org.jboss.netty.util.internal.DetectionUtil#javaVersion()
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultDatagramChannelConfig#setTrafficClass(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#createRegisterTask(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker.ChannelRegistionTask#<init>(org.jboss.netty.channel.socket.nio.NioDatagramWorker,org.jboss.netty.channel.socket.nio.NioDatagramChannel,org.jboss.netty.channel.ChannelFuture)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setClosed()
	CALLEE: org.jboss.netty.channel.AbstractChannel#setClosed()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#c2b(char)
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeHeader(org.jboss.netty.buffer.ChannelBuffer,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeByte(int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageEncoder#encodeAscii(java.lang.String,org.jboss.netty.buffer.ChannelBuffer)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(boolean,org.jboss.netty.buffer.ChannelBuffer[])
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#slice()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#compositeBuffer(java.nio.ByteOrder,java.util.List,boolean)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#decompose(int,int)
CALLER: static org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#indexOf(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,long)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#extractFrame(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getBuffer(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#factory()
CALLER: static org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#findEndOfLine(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,int)
	CALLEE: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,java.lang.String)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#failIfNecessary(org.jboss.netty.channel.ChannelHandlerContext,boolean)
	CALLEE: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,long)
CALLER: static org.traccar.protocol.BceFrameDecoder#checksum(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.handler.codec.http.HttpMessageDecoder.State)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#isLast()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#getChunkSize(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readByte()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setChunked(boolean)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#is100ContinueExpected(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#skipControlCharacters(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint(java.lang.Enum)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#readLine(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#splitInitialLine(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#createMessage(java.lang.String[])
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readHeaders(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#resetState()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#isDecodingRequest()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#reset()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readableBytes()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#actualReadableBytes()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readBytes(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#<init>(org.jboss.netty.buffer.ChannelBuffer)
CALLER: static javax.json.spi.JsonProvider#provider()
	CALLEE: javax.json.JsonException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#ensureWritableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writableBytes()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
CALLER: static org.traccar.protocol.NavisProtocolDecoder#checksum(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
CALLER: org.traccar.database.DataManager#getDevices()
	CALLEE: org.traccar.database.NamedParameterStatement#prepare()
	CALLEE: org.traccar.database.NamedParameterStatement.Params#executeQuery(org.traccar.database.NamedParameterStatement.ResultSetProcessor)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setByte(int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#copiedBuffer(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#copy()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpCodecUtil#isTransferEncodingChunked(org.jboss.netty.handler.codec.http.HttpMessage)
CALLER: org.traccar.protocol.Mta6ProtocolDecoder.TimeReader#<init>()
	CALLEE: org.traccar.protocol.Mta6ProtocolDecoder.FloatReader#<init>(org.traccar.protocol.Mta6ProtocolDecoder.1)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeLong(long)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setLong(int,long)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setLong(int,long)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#setLong(int,long)
CALLER: static org.jboss.netty.handler.codec.http.QueryStringDecoder#decodeComponent(java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.handler.codec.http.QueryStringDecoder#decodeHexNibble(char)
CALLER: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#<clinit>()
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#createSet(java.lang.Class)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#<init>(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaders#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders,int,java.lang.String,java.lang.String)
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#<init>(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#<init>(byte[],int,int)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setMedium(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setByte(int,int)
CALLER: org.jboss.netty.channel.AbstractChannel#setClosed()
	CALLEE: org.jboss.netty.util.internal.ConcurrentHashMap#remove(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setClosed()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#wrappedBuffer(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#slice()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#slice()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#slice(int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#compositeBuffer(java.nio.ByteOrder,java.util.List,boolean)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#<init>(java.nio.ByteOrder,java.util.List,boolean)
CALLER: org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder#fail(org.jboss.netty.channel.ChannelHandlerContext,long)
	CALLEE: static org.jboss.netty.channel.Channels#fireExceptionCaught(org.jboss.netty.channel.Channel,java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline.DefaultChannelHandlerContext#getChannel()
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder.1#<clinit>()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder.State#values()
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#skipControlCharacters(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint(java.lang.Enum)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#setState(java.lang.Enum)
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#readLine(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#splitInitialLine(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#findNonWhitespace(java.lang.String,int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#findWhitespace(java.lang.String,int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#findEndOfString(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpRequestDecoder#createMessage(java.lang.String[])
	CALLEE: static org.jboss.netty.handler.codec.http.HttpVersion#valueOf(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMethod#valueOf(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpMethod,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readHeaders(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readHeader(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#splitHeader(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#isContentAlwaysEmpty(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#clear()
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#resetState()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint(java.lang.Enum)
	CALLEE: org.jboss.netty.handler.codec.http.HttpRequestDecoder#isDecodingRequest()
CALLER: static org.jboss.netty.handler.codec.http.HttpHeaders#getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#getWebSocketContentLength(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#reset()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#resetState()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: org.jboss.netty.handler.codec.frame.FrameDecoder#actualReadableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#internalBuffer()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readBytes(int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunk#<init>(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#setContent(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readable()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readFixedLengthContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#getContentLength(org.jboss.netty.handler.codec.http.HttpMessage,long)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#reset()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#actualReadableBytes()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readBytes(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunk#<init>(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setChunked(boolean)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readByte()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readTrailingHeaders(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readHeader(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#splitHeader(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#trailingHeaders()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer.TrailingHeaders#add(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#getAll(java.lang.String)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#checkpoint()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#ensureWritableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writableBytes()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.traccar.database.NamedParameterStatement.Params#executeQuery(org.traccar.database.NamedParameterStatement.ResultSetProcessor)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource#getConnection()
	CALLEE: static org.traccar.database.NamedParameterStatement#access$000(org.traccar.database.NamedParameterStatement)
	CALLEE: static org.traccar.database.NamedParameterStatement#access$100(org.traccar.database.NamedParameterStatement)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#setParams(java.sql.PreparedStatement)
	CALLEE: org.traccar.database.NamedParameterStatement.Params#closeQuietly(java.sql.Connection,java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyConnection#prepareStatement(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#executeQuery()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: org.traccar.database.DataManager.1#processNextRow(java.sql.ResultSet)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#copy()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#copy(int,int)
CALLER: org.jboss.netty.channel.AbstractChannel.ChannelCloseFuture#setClosed()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#<init>(java.nio.ByteOrder,java.util.List,boolean)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#setComponents(java.util.List)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: static org.jboss.netty.handler.codec.http.HttpVersion#valueOf(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#<init>(java.lang.String,boolean)
CALLER: static org.jboss.netty.handler.codec.http.HttpMethod#valueOf(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#<init>(java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.HttpMethod#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpRequest#<init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpMethod,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#<init>(org.jboss.netty.handler.codec.http.HttpVersion)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#setMethod(org.jboss.netty.handler.codec.http.HttpMethod)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#setUri(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpMessageDecoder#readHeader(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.handler.codec.frame.TooLongFrameException#<init>(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
CALLER: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#splitHeader(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#findNonWhitespace(java.lang.String,int)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpMessageDecoder#findEndOfString(java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.HttpHeaders#getWebSocketContentLength(org.jboss.netty.handler.codec.http.HttpMessage)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#getMethod()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#contains(java.lang.String)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoder#internalBuffer()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoder#internalBuffer()
	CALLEE: org.jboss.netty.handler.codec.frame.FrameDecoder#internalBuffer()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunk#setContent(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readable()
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkWritableBytes(int)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer.TrailingHeaders#<init>(boolean)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#next()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: org.traccar.database.DataManager.1#processNextRow(java.sql.ResultSet)
	CALLEE: org.traccar.database.DataManager.1#processNextRow(java.sql.ResultSet)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#<init>(byte[])
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#<init>(byte[])
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#<init>(java.nio.ByteOrder,int,org.jboss.netty.buffer.ChannelBufferFactory)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#copy(int,int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#setComponents(java.util.List)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
CALLER: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#getName()
CALLER: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#getName()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer.TrailingHeaders#<init>(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#<init>(boolean)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.traccar.database.DataManager.1#processNextRow(java.sql.ResultSet)
	CALLEE: org.traccar.model.Device#<init>()
	CALLEE: org.traccar.model.Device#setUniqueId(java.lang.String)
	CALLEE: org.traccar.model.Device#setId(long)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#getString(java.lang.String)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getString(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#skipBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedShort(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getShort(int)
CALLER: org.traccar.geocode.AddressFormat#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)
	CALLEE: org.traccar.geocode.Address#getPostcode()
	CALLEE: static org.traccar.geocode.AddressFormat#replace(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.traccar.geocode.Address#getCountry()
	CALLEE: org.traccar.geocode.Address#getState()
	CALLEE: org.traccar.geocode.Address#getDistrict()
	CALLEE: org.traccar.geocode.Address#getSettlement()
	CALLEE: org.traccar.geocode.Address#getStreet()
	CALLEE: org.traccar.geocode.Address#getHouse()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedInt(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
CALLER: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getUnsupportedOperationFuture()
CALLER: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.Channel,java.lang.Object)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#close()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#log(com.mchange.v2.log.MLevel,java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveMetaDataResultSet(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveRawConnectionResultSet(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyPreparedStatement#detachProxyResultSet(java.sql.ResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#detach()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#poll()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#poll()
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#setClosed()
	CALLEE: org.jboss.netty.channel.AbstractChannel#setClosed()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#doStop()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doStop()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#getScavengePeriod()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSessions()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#getSavePeriod()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setSavePeriod(int)
CALLER: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#isBound()
	CALLEE: org.jboss.netty.channel.AbstractChannel#isOpen()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#setInt(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setInt(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#setInt(int,int)
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#setClosed()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#setClosed()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer.TrailingHeaders#add(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer.TrailingHeaders#validateName(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add(java.lang.String,java.lang.Object)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#getAll(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#eq(java.lang.String,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setChunked(boolean)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#setContent(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.traccar.database.DataCache#update(org.traccar.model.Position)
	CALLEE: org.traccar.model.Event#getDeviceId()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeShort(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#ensureWritableBytes(int)
CALLER: org.jboss.netty.channel.Channels.4#run()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelDisconnected(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker.1#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#setInterestOps(org.jboss.netty.channel.socket.nio.AbstractNioChannel,org.jboss.netty.channel.ChannelFuture,int)
CALLER: org.jboss.netty.channel.Channels.3#run()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelInterestChanged(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setOptions(java.util.Map)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setOptions(java.util.Map)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#getWriteBufferHighWaterMark()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setWriteBufferLowWaterMark0(int)
CALLER: org.eclipse.jetty.io.nio.SelectorManager.1#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$000(org.eclipse.jetty.io.nio.SelectorManager)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#getSelectorPriorityDelta()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#doSelect()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection.1#run()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: static org.eclipse.jetty.server.handler.HandlerCollection#access$000(org.eclipse.jetty.server.handler.HandlerCollection)
CALLER: org.eclipse.jetty.server.AbstractConnector.Acceptor#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$000(org.eclipse.jetty.server.AbstractConnector)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$100(org.eclipse.jetty.server.AbstractConnector)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getConnection()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#accept(int)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$200()
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkWritableBytes(int)
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBufferFactory#getBuffer(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#getDefaultOrder()
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#executeInIoThread(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#executeInIoThread(java.lang.Runnable)
CALLER: org.jboss.netty.channel.Channels.6#run()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelClosed(org.jboss.netty.channel.Channel)
CALLER: org.jboss.netty.channel.Channels.5#run()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelUnbound(org.jboss.netty.channel.Channel)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getMetaData()
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getTimestamp(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getDouble(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getInt(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getBoolean(java.lang.String)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#getLong(int)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.Throwable)
	CALLEE: static com.mchange.v2.sql.SqlUtils#toSQLException(java.lang.String,java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#handleThrowable(java.lang.Throwable)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#isDetached()
CALLER: org.jboss.netty.util.internal.ThreadLocalBoolean#initialValue()
	CALLEE: org.jboss.netty.util.internal.ThreadLocalBoolean#initialValue()
CALLER: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintStream)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintStream)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintStream)
CALLER: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintStream)
	CALLEE: static com.mchange.v2.lang.VersionUtils#isAtLeastJavaVersion14()
CALLER: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#buffer(java.nio.ByteOrder,int)
CALLER: org.jboss.netty.channel.DefaultWriteCompletionEvent#toString()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getWrittenAmount()
	CALLEE: org.jboss.netty.channel.DefaultWriteCompletionEvent#getChannel()
CALLER: org.jboss.netty.channel.UpstreamMessageEvent#toString()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.UpstreamMessageEvent#getMessage()
	CALLEE: static org.jboss.netty.util.internal.StringUtil#stripControlCharacters(java.lang.Object)
CALLER: org.jboss.netty.channel.DownstreamMessageEvent#toString()
	CALLEE: org.jboss.netty.channel.AbstractChannel#toString()
	CALLEE: org.jboss.netty.channel.socket.nio.NioServerSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getChannel()
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#getMessage()
	CALLEE: static org.jboss.netty.util.internal.StringUtil#stripControlCharacters(java.lang.Object)
CALLER: org.jboss.netty.handler.codec.http.HttpMethod#compareTo(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#compareTo(org.jboss.netty.handler.codec.http.HttpMethod)
CALLER: org.jboss.netty.handler.codec.http.HttpMethod#hashCode()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#getName()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#<init>(java.nio.ByteOrder,java.util.List,boolean)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#decompose(int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedByte()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readByte()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writeBytes(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#decompose(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#slice()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#duplicate()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#copy(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#copyTo(int,int,int,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#getBytes(int,byte[])
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#indexOf(int,int,byte)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#indexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedInt()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffer(int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getShort(int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getShort(int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getShort(int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getLong(int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getLong(int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getLong(int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getUnsignedMedium(int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getUnsignedMedium(int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getUnsignedMedium(int)
CALLER: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#factory()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance(java.nio.ByteOrder)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#factory()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#factory()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#factory()
CALLER: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#factory()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance(java.nio.ByteOrder)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#factory()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
CALLER: org.jboss.netty.channel.ChannelFutureListener.2#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.SucceededChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.FailedChannelFuture#isSuccess()
CALLER: org.jboss.netty.bootstrap.ServerBootstrap.Binder.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: static org.jboss.netty.bootstrap.ServerBootstrap.Binder#access$000(org.jboss.netty.bootstrap.ServerBootstrap.Binder)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getCause()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#capacity()
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet.1#connectionClosed(javax.sql.ConnectionEvent)
	CALLEE: static com.mchange.v2.c3p0.impl.NewProxyResultSet#access$000(com.mchange.v2.c3p0.impl.NewProxyResultSet)
CALLER: org.jboss.netty.channel.group.DefaultChannelGroupFuture.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isSuccess()
	CALLEE: org.jboss.netty.channel.group.DefaultChannelGroupFuture#setDone()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#equals(java.lang.Object)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#equals(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getShort(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#hashCode()
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#hashCode(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#compareTo(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#compareTo(org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#duplicate()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#slice(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
CALLER: org.jboss.netty.channel.AbstractChannel#getUnsupportedOperationFuture()
	CALLEE: org.jboss.netty.channel.FailedChannelFuture#<init>(org.jboss.netty.channel.Channel,java.lang.Throwable)
CALLER: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.Channel,java.lang.Object)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
CALLER: com.mchange.v2.c3p0.impl.NewPooledConnection#markInactiveResultSetForStatement(java.sql.Statement,java.sql.ResultSet)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#isLoggable(com.mchange.v2.log.MLevel)
	CALLEE: com.mchange.v2.log.FallbackMLog.FallbackMLogger#fine(java.lang.String)
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#resultSets(java.sql.Statement,boolean)
CALLER: com.mchange.v2.c3p0.impl.NewProxyResultSet#detach()
	CALLEE: com.mchange.v2.c3p0.impl.NewPooledConnection#removeConnectionEventListener(javax.sql.ConnectionEventListener)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#poll()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioDatagramChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#isConnected()
	CALLEE: static org.jboss.netty.channel.Channels#fireChannelInterestChanged(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#isConnected()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioChannel.WriteRequestQueue#getMessageSize(org.jboss.netty.channel.MessageEvent)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getConfig()
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: static org.jboss.netty.channel.socket.nio.AbstractNioChannel#access$100(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#invalidateSessions()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionHandler()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionIdPathParameterName(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Server#setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)
	CALLEE: org.eclipse.jetty.server.Server#getSessionIdManager()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager.2#<init>(org.eclipse.jetty.server.session.HashSessionManager)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSessions()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#setSavePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager.1#<init>(org.eclipse.jetty.server.session.HashSessionManager)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toString(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#validateHeaderValue0(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add0(int,int,java.lang.String,java.lang.String)
CALLER: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#valideHeaderNameChar(char)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toLowerCase(char)
CALLER: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#eq(java.lang.String,java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toLowerCase(char)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#accept(int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#configure(java.net.Socket)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#register(java.nio.channels.SocketChannel)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#executeInIoThread(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramWorker#executeInIoThread(java.lang.Runnable,boolean)
CALLER: static org.jboss.netty.util.internal.StringUtil#stripControlCharacters(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#toString()
	CALLEE: static org.jboss.netty.util.internal.StringUtil#stripControlCharacters(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#toString()
CALLER: org.jboss.netty.handler.codec.http.HttpMethod#compareTo(org.jboss.netty.handler.codec.http.HttpMethod)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#getName()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#<init>(org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#copyTo(int,int,int,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#indexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#firstIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#lastIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#toByteBuffer(int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#toByteBuffer(int,int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffers(int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)
	CALLEE: static org.jboss.netty.util.CharsetUtil#getDecoder(java.nio.charset.Charset)
CALLER: static com.mchange.v2.c3p0.impl.NewProxyResultSet#access$000(com.mchange.v2.c3p0.impl.NewProxyResultSet)
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#detach()
CALLER: static org.jboss.netty.buffer.ChannelBuffers#equals(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getLong(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapLong(long)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getLong(int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#hashCode(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapInt(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#compareTo(org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#compare(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(org.jboss.netty.buffer.ByteBufferBackedChannelBuffer)
CALLER: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getPipeline()
	CALLEE: org.jboss.netty.channel.DefaultChannelPipeline#sendDownstream(org.jboss.netty.channel.ChannelEvent)
	CALLEE: static org.jboss.netty.channel.Channels#future(org.jboss.netty.channel.Channel)
	CALLEE: org.jboss.netty.channel.DownstreamMessageEvent#<init>(org.jboss.netty.channel.Channel,org.jboss.netty.channel.ChannelFuture,java.lang.Object,java.net.SocketAddress)
CALLER: static org.jboss.netty.channel.socket.nio.AbstractNioChannel#access$100(org.jboss.netty.channel.socket.nio.AbstractNioChannel)
	CALLEE: org.jboss.netty.channel.AbstractChannel#setWritable()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#invalidateSessions()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
CALLER: static org.eclipse.jetty.server.session.AbstractSessionIdManager#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#<init>()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getInitParameter(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#isDeleteUnrestorableSessions()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#didActivate()
CALLER: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toString(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle.Bean#toString()
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#toString()
	CALLEE: com.mchange.v2.log.MLevel#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#toString()
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#toString()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#get()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#validateHeaderValue0(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.HttpHeaders#validateHeaderValue(java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add0(int,int,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders,int,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#addBefore(org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry)
CALLER: org.eclipse.jetty.server.AbstractConnector#configure(java.net.Socket)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.nio.SelectorManager#register(java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#wakeup()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramWorker#executeInIoThread(java.lang.Runnable,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker#executeInIoThread(java.lang.Runnable,boolean)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpRequest#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#getMethod()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getProtocolVersion()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpRequest#getUri()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getText()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#appendHeaders(java.lang.StringBuilder)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#appendHeaders(java.lang.StringBuilder)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#firstIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#lastIndexOf(org.jboss.netty.buffer.ChannelBuffer,int,int,byte)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getByte(int)
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffers(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#componentId(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toByteBuffer(int,int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#swapLong(long)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapInt(int)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#swapInt(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapShort(short)
CALLER: static org.jboss.netty.buffer.ChannelBuffers#compare(org.jboss.netty.buffer.ChannelBuffer,org.jboss.netty.buffer.ChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedByte(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#getUnsignedInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#order()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getInt(int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#swapInt(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#<init>(org.jboss.netty.buffer.ByteBufferBackedChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#removeSession(java.lang.String)
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#decrement()
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#set(long)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#removeSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#invalidateAll(java.lang.String)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getCreationTime()
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#newSession(long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager.ClassLoadingObjectInputStream#<init>(org.eclipse.jetty.server.session.HashSessionManager,java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setRequests(int)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#addSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession)
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#increment()
CALLER: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.IO#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.IO.NullOS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.ClosedIS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#<init>(org.eclipse.jetty.util.IO.1)
CALLER: static org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#<clinit>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1#<init>()
CALLER: org.jboss.netty.channel.socket.nio.AbstractNioWorker#executeInIoThread(java.lang.Runnable,boolean)
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#isIoThread()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioSelector#registerTask(java.lang.Runnable)
	CALLEE: org.jboss.netty.channel.socket.ChannelRunnableWrapper#run()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpMessage#appendHeaders(java.lang.StringBuilder)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#headers()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#hasNext()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#appendHeaders(java.lang.StringBuilder)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer#trailingHeaders()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#hasNext()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#decrement()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
CALLER: org.eclipse.jetty.util.statistic.SampleStatistic#set(long)
	CALLEE: static org.eclipse.jetty.util.Atomics#updateMax(java.util.concurrent.atomic.AtomicLong,long)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#removeSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getClusterId(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#invalidateAll(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isValid()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#newSession(long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,long,long,java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#addSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getClusterId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#increment()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
CALLER: org.eclipse.jetty.util.IO.NullOS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullOS#<init>()
CALLER: org.eclipse.jetty.util.IO.ClosedIS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.ClosedIS#<init>()
CALLER: org.eclipse.jetty.util.IO.NullWrite#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#<init>()
CALLER: org.jboss.netty.channel.socket.ChannelRunnableWrapper#run()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setSuccess()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#setFailure(java.lang.Throwable)
	CALLEE: org.jboss.netty.channel.Channels.7#run()
	CALLEE: org.jboss.netty.channel.Channels.4#run()
	CALLEE: org.jboss.netty.channel.socket.nio.AbstractNioWorker.1#run()
	CALLEE: org.jboss.netty.channel.Channels.3#run()
	CALLEE: org.jboss.netty.channel.Channels.6#run()
	CALLEE: org.jboss.netty.channel.Channels.5#run()
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#isCancelled()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders,org.jboss.netty.handler.codec.http.DefaultHttpHeaders.1)
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
	CALLEE: static org.eclipse.jetty.util.Atomics#updateMax(java.util.concurrent.atomic.AtomicLong,long)
CALLER: static org.eclipse.jetty.server.session.HashedSession#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders,org.jboss.netty.handler.codec.http.DefaultHttpHeaders.1)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders)
CALLER: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getNodeId(java.lang.String,javax.servlet.http.HttpServletRequest)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#<init>(org.jboss.netty.handler.codec.http.DefaultHttpHeaders)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#access$100(org.jboss.netty.handler.codec.http.DefaultHttpHeaders)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#getNodeId(java.lang.String,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#setShort(int,int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#setShort(int,int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#setShort(int,int)
CALLER: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setWriteBufferLowWaterMark0(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setWriteBufferHighWaterMark0(int)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setWriteSpinCount(int)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setReceiveBufferSizePredictorFactory(org.jboss.netty.channel.ReceiveBufferSizePredictorFactory)
	CALLEE: org.jboss.netty.channel.socket.nio.DefaultNioSocketChannelConfig#setReceiveBufferSizePredictor(org.jboss.netty.channel.ReceiveBufferSizePredictor)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStart()
CALLER: org.eclipse.jetty.server.session.HashSessionManager.2#run()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#scavenge()
CALLER: org.eclipse.jetty.server.session.HashSessionManager.1#run()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#saveSessions(boolean)
CALLER: org.jboss.netty.util.CharsetUtil.2#initialValue()
	CALLEE: org.jboss.netty.util.CharsetUtil.2#initialValue()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String,boolean)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#contains(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String,boolean)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove(java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove0(int,int,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#contains(java.lang.String,java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#eq(java.lang.String,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.HttpVersion#compareTo(org.jboss.netty.handler.codec.http.HttpVersion)
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getProtocolName()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getMajorVersion()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getMinorVersion()
CALLER: org.jboss.netty.channel.CompleteChannelFuture#addListener(org.jboss.netty.channel.ChannelFutureListener)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.jboss.netty.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.traccar.helper.Log.NettyInternalLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.logging.JdkLogger#isWarnEnabled()
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.2#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.ChannelFutureListener.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#hasNext()
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#access$100(org.jboss.netty.handler.codec.http.DefaultHttpHeaders)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#set(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toString(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#validateHeaderValue0(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add0(int,int,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove0(int,int,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#set(java.lang.String,java.lang.Iterable)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#toString(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#validateHeaderValue0(java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#add0(int,int,java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove0(int,int,java.lang.String)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedShort()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readShort()
CALLER: org.jboss.netty.channel.AbstractServerChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.AbstractChannel#getUnsupportedOperationFuture()
CALLER: org.jboss.netty.channel.socket.nio.NioDatagramChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioDatagramChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.channel.socket.nio.NioSocketChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: org.jboss.netty.channel.socket.nio.NioSocketChannel#getRemoteAddress()
	CALLEE: org.jboss.netty.channel.AbstractChannel#getUnsupportedOperationFuture()
	CALLEE: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readableBytes()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString(int,int,java.nio.charset.Charset)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readFloat()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readInt()
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readLong()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getLong(int)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(byte[])
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(byte[])
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(byte[],int,int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getUnsignedMedium(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readMedium()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readUnsignedMedium()
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getByte(int)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#factory()
	CALLEE: static org.jboss.netty.buffer.HeapChannelBufferFactory#getInstance(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#order()
	CALLEE: static org.jboss.netty.buffer.DirectChannelBufferFactory#getInstance(java.nio.ByteOrder)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#setBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,java.nio.ByteBuffer)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getInt(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getInt(int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getShort(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getShort(int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getLong(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getLong(int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.BigEndianHeapChannelBuffer#getUnsignedMedium(int)
	CALLEE: org.jboss.netty.buffer.LittleEndianHeapChannelBuffer#getUnsignedMedium(int)
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#doSelect()
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$500(org.eclipse.jetty.io.nio.SelectorManager)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$600(org.eclipse.jetty.io.nio.SelectorManager)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$700(org.eclipse.jetty.io.nio.SelectorManager)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet.1#<init>(org.eclipse.jetty.io.nio.SelectorManager.SelectSet,long)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#schedule()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#dispatch(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$100()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$200()
	CALLEE: org.eclipse.jetty.util.thread.Timeout#setNow(long)
	CALLEE: org.eclipse.jetty.util.thread.Timeout#getTimeToNext()
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$300()
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager#access$400()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#connectionFailed(java.nio.channels.SocketChannel,java.lang.Throwable,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.thread.Timeout#expired()
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
CALLER: org.jboss.netty.buffer.DynamicChannelBuffer#toByteBuffer(int,int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#toByteBuffer(int,int)
CALLER: org.eclipse.jetty.server.session.AbstractSession#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#doPutOrRemove(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#bindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.session.AbstractSession#didActivate()
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1#initialValue()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1#initialValue()
CALLER: org.jboss.netty.channel.ChannelFutureListener.1#operationComplete(org.jboss.netty.channel.ChannelFuture)
	CALLEE: org.jboss.netty.channel.DefaultChannelFuture#getChannel()
	CALLEE: org.jboss.netty.channel.AbstractChannel#close()
	CALLEE: org.jboss.netty.channel.CompleteChannelFuture#getChannel()
CALLER: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#doInvalidate()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#duplicate()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#<init>(org.jboss.netty.buffer.CompositeChannelBuffer)
CALLER: org.eclipse.jetty.server.Server#setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)
	CALLEE: org.eclipse.jetty.util.component.Container#update(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.Server#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Server#addBean(java.lang.Object)
CALLER: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
CALLER: org.jboss.netty.handler.codec.http.HttpVersion#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getText()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpResponse#toString()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#isChunked()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#getProtocolVersion()
	CALLEE: org.jboss.netty.handler.codec.http.HttpVersion#getText()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpMessage#appendHeaders(java.lang.StringBuilder)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpResponse#getStatus()
	CALLEE: org.jboss.netty.handler.codec.http.HttpResponseStatus#toString()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkIndex(int,int)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,org.jboss.netty.buffer.ChannelBuffer,int,int)
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkIndex(int,int)
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#capacity()
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toInt(java.lang.Object)
	CALLEE: static org.jboss.netty.util.internal.ConversionUtil#toBoolean(java.lang.Object)
	CALLEE: org.jboss.netty.channel.DefaultChannelConfig#setOption(java.lang.String,java.lang.Object)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setReceiveBufferSize(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setSendBufferSize(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setTcpNoDelay(boolean)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setKeepAlive(boolean)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setSoLinger(int)
	CALLEE: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setTrafficClass(int)
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#initRandom()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#scavenge()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#saveSessions(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#get(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#hash(java.lang.String,boolean)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#index(int)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#eq(java.lang.String,java.lang.String)
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders#remove0(int,int,java.lang.String)
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#eq(java.lang.String,java.lang.String)
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#remove()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderIterator#next()
	CALLEE: static org.jboss.netty.handler.codec.http.DefaultHttpHeaders#access$100(org.jboss.netty.handler.codec.http.DefaultHttpHeaders)
CALLER: org.jboss.netty.channel.AbstractChannel#write(java.lang.Object,java.net.SocketAddress)
	CALLEE: static org.jboss.netty.channel.Channels#write(org.jboss.netty.channel.Channel,java.lang.Object,java.net.SocketAddress)
CALLER: org.jboss.netty.buffer.EmptyChannelBuffer#readBytes(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
CALLER: org.jboss.netty.buffer.AbstractChannelBuffer#readBytes(byte[],int,int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#getBytes(int,byte[],int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#checkReadableBytes(int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,byte[],int,int)
CALLER: static org.jboss.netty.buffer.DirectChannelBufferFactory#<clinit>()
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#<init>(java.nio.ByteOrder)
CALLER: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#getBytes(int,java.nio.ByteBuffer)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#endPointOpened(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
CALLER: org.eclipse.jetty.io.nio.SelectorManager#connectionFailed(java.nio.channels.SocketChannel,java.lang.Throwable,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.thread.Timeout#expired()
	CALLEE: static org.eclipse.jetty.util.thread.Timeout.Task#access$000(org.eclipse.jetty.util.thread.Timeout.Task)
CALLER: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#deIdle()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#checkValid()
CALLER: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSession#bindValue(java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String,java.lang.Object)
CALLER: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1#initialValue()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#<init>(org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1)
CALLER: org.eclipse.jetty.server.session.HashedSession#doInvalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#doInvalidate()
CALLER: org.jboss.netty.buffer.CompositeChannelBuffer#<init>(org.jboss.netty.buffer.CompositeChannelBuffer)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#<init>()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#setIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#readerIndex()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
CALLER: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#checkIndex(int,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#writerIndex()
	CALLEE: org.jboss.netty.handler.codec.replay.ReplayingDecoderBuffer#buf()
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setReceiveBufferSize(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setSendBufferSize(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setTcpNoDelay(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setKeepAlive(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setReuseAddress(boolean)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setSoLinger(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.jboss.netty.channel.socket.DefaultSocketChannelConfig#setTrafficClass(int)
	CALLEE: org.jboss.netty.channel.ChannelException#<init>(java.lang.Throwable)
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#initRandom()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.jboss.netty.buffer.DirectChannelBufferFactory#<init>(java.nio.ByteOrder)
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#<init>(java.nio.ByteOrder,int)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#endPointOpened(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
	CALLEE: static org.eclipse.jetty.server.nio.SelectChannelConnector#access$100(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#getConnection()
CALLER: static org.eclipse.jetty.util.thread.Timeout.Task#access$000(org.eclipse.jetty.util.thread.Timeout.Task)
	CALLEE: org.eclipse.jetty.util.thread.Timeout.Task#unlink()
CALLER: org.eclipse.jetty.server.session.HashedSession#deIdle()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#didActivate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#isIdled()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#access(long)
CALLER: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#<init>(org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.1)
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#<init>()
CALLER: org.eclipse.jetty.server.session.AbstractSession#doInvalidate()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isValid()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#clearAttributes()
CALLER: org.jboss.netty.buffer.DirectChannelBufferFactory#<init>(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBufferFactory#<init>(java.nio.ByteOrder)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#<init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey,int)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getManager()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setConnection(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint,java.lang.Object)
CALLER: static org.eclipse.jetty.server.nio.SelectChannelConnector#access$100(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#connectionOpened(org.eclipse.jetty.io.Connection)
CALLER: org.eclipse.jetty.server.session.AbstractSession#access(long)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
CALLER: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.HttpHeaderDateFormatObsolete1#<init>()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaderDateFormat.HttpHeaderDateFormatObsolete2#<init>()
CALLER: org.eclipse.jetty.server.session.AbstractSession#clearAttributes()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#doPutOrRemove(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static org.eclipse.jetty.io.nio.SelectChannelEndPoint#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: static org.eclipse.jetty.io.nio.ChannelEndPoint#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#<init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.nio.SelectorManager.SelectSet,java.nio.channels.SelectionKey,int)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getManager()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#<init>(java.nio.channels.ByteChannel,int)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint.1#<init>(org.eclipse.jetty.io.nio.SelectChannelEndPoint)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setCheckForIdle(boolean)
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setConnection(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#endPointUpgraded(org.eclipse.jetty.io.ConnectedEndPoint,org.eclipse.jetty.io.Connection)
CALLER: org.eclipse.jetty.server.AbstractConnector#connectionOpened(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#increment()
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet.1#run()
	CALLEE: static org.eclipse.jetty.io.nio.SelectorManager.SelectSet#access$800(org.eclipse.jetty.io.nio.SelectorManager.SelectSet)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#doStop()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStop()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getValue()
CALLER: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
	CALLEE: org.jboss.netty.handler.codec.http.DefaultHttpHeaders.HeaderEntry#getKey()
CALLER: org.jboss.netty.buffer.DirectChannelBufferFactory#getBuffer(java.nio.ByteOrder,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#clear()
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#allocateBigEndianBuffer(int)
	CALLEE: org.jboss.netty.buffer.DirectChannelBufferFactory#allocateLittleEndianBuffer(int)
	CALLEE: org.jboss.netty.buffer.EmptyChannelBuffer#clear()
CALLER: org.jboss.netty.handler.codec.http.HttpHeaders.1#iterator()
	CALLEE: org.jboss.netty.handler.codec.http.HttpHeaders.1#entries()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#schedule()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getManager()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#dispatch()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager#isDeferringInterestedOps0()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#endPointUpgraded(org.eclipse.jetty.io.ConnectedEndPoint,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#getConnection()
	CALLEE: static org.eclipse.jetty.server.nio.SelectChannelConnector#access$200(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.io.Connection,org.eclipse.jetty.io.Connection)
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#toString()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
CALLER: org.jboss.netty.buffer.DirectChannelBufferFactory#allocateBigEndianBuffer(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#slice(int,int)
CALLER: org.jboss.netty.buffer.DirectChannelBufferFactory#allocateLittleEndianBuffer(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#slice(int,int)
	CALLEE: static org.jboss.netty.buffer.ChannelBuffers#directBuffer(java.nio.ByteOrder,int)
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#capacity()
	CALLEE: org.jboss.netty.buffer.ByteBufferBackedChannelBuffer#slice(int,int)
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#wakeup()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#addChange(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getChannel()
	CALLEE: org.eclipse.jetty.server.AsyncHttpConnection#isSuspended()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#dispatch()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#dispatch(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.AsyncEndPoint)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getServer()
	CALLEE: org.eclipse.jetty.server.AsyncHttpConnection#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Server)
CALLER: static org.eclipse.jetty.server.nio.SelectChannelConnector#access$200(org.eclipse.jetty.server.nio.SelectChannelConnector,org.eclipse.jetty.io.Connection,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#connectionUpgraded(org.eclipse.jetty.io.Connection,org.eclipse.jetty.io.Connection)
CALLER: static org.eclipse.jetty.server.AsyncHttpConnection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.server.AbstractHttpConnection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.io.AbstractConnection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.AsyncHttpConnection#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Server)
CALLER: org.eclipse.jetty.server.AbstractConnector#connectionUpgraded(org.eclipse.jetty.io.Connection,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#set(long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequests()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#<init>(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.http.HttpURI#<init>()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getRequestBuffers()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#<init>(org.eclipse.jetty.server.AbstractHttpConnection,org.eclipse.jetty.server.AbstractHttpConnection.1)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#newHttpParser(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.http.HttpParser.EventHandler)
	CALLEE: org.eclipse.jetty.http.HttpFields#<init>()
	CALLEE: org.eclipse.jetty.server.Request#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.Response#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getResponseBuffers()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#newHttpGenerator(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.Server#getSendServerVersion()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setSendServerVersion(boolean)
CALLER: org.eclipse.jetty.http.HttpURI#<init>()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#<init>(int)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpURI#<init>()
CALLER: org.eclipse.jetty.server.AbstractConnector#getRequestBuffers()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#getRequestBuffers()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#<init>(org.eclipse.jetty.server.AbstractHttpConnection,org.eclipse.jetty.server.AbstractHttpConnection.1)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#newHttpParser(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.http.HttpParser.EventHandler)
	CALLEE: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.http.HttpParser.EventHandler)
CALLER: static org.eclipse.jetty.http.HttpFields#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.StringMap#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.StringMap#<init>()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.DateCache#setTimeZone(java.util.TimeZone)
	CALLEE: org.eclipse.jetty.io.BufferDateCache#<init>(java.lang.String,java.util.Locale)
	CALLEE: org.eclipse.jetty.http.HttpFields.1#<init>()
	CALLEE: org.eclipse.jetty.http.HttpFields.2#<init>()
	CALLEE: static org.eclipse.jetty.http.HttpFields#formatDate(long)
	CALLEE: static org.eclipse.jetty.http.HttpFields#formatCookieDate(long)
CALLER: static org.eclipse.jetty.server.Request#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.Request#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#<init>()
	CALLEE: org.eclipse.jetty.server.Request#setConnection(org.eclipse.jetty.server.AbstractHttpConnection)
CALLER: static org.eclipse.jetty.server.Response#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.AbstractConnector#getResponseBuffers()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#getResponseBuffers()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#newHttpGenerator(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#<init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)
CALLER: static org.eclipse.jetty.util.Utf8Appendable#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.Utf8StringBuilder#<init>(int)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#<init>(java.lang.Appendable)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.http.HttpParser.EventHandler#<init>()
CALLER: static org.eclipse.jetty.http.HttpParser#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.http.HttpParser.EventHandler)
	CALLEE: org.eclipse.jetty.io.View#<init>()
	CALLEE: org.eclipse.jetty.io.View.CaseInsensitive#<init>()
CALLER: org.eclipse.jetty.io.BufferDateCache#<init>(java.lang.String,java.util.Locale)
	CALLEE: org.eclipse.jetty.util.DateCache#<init>(java.lang.String,java.util.Locale)
CALLER: static org.eclipse.jetty.http.HttpFields#formatDate(long)
	CALLEE: org.eclipse.jetty.http.HttpFields.DateGenerator#formatDate(long)
CALLER: static org.eclipse.jetty.http.HttpFields#formatCookieDate(long)
	CALLEE: static org.eclipse.jetty.http.HttpFields#formatCookieDate(java.lang.StringBuilder,long)
CALLER: static org.eclipse.jetty.server.AsyncContinuation#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.continuation.ContinuationThrowable#<init>()
CALLER: org.eclipse.jetty.server.Request#setConnection(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#setConnection(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResolveNames()
CALLER: org.eclipse.jetty.http.HttpGenerator#<init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#<init>(org.eclipse.jetty.io.Buffers,org.eclipse.jetty.io.EndPoint)
CALLER: org.eclipse.jetty.io.View#<init>()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
CALLER: org.eclipse.jetty.io.View.CaseInsensitive#<init>()
	CALLEE: org.eclipse.jetty.io.View#<init>()
CALLER: org.eclipse.jetty.util.DateCache#<init>(java.lang.String,java.util.Locale)
	CALLEE: org.eclipse.jetty.util.DateCache#setTimeZone(java.util.TimeZone)
CALLER: static org.eclipse.jetty.http.HttpFields#formatCookieDate(java.lang.StringBuilder,long)
	CALLEE: org.eclipse.jetty.http.HttpFields.DateGenerator#formatCookieDate(java.lang.StringBuilder,long)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#getResolveNames()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getResolveNames()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint.1#run()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#handle()
CALLER: org.eclipse.jetty.http.HttpFields.1#initialValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.1#initialValue()
CALLER: org.jboss.netty.buffer.TruncatedChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.TruncatedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setByte(int,int)
CALLER: org.jboss.netty.buffer.SlicedChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.SlicedChannelBuffer#checkIndex(int)
	CALLEE: org.jboss.netty.buffer.HeapChannelBuffer#setByte(int,int)
	CALLEE: org.jboss.netty.buffer.DynamicChannelBuffer#setByte(int,int)
CALLER: org.eclipse.jetty.server.AsyncHttpConnection#isSuspended()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isSuspended()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#handle()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector.ConnectorSelectorManager#endPointUpgraded(org.eclipse.jetty.io.ConnectedEndPoint,org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.server.AsyncHttpConnection#handle()
	CALLEE: org.eclipse.jetty.server.AsyncHttpConnection#onInputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#undispatch()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.eclipse.jetty.http.HttpFields.1#initialValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.DateGenerator#<init>(org.eclipse.jetty.http.HttpFields.1)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#isSuspended()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isSuspended()
CALLER: org.eclipse.jetty.server.AsyncHttpConnection#handle()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getChannel()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#sendError(int,java.lang.String,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.http.HttpParser#returnBuffers()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#returnBuffers()
	CALLEE: org.eclipse.jetty.http.HttpException#getStatus()
	CALLEE: org.eclipse.jetty.http.HttpException#getReason()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isAsyncStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setCheckForIdle(boolean)
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#setCurrentConnection(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isAsync()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isDispatchable()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#handleRequest()
	CALLEE: org.eclipse.jetty.http.HttpParser#isComplete()
	CALLEE: org.eclipse.jetty.http.HttpParser#parseAvailable()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isComplete()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#flush()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#hasProgressed()
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AsyncHttpConnection#reset()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isPersistent()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownOutput()
CALLER: org.eclipse.jetty.server.AsyncHttpConnection#onInputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isIdle()
	CALLEE: org.eclipse.jetty.http.HttpParser#isIdle()
	CALLEE: org.eclipse.jetty.http.HttpParser#setPersistent(boolean)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isSuspended()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#close()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#undispatch()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
CALLER: org.eclipse.jetty.http.HttpFields.DateGenerator#<init>(org.eclipse.jetty.http.HttpFields.1)
	CALLEE: org.eclipse.jetty.http.HttpFields.DateGenerator#<init>()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#handleRequest()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isPersistent()
	CALLEE: org.eclipse.jetty.server.Response#sendError(int)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#persist(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.HttpOutput#reopen()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isComplete()
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownOutput()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#sendError(int,java.lang.String,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isContinuation()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#handling()
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.http.HttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.HttpURI#getDecodedPath()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getDecodedPath()
	CALLEE: org.eclipse.jetty.http.HttpURI#getDecodedPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
	CALLEE: org.eclipse.jetty.http.HttpURI#getScheme()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getScheme()
	CALLEE: org.eclipse.jetty.http.HttpURI#getHost()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getHost()
	CALLEE: org.eclipse.jetty.server.Request#setRequestURI(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int)
	CALLEE: org.eclipse.jetty.server.Request#setPathInfo(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isInitial()
	CALLEE: org.eclipse.jetty.server.Request#setDispatcherType(javax.servlet.DispatcherType)
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.Server#handle(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isExpired()
	CALLEE: org.eclipse.jetty.server.Response#setStatus(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Response#getReason()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getContextHandler()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getRequest()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getAsyncEventState()
	CALLEE: org.eclipse.jetty.server.Server#handleAsync(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.Request#isAsyncStarted()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#errorComplete()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#unhandle()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.http.HttpException#getStatus()
	CALLEE: org.eclipse.jetty.http.HttpException#getReason()
	CALLEE: org.eclipse.jetty.server.Response#sendError(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isUncompleted()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#doComplete(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setPersistent(boolean)
	CALLEE: org.eclipse.jetty.server.Response#complete()
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
CALLER: org.eclipse.jetty.http.HttpParser#isComplete()
	CALLEE: org.eclipse.jetty.http.HttpParser#isState(int)
CALLER: org.eclipse.jetty.http.HttpParser#parseAvailable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.http.HttpParser#isComplete()
	CALLEE: org.eclipse.jetty.http.HttpParser#parseNext()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
CALLER: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownOutput()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#prepareBuffers()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushMask()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.View#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.server.Request#getConnection()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.AsyncHttpConnection#reset()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#reset()
CALLER: org.eclipse.jetty.http.AbstractGenerator#isPersistent()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#isRequest()
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownOutput()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownChannelOutput()
CALLER: org.eclipse.jetty.http.AbstractGenerator#sendError(int,java.lang.String,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setResponse(int,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#completeHeader(org.eclipse.jetty.http.HttpFields,boolean)
	CALLEE: org.eclipse.jetty.io.View#<init>(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#addContent(org.eclipse.jetty.io.Buffer,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#complete()
CALLER: org.eclipse.jetty.http.HttpParser#returnBuffers()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
CALLER: org.eclipse.jetty.http.AbstractGenerator#returnBuffers()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpParser#isIdle()
	CALLEE: org.eclipse.jetty.http.HttpParser#isState(int)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.AsyncContinuation#handling()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getPort()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
CALLER: org.eclipse.jetty.http.HttpURI#getDecodedPath()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#getStringBuilder()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte)
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#toString()
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getDecodedPath()
	CALLEE: static org.eclipse.jetty.util.URIUtil#decodePath(byte[],int,int)
CALLER: org.eclipse.jetty.http.HttpURI#getDecodedPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpURI#getScheme()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getScheme()
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpURI#getHost()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getHost()
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: static javax.servlet.DispatcherType#<clinit>()
	CALLEE: javax.servlet.DispatcherType#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.Request#setTimeStamp(long)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setMaxIdleTime(int)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
CALLER: org.eclipse.jetty.server.Server#handle(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
CALLER: org.eclipse.jetty.server.Response#setStatus(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
CALLER: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setMaxIdleTime(int)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#sendContent(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#sendResponse(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.server.Request#getConnection()
	CALLEE: org.eclipse.jetty.server.Request#setQueryEncoding(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getServletResponse()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(java.nio.ByteBuffer,boolean)
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(java.nio.ByteBuffer,boolean)
	CALLEE: javax.servlet.ServletRequestAttributeEvent#<init>(javax.servlet.ServletContext,javax.servlet.ServletRequest,java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
CALLER: org.eclipse.jetty.server.AsyncContinuation#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
CALLER: org.eclipse.jetty.server.Server#handleAsync(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.server.Request#setRequestURI(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setUri(org.eclipse.jetty.http.HttpURI)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.server.Request#setPathInfo(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getRequest()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getAsyncEventState()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpURI#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpURI#getQuery()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getResponse()
	CALLEE: org.eclipse.jetty.server.Request#mergeQueryString(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
CALLER: org.eclipse.jetty.server.Request#isAsyncStarted()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isAsyncStarted()
CALLER: org.eclipse.jetty.server.AsyncContinuation#errorComplete()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
CALLER: org.eclipse.jetty.server.AsyncContinuation#unhandle()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#scheduleTimeout()
CALLER: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isResponseCommitted()
CALLER: org.eclipse.jetty.server.Response#sendError(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getServer()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Response#complete()
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#size()
	CALLEE: org.eclipse.jetty.server.Response#setContentLength(int)
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeTo(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#destroy()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.Request#getServletName()
	CALLEE: org.eclipse.jetty.server.Request#getContext()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle#getBean(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getErrorHandler()
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.Response#setStatus(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.Response#resetBuffer()
	CALLEE: org.eclipse.jetty.server.Response#setHeader(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpStatus#getMessage(int)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getConnector()
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#<init>(int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#replace(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(char)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#flush()
CALLER: org.eclipse.jetty.server.AsyncContinuation#doComplete(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
CALLER: org.eclipse.jetty.server.Response#complete()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#completeResponse()
CALLER: org.eclipse.jetty.server.Response#sendError(int)
	CALLEE: org.eclipse.jetty.server.Response#sendError(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#sendProcessing()
CALLER: org.eclipse.jetty.server.nio.SelectChannelConnector#persist(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setCheckForIdle(boolean)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#persist(org.eclipse.jetty.io.EndPoint)
CALLER: org.eclipse.jetty.http.HttpParser#parseNext()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#getBest(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#get(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#get()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#get()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#mark()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#sliceFromMark()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.http.HttpParser#isComplete()
	CALLEE: org.eclipse.jetty.http.HttpParser#isIdle()
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int)
	CALLEE: org.eclipse.jetty.http.HttpParser#getHeaderBuffer()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#messageComplete(long)
	CALLEE: org.eclipse.jetty.http.HttpParser#fill()
	CALLEE: org.eclipse.jetty.http.HttpParser#toString()
	CALLEE: org.eclipse.jetty.io.View#update(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#content(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#earlyEOF()
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.io.View#update(int,int)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#headerComplete()
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#toLong(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int,java.lang.String)
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#parsedHeader(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpGenerator#prepareBuffers()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getHeader()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#putHexInt(org.eclipse.jetty.io.Buffer,int)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#prependHexInt(org.eclipse.jetty.io.Buffer,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte[],int,int)
CALLER: org.eclipse.jetty.http.HttpGenerator#flushMask()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#notIdle()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#notIdle()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#reset()
	CALLEE: org.eclipse.jetty.http.HttpParser#returnBuffers()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#returnBuffers()
	CALLEE: org.eclipse.jetty.http.HttpParser#reset()
	CALLEE: org.eclipse.jetty.http.HttpFields#clear()
	CALLEE: org.eclipse.jetty.server.Request#recycle()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#reset()
	CALLEE: org.eclipse.jetty.server.Response#recycle()
	CALLEE: org.eclipse.jetty.http.HttpURI#clear()
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownChannelOutput()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
CALLER: org.eclipse.jetty.http.AbstractGenerator#setResponse(int,java.lang.String)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
CALLER: org.eclipse.jetty.http.HttpGenerator#completeHeader(org.eclipse.jetty.http.HttpFields,boolean)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getLongValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#putTo(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValueOrdinal()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValueBuffer()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getNameOrdinal()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#isRequest()
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getHeader()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#isResponse()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#isPrefix(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#getSendServerVersion()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#putDecLong(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.http.HttpFields#size()
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(int)
CALLER: org.eclipse.jetty.io.View#<init>(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
CALLER: org.eclipse.jetty.http.HttpGenerator#addContent(org.eclipse.jetty.io.Buffer,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#putHexInt(org.eclipse.jetty.io.Buffer,int)
	CALLEE: org.eclipse.jetty.io.View#clear()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getBuffer(int)
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer(int)
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpGenerator#complete()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#complete()
CALLER: org.eclipse.jetty.io.PooledBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isHeader(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isVolatile()
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#returnBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isHeader(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isVolatile()
CALLER: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#reset()
CALLER: org.eclipse.jetty.util.Utf8Appendable#append(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#appendByte(byte)
CALLER: org.eclipse.jetty.util.Utf8StringBuilder#getStringBuilder()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#checkState()
CALLER: org.eclipse.jetty.util.Utf8Appendable#append(byte)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#appendByte(byte)
CALLER: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#toString()
CALLER: org.eclipse.jetty.util.Utf8StringBuilder#toString()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#checkState()
CALLER: static org.eclipse.jetty.util.URIUtil#decodePath(byte[],int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.server.AbstractConnector#customize(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#isForwarded()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#checkForwardedHeaders(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.server.Request#getServletResponse()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
CALLER: static org.eclipse.jetty.io.nio.DirectNIOBuffer#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(java.nio.ByteBuffer,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
CALLER: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(java.nio.ByteBuffer,boolean)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int,boolean)
CALLER: javax.servlet.ServletRequestAttributeEvent#<init>(javax.servlet.ServletContext,javax.servlet.ServletRequest,java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.ServletRequestEvent#<init>(javax.servlet.ServletContext,javax.servlet.ServletRequest)
CALLER: org.eclipse.jetty.http.HttpURI#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#<init>(int)
	CALLEE: org.eclipse.jetty.http.HttpURI#parse(byte[],int,int)
CALLER: org.eclipse.jetty.http.HttpURI#getQuery()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.server.AsyncContinuation#scheduleTimeout()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getServer()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#expired()
	CALLEE: static org.eclipse.jetty.server.AsyncContinuation.AsyncEventState#access$200(org.eclipse.jetty.server.AsyncContinuation.AsyncEventState)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#scheduleTimeout(org.eclipse.jetty.util.thread.Timeout.Task,long)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#isResponseCommitted()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
CALLER: org.eclipse.jetty.server.Response#resetBuffer()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getGenerator()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#resetBuffer()
CALLER: org.eclipse.jetty.server.Response#setHeader(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setContentLength(long)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(java.lang.String,java.lang.String)
CALLER: static org.eclipse.jetty.http.HttpStatus#getMessage(int)
	CALLEE: static org.eclipse.jetty.http.HttpStatus#getCode(int)
CALLER: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getAssociate(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquote(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#ensureSpareCapacity(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeEncoded(char[],int,int)
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(char)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#ensureSpareCapacity(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeEncoded(char[],int,int)
CALLER: org.eclipse.jetty.server.Response#setContentLength(int)
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setContentLength(long)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isAllContentWritten()
	CALLEE: org.eclipse.jetty.http.HttpFields#putLongField(java.lang.String,long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#close()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#close()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.1#close()
CALLER: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getOutputStream()
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeTo(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.server.HttpOutput#write(byte[],int,int)
CALLER: static org.eclipse.jetty.http.HttpHeaders#<clinit>()
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
	CALLEE: org.eclipse.jetty.http.HttpHeaders#<init>()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#completeResponse()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int)
	CALLEE: org.eclipse.jetty.server.Response#getReason()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setResponse(int,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#completeHeader(org.eclipse.jetty.http.HttpFields,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#complete()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#reset()
	CALLEE: org.eclipse.jetty.server.Response#reset()
CALLER: org.eclipse.jetty.server.Response#sendProcessing()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getGenerator()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isExpecting102Processing()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#send1xx(int)
CALLER: org.eclipse.jetty.http.HttpParser#getHeaderBuffer()
	CALLEE: org.eclipse.jetty.io.View#update(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getHeader()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#messageComplete(long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#messageComplete(long)
CALLER: org.eclipse.jetty.http.HttpParser#fill()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpParser#getHeaderBuffer()
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int,java.lang.String)
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#fill(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#compact()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#compact()
CALLER: org.eclipse.jetty.io.View#update(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.View#isReadOnly()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#content(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#content(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#earlyEOF()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#earlyEOF()
CALLER: org.eclipse.jetty.io.View#update(int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
CALLER: static org.eclipse.jetty.http.HttpMethods#<clinit>()
	CALLEE: org.eclipse.jetty.io.BufferCache#<init>()
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#startResponse(org.eclipse.jetty.io.Buffer,int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#access$100()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#headerComplete()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#headerComplete()
CALLER: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.BufferCache#get(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#<init>(byte[],int,int,int)
CALLER: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
CALLER: static org.eclipse.jetty.io.BufferUtil#toLong(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
CALLER: static org.eclipse.jetty.http.HttpHeaderValues#<clinit>()
	CALLEE: org.eclipse.jetty.io.BufferCache#add(java.lang.String,int)
	CALLEE: org.eclipse.jetty.http.HttpHeaderValues#<init>()
CALLER: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.RequestHandler#parsedHeader(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#parsedHeader(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.AbstractBuffer#toString(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.View#array()
CALLER: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newHeader()
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isHeader(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newHeader()
CALLER: static org.eclipse.jetty.io.BufferUtil#putHexInt(org.eclipse.jetty.io.Buffer,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
CALLER: static org.eclipse.jetty.io.BufferUtil#prependHexInt(org.eclipse.jetty.io.Buffer,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,byte)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#flush(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#gatheringFlush(org.eclipse.jetty.io.Buffer,java.nio.ByteBuffer,org.eclipse.jetty.io.Buffer,java.nio.ByteBuffer)
	CALLEE: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#getByteBuffer()
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#getByteBuffer()
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#getByteBuffer()
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#getByteBuffer()
CALLER: org.eclipse.jetty.http.HttpParser#reset()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.http.HttpParser#returnBuffers()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#hasContent()
	CALLEE: org.eclipse.jetty.http.HttpParser#getHeaderBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#compact()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#compact()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#get()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#get()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek()
CALLER: org.eclipse.jetty.server.Request#recycle()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.AttributesMap#clearAttributes()
	CALLEE: org.eclipse.jetty.server.Request#setAuthentication(org.eclipse.jetty.server.Authentication)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#recycle()
	CALLEE: org.eclipse.jetty.server.CookieCutter#reset()
	CALLEE: org.eclipse.jetty.util.MultiMap#clear()
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#clearAttributes()
CALLER: org.eclipse.jetty.http.HttpGenerator#reset()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownOutput()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#reset()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#put(byte)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,byte)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte)
CALLER: static org.eclipse.jetty.io.BufferUtil#isPrefix(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
CALLER: static org.eclipse.jetty.io.BufferUtil#putDecLong(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
CALLER: org.eclipse.jetty.io.View#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
CALLER: org.eclipse.jetty.io.PooledBuffers#getBuffer(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#getHeaderSize()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#getBufferSize()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newBuffer(int)
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newBuffer(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.io.PooledBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newBuffer()
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#isBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffers#newBuffer()
CALLER: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
CALLER: org.eclipse.jetty.http.AbstractGenerator#complete()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.io.AbstractBuffers#isHeader(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.io.AbstractBuffers#isBuffer(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.util.Utf8Appendable#appendByte(byte)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#toHexString(byte)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.Utf8Appendable#checkState()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#isUtf8SequenceComplete()
CALLER: org.eclipse.jetty.server.AbstractConnector#checkForwardedHeaders(org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#getConnection()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedCipherSuiteHeader()
	CALLEE: org.eclipse.jetty.http.HttpFields#getStringField(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedSslSessionIdHeader()
	CALLEE: org.eclipse.jetty.server.Request#setScheme(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedHostHeader()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedServerHeader()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedForHeader()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getForwardedProtoHeader()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setServerName(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setServerPort(int)
	CALLEE: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.server.Request#setRemoteAddr(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setRemoteHost(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: javax.servlet.ServletResponseWrapper#getWriter()
	CALLEE: javax.servlet.ServletResponseWrapper#getOutputStream()
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendRedirect(java.lang.String)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestURI()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getPathInfo()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getDateHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getMethod()
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#setDateHeader(java.lang.String,long)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#setStatus(int)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#encodeRedirectURL(java.lang.String)
	CALLEE: javax.servlet.ServletResponseWrapper#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#getResource(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#getStylesheet()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#getWelcome(org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.http.MimeTypes#getMimeByExtension(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#doResponseHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)
	CALLEE: org.eclipse.jetty.io.WriterOutputStream#<init>(java.io.Writer)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#toString()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#toString()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#exists()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getAlias()
	CALLEE: org.eclipse.jetty.util.resource.Resource#getAlias()
	CALLEE: org.eclipse.jetty.util.resource.Resource#writeTo(java.io.OutputStream,long,long)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#length()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#length()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.Resource#getWeakETag()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#lastModified()
	CALLEE: org.eclipse.jetty.server.Request#getResponse()
	CALLEE: org.eclipse.jetty.server.Request#getDateHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#getWriter()
	CALLEE: org.eclipse.jetty.server.Response#setDateHeader(java.lang.String,long)
	CALLEE: org.eclipse.jetty.server.Response#setStatus(int)
	CALLEE: org.eclipse.jetty.server.Response#sendRedirect(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#encodeRedirectURL(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#sendContent(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Response#getHttpFields()
CALLER: org.eclipse.jetty.server.handler.HandlerList#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
CALLER: org.eclipse.jetty.http.HttpURI#parse(byte[],int,int)
	CALLEE: org.eclipse.jetty.http.HttpURI#parse2(byte[],int,int)
CALLER: org.eclipse.jetty.server.AsyncContinuation#expired()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#dispatch()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#scheduleDispatch()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#scheduleTimeout(org.eclipse.jetty.util.thread.Timeout.Task,long)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#getSelectSet()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#scheduleTimeout(org.eclipse.jetty.util.thread.Timeout.Task,long)
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quote(java.lang.Appendable,java.lang.String)
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#unquote(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquote(java.lang.String,boolean)
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#ensureSpareCapacity(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeEncoded(char[],int,int)
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeEncoded(char[],int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#ensureSpareCapacity(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#<init>(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#getCount()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#getBuf()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#getOutputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
CALLER: org.eclipse.jetty.http.HttpHeaders#<init>()
	CALLEE: org.eclipse.jetty.io.BufferCache#<init>()
CALLER: org.eclipse.jetty.server.Response#reset()
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.Response#resetBuffer()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#clear()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#fwdReset()
	CALLEE: org.eclipse.jetty.http.HttpFields#getStringField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Request#getProtocol()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#messageComplete(long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#handleRequest()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#fill(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#notIdle()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#fill(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#content(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#handleRequest()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#startRequest(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.server.Request#setTimeStamp(long)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int,java.lang.String)
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpURI#parse(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asImmutableBuffer()
	CALLEE: org.eclipse.jetty.server.Request#getTimeStamp()
	CALLEE: org.eclipse.jetty.server.Request#setMethod(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpURI#parseConnect(byte[],int,int)
	CALLEE: org.eclipse.jetty.server.Request#setUri(org.eclipse.jetty.http.HttpURI)
	CALLEE: org.eclipse.jetty.server.Request#setProtocol(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#headerComplete()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#handleRequest()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.http.HttpParser#setPersistent(boolean)
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setPersistent(boolean)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setResponse(int,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#completeHeader(org.eclipse.jetty.http.HttpFields,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#complete()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setVersion(int)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setHead(boolean)
	CALLEE: org.eclipse.jetty.http.HttpParser#isPersistent()
	CALLEE: org.eclipse.jetty.http.HttpFields#add(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Server#getSendDateHeader()
	CALLEE: org.eclipse.jetty.server.Request#getTimeStampBuffer()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setDate(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Request#setCharacterEncodingUnchecked(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpParser#getContentLength()
	CALLEE: org.eclipse.jetty.http.HttpParser#isChunking()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#<init>(byte[],int,int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
CALLER: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int)
CALLER: org.eclipse.jetty.http.HttpHeaderValues#<init>()
	CALLEE: org.eclipse.jetty.io.BufferCache#<init>()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#parsedHeader(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
	CALLEE: org.eclipse.jetty.http.HttpFields#add(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.http.MimeTypes#getCharsetFromContentType(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
CALLER: org.eclipse.jetty.io.AbstractBuffers#newHeader()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(int)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#gatheringFlush(org.eclipse.jetty.io.Buffer,java.nio.ByteBuffer,org.eclipse.jetty.io.Buffer,java.nio.ByteBuffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#skip(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
CALLER: static org.eclipse.jetty.server.Authentication#<clinit>()
	CALLEE: org.eclipse.jetty.server.Authentication.1#<init>()
	CALLEE: org.eclipse.jetty.server.Authentication.2#<init>()
	CALLEE: org.eclipse.jetty.server.Authentication.3#<init>()
	CALLEE: org.eclipse.jetty.server.Authentication.4#<init>()
	CALLEE: org.eclipse.jetty.server.Authentication.5#<init>()
CALLER: org.eclipse.jetty.server.AsyncContinuation#recycle()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#cancelTimeout()
CALLER: org.eclipse.jetty.io.AbstractBuffers#newBuffer(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(int)
CALLER: org.eclipse.jetty.io.AbstractBuffers#newBuffer()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(int)
CALLER: static org.eclipse.jetty.io.AbstractBuffers.1#<clinit>()
	CALLEE: static org.eclipse.jetty.io.Buffers.Type#values()
CALLER: static org.eclipse.jetty.util.TypeUtil#toHexString(byte)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#toHexString(byte[],int,int)
CALLER: org.eclipse.jetty.http.HttpFields#getStringField(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValue()
CALLER: org.eclipse.jetty.server.AbstractConnector#getLeftMostFieldValue(org.eclipse.jetty.http.HttpFields,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#getStringField(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#convertValue(java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#sendError(int,java.lang.String,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.http.HttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.HttpURI#getHost()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getHost()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#get(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#to8859_1_String(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#toInt(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Request#getLocalName()
	CALLEE: org.eclipse.jetty.server.Request#getLocalPort()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.View#peek(int,int)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#getResource(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getPathInfo()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getServletPath()
	CALLEE: javax.servlet.ServletRequestWrapper#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#getStylesheet()
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#getWelcome(org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#exists()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#doDirectory(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.server.Response#sendError(int)
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.util.resource.Resource#getListHTML(java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.Response#getWriter()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#println(java.lang.String)
	CALLEE: javax.servlet.ServletResponseWrapper#getWriter()
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendError(int)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestURI()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getPathInfo()
	CALLEE: javax.servlet.ServletResponseWrapper#setContentType(java.lang.String)
CALLER: org.eclipse.jetty.http.MimeTypes#getMimeByExtension(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#asciiToLowerCase(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#doResponseHeaders(javax.servlet.http.HttpServletResponse,org.eclipse.jetty.util.resource.Resource,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#setHeader(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#length()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#length()
	CALLEE: org.eclipse.jetty.server.Response#getHttpFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#putLongField(org.eclipse.jetty.io.Buffer,long)
	CALLEE: javax.servlet.ServletResponseWrapper#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#setHeader(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isExpired()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getContext()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: org.eclipse.jetty.server.Request#setServletPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setContext(org.eclipse.jetty.server.handler.ContextHandler.Context)
	CALLEE: org.eclipse.jetty.server.Request#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.Request#setPathInfo(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: static org.eclipse.jetty.util.URIUtil#compactPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#never()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: org.eclipse.jetty.server.Request#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.Request#setUserIdentityScope(org.eclipse.jetty.server.UserIdentity.Scope)
	CALLEE: org.eclipse.jetty.server.Request#getUserIdentityScope()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getKey()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getValue()
	CALLEE: org.eclipse.jetty.server.Request#setPathInfo(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#never()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getHolderEntry(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.PathMap#pathMatch(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.PathMap#pathInfo(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#getMapped()
	CALLEE: org.eclipse.jetty.server.Request#setServletPath(java.lang.String)
CALLER: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#isSecure()
	CALLEE: org.eclipse.jetty.server.Response#addCookie(org.eclipse.jetty.http.HttpCookie)
	CALLEE: javax.servlet.ServletRequestWrapper#isSecure()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#checkRequestedSessionId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#access(javax.servlet.http.HttpSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#complete(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.Request#getResponse()
	CALLEE: org.eclipse.jetty.server.Request#setSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.Request#setSessionManager(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.server.Request#getSession(boolean)
	CALLEE: org.eclipse.jetty.server.Request#recoverNewSession(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#getSessionManager()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Response#sendError(int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendError(int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int)
	CALLEE: org.eclipse.jetty.http.HttpException#getStatus()
	CALLEE: org.eclipse.jetty.http.HttpException#getReason()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: javax.servlet.ServletRequestEvent#<init>(javax.servlet.ServletContext,javax.servlet.ServletRequest)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#never()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#isProtectedTarget(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.Request#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.Request#takeNewContext()
CALLER: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#isAsyncStarted()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#errorComplete()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.Response#sendError(int)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContext()
	CALLEE: org.eclipse.jetty.server.Request#toString()
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendError(int)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestURI()
	CALLEE: javax.servlet.ServletRequestWrapper#getAsyncContext()
	CALLEE: javax.servlet.ServletRequestWrapper#isAsyncStarted()
	CALLEE: javax.servlet.ServletRequestWrapper#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.ServletRequestWrapper#getRequest()
	CALLEE: javax.servlet.ServletResponseWrapper#isCommitted()
	CALLEE: javax.servlet.ServletResponseWrapper#getResponse()
	CALLEE: javax.servlet.ServletException#getRootCause()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getFilterChain(org.eclipse.jetty.server.Request,java.lang.String,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.CachedChain#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.Chain#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#getUserIdentityScope()
CALLER: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#never()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.http.HttpURI#parse2(byte[],int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.server.AsyncContinuation#dispatch()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#scheduleDispatch()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#cancelTimeout()
CALLER: org.eclipse.jetty.server.AsyncContinuation#scheduleDispatch()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#asyncDispatch()
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#unquote(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(byte)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#isValidEscaping(char)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.Output#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.HttpOutput#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
CALLER: org.eclipse.jetty.server.Response#fwdReset()
	CALLEE: org.eclipse.jetty.server.Response#resetBuffer()
CALLER: org.eclipse.jetty.http.HttpFields#getStringField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValue()
CALLER: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asImmutableBuffer()
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#<init>(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.http.HttpFields.1)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#fill(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownInput()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#getByteBuffer()
	CALLEE: org.eclipse.jetty.io.nio.IndirectNIOBuffer#getByteBuffer()
CALLER: org.eclipse.jetty.io.AbstractBuffer#asImmutableBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#duplicate(int)
CALLER: org.eclipse.jetty.http.HttpURI#parseConnect(byte[],int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(byte[],int,int,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#add(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asImmutableBuffer()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#<init>(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.http.HttpFields.1)
	CALLEE: static org.eclipse.jetty.http.HttpHeaderValues#hasKnownValues(int)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$700(org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$702(org.eclipse.jetty.http.HttpFields.Field,org.eclipse.jetty.http.HttpFields.Field)
CALLER: org.eclipse.jetty.server.Request#getTimeStampBuffer()
	CALLEE: org.eclipse.jetty.io.BufferDateCache#formatBuffer(long)
CALLER: static org.eclipse.jetty.http.MimeTypes#getCharsetFromContentType(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.View#peek(int,int)
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
CALLER: org.eclipse.jetty.io.nio.IndirectNIOBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int,int,boolean)
CALLER: org.eclipse.jetty.server.AsyncContinuation#cancelTimeout()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
	CALLEE: static org.eclipse.jetty.server.AsyncContinuation.AsyncEventState#access$200(org.eclipse.jetty.server.AsyncContinuation.AsyncEventState)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#cancelTimeout(org.eclipse.jetty.util.thread.Timeout.Task)
CALLER: org.eclipse.jetty.http.HttpFields#getField(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#convertValue(java.lang.String)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#get(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$600(org.eclipse.jetty.http.HttpFields.Field)
CALLER: static org.eclipse.jetty.io.BufferUtil#to8859_1_String(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString(java.nio.charset.Charset)
CALLER: static org.eclipse.jetty.io.BufferUtil#toInt(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
CALLER: org.eclipse.jetty.server.Request#getLocalName()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getLocalHost()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getLocalAddr()
CALLER: org.eclipse.jetty.server.Request#getLocalPort()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getLocalPort()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getBaseResource()
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#addPath(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#checkContext(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendRedirect(java.lang.String)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#sendError(int)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getName()
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
	CALLEE: org.eclipse.jetty.server.Response#sendError(int)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getConnector()
	CALLEE: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#normalizeHostname(java.lang.String)
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#getCurrentConnection()
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.Response#sendRedirect(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.Request#getQueryString()
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#nextScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doScope(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.servlet.ServletHandler#getHolderEntry(java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap#getMatch(java.lang.String)
CALLER: static org.eclipse.jetty.http.PathMap#pathMatch(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.PathMap#isPathWildcardMatch(java.lang.String,java.lang.String)
CALLER: static org.eclipse.jetty.http.PathMap#pathInfo(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.PathMap#isPathWildcardMatch(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.server.session.SessionHandler#checkRequestedSessionId(org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestURI()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getCookies()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestedSessionId()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#getSessionManager()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isUsingCookies()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionCookieConfig()
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isValid(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getHttpSession(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionIdPathParameterNamePrefix()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#getName()
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.Request#setSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.Request#setRequestedSessionIdFromCookie(boolean)
	CALLEE: org.eclipse.jetty.server.Request#setRequestedSessionId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getCookies()
	CALLEE: org.eclipse.jetty.server.Request#getRequestedSessionId()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#access(javax.servlet.http.HttpSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#access(long)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isUsingCookies()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionCookieConfig()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getRefreshCookieAge()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextPath()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionCookie(javax.servlet.http.HttpSession,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#getMaxAge()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setIdChanged(boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getSession()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#cookieSet()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getCookieSetTime()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isIdChanged()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#complete(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getSession()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#complete()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#isProtectedTarget(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#compactPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#startsWithIgnoreCase(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
CALLER: org.eclipse.jetty.servlet.ServletHandler#getFilterChain(org.eclipse.jetty.server.Request,java.lang.String,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
	CALLEE: static org.eclipse.jetty.servlet.FilterMapping#dispatch(javax.servlet.DispatcherType)
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: org.eclipse.jetty.util.MultiMap#get(java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.CachedChain#<init>(org.eclipse.jetty.servlet.ServletHandler,java.lang.Object,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.Chain#<init>(org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.Request,java.lang.Object,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
CALLER: org.eclipse.jetty.servlet.ServletHandler#notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getRequestURI()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#asyncDispatch()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#dispatch()
CALLER: org.eclipse.jetty.server.HttpOutput#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getGenerator()
	CALLEE: javax.servlet.ServletOutputStream#<init>()
CALLER: org.eclipse.jetty.http.HttpFields#getField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$700(org.eclipse.jetty.http.HttpFields.Field)
CALLER: org.eclipse.jetty.http.HttpFields.Field#<init>(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer,org.eclipse.jetty.http.HttpFields.1)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#<init>(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownInput()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownChannelInput()
CALLER: org.eclipse.jetty.io.AbstractBuffer#duplicate(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#<init>(byte[],int,int,int)
	CALLEE: org.eclipse.jetty.io.View#buffer()
CALLER: org.eclipse.jetty.io.BufferDateCache#formatBuffer(long)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.DateCache#format(long)
CALLER: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.View#update(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.View#isReadOnly()
	CALLEE: org.eclipse.jetty.io.View#<init>(org.eclipse.jetty.io.Buffer,int,int,int,int)
CALLER: org.eclipse.jetty.io.View#peek(int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.View#peek(int,int)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int,int,boolean)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int,boolean)
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#cancelTimeout(org.eclipse.jetty.util.thread.Timeout.Task)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#getSelectSet()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#cancelTimeout(org.eclipse.jetty.util.thread.Timeout.Task)
CALLER: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#<init>(java.lang.String,int)
	CALLEE: org.eclipse.jetty.io.BufferCache#get(java.lang.String)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
CALLER: org.eclipse.jetty.util.resource.FileResource#addPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#toString()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#toString()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#isDirectory()
CALLER: org.eclipse.jetty.util.resource.URLResource#addPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextPath()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$600(org.eclipse.jetty.server.handler.ContextHandler)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionCookie(javax.servlet.http.HttpSession,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isUsingCookies()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getNodeId(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#getMaxAge()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#isHttpOnly()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.2#isSecure()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isSecureRequestOnly()
	CALLEE: org.eclipse.jetty.http.HttpCookie#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)
	CALLEE: org.eclipse.jetty.http.HttpCookie#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,java.lang.String,int)
CALLER: org.eclipse.jetty.util.MultiMap#get(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#getList(java.lang.Object,boolean)
CALLER: org.eclipse.jetty.servlet.ServletHandler.CachedChain#<init>(org.eclipse.jetty.servlet.ServletHandler,java.lang.Object,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.CachedChain#<init>(org.eclipse.jetty.servlet.ServletHandler,java.lang.Object,org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: static org.eclipse.jetty.util.LazyList#remove(java.lang.Object,int)
CALLER: org.eclipse.jetty.io.nio.ChannelEndPoint#shutdownChannelInput()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
CALLER: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.View#buffer()
CALLER: org.eclipse.jetty.io.View#isReadOnly()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.View#isReadOnly()
CALLER: org.eclipse.jetty.io.View#<init>(org.eclipse.jetty.io.Buffer,int,int,int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.View#buffer()
CALLER: org.eclipse.jetty.util.resource.BadResource#toString()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#toString()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
CALLER: org.eclipse.jetty.util.resource.URLResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#exists()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#getNodeId(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getNodeId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getSession()
CALLER: static org.eclipse.jetty.servlet.FilterMapping.1#<clinit>()
	CALLEE: static javax.servlet.DispatcherType#values()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getUseCaches()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.JarResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.URLResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.JarResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#newConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#newConnection()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#newConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#newConnection()
CALLER: org.eclipse.jetty.http.HttpURI#toString()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#toString()
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.io.View#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.View#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int,byte[],int,int)
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers.1#initialValue()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers.1#initialValue()
CALLER: org.eclipse.jetty.io.View.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpFields.Field#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getName()
CALLER: org.eclipse.jetty.io.AbstractBuffer#hashCode()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.View#array()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#toString()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#toString()
CALLER: org.eclipse.jetty.http.HttpFields#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getName()
CALLER: org.eclipse.jetty.server.AsyncContinuation#getResponse()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
CALLER: org.eclipse.jetty.server.Request#mergeQueryString(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.MultiMap#<init>()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#extractParameters()
	CALLEE: org.eclipse.jetty.util.MultiMap#containsKey(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#getQueryEncoding()
	CALLEE: org.eclipse.jetty.util.MultiMap#entrySet()
	CALLEE: org.eclipse.jetty.server.Request#setParameters(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.server.Request#setQueryString(java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.http.HttpURI#getPathAndParam()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getPathAndParam()
CALLER: org.eclipse.jetty.io.BufferCache#getOrdinal(java.lang.String)
	CALLEE: org.eclipse.jetty.util.StringMap#get(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
CALLER: org.eclipse.jetty.io.BufferCache#getBest(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#getValue()
	CALLEE: org.eclipse.jetty.util.StringMap#getBestEntry(byte[],int,int)
CALLER: org.eclipse.jetty.http.AbstractGenerator#resetBuffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
CALLER: org.eclipse.jetty.http.HttpFields#put(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#convertValue(java.lang.String)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#putLongField(java.lang.String,long)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#toBuffer(long)
CALLER: org.eclipse.jetty.server.HttpOutput#write(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int)
	CALLEE: org.eclipse.jetty.server.HttpOutput#write(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.Output#close()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.HttpOutput#isClosed()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#flushResponse()
	CALLEE: org.eclipse.jetty.server.HttpOutput#close()
CALLER: org.eclipse.jetty.http.HttpGenerator#send1xx(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#flush(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getHeader()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.AbstractBuffer#clear()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#put(byte[])
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte[],int,int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#compact()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
CALLER: org.eclipse.jetty.io.AbstractBuffer#compact()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.AbstractBuffer#get(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#get()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#mark()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#sliceFromMark()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#sliceFromMark(int)
CALLER: org.eclipse.jetty.io.AbstractBuffer#peek()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.util.resource.FileResource#getAlias()
	CALLEE: static org.eclipse.jetty.util.resource.Resource#toURL(java.io.File)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getURL()
CALLER: org.eclipse.jetty.util.resource.Resource#writeTo(java.io.OutputStream,long,long)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream()
	CALLEE: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream,long)
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#close()
CALLER: org.eclipse.jetty.util.resource.JarFileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
CALLER: org.eclipse.jetty.util.resource.URLResource#length()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.JarResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#<init>(org.eclipse.jetty.util.resource.JarResource,java.io.InputStream)
CALLER: org.eclipse.jetty.util.resource.URLResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.Resource#getWeakETag()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#length()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#length()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getName()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getName()
	CALLEE: static org.eclipse.jetty.util.B64Code#encode(long,java.lang.Appendable)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#exists()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.URLResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.Resource#getListHTML(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#length()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#length()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#length()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#lastModified()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#lastModified()
	CALLEE: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#addPath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#list()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#list()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#list()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#list()
	CALLEE: static org.eclipse.jetty.util.resource.Resource#deTag(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#hrefEncodeURI(java.lang.String)
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#scheduleTimeout(org.eclipse.jetty.util.thread.Timeout.Task,long)
	CALLEE: org.eclipse.jetty.util.thread.Timeout#schedule(org.eclipse.jetty.util.thread.Timeout.Task,long)
CALLER: org.eclipse.jetty.servlet.ServletHandler.CachedChain#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#getCurrentConnection()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: static org.eclipse.jetty.servlet.ServletHandler#access$000()
	CALLEE: org.eclipse.jetty.server.Request#isAsyncSupported()
	CALLEE: org.eclipse.jetty.server.Request#setAsyncSupported(boolean)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getPathInfo()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getServletPath()
CALLER: org.eclipse.jetty.servlet.ServletHandler.Chain#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getServletPath()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#nextHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#notFound(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#getCurrentConnection()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: static org.eclipse.jetty.servlet.ServletHandler#access$000()
	CALLEE: org.eclipse.jetty.server.Request#isAsyncSupported()
	CALLEE: org.eclipse.jetty.server.Request#setAsyncSupported(boolean)
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#getPathInfo()
CALLER: org.eclipse.jetty.util.resource.FileResource#hashCode()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#hashCode()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
CALLER: org.eclipse.jetty.http.HttpFields.Field#getValue()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#to8859_1_String(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#isValid(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isValid()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getSession()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#getHttpSession(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getClusterId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionIdManager()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#getSession(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setIdChanged(boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getNodeId()
CALLER: org.eclipse.jetty.server.Request#getDateHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#getDateField(java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getHeader(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#getStringField(java.lang.String)
CALLER: org.eclipse.jetty.server.Response#getWriter()
	CALLEE: static org.eclipse.jetty.http.MimeTypes#getCharsetFromContentType(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Response#setCharacterEncoding(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getPrintWriter(java.lang.String)
CALLER: org.eclipse.jetty.server.Response#setDateHeader(java.lang.String,long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#putDateField(java.lang.String,long)
CALLER: org.eclipse.jetty.server.Response#setStatus(int)
	CALLEE: org.eclipse.jetty.server.Response#setStatus(int,java.lang.String)
CALLER: org.eclipse.jetty.server.Response#sendRedirect(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#complete()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#resetBuffer()
	CALLEE: org.eclipse.jetty.server.Response#setHeader(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.Response#setStatus(int)
	CALLEE: static org.eclipse.jetty.util.URIUtil#hasScheme(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getRootURL()
	CALLEE: static org.eclipse.jetty.util.URIUtil#parentPath(java.lang.String)
CALLER: org.eclipse.jetty.server.Response#encodeRedirectURL(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#encodeURL(java.lang.String)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.Output#sendContent(java.lang.Object)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#completeUncheckedAddContent()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#flush()
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#close()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#readFrom(java.io.InputStream,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#readFrom(java.io.InputStream,int)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#addContent(org.eclipse.jetty.io.Buffer,boolean)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#add(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.HttpOutput#isClosed()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isWritten()
	CALLEE: org.eclipse.jetty.http.HttpFields#containsKey(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.Response#getSetCharacterEncoding()
	CALLEE: org.eclipse.jetty.http.HttpFields#putLongField(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.http.HttpFields#putDateField(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.server.nio.AbstractNIOConnector#getUseDirectBuffers()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#prepareUncheckedAddContent()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#getUncheckedBuffer()
CALLER: org.eclipse.jetty.server.Response#getHttpFields()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
CALLER: org.eclipse.jetty.server.Request#getQueryString()
	CALLEE: org.eclipse.jetty.http.HttpURI#getQuery()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getQuery()
	CALLEE: org.eclipse.jetty.http.HttpURI#getQuery(java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getSession(boolean)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionCookie(javax.servlet.http.HttpSession,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isValid(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.Request#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#isSecure()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#newHttpSession(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.Response#addCookie(org.eclipse.jetty.http.HttpCookie)
CALLER: org.eclipse.jetty.server.Request#removeEventListener(java.util.EventListener)
	CALLEE: static org.eclipse.jetty.util.LazyList#remove(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.Request#addEventListener(java.util.EventListener)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.Request#isSecure()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isConfidential(org.eclipse.jetty.server.Request)
CALLER: org.eclipse.jetty.server.Request#getCookies()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#getValues(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.server.CookieCutter#<init>()
	CALLEE: org.eclipse.jetty.server.CookieCutter#addCookieField(java.lang.String)
	CALLEE: org.eclipse.jetty.server.CookieCutter#getCookies()
	CALLEE: org.eclipse.jetty.http.HttpFields.5#nextElement()
	CALLEE: org.eclipse.jetty.http.HttpFields.5#hasMoreElements()
CALLER: org.eclipse.jetty.server.Request#getAsyncContext()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isInitial()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#getStatusString()
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isAsyncStarted()
CALLER: org.eclipse.jetty.server.Request#toString()
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
CALLER: org.eclipse.jetty.io.AbstractBuffer#toString(java.nio.charset.Charset)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#asArray()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.View#array()
CALLER: org.eclipse.jetty.http.HttpFields.DateGenerator#formatDate(long)
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$000()
	CALLEE: static org.eclipse.jetty.util.StringUtil#append2digits(java.lang.StringBuilder,int)
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$100()
CALLER: org.eclipse.jetty.http.HttpFields.DateGenerator#formatCookieDate(java.lang.StringBuilder,long)
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$000()
	CALLEE: static org.eclipse.jetty.util.StringUtil#append2digits(java.lang.StringBuilder,int)
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$100()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.Output#sendResponse(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#sendResponse(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#equals(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.StrongIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#equals(java.lang.Object)
CALLER: org.eclipse.jetty.servlet.ServletHandler.CachedChain#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler.CachedChain#toString()
CALLER: org.eclipse.jetty.servlet.ServletHandler.Chain#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: com.mchange.v2.c3p0.AbstractComboPooledDataSource#toString()
	CALLEE: org.eclipse.jetty.util.component.AggregateLifeCycle.Bean#toString()
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: com.mchange.v2.c3p0.WrapperConnectionPoolDataSource#toString()
	CALLEE: com.mchange.v2.log.MLevel#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.NullEntry#toString()
	CALLEE: org.eclipse.jetty.util.StringMap.Node#toString()
	CALLEE: com.mchange.v2.c3p0.impl.DriverManagerDataSourceBase#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.Entry#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#toString()
	CALLEE: com.mchange.v2.c3p0.stmt.StatementCacheKey#toString()
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#toString()
	CALLEE: com.mchange.v2.c3p0.impl.NewProxyResultSet#toString()
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#toString()
	CALLEE: org.jboss.netty.buffer.CompositeChannelBuffer#toString()
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#toString()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
CALLER: org.eclipse.jetty.io.ThreadLocalBuffers.1#initialValue()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers.ThreadBuffers#<init>()
CALLER: org.eclipse.jetty.io.AbstractBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.View#array()
CALLER: org.eclipse.jetty.http.HttpFields.Field#getName()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#to8859_1_String(org.eclipse.jetty.io.Buffer)
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String,int)
CALLER: static org.eclipse.jetty.util.UrlEncoded#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.Request#extractParameters()
	CALLEE: org.eclipse.jetty.http.HttpException#toString()
	CALLEE: org.eclipse.jetty.server.Request#getParts()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getConnector()
	CALLEE: org.eclipse.jetty.util.MultiMap#entrySet()
	CALLEE: org.eclipse.jetty.util.MultiMap#<init>(int)
	CALLEE: org.eclipse.jetty.http.HttpURI#hasQuery()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#hasQuery()
	CALLEE: org.eclipse.jetty.http.HttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.http.HttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getCharacterEncoding()
	CALLEE: org.eclipse.jetty.server.Request#getContentType()
	CALLEE: static org.eclipse.jetty.http.HttpFields#valueParameters(java.lang.String,java.util.Map)
	CALLEE: org.eclipse.jetty.server.Request#getContentLength()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getMaxFormContentSize()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getMaxFormKeys()
	CALLEE: org.eclipse.jetty.server.Request#getInputStream()
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.io.InputStream,org.eclipse.jetty.util.MultiMap,java.lang.String,int,int)
CALLER: org.eclipse.jetty.http.HttpURI#getPathAndParam()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getPathAndParam()
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#remove(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
CALLER: static org.eclipse.jetty.io.BufferUtil#toBuffer(long)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(int)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#putDecLong(org.eclipse.jetty.io.Buffer,long)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(byte[],int,int,int)
CALLER: org.eclipse.jetty.server.HttpOutput#write(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#addContent(org.eclipse.jetty.io.Buffer,boolean)
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isAllContentWritten()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#close()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#flush()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isOpen()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#isBufferFull()
	CALLEE: org.eclipse.jetty.server.HttpOutput#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#blockForOutput(long)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.http.HttpException#<init>(int)
	CALLEE: org.eclipse.jetty.server.Response#getReason()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setPersistent(boolean)
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#setResponse(int,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#completeHeader(org.eclipse.jetty.http.HttpFields,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator#complete()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#reset()
	CALLEE: org.eclipse.jetty.server.Response#reset()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#flushResponse()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#poke(int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int)
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#buffer()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isReadOnly()
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.View#buffer()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte[],int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#poke(int,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.io.AbstractBuffer#sliceFromMark(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setMarkIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#markIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#peek(int,int)
CALLER: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream,long)
CALLER: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream,long)
	CALLEE: org.eclipse.jetty.server.HttpOutput#write(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.WriterOutputStream#write(byte[],int,int)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#list()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#release()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#isDirectory()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#listEntries()
CALLER: static org.eclipse.jetty.util.resource.Resource#deTag(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#replace(java.lang.String,java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.util.thread.Timeout#schedule(org.eclipse.jetty.util.thread.Timeout.Task,long)
	CALLEE: static org.eclipse.jetty.util.thread.Timeout.Task#access$000(org.eclipse.jetty.util.thread.Timeout.Task)
	CALLEE: static org.eclipse.jetty.util.thread.Timeout.Task#access$100(org.eclipse.jetty.util.thread.Timeout.Task,org.eclipse.jetty.util.thread.Timeout.Task)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#getSession(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSessions()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#deIdle()
CALLER: org.eclipse.jetty.http.HttpFields#getDateField(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(java.lang.String)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#to8859_1_String(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$600(org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: static org.eclipse.jetty.http.HttpFields#valueParameters(java.lang.String,java.util.Map)
	CALLEE: org.eclipse.jetty.http.HttpFields.DateParser#parse(java.lang.String)
CALLER: org.eclipse.jetty.server.Response#setCharacterEncoding(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isIncluding()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getAssociate(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#getPrintWriter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getOutputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.OutputWriter#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.Server#isUncheckedPrintWriter()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#<init>(java.io.Writer)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.1#<init>(org.eclipse.jetty.server.AbstractHttpConnection,java.io.Writer)
	CALLEE: org.eclipse.jetty.server.HttpWriter#setCharacterEncoding(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpFields#putDateField(java.lang.String,long)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#putDateField(org.eclipse.jetty.io.Buffer,long)
CALLER: org.eclipse.jetty.server.Request#getRootURL()
	CALLEE: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.server.Request#getScheme()
	CALLEE: org.eclipse.jetty.server.Request#getServerPort()
CALLER: org.eclipse.jetty.server.Response#encodeURL(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getNodeId(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isValid(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.Request#getSession(boolean)
	CALLEE: org.eclipse.jetty.http.HttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.HttpURI#getScheme()
	CALLEE: org.eclipse.jetty.http.HttpURI#getHost()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.http.HttpURI#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isUsingCookies()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionIdPathParameterNamePrefix()
	CALLEE: org.eclipse.jetty.server.Request#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#getSessionManager()
	CALLEE: static org.eclipse.jetty.util.URIUtil#hasScheme(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getServerPort()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isCheckingRemoteSessionIdEncoding()
	CALLEE: org.eclipse.jetty.http.HttpURI#getPath()
	CALLEE: org.eclipse.jetty.server.Request#isRequestedSessionIdFromCookie()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#isUsingURLs()
CALLER: org.eclipse.jetty.http.HttpFields#containsKey(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.BufferCache#lookup(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpFields#putLongField(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#toBuffer(long)
CALLER: org.eclipse.jetty.http.HttpFields#putDateField(org.eclipse.jetty.io.Buffer,long)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpFields#formatDate(long)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.nio.AbstractNIOConnector#getUseDirectBuffers()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getRequestBufferType()
CALLER: org.eclipse.jetty.http.HttpGenerator#prepareUncheckedAddContent()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.PooledBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.ThreadLocalBuffers#getBuffer()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
CALLER: org.eclipse.jetty.http.AbstractGenerator#completeUncheckedAddContent()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#clear()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.Output#flush()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#commitResponse(boolean)
	CALLEE: org.eclipse.jetty.server.HttpOutput#flush()
CALLER: org.eclipse.jetty.http.EncodedHttpURI#getQuery()
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpURI#getQuery(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#newHttpSession(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#newSession(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#setMaxInactiveInterval(int)
CALLER: org.eclipse.jetty.server.Response#addCookie(org.eclipse.jetty.http.HttpCookie)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponseFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#addSetCookie(org.eclipse.jetty.http.HttpCookie)
CALLER: static org.eclipse.jetty.util.LazyList#remove(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View.CaseInsensitive#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.View#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.AbstractIdentityTokenized#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer.CaseInsensitive#equals(java.lang.Object)
	CALLEE: com.mchange.v2.util.DoubleWeakHashMap.WKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.cfg.DelayedLogItem#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.impl.DbAuth#equals(java.lang.Object)
	CALLEE: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.WeakIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v1.identicator.StrongIdHashKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.MemoryCoalescedStatementCacheKey#equals(java.lang.Object)
	CALLEE: com.mchange.v2.c3p0.stmt.SimpleStatementCacheKey#equals(java.lang.Object)
	CALLEE: org.jboss.netty.handler.codec.http.HttpMethod#equals(java.lang.Object)
	CALLEE: org.jboss.netty.buffer.AbstractChannelBuffer#equals(java.lang.Object)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#isConfidential(org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#isConfidential(org.eclipse.jetty.server.Request)
CALLER: org.eclipse.jetty.http.HttpFields#getValues(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields.5#<init>(org.eclipse.jetty.http.HttpFields,org.eclipse.jetty.http.HttpFields.Field)
CALLER: static org.eclipse.jetty.server.CookieCutter#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.CookieCutter#addCookieField(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#remove(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,int,java.lang.Object)
CALLER: org.eclipse.jetty.server.CookieCutter#getCookies()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.CookieCutter#parseFields()
CALLER: org.eclipse.jetty.http.HttpGenerator#sendResponse(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
CALLER: org.eclipse.jetty.io.AbstractBuffer#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#equalsIgnoreCase(org.eclipse.jetty.io.Buffer)
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String,int)
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeString(java.lang.String,int,int,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(byte[],int,int,org.eclipse.jetty.util.MultiMap,org.eclipse.jetty.util.Utf8StringBuilder)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#isUTF8(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(byte[],int,int,org.eclipse.jetty.util.MultiMap)
CALLER: org.eclipse.jetty.http.EncodedHttpURI#decodeQueryTo(org.eclipse.jetty.util.MultiMap,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#toString(byte[],int,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getContentType()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#getStringField(org.eclipse.jetty.io.Buffer)
CALLER: static org.eclipse.jetty.http.HttpFields#valueParameters(java.lang.String,java.util.Map)
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#<init>(java.lang.String,java.lang.String,boolean,boolean)
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#hasMoreTokens()
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#nextToken()
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#<init>(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.server.Request#getContentLength()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequestFields()
	CALLEE: org.eclipse.jetty.http.HttpFields#getLongField(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.Request#getInputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getInputStream()
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.io.InputStream,org.eclipse.jetty.util.MultiMap,java.lang.String,int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(int)
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decode88591To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeUtf16To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#<init>()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#setCount(int)
	CALLEE: org.eclipse.jetty.server.HttpInput#read()
CALLER: org.eclipse.jetty.server.Request#getParts()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#getName()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#getInputStream()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#getContentType()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#getContentDispositionFilename()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: static org.eclipse.jetty.http.MimeTypes#getCharsetFromContentType(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.util.IO#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: org.eclipse.jetty.server.Request#getContentType()
	CALLEE: org.eclipse.jetty.server.Request#getInputStream()
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream#<init>(java.io.InputStream,java.lang.String,javax.servlet.MultipartConfigElement,java.io.File)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream#getParts()
	CALLEE: org.eclipse.jetty.server.Request#getParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getParameters()
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.OutputStream)
CALLER: org.eclipse.jetty.http.AbstractGenerator#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
CALLER: org.eclipse.jetty.http.HttpGenerator#isBufferFull()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isBufferFull()
CALLER: org.eclipse.jetty.server.HttpOutput#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getMaxIdleTime()
CALLER: org.eclipse.jetty.http.AbstractGenerator#blockForOutput(long)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#blockWritable(long)
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractBuffer#poke(int,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#array()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.View#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#poke(int,byte)
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#capacity()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#array()
	CALLEE: org.eclipse.jetty.io.nio.DirectNIOBuffer#peek(int)
CALLER: org.eclipse.jetty.io.WriterOutputStream#write(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#write(java.lang.String)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#listEntries()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getUseCaches()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
CALLER: static org.eclipse.jetty.util.thread.Timeout.Task#access$100(org.eclipse.jetty.util.thread.Timeout.Task,org.eclipse.jetty.util.thread.Timeout.Task)
	CALLEE: org.eclipse.jetty.util.thread.Timeout.Task#link(org.eclipse.jetty.util.thread.Timeout.Task)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.OutputWriter#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: org.eclipse.jetty.server.HttpWriter#<init>(org.eclipse.jetty.server.HttpOutput)
CALLER: static org.eclipse.jetty.io.UncheckedPrintWriter#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#<init>(java.io.Writer)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#<init>(java.io.Writer,boolean)
CALLER: org.eclipse.jetty.server.HttpWriter#setCharacterEncoding(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#<init>(int)
CALLER: org.eclipse.jetty.server.Request#getServerPort()
	CALLEE: org.eclipse.jetty.http.HttpURI#getPort()
	CALLEE: org.eclipse.jetty.http.EncodedHttpURI#getPort()
	CALLEE: org.eclipse.jetty.server.Request#getServerName()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getLocalPort()
	CALLEE: org.eclipse.jetty.server.Request#getScheme()
CALLER: org.eclipse.jetty.http.HttpURI#getPath()
	CALLEE: org.eclipse.jetty.http.HttpURI#toUtf8String(int,int)
CALLER: org.eclipse.jetty.server.AbstractConnector#getRequestBufferType()
	CALLEE: org.eclipse.jetty.http.HttpBuffersImpl#getRequestBufferType()
CALLER: org.eclipse.jetty.server.HttpOutput#flush()
	CALLEE: org.eclipse.jetty.server.HttpOutput#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#flush(long)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#newSession(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)
CALLER: org.eclipse.jetty.http.HttpFields#addSetCookie(org.eclipse.jetty.http.HttpCookie)
	CALLEE: org.eclipse.jetty.http.HttpCookie#getName()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getValue()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getDomain()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getPath()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getMaxAge()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getComment()
	CALLEE: org.eclipse.jetty.http.HttpCookie#isSecure()
	CALLEE: org.eclipse.jetty.http.HttpCookie#isHttpOnly()
	CALLEE: org.eclipse.jetty.http.HttpCookie#getVersion()
	CALLEE: org.eclipse.jetty.http.HttpFields#addSetCookie(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,boolean,boolean,int)
CALLER: org.eclipse.jetty.server.AbstractConnector#isConfidential(org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.Request#getScheme()
CALLER: org.eclipse.jetty.server.CookieCutter#parseFields()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.LazyList#remove(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String)
	CALLEE: javax.servlet.http.Cookie#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.servlet.http.Cookie#setVersion(int)
	CALLEE: javax.servlet.http.Cookie#setComment(java.lang.String)
	CALLEE: javax.servlet.http.Cookie#setDomain(java.lang.String)
	CALLEE: javax.servlet.http.Cookie#setPath(java.lang.String)
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeString(java.lang.String,int,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(java.lang.String,int,int,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte)
	CALLEE: static org.eclipse.jetty.util.StringUtil#isUTF8(java.lang.String)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuffer#getStringBuffer()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#toReplacedString()
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(byte[],int,int,org.eclipse.jetty.util.MultiMap,org.eclipse.jetty.util.Utf8StringBuilder)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#getStringBuilder()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#toString()
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(byte)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#toReplacedString()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#length()
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(byte[],int,int,org.eclipse.jetty.util.MultiMap)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(byte[],int,int,org.eclipse.jetty.util.MultiMap,org.eclipse.jetty.util.Utf8StringBuilder)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#<init>()
CALLER: org.eclipse.jetty.util.QuotedStringTokenizer#nextToken()
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#hasMoreTokens()
CALLER: org.eclipse.jetty.util.QuotedStringTokenizer#<init>(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#<init>(java.lang.String,java.lang.String,boolean,boolean)
CALLER: org.eclipse.jetty.http.HttpFields#getLongField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getLongValue()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#getInputStream()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#isCommitted()
	CALLEE: org.eclipse.jetty.http.HttpParser#getHeaderBuffer()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#send1xx(int)
	CALLEE: org.eclipse.jetty.server.HttpInput#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeUtf8To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#reset()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#getStringBuilder()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#append(byte)
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#toString()
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#length()
	CALLEE: org.eclipse.jetty.util.Utf8StringBuilder#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput#read()
CALLER: static org.eclipse.jetty.util.UrlEncoded#decode88591To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(int)
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiMap#size()
	CALLEE: org.eclipse.jetty.server.HttpInput#read()
CALLER: static org.eclipse.jetty.util.UrlEncoded#decodeUtf16To(java.io.InputStream,org.eclipse.jetty.util.MultiMap,int,int)
	CALLEE: static org.eclipse.jetty.util.UrlEncoded#decodeTo(java.lang.String,org.eclipse.jetty.util.MultiMap,java.lang.String,int)
	CALLEE: static org.eclipse.jetty.util.IO#copy(java.io.Reader,java.io.Writer,long)
CALLER: static org.eclipse.jetty.util.MultiPartInputStream#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: javax.servlet.MultipartConfigElement#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.MultiPartInputStream#<init>(java.io.InputStream,java.lang.String,javax.servlet.MultipartConfigElement,java.io.File)
	CALLEE: javax.servlet.MultipartConfigElement#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ReadLineInputStream#<init>(java.io.InputStream)
CALLER: org.eclipse.jetty.util.MultiPartInputStream#getParts()
	CALLEE: static org.eclipse.jetty.util.LazyList#getList(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream#parse()
	CALLEE: org.eclipse.jetty.util.MultiMap#values()
CALLER: org.eclipse.jetty.server.Request#getParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#extractParameters()
	CALLEE: org.eclipse.jetty.util.MultiMap#getValue(java.lang.Object,int)
CALLER: static org.eclipse.jetty.util.IO#close(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.http.AbstractGenerator#isBufferFull()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#isImmutable()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#compact()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#compact()
CALLER: org.eclipse.jetty.server.AbstractHttpConnection#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#isLowResources()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getLowResourceMaxIdleTime()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#blockWritable(long)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setCheckForIdle(boolean)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getNow()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#isCheckForIdle()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint.4#<init>(org.eclipse.jetty.io.nio.SelectChannelEndPoint,java.lang.InterruptedException)
CALLER: org.eclipse.jetty.http.AbstractGenerator#flush(long)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#flushBuffer()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#isBufferFull()
	CALLEE: org.eclipse.jetty.http.AbstractGenerator#blockForOutput(long)
CALLER: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)
CALLER: org.eclipse.jetty.http.HttpFields#addSetCookie(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,boolean,boolean,int)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.http.HttpFields#add(org.eclipse.jetty.io.Buffer,org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#toString()
	CALLEE: static org.eclipse.jetty.http.HttpFields#formatCookieDate(java.lang.StringBuilder,long)
	CALLEE: org.eclipse.jetty.io.View#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields#getField(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$700(org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$702(org.eclipse.jetty.http.HttpFields.Field,org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$600(org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.Appendable,java.lang.String,java.lang.String)
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String,boolean)
CALLER: javax.servlet.http.Cookie#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.servlet.http.Cookie#isToken(java.lang.String)
CALLER: org.eclipse.jetty.util.Utf8StringBuffer#<init>(int)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#<init>(java.lang.Appendable)
CALLER: org.eclipse.jetty.util.Utf8StringBuffer#getStringBuffer()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#checkState()
CALLER: org.eclipse.jetty.util.Utf8Appendable#toReplacedString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable.NotUtf8Exception#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#isUtf8SequenceComplete()
CALLER: org.eclipse.jetty.util.Utf8StringBuilder#<init>()
	CALLEE: org.eclipse.jetty.util.Utf8Appendable#<init>(java.lang.Appendable)
CALLER: org.eclipse.jetty.http.HttpFields.Field#getLongValue()
	CALLEE: static org.eclipse.jetty.io.BufferUtil#toLong(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.server.HttpInput#<init>(org.eclipse.jetty.server.AbstractHttpConnection)
	CALLEE: javax.servlet.ServletInputStream#<init>()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getParser()
CALLER: org.eclipse.jetty.util.MultiPartInputStream#parse()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#write(int)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#write(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.MultiMap#<init>()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.Object,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquote(java.lang.String)
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#<init>(java.lang.String,java.lang.String,boolean,boolean)
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#hasMoreTokens()
	CALLEE: org.eclipse.jetty.util.QuotedStringTokenizer#nextToken()
	CALLEE: javax.servlet.MultipartConfigElement#getLocation()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream#value(java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.ReadLineInputStream#readLine()
	CALLEE: javax.servlet.MultipartConfigElement#getMaxRequestSize()
	CALLEE: org.eclipse.jetty.util.MultiMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream#filenameValue(java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#<init>(org.eclipse.jetty.util.MultiPartInputStream,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#setHeaders(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#open()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.Base64InputStream#<init>(org.eclipse.jetty.util.ReadLineInputStream)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.1#<init>(org.eclipse.jetty.util.MultiPartInputStream,java.io.InputStream)
	CALLEE: org.eclipse.jetty.util.ReadLineInputStream#read()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.Base64InputStream#read()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.1#read()
CALLER: org.eclipse.jetty.util.MultiMap#getValue(java.lang.Object,int)
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
CALLER: org.eclipse.jetty.server.AbstractConnector#isLowResources()
	CALLEE: org.eclipse.jetty.server.Server#getThreadPool()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#isLowOnThreads()
CALLER: org.eclipse.jetty.server.AbstractConnector#getLowResourceMaxIdleTime()
	CALLEE: org.eclipse.jetty.server.nio.SelectChannelConnector#getLowResourcesMaxIdleTime()
CALLER: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getNow()
	CALLEE: org.eclipse.jetty.util.thread.Timeout#getNow()
CALLER: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getNodeId(java.lang.String,javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#newSessionId(javax.servlet.http.HttpServletRequest,long)
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#quoteIfNeeded(java.lang.Appendable,java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#quote(java.lang.Appendable,java.lang.String)
CALLER: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#isValidEscaping(char)
CALLER: org.eclipse.jetty.util.MultiPartInputStream#value(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String)
CALLER: org.eclipse.jetty.util.MultiMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#add(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.util.MultiPartInputStream#filenameValue(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.QuotedStringTokenizer#unquoteOnly(java.lang.String,boolean)
CALLER: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#open()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#<init>()
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#createFile()
CALLER: org.eclipse.jetty.util.MultiPartInputStream.Base64InputStream#read()
	CALLEE: org.eclipse.jetty.util.ReadLineInputStream#readLine()
	CALLEE: static org.eclipse.jetty.util.B64Code#decode(java.lang.String,java.io.ByteArrayOutputStream)
CALLER: org.eclipse.jetty.util.MultiPartInputStream.1#read()
	CALLEE: org.eclipse.jetty.util.ReadLineInputStream#read()
	CALLEE: org.eclipse.jetty.server.HttpInput#read()
CALLER: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#write(int)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#createFile()
	CALLEE: javax.servlet.MultipartConfigElement#getMaxFileSize()
	CALLEE: javax.servlet.MultipartConfigElement#getFileSizeThreshold()
CALLER: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#write(byte[],int,int)
	CALLEE: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#createFile()
	CALLEE: javax.servlet.MultipartConfigElement#getMaxFileSize()
	CALLEE: javax.servlet.MultipartConfigElement#getFileSizeThreshold()
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#newSessionId(javax.servlet.http.HttpServletRequest,long)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#getClusterId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#getRequestedSessionId()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#idInUse(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
CALLER: org.eclipse.jetty.server.HttpWriter#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.server.HttpWriter#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.server.HttpWriter#write(char[],int,int)
CALLER: org.eclipse.jetty.server.HttpWriter#flush()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#flush()
CALLER: org.eclipse.jetty.http.HttpFields.2#initialValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.2#initialValue()
CALLER: org.eclipse.jetty.server.HttpWriter#close()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#close()
CALLER: org.eclipse.jetty.http.HttpFields.Field#putTo(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#peek(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
	CALLEE: org.eclipse.jetty.io.BufferCache.CachedBuffer#getOrdinal()
	CALLEE: org.eclipse.jetty.io.View#peek(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(org.eclipse.jetty.io.Buffer)
	CALLEE: static org.eclipse.jetty.io.BufferUtil#putCRLF(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpFields.Field#getValueOrdinal()
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.http.HttpFields.Field#getNameOrdinal()
	CALLEE: org.eclipse.jetty.io.BufferCache#getOrdinal(org.eclipse.jetty.io.Buffer)
CALLER: org.eclipse.jetty.util.resource.JarResource.1#close()
	CALLEE: static org.eclipse.jetty.util.IO#getClosedStream()
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#close()
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#close()
	CALLEE: org.eclipse.jetty.server.HttpWriter#close()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#setError(java.lang.Throwable)
CALLER: org.eclipse.jetty.server.AbstractHttpConnection.1#close()
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#close()
	CALLEE: org.eclipse.jetty.server.HttpWriter#close()
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#println(java.lang.String)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#println()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#print(java.lang.String)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#println()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#newLine()
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#print(java.lang.String)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#write(java.lang.String)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#write(java.lang.String)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#write(java.lang.String,int,int)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.server.HttpWriter#write(java.lang.String,int,int)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#setError(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#isOpen()
CALLER: org.eclipse.jetty.io.ByteArrayBuffer#readFrom(java.io.InputStream,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.ByteArrayBuffer#space()
CALLER: org.eclipse.jetty.io.nio.DirectNIOBuffer#readFrom(java.io.InputStream,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setPutIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#putIndex()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#space()
CALLER: org.eclipse.jetty.http.HttpFields.5#nextElement()
	CALLEE: org.eclipse.jetty.http.HttpFields.5#nextElement()
CALLER: org.eclipse.jetty.server.session.HashedSession#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getMaxInactiveInterval()
CALLER: org.eclipse.jetty.server.HttpInput#read()
	CALLEE: org.eclipse.jetty.server.HttpInput#read(byte[],int,int)
CALLER: org.eclipse.jetty.server.HttpInput#available()
	CALLEE: org.eclipse.jetty.http.HttpParser#available()
CALLER: org.eclipse.jetty.server.HttpInput#read(byte[],int,int)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getMaxIdleTime()
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpParser#blockForContent(long)
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#isEarlyEOF()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#get(byte[],int,int)
CALLER: org.eclipse.jetty.util.MultiPartInputStream.MultiPart#getInputStream()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#getBuf()
CALLER: org.eclipse.jetty.server.HttpWriter#write(char[],int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#getCount()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#getBuf()
	CALLEE: org.eclipse.jetty.util.ByteArrayOutputStream2#setCount(int)
	CALLEE: org.eclipse.jetty.server.HttpWriter#getConverter()
CALLER: org.eclipse.jetty.http.HttpFields.2#initialValue()
	CALLEE: org.eclipse.jetty.http.HttpFields.DateParser#<init>(org.eclipse.jetty.http.HttpFields.1)
CALLER: static org.eclipse.jetty.io.BufferUtil#putCRLF(org.eclipse.jetty.io.Buffer)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#put(byte)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#setError(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#newLine()
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#flush()
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.HttpWriter#flush()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#setError(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#isOpen()
CALLER: org.eclipse.jetty.io.UncheckedPrintWriter#isOpen()
	CALLEE: org.eclipse.jetty.io.RuntimeIOException#<init>(java.lang.Throwable)
CALLER: org.eclipse.jetty.http.HttpFields.5#nextElement()
	CALLEE: static org.eclipse.jetty.http.HttpFields.Field#access$700(org.eclipse.jetty.http.HttpFields.Field)
	CALLEE: org.eclipse.jetty.http.HttpFields.Field#getValue()
CALLER: org.eclipse.jetty.http.HttpParser#available()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.http.HttpParser#parseNext()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
CALLER: org.eclipse.jetty.http.HttpParser#blockForContent(long)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.http.HttpParser#isState(int)
	CALLEE: org.eclipse.jetty.http.HttpParser#parseNext()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isBlocking()
	CALLEE: org.eclipse.jetty.io.EofException#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpParser#getState()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#blockReadable(long)
CALLER: org.eclipse.jetty.http.HttpFields.DateParser#<init>(org.eclipse.jetty.http.HttpFields.1)
	CALLEE: org.eclipse.jetty.http.HttpFields.DateParser#<init>()
CALLER: org.eclipse.jetty.io.nio.SelectChannelEndPoint#blockReadable(long)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#setCheckForIdle(boolean)
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#updateKey()
	CALLEE: org.eclipse.jetty.io.nio.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.EofException#<init>()
	CALLEE: org.eclipse.jetty.io.nio.SelectorManager.SelectSet#getNow()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint#isCheckForIdle()
	CALLEE: org.eclipse.jetty.io.nio.SelectChannelEndPoint.3#<init>(org.eclipse.jetty.io.nio.SelectChannelEndPoint,java.lang.InterruptedException)
CALLER: org.eclipse.jetty.http.HttpFields.DateParser#<init>()
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$300()
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#flush()
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#size()
	CALLEE: org.eclipse.jetty.server.Response#setContentLength(int)
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeTo(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#destroy()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getRequestDispatcher(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher#error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Response#getStatus()
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.server.Request#getMethod()
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Response#getReason()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getResponse()
	CALLEE: org.eclipse.jetty.server.Response#setHeader(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#<init>(int)
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#getCurrentConnection()
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#getErrorPage(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.Request#getServletContext()
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#handleErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSession#complete()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#doInvalidate()
CALLER: org.eclipse.jetty.http.HttpFields.DateParser#parse(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpFields#access$300()
CALLER: org.eclipse.jetty.util.MultiException#printStackTrace()
	CALLEE: static org.eclipse.jetty.util.LazyList#size(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.LazyList#get(java.lang.Object,int)
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace()
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace()
CALLER: com.mchange.lang.PotentiallySecondaryException#printStackTrace()
	CALLEE: static com.mchange.v2.lang.VersionUtils#isAtLeastJavaVersion14()
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintStream)
CALLER: org.eclipse.jetty.io.AbstractBuffer#get(byte[],int,int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#setGetIndex(int)
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#length()
	CALLEE: org.eclipse.jetty.io.AbstractBuffer#getIndex()
	CALLEE: org.eclipse.jetty.io.View#peek(int,byte[],int,int)
CALLER: org.eclipse.jetty.servlet.ErrorPageErrorHandler#getErrorPage(javax.servlet.http.HttpServletRequest)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: javax.servlet.ServletException#getRootCause()
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#handleErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.http.HttpStatus#getMessage(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageHead(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageHead(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#write(java.io.Writer,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageBody(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageMessage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#write(java.io.Writer,java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageMessage(javax.servlet.http.HttpServletRequest,java.io.Writer,int,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#write(java.io.Writer,java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#writeErrorPageStacks(javax.servlet.http.HttpServletRequest,java.io.Writer)
	CALLEE: com.mchange.lang.PotentiallySecondaryException#printStackTrace(java.io.PrintWriter)
	CALLEE: com.mchange.v2.util.ResourceClosedException#getCause()
	CALLEE: org.eclipse.jetty.util.MultiException#printStackTrace(java.io.PrintWriter)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#write(java.io.Writer,java.lang.String)
CALLER: org.eclipse.jetty.util.ByteArrayISO8859Writer#write(char[],int,int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#ensureSpareCapacity(int)
	CALLEE: org.eclipse.jetty.util.ByteArrayISO8859Writer#writeEncoded(char[],int,int)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getRequestDispatcher(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#addPaths(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextPath()
	CALLEE: org.eclipse.jetty.server.Dispatcher#<init>(org.eclipse.jetty.server.handler.ContextHandler,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$100()
CALLER: org.eclipse.jetty.server.Dispatcher#error(javax.servlet.ServletRequest,javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.server.Dispatcher#forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)
CALLER: org.eclipse.jetty.server.Dispatcher#forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.DispatcherType)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContinuation()
	CALLEE: org.eclipse.jetty.server.Request#setRequestURI(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setPathInfo(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AsyncContinuation#isAsyncStarted()
	CALLEE: org.eclipse.jetty.server.Request#setServletPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setParameters(org.eclipse.jetty.util.MultiMap)
	CALLEE: org.eclipse.jetty.server.Request#setQueryString(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#<init>(org.eclipse.jetty.server.Dispatcher,org.eclipse.jetty.util.Attributes)
	CALLEE: org.eclipse.jetty.server.Request#setAttributes(org.eclipse.jetty.util.Attributes)
	CALLEE: org.eclipse.jetty.server.Dispatcher#commitResponse(javax.servlet.ServletResponse,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#setHandled(boolean)
	CALLEE: org.eclipse.jetty.server.Request#setDispatcherType(javax.servlet.DispatcherType)
	CALLEE: org.eclipse.jetty.server.Request#isHandled()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection#getRequest()
	CALLEE: org.eclipse.jetty.server.Response#resetBuffer()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#handle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
	CALLEE: org.eclipse.jetty.server.Response#fwdReset()
	CALLEE: static org.eclipse.jetty.server.AbstractHttpConnection#getCurrentConnection()
	CALLEE: org.eclipse.jetty.server.Request#getPathInfo()
	CALLEE: org.eclipse.jetty.server.Request#mergeQueryString(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getRequestURI()
	CALLEE: org.eclipse.jetty.server.Request#getResponse()
	CALLEE: org.eclipse.jetty.server.Request#getServletPath()
	CALLEE: org.eclipse.jetty.server.Request#getContextPath()
	CALLEE: org.eclipse.jetty.server.Request#getDispatcherType()
	CALLEE: org.eclipse.jetty.server.Request#getQueryString()
	CALLEE: org.eclipse.jetty.server.Request#extractParameters()
	CALLEE: org.eclipse.jetty.server.Request#getParameters()
	CALLEE: org.eclipse.jetty.server.ServletRequestHttpWrapper#<init>(javax.servlet.ServletRequest)
	CALLEE: org.eclipse.jetty.server.ServletResponseHttpWrapper#<init>(javax.servlet.ServletResponse)
	CALLEE: org.eclipse.jetty.server.Request#getAttributes()
CALLER: org.eclipse.jetty.server.ServletRequestHttpWrapper#<init>(javax.servlet.ServletRequest)
	CALLEE: javax.servlet.ServletRequestWrapper#<init>(javax.servlet.ServletRequest)
CALLER: org.eclipse.jetty.server.ServletResponseHttpWrapper#<init>(javax.servlet.ServletResponse)
	CALLEE: javax.servlet.ServletResponseWrapper#<init>(javax.servlet.ServletResponse)
CALLER: org.eclipse.jetty.server.Request#getAttributes()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
CALLER: org.eclipse.jetty.server.Dispatcher#commitResponse(javax.servlet.ServletResponse,org.eclipse.jetty.server.Request)
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.Output#close()
	CALLEE: org.eclipse.jetty.server.Request#getResponse()
	CALLEE: org.eclipse.jetty.server.Response#getWriter()
	CALLEE: org.eclipse.jetty.io.UncheckedPrintWriter#close()
	CALLEE: org.eclipse.jetty.server.AbstractHttpConnection.1#close()
	CALLEE: org.eclipse.jetty.server.Response#isWriting()
	CALLEE: javax.servlet.ServletResponseWrapper#getWriter()
	CALLEE: javax.servlet.ServletResponseWrapper#getOutputStream()
CALLER: javax.servlet.ServletResponseWrapper#getWriter()
	CALLEE: org.eclipse.jetty.server.Response#getWriter()
CALLER: javax.servlet.ServletResponseWrapper#getOutputStream()
	CALLEE: org.eclipse.jetty.server.Response#getOutputStream()
CALLER: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#getAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.server.Dispatcher#access$000(org.eclipse.jetty.server.Dispatcher)
CALLER: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: static org.eclipse.jetty.server.Dispatcher#access$000(org.eclipse.jetty.server.Dispatcher)
	CALLEE: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#removeAttribute(java.lang.String)
CALLER: javax.servlet.ServletRequestWrapper#isSecure()
	CALLEE: org.eclipse.jetty.server.Request#isSecure()
CALLER: javax.servlet.ServletRequestWrapper#getAsyncContext()
	CALLEE: org.eclipse.jetty.server.Request#getAsyncContext()
CALLER: javax.servlet.ServletRequestWrapper#isAsyncStarted()
	CALLEE: org.eclipse.jetty.server.Request#isAsyncStarted()
CALLER: javax.servlet.ServletRequestWrapper#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Request#setAttribute(java.lang.String,java.lang.Object)
CALLER: javax.servlet.ServletResponseWrapper#isCommitted()
	CALLEE: org.eclipse.jetty.server.Response#isCommitted()
CALLER: javax.servlet.ServletRequestWrapper#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Request#getAttribute(java.lang.String)
CALLER: javax.servlet.ServletResponseWrapper#setContentType(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Response#setContentType(java.lang.String)
CALLER: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.Dispatcher.ForwardAttributes#setAttribute(java.lang.String,java.lang.Object)
