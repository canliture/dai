CALLER: static net.md_5.bungee.Bootstrap#main(java.lang.String[])
	CALLEE: static net.md_5.bungee.BungeeCordLauncher#main(java.lang.String[])
CALLER: static net.md_5.bungee.BungeeCordLauncher#main(java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getConsole()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String)
	CALLEE: jline.console.ConsoleReader#readLine(java.lang.String)
	CALLEE: joptsimple.OptionSet#has(java.lang.String)
	CALLEE: joptsimple.OptionParser#<init>()
	CALLEE: joptsimple.OptionParser#allowsUnrecognizedOptions()
	CALLEE: joptsimple.OptionParser#acceptsAll(java.util.List)
	CALLEE: joptsimple.OptionParser#parse(java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#<init>()
	CALLEE: static net.md_5.bungee.api.ProxyServer#setInstance(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: net.md_5.bungee.BungeeCord#start()
	CALLEE: net.md_5.bungee.BungeeCord#getConsoleReader()
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: static net.md_5.bungee.command.ConsoleCommandSender#getInstance()
CALLER: joptsimple.OptionParser#<init>()
	CALLEE: joptsimple.BuiltinHelpFormatter#<init>()
	CALLEE: joptsimple.internal.AbbreviationMap#<init>()
	CALLEE: static joptsimple.OptionParserState#moreOptions(boolean)
	CALLEE: joptsimple.NonOptionArgumentSpec#<init>()
	CALLEE: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
CALLER: joptsimple.OptionParser#acceptsAll(java.util.List)
	CALLEE: joptsimple.OptionParser#acceptsAll(java.util.List,java.lang.String)
CALLER: joptsimple.OptionParser#parse(java.lang.String[])
	CALLEE: joptsimple.ArgumentList#<init>(java.lang.String[])
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.OptionSet#<init>(java.util.Map)
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
	CALLEE: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.ArgumentList#hasMore()
	CALLEE: joptsimple.OptionParser#reset()
	CALLEE: joptsimple.OptionParser#ensureRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParserState.2#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParserState.1#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: net.md_5.bungee.BungeeCord#<init>()
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#<init>(java.util.logging.Logger,java.util.logging.Level)
	CALLEE: net.md_5.bungee.jni.NativeCode#load()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#registerCommand(net.md_5.bungee.api.plugin.Plugin,net.md_5.bungee.api.plugin.Command)
	CALLEE: com.google.gson.GsonBuilder#create()
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: net.md_5.bungee.api.ProxyServer#<init>()
	CALLEE: net.md_5.bungee.conf.Configuration#<init>()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#<init>(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.conf.YamlConfig#<init>()
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#<init>()
	CALLEE: com.google.gson.GsonBuilder#<init>()
	CALLEE: net.md_5.bungee.chat.ComponentSerializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.PlayerInfoSerializer#<init>()
	CALLEE: static net.md_5.bungee.api.Favicon#getFaviconTypeAdapter()
	CALLEE: net.md_5.bungee.module.ModuleManager#<init>()
	CALLEE: net.md_5.bungee.command.CommandReload#<init>()
	CALLEE: net.md_5.bungee.command.CommandEnd#<init>()
	CALLEE: net.md_5.bungee.command.CommandIP#<init>()
	CALLEE: net.md_5.bungee.command.CommandBungee#<init>()
	CALLEE: net.md_5.bungee.command.CommandPerms#<init>()
	CALLEE: net.md_5.bungee.BungeeCord#registerChannel(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeSecurityManager#<init>()
	CALLEE: static org.fusesource.jansi.AnsiConsole#systemInstall()
	CALLEE: jline.console.ConsoleReader#<init>()
	CALLEE: jline.console.ConsoleReader#setExpandEvents(boolean)
	CALLEE: net.md_5.bungee.log.BungeeLogger#<init>(net.md_5.bungee.BungeeCord)
CALLER: static net.md_5.bungee.api.ProxyServer#setInstance(net.md_5.bungee.api.ProxyServer)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: net.md_5.bungee.BungeeCord#start()
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#build()
	CALLEE: net.md_5.bungee.BungeeCord#registerChannel(java.lang.String)
	CALLEE: static io.netty.util.ResourceLeakDetector#setLevel(io.netty.util.ResourceLeakDetector.Level)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#<init>()
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#setNameFormat(java.lang.String)
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#newEventLoopGroup(int,java.util.concurrent.ThreadFactory)
	CALLEE: net.md_5.bungee.module.ModuleManager#load(net.md_5.bungee.api.ProxyServer,java.io.File)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#detectPlugins(java.io.File)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#loadPlugins()
	CALLEE: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugins()
	CALLEE: net.md_5.bungee.conf.Configuration#getThrottle()
	CALLEE: net.md_5.bungee.ConnectionThrottle#<init>(int)
	CALLEE: net.md_5.bungee.BungeeCord#startListeners()
	CALLEE: net.md_5.bungee.BungeeCord.1#<init>(net.md_5.bungee.BungeeCord)
	CALLEE: net.md_5.bungee.Metrics#<init>()
CALLER: static net.md_5.bungee.command.ConsoleCommandSender#<clinit>()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#<init>()
CALLER: net.md_5.bungee.BungeeCord#getConsole()
	CALLEE: static net.md_5.bungee.command.ConsoleCommandSender#getInstance()
CALLER: static net.md_5.bungee.api.ChatColor#<clinit>()
	CALLEE: net.md_5.bungee.api.ChatColor#<init>(java.lang.String,int,char,java.lang.String)
	CALLEE: static net.md_5.bungee.api.ChatColor#values()
CALLER: joptsimple.BuiltinHelpFormatter#<init>()
	CALLEE: joptsimple.BuiltinHelpFormatter#<init>(int,int)
CALLER: static joptsimple.OptionParserState#moreOptions(boolean)
	CALLEE: joptsimple.OptionParserState.2#<init>(boolean)
CALLER: joptsimple.NonOptionArgumentSpec#<init>()
	CALLEE: joptsimple.NonOptionArgumentSpec#<init>(java.lang.String)
CALLER: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#options()
	CALLEE: joptsimple.internal.AbbreviationMap#putAll(java.lang.Iterable,java.lang.Object)
CALLER: joptsimple.OptionParser#acceptsAll(java.util.List,java.lang.String)
	CALLEE: static joptsimple.ParserRules#ensureLegalOptions(java.util.List)
	CALLEE: joptsimple.OptionSpecBuilder#<init>(joptsimple.OptionParser,java.util.List,java.lang.String)
CALLER: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
CALLER: joptsimple.OptionSet#<init>(java.util.Map)
	CALLEE: static joptsimple.OptionSet#defaultValues(java.util.Map)
CALLER: joptsimple.internal.AbbreviationMap#get(java.lang.String)
	CALLEE: static joptsimple.internal.AbbreviationMap#charsOf(java.lang.String)
CALLER: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
CALLER: joptsimple.OptionParser#reset()
	CALLEE: static joptsimple.OptionParserState#moreOptions(boolean)
CALLER: joptsimple.OptionParser#ensureRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#missingRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#isHelpOptionPresent(joptsimple.OptionSet)
	CALLEE: joptsimple.MissingRequiredOptionsException#<init>(java.util.List)
CALLER: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy)
CALLER: net.md_5.bungee.api.plugin.PluginManager#<init>(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor)
	CALLEE: net.md_5.bungee.event.EventBus#<init>(java.util.logging.Logger)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#setSkipMissingProperties(boolean)
CALLER: net.md_5.bungee.conf.YamlConfig#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
CALLER: net.md_5.bungee.scheduler.BungeeScheduler#<init>()
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap#<init>()
	CALLEE: static gnu.trove.TCollections#synchronizedMap(gnu.trove.map.TIntObjectMap)
	CALLEE: static com.google.common.collect.HashMultimap#create()
	CALLEE: static com.google.common.collect.Multimaps#synchronizedMultimap(com.google.common.collect.Multimap)
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler.1#<init>(net.md_5.bungee.scheduler.BungeeScheduler)
CALLER: static net.md_5.bungee.chat.ComponentSerializer#<clinit>()
	CALLEE: com.google.gson.GsonBuilder#<init>()
	CALLEE: net.md_5.bungee.chat.ComponentSerializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#create()
CALLER: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.reflect.TypeToken#get(java.lang.reflect.Type)
	CALLEE: static com.google.gson.TreeTypeAdapter#newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
CALLER: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: static net.md_5.bungee.api.ServerPing.PlayerInfo#<clinit>()
	CALLEE: static net.md_5.bungee.Util#getUUID(java.lang.String)
CALLER: static net.md_5.bungee.api.Favicon#<clinit>()
	CALLEE: net.md_5.bungee.api.Favicon.1#<init>()
CALLER: net.md_5.bungee.module.ModuleManager#<init>()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#<init>()
CALLER: net.md_5.bungee.command.CommandReload#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandEnd#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandIP#<init>()
	CALLEE: net.md_5.bungee.command.PlayerCommand#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandBungee#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
CALLER: net.md_5.bungee.command.CommandPerms#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
CALLER: static org.fusesource.jansi.AnsiConsole#<clinit>()
	CALLEE: static org.fusesource.jansi.AnsiConsole#wrapOutputStream(java.io.OutputStream)
CALLER: static jline.console.ConsoleReader#<clinit>()
	CALLEE: static jline.internal.Configuration#getLineSeparator()
CALLER: jline.console.ConsoleReader#<init>()
	CALLEE: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal)
CALLER: net.md_5.bungee.log.BungeeLogger#<init>(net.md_5.bungee.BungeeCord)
	CALLEE: net.md_5.bungee.BungeeCord#getConsoleReader()
	CALLEE: net.md_5.bungee.log.ConciseFormatter#<init>()
	CALLEE: net.md_5.bungee.log.LogDispatcher#<init>(net.md_5.bungee.log.BungeeLogger)
	CALLEE: net.md_5.bungee.log.ColouredWriter#<init>(jline.console.ConsoleReader)
CALLER: static net.md_5.bungee.EncryptionUtil#<clinit>()
	CALLEE: net.md_5.bungee.jni.NativeCode#<init>(java.lang.String,java.lang.Class,java.lang.Class)
CALLER: static net.md_5.bungee.compress.CompressFactory#<clinit>()
	CALLEE: net.md_5.bungee.jni.NativeCode#<init>(java.lang.String,java.lang.Class,java.lang.Class)
CALLER: static io.netty.util.ResourceLeakDetector.Level#<clinit>()
	CALLEE: io.netty.util.ResourceLeakDetector.Level#<init>(java.lang.String,int)
CALLER: static io.netty.util.ResourceLeakDetector#<clinit>()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static net.md_5.bungee.netty.PipelineUtils#newEventLoopGroup(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
CALLER: static net.md_5.bungee.netty.PipelineUtils#<clinit>()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: io.netty.util.AttributeKey#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.netty.PipelineUtils.1#<init>()
	CALLEE: net.md_5.bungee.netty.PipelineUtils.Base#<init>()
	CALLEE: net.md_5.bungee.protocol.Varint21LengthFieldPrepender#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static io.netty.channel.epoll.Epoll#isAvailable()
	CALLEE: static io.netty.channel.epoll.Epoll#unavailabilityCause()
	CALLEE: static net.md_5.bungee.Util#exception(java.lang.Throwable)
CALLER: net.md_5.bungee.module.ModuleManager#load(net.md_5.bungee.api.ProxyServer,java.io.File)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#retrieve(net.md_5.bungee.module.ModuleSpec,net.md_5.bungee.module.ModuleVersion)
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
	CALLEE: net.md_5.bungee.module.ModuleSpec#<init>(java.lang.String,java.io.File,net.md_5.bungee.module.ModuleSource)
	CALLEE: net.md_5.bungee.module.ModuleManager#getVersion(java.io.File)
	CALLEE: net.md_5.bungee.module.ModuleVersion#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
CALLER: net.md_5.bungee.api.plugin.PluginManager#detectPlugins(java.io.File)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.api.plugin.PluginManager#loadPlugins()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
CALLER: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getName()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.Favicon#create(java.awt.image.BufferedImage)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveSet#<init>(java.util.Collection)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsValue(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: net.md_5.bungee.BungeeCord#getConfigurationAdapter()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getServers()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getList(java.lang.String,java.util.Collection)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getInt(java.lang.String,int)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getBoolean(java.lang.String,boolean)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getString(java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getListeners()
	CALLEE: net.md_5.bungee.conf.YamlConfig#load()
CALLER: net.md_5.bungee.api.plugin.PluginManager#enablePlugins()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: net.md_5.bungee.ConnectionThrottle#<init>(int)
	CALLEE: static com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: com.google.common.cache.CacheBuilder#concurrencyLevel(int)
	CALLEE: com.google.common.cache.CacheBuilder#initialCapacity(int)
	CALLEE: com.google.common.cache.CacheBuilder#expireAfterWrite(long,java.util.concurrent.TimeUnit)
	CALLEE: com.google.common.cache.CacheBuilder#build()
CALLER: net.md_5.bungee.BungeeCord#startListeners()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#localAddress(java.net.SocketAddress)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: net.md_5.bungee.conf.Configuration#getListeners()
	CALLEE: net.md_5.bungee.BungeeCord.2#<init>(net.md_5.bungee.BungeeCord,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: io.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#getServerChannel()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: net.md_5.bungee.BungeeCord.3#<init>(net.md_5.bungee.BungeeCord,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: net.md_5.bungee.query.RemoteQuery#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#getDatagramChannel()
	CALLEE: net.md_5.bungee.query.RemoteQuery#start(java.lang.Class,java.net.InetSocketAddress,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelFutureListener)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#option(io.netty.channel.ChannelOption,java.lang.Object)
	CALLEE: io.netty.bootstrap.ServerBootstrap#childAttr(io.netty.util.AttributeKey,java.lang.Object)
	CALLEE: io.netty.bootstrap.ServerBootstrap#childHandler(io.netty.channel.ChannelHandler)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
CALLER: jline.console.ConsoleReader#finalize()
	CALLEE: jline.console.ConsoleReader#shutdown()
CALLER: joptsimple.BuiltinHelpFormatter#<init>(int,int)
	CALLEE: joptsimple.internal.Rows#<init>(int,int)
CALLER: joptsimple.OptionParserState.2#<init>(boolean)
	CALLEE: joptsimple.OptionParserState#<init>()
CALLER: joptsimple.NonOptionArgumentSpec#<init>(java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
CALLER: joptsimple.internal.AbbreviationMap#putAll(java.lang.Iterable,java.lang.Object)
	CALLEE: joptsimple.internal.AbbreviationMap#put(java.lang.String,java.lang.Object)
CALLER: static joptsimple.ParserRules#ensureLegalOptions(java.util.List)
	CALLEE: static joptsimple.ParserRules#ensureLegalOption(java.lang.String)
CALLER: joptsimple.OptionSpecBuilder#<init>(joptsimple.OptionParser,java.util.List,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.OptionSpecBuilder#attachToParser()
CALLER: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
	CALLEE: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
CALLER: static joptsimple.OptionSet#defaultValues(java.util.Map)
	CALLEE: joptsimple.NonOptionArgumentSpec#defaultValues()
	CALLEE: joptsimple.OptionSpecBuilder#defaultValues()
CALLER: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#options()
CALLER: joptsimple.OptionParser#missingRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#optionsHasAnyOf(joptsimple.OptionSet,java.util.Collection)
	CALLEE: joptsimple.NonOptionArgumentSpec#isRequired()
	CALLEE: joptsimple.OptionSpecBuilder#isRequired()
CALLER: joptsimple.OptionParser#isHelpOptionPresent(joptsimple.OptionSet)
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#isForHelp()
CALLER: joptsimple.MissingRequiredOptionsException#<init>(java.util.List)
	CALLEE: joptsimple.OptionException#<init>(java.util.Collection)
CALLER: static net.md_5.bungee.util.CaseInsensitiveHashingStrategy#<clinit>()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#<init>()
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy)
CALLER: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: com.google.common.collect.ArrayListMultimap#<init>()
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor#<clinit>()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#<init>()
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#<init>()
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor)
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)
CALLER: static org.yaml.snakeyaml.DumperOptions.FlowStyle#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.FlowStyle#<init>(java.lang.String,int,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
CALLER: gnu.trove.map.hash.TIntObjectHashMap#<init>()
	CALLEE: gnu.trove.impl.hash.TIntHash#<init>()
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap.1#<init>(gnu.trove.map.hash.TIntObjectHashMap)
CALLER: static gnu.trove.TCollections#synchronizedMap(gnu.trove.map.TIntObjectMap)
	CALLEE: gnu.trove.impl.sync.TSynchronizedIntObjectMap#<init>(gnu.trove.map.TIntObjectMap)
CALLER: static com.google.common.collect.HashMultimap#create()
	CALLEE: com.google.common.collect.HashMultimap#<init>()
CALLER: static com.google.common.collect.Multimaps#synchronizedMultimap(com.google.common.collect.Multimap)
	CALLEE: static com.google.common.collect.Synchronized#multimap(com.google.common.collect.Multimap,java.lang.Object)
CALLER: static com.google.gson.internal.Excluder#<clinit>()
	CALLEE: com.google.gson.internal.Excluder#<init>()
CALLER: static com.google.gson.LongSerializationPolicy#<clinit>()
	CALLEE: com.google.gson.LongSerializationPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy.2#<init>(java.lang.String,int)
CALLER: static com.google.gson.FieldNamingPolicy#<clinit>()
	CALLEE: com.google.gson.FieldNamingPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.3#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.4#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.5#<init>(java.lang.String,int)
CALLER: static com.google.gson.reflect.TypeToken#get(java.lang.reflect.Type)
	CALLEE: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
CALLER: static com.google.gson.TreeTypeAdapter#newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: com.google.gson.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class,com.google.gson.TreeTypeAdapter.1)
	CALLEE: com.google.gson.reflect.TypeToken#getRawType()
	CALLEE: com.google.gson.reflect.TypeToken#getType()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.27#<init>(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
CALLER: static com.google.gson.internal.bind.TypeAdapters#<clinit>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.20#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.21#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.22#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.23#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.24#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.25#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.26#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.1#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.2#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.3#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.4#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.5#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.6#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.7#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.8#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.9#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.10#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.11#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.12#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.13#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.14#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.15#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.16#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.17#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.18#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.19#<init>()
CALLER: net.md_5.bungee.api.Favicon.1#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: net.md_5.bungee.command.PlayerCommand#<init>(java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: static org.fusesource.jansi.AnsiConsole#wrapOutputStream(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: static org.fusesource.jansi.internal.CLibrary#isatty(int)
	CALLEE: org.fusesource.jansi.AnsiConsole.1#<init>(java.io.OutputStream)
CALLER: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal)
	CALLEE: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal,java.lang.String)
CALLER: net.md_5.bungee.log.ColouredWriter#<init>(jline.console.ConsoleReader)
	CALLEE: static net.md_5.bungee.api.ChatColor#values()
	CALLEE: static org.fusesource.jansi.Ansi#ansi()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi#toString()
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi#bold()
	CALLEE: org.fusesource.jansi.Ansi#boldOff()
CALLER: static net.md_5.bungee.jni.cipher.JavaCipher#<clinit>()
	CALLEE: net.md_5.bungee.jni.cipher.JavaCipher.EmptyByteThreadLocal#<init>(net.md_5.bungee.jni.cipher.JavaCipher.1)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#newDefaultFactory(java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: io.netty.util.internal.SystemPropertyUtil.1#<init>(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#log(java.lang.String,java.lang.Exception)
CALLER: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
CALLER: static io.netty.channel.MultithreadEventLoopGroup#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int)
CALLER: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
CALLER: static io.netty.util.AttributeKey#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newConcurrentHashMap()
CALLER: io.netty.util.AttributeKey#<init>(java.lang.String)
	CALLEE: io.netty.util.UniqueName#<init>(java.lang.String)
CALLER: static io.netty.channel.ChannelInitializer#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: net.md_5.bungee.netty.PipelineUtils.1#<init>()
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: net.md_5.bungee.netty.PipelineUtils.Base#<init>()
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: net.md_5.bungee.protocol.Varint21LengthFieldPrepender#<init>()
	CALLEE: io.netty.handler.codec.MessageToByteEncoder#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#<clinit>()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows0()
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe0()
	CALLEE: static io.netty.util.internal.PlatformDependent#maxDirectMemory0()
	CALLEE: static io.netty.util.internal.PlatformDependent#arrayBaseOffset0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasJavassist0()
	CALLEE: static io.netty.util.internal.PlatformDependent#tmpdir0()
	CALLEE: static io.netty.util.internal.PlatformDependent#bitMode0()
	CALLEE: static io.netty.util.internal.PlatformDependent#addressSize0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
CALLER: static io.netty.channel.epoll.Epoll#<clinit>()
	CALLEE: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
CALLER: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: net.md_5.bungee.module.ModuleVersion#<init>(java.lang.String,java.lang.String)
CALLER: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#<init>(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#<init>(java.io.Reader)
	CALLEE: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
CALLER: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,java.util.Map)
CALLER: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#doPut(java.lang.Object,int)
CALLER: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
	CALLEE: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer)
CALLER: net.md_5.bungee.module.ModuleManager#getVersion(java.io.File)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>()
CALLER: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#<init>(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#<init>(java.io.Reader)
	CALLEE: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
CALLER: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
CALLER: static net.md_5.bungee.api.Favicon#create(java.awt.image.BufferedImage)
	CALLEE: static com.google.common.io.BaseEncoding#base64()
	CALLEE: net.md_5.bungee.api.Favicon#<init>(java.lang.String)
	CALLEE: com.google.common.io.BaseEncoding#encode(byte[])
CALLER: net.md_5.bungee.util.CaseInsensitiveSet#<init>(java.util.Collection)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,java.util.Collection)
CALLER: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: gnu.trove.map.hash.TCustomHashMap#containsValue(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: static com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: com.google.common.cache.CacheBuilder#<init>()
CALLER: static com.google.common.cache.CacheBuilder#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.1#<init>()
	CALLEE: static com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: com.google.common.cache.CacheBuilder.2#<init>()
	CALLEE: com.google.common.cache.CacheBuilder.3#<init>()
CALLER: static io.netty.bootstrap.ServerBootstrap#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#<init>()
CALLER: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.BootstrapChannelFactory#<init>(java.lang.Class)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channelFactory(io.netty.bootstrap.ChannelFactory)
CALLER: static io.netty.channel.ChannelOption#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newConcurrentHashMap()
	CALLEE: static io.netty.channel.ChannelOption#valueOf(java.lang.String)
CALLER: net.md_5.bungee.query.RemoteQuery#start(java.lang.Class,java.net.InetSocketAddress,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelFutureListener)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: io.netty.bootstrap.Bootstrap#<init>()
	CALLEE: net.md_5.bungee.query.QueryHandler#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#handler(io.netty.channel.ChannelHandler)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#localAddress(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: jline.console.ConsoleReader#shutdown()
	CALLEE: jline.internal.NonBlockingInputStream#shutdown()
CALLER: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#arrangeOptions(java.util.List)
CALLER: joptsimple.internal.AbbreviationMap#put(java.lang.String,java.lang.Object)
	CALLEE: static joptsimple.internal.AbbreviationMap#charsOf(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
CALLER: static joptsimple.ParserRules#ensureLegalOption(java.lang.String)
	CALLEE: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: static joptsimple.ParserRules#ensureLegalOptionCharacter(char)
CALLER: joptsimple.NoArgumentOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
CALLER: joptsimple.OptionSpecBuilder#attachToParser()
	CALLEE: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
CALLER: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
CALLER: joptsimple.OptionParser#optionsHasAnyOf(joptsimple.OptionSet,java.util.Collection)
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
CALLER: joptsimple.OptionException#<init>(java.util.Collection)
	CALLEE: joptsimple.OptionException#specsToStrings(java.util.Collection)
CALLER: net.md_5.bungee.log.LogDispatcher#run()
	CALLEE: net.md_5.bungee.log.BungeeLogger#doLog(java.util.logging.LogRecord)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy)
	CALLEE: gnu.trove.impl.hash.TObjectHash#<init>()
CALLER: com.google.common.collect.ArrayListMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>(java.lang.Class)
	CALLEE: static org.yaml.snakeyaml.constructor.Constructor#checkRoot(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription)
CALLER: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#<init>(org.yaml.snakeyaml.representer.Representer)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
CALLER: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.ScalarStyle#<init>(java.lang.String,int,java.lang.Character)
CALLER: static org.yaml.snakeyaml.DumperOptions.LineBreak#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.LineBreak#<init>(java.lang.String,int,java.lang.String)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.resolver.Resolver)
CALLER: gnu.trove.impl.hash.TIntHash#<init>()
	CALLEE: gnu.trove.impl.hash.TPrimitiveHash#<init>()
CALLER: com.google.common.collect.HashMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
CALLER: static com.google.common.collect.Synchronized#multimap(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#<init>(com.google.common.collect.Multimap,java.lang.Object)
CALLER: com.google.gson.LongSerializationPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
CALLER: com.google.gson.LongSerializationPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.3#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.4#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.5#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: com.google.gson.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class,com.google.gson.TreeTypeAdapter.1)
	CALLEE: com.google.gson.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
CALLER: com.google.gson.internal.bind.TypeAdapters.1#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#<init>(java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.2#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.3#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.4#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#<init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.5#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.6#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.7#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.8#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.9#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.10#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.11#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.12#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.13#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.14#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.15#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.16#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.17#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.18#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.19#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.20#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#<init>(java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.21#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.23#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#<init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.24#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.25#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static org.fusesource.jansi.AnsiOutputStream#<clinit>()
	CALLEE: static org.fusesource.jansi.AnsiOutputStream#resetCode()
CALLER: static org.fusesource.jansi.WindowsAnsiOutputStream#<clinit>()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetStdHandle(int)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<init>()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
CALLER: static org.fusesource.jansi.internal.CLibrary#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.CLibrary#init()
CALLER: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal,java.lang.String)
	CALLEE: jline.console.CursorBuffer#<init>()
	CALLEE: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
	CALLEE: jline.console.KillRing#<init>()
	CALLEE: jline.console.completer.CandidateListCompletionHandler#<init>()
	CALLEE: static jline.internal.Configuration#getInteger(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#<init>()
	CALLEE: static jline.internal.Configuration#getEncoding()
	CALLEE: static jline.TerminalFactory#get()
	CALLEE: jline.console.ConsoleReader#setInput(java.io.InputStream)
	CALLEE: jline.console.ConsoleReader#getInputRc()
	CALLEE: jline.console.ConsoleKeys#<init>(java.lang.String,java.net.URL)
	CALLEE: jline.TerminalSupport#wrapOutIfNeeded(java.io.OutputStream)
	CALLEE: jline.TerminalSupport#getOutputEncoding()
CALLER: static org.fusesource.jansi.Ansi#ansi()
	CALLEE: static org.fusesource.jansi.Ansi#isEnabled()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#<init>(org.fusesource.jansi.Ansi.1)
CALLER: static org.fusesource.jansi.Ansi#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.1#<init>()
	CALLEE: org.fusesource.jansi.Ansi.2#<init>()
CALLER: static org.fusesource.jansi.Ansi.Attribute#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.Attribute#<init>(java.lang.String,int,int,java.lang.String)
CALLER: static org.fusesource.jansi.Ansi.Color#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.Color#<init>(java.lang.String,int,int,java.lang.String)
CALLER: net.md_5.bungee.jni.cipher.JavaCipher.EmptyByteThreadLocal#<init>(net.md_5.bungee.jni.cipher.JavaCipher.1)
	CALLEE: net.md_5.bungee.jni.cipher.JavaCipher.EmptyByteThreadLocal#<init>()
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getDefaultFactory()
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#newDefaultFactory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>(boolean)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#log(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#log(java.lang.String,java.lang.Exception)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
CALLER: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
CALLER: static io.netty.util.internal.PlatformDependent#newConcurrentHashMap()
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#<init>()
CALLER: io.netty.util.UniqueName#<init>(java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.channel.ChannelInitializer#<init>()
	CALLEE: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
CALLER: io.netty.handler.codec.MessageToByteEncoder#<init>()
	CALLEE: io.netty.handler.codec.MessageToByteEncoder#<init>(boolean)
CALLER: static io.netty.util.internal.PlatformDependent#isAndroid0()
	CALLEE: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#isWindows0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#javaVersion0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
CALLER: static io.netty.util.internal.PlatformDependent#hasUnsafe0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasUnsafe()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#maxDirectMemory0()
	CALLEE: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#arrayBaseOffset0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#arrayBaseOffset()
CALLER: static io.netty.util.internal.PlatformDependent#hasJavassist0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#generate(java.lang.Class,java.lang.ClassLoader)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#tmpdir0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
	CALLEE: static io.netty.util.internal.PlatformDependent#toDirectory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#bitMode0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#addressSize0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#addressSize()
CALLER: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#epollCreate()
	CALLEE: io.netty.channel.unix.FileDescriptor#<init>(int)
CALLER: static io.netty.channel.epoll.Native#<clinit>()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#load(java.lang.String,java.lang.ClassLoader)
	CALLEE: static io.netty.channel.epoll.Native#epollin()
	CALLEE: static io.netty.channel.epoll.Native#epollout()
	CALLEE: static io.netty.channel.epoll.Native#epollrdhup()
	CALLEE: static io.netty.channel.epoll.Native#epollet()
	CALLEE: static io.netty.channel.epoll.Native#epollerr()
	CALLEE: static io.netty.channel.epoll.Native#iovMax()
	CALLEE: static io.netty.channel.epoll.Native#uioMaxIov()
	CALLEE: static io.netty.channel.epoll.Native#isSupportingSendmmsg()
	CALLEE: static io.netty.channel.epoll.Native#isSupportingTcpFastopen()
	CALLEE: static io.netty.channel.epoll.Native#ssizeMax()
	CALLEE: static io.netty.channel.epoll.Native#tcpMd5SigMaxKeyLen()
	CALLEE: static io.netty.channel.unix.Errors#newConnectionResetException(java.lang.String,int)
CALLER: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#<init>(int)
	CALLEE: static io.netty.channel.epoll.Native#eventFd()
CALLER: org.yaml.snakeyaml.reader.StreamReader#<init>(java.io.Reader)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#update()
CALLER: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.composer.Composer#<init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getSingleData(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setComposer(org.yaml.snakeyaml.composer.Composer)
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#putAll(java.util.Map)
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#indexForNull()
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#indexRehashed(java.lang.Object,int,int,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKeyForNull()
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKeyRehash(java.lang.Object,int,int,java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#doPut(java.lang.Object,int)
	CALLEE: gnu.trove.impl.hash.THash#postInsertHook(boolean)
CALLER: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer)
	CALLEE: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getExplicitRoot()
CALLER: org.yaml.snakeyaml.Yaml#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.resolver.Resolver)
CALLER: static com.google.common.io.BaseEncoding#<clinit>()
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
CALLER: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,java.util.Collection)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#addAll(java.util.Collection)
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView#<init>(gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
CALLER: static com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: com.google.common.base.Suppliers.SupplierOfInstance#<init>(java.lang.Object)
CALLER: com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
CALLER: static com.google.common.base.Ticker#<clinit>()
	CALLEE: com.google.common.base.Ticker.1#<init>()
CALLER: com.google.common.cache.CacheBuilder.3#<init>()
	CALLEE: com.google.common.base.Ticker#<init>()
CALLER: static io.netty.channel.epoll.AbstractEpollChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
CALLER: static io.netty.channel.AbstractChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.DefaultAttributeMap#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
CALLER: static io.netty.channel.socket.nio.NioServerSocketChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
CALLER: static io.netty.channel.nio.AbstractNioChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.channel.ChannelOption#valueOf(java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.ChannelOption#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#putIfAbsent(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#get(java.lang.Object)
CALLER: static io.netty.channel.epoll.EpollDatagramChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static io.netty.channel.socket.nio.NioDatagramChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static io.netty.bootstrap.Bootstrap#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.bootstrap.Bootstrap#<init>()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#<init>()
CALLER: net.md_5.bungee.query.QueryHandler#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: io.netty.channel.SimpleChannelInboundHandler#<init>()
CALLER: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
	CALLEE: joptsimple.internal.AbbreviationMap#<init>()
	CALLEE: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
CALLER: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: joptsimple.OptionException#<init>(java.util.List)
CALLER: static joptsimple.ParserRules#ensureLegalOptionCharacter(char)
	CALLEE: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isAllowedPunctuation(char)
CALLER: joptsimple.OptionException#specsToStrings(java.util.Collection)
	CALLEE: joptsimple.OptionException#specToString(joptsimple.OptionSpec)
CALLER: gnu.trove.impl.hash.TObjectHash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>()
CALLER: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#addTypeDescription(org.yaml.snakeyaml.TypeDescription)
CALLER: static org.yaml.snakeyaml.introspector.BeanAccess#<clinit>()
	CALLEE: org.yaml.snakeyaml.introspector.BeanAccess#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
CALLER: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#<init>(boolean)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.resolver.Resolver)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#isExplicitPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#isExplicitPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getDefaultFlowStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getDefaultScalarStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions#isAllowReadOnlyProperties()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getTimeZone()
	CALLEE: org.yaml.snakeyaml.representer.Representer#setTimeZone(java.util.TimeZone)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#setAllowReadOnlyProperties(boolean)
CALLER: gnu.trove.impl.hash.TPrimitiveHash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>()
CALLER: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#<init>(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int)
CALLER: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int)
CALLER: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#<init>(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getLowerBounds()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getUpperBounds()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#getGenericComponentType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getActualTypeArguments()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getRawType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getOwnerType()
CALLER: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getUpperBounds()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#getGenericComponentType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getRawType()
CALLER: com.google.gson.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
CALLER: static org.fusesource.jansi.AnsiOutputStream#resetCode()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#reset()
	CALLEE: org.fusesource.jansi.Ansi#toString()
CALLER: static org.fusesource.jansi.internal.Kernel32#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#init()
CALLER: static org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#init()
CALLER: org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#<init>()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetConsoleScreenBufferInfo(long,org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO)
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#invertAttributeColors(short)
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
	CALLEE: javassist.CtClass.DelayedFileOutputStream#flush()
CALLER: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#version(java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.String,java.lang.ClassLoader)
CALLER: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: org.fusesource.hawtjni.runtime.Library#doLoad()
CALLER: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: jline.console.KillRing#<init>()
	CALLEE: jline.console.KillRing#<init>(int)
CALLER: static jline.console.ConsoleReader.State#<clinit>()
	CALLEE: jline.console.ConsoleReader.State#<init>(java.lang.String,int)
CALLER: static jline.internal.Configuration#getInteger(java.lang.String,int)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: static jline.internal.Configuration#getEncoding()
	CALLEE: static jline.internal.Configuration#extractEncodingFromCtype(java.lang.String)
CALLER: static jline.TerminalFactory#get()
	CALLEE: static jline.TerminalFactory#create()
CALLER: static jline.TerminalFactory#<clinit>()
	CALLEE: static jline.TerminalFactory#registerFlavor(jline.TerminalFactory.Flavor,java.lang.Class)
CALLER: jline.console.ConsoleReader#setInput(java.io.InputStream)
	CALLEE: static jline.internal.Configuration#getLong(java.lang.String,long)
	CALLEE: jline.internal.NonBlockingInputStream#<init>(java.io.InputStream,boolean)
	CALLEE: jline.internal.InputStreamReader#<init>(java.io.InputStream,java.lang.String)
	CALLEE: jline.internal.NonBlockingInputStream#shutdown()
	CALLEE: jline.TerminalSupport#wrapInIfNeeded(java.io.InputStream)
	CALLEE: jline.TerminalSupport#isSupported()
CALLER: jline.console.ConsoleReader#getInputRc()
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
	CALLEE: static jline.internal.Configuration#getUserHome()
	CALLEE: static jline.internal.Urls#create(java.lang.String)
CALLER: jline.console.ConsoleKeys#<init>(java.lang.String,java.net.URL)
	CALLEE: static jline.console.KeyMap#keyMaps()
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
CALLER: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#<init>(java.lang.StringBuilder)
CALLER: org.fusesource.jansi.Ansi.NoAnsi#<init>(org.fusesource.jansi.Ansi.1)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#<init>()
CALLER: net.md_5.bungee.log.BungeeLogger#log(java.util.logging.LogRecord)
	CALLEE: net.md_5.bungee.log.LogDispatcher#queue(java.util.logging.LogRecord)
CALLER: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>(boolean)
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory.1#<init>(io.netty.util.internal.logging.Slf4JLoggerFactory,java.lang.StringBuffer)
CALLER: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#<init>(org.slf4j.Logger)
CALLER: io.netty.util.internal.logging.Log4JLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#<init>(org.apache.log4j.Logger)
CALLER: io.netty.util.internal.logging.JdkLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#<init>(java.util.logging.Logger)
CALLER: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#<clinit>()
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#getUnsafe()
CALLER: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
	CALLEE: io.netty.channel.ChannelHandlerAdapter#<init>()
CALLER: io.netty.handler.codec.MessageToByteEncoder#<init>(boolean)
	CALLEE: io.netty.channel.ChannelOutboundHandlerAdapter#<init>()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: static io.netty.util.internal.PlatformDependent0#getSystemClassLoader()
CALLER: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getClassLoader(java.lang.Class)
CALLER: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent0#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent0#arrayBaseOffset()
	CALLEE: static io.netty.util.internal.PlatformDependent0#objectFieldOffset(java.lang.reflect.Field)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#generate(java.lang.Class,java.lang.ClassLoader)
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtBehavior#setBody(java.lang.String)
	CALLEE: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#typeName(java.lang.Class)
	CALLEE: javassist.ClassPool#getAndRename(java.lang.String,java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: javassist.CtClass#detach()
	CALLEE: javassist.CtClass#toBytecode()
	CALLEE: javassist.CtClass#getDeclaredMethod(java.lang.String)
	CALLEE: javassist.CtClassType#getDeclaredMethod(java.lang.String)
	CALLEE: javassist.CtClass#setModifiers(int)
	CALLEE: javassist.CtClassType#setModifiers(int)
	CALLEE: javassist.CtPrimitiveType#getModifiers()
	CALLEE: javassist.CtArray#getModifiers()
CALLER: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: javassist.ClassPool#<init>(boolean)
	CALLEE: javassist.ClassClassPath#<init>(java.lang.Class)
	CALLEE: javassist.ClassPool#appendClassPath(javassist.ClassPath)
CALLER: static io.netty.util.internal.NativeLibraryLoader#load(java.lang.String,java.lang.ClassLoader)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#isOSX()
CALLER: static io.netty.util.internal.NativeLibraryLoader#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#tmpdir()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.channel.unix.Errors#<clinit>()
	CALLEE: static io.netty.channel.unix.Errors#newConnectionResetException(java.lang.String,int)
	CALLEE: static io.netty.channel.unix.Errors#errnoENOTCONN()
	CALLEE: static io.netty.channel.unix.Errors#errnoEBADF()
	CALLEE: static io.netty.channel.unix.Errors#errnoEPIPE()
	CALLEE: static io.netty.channel.unix.Errors#errnoECONNRESET()
	CALLEE: static io.netty.channel.unix.Errors#errnoEAGAIN()
	CALLEE: static io.netty.channel.unix.Errors#errnoEWOULDBLOCK()
	CALLEE: static io.netty.channel.unix.Errors#errnoEINPROGRESS()
	CALLEE: static io.netty.channel.unix.Errors#strError(int)
CALLER: static io.netty.channel.unix.Errors#newConnectionResetException(java.lang.String,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#update()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#checkPrintable(char[],int,int)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
CALLER: gnu.trove.map.hash.TCustomHashMap#putAll(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
CALLER: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#computeHashCode(java.lang.Object)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#indexRehashed(java.lang.Object,int,int,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#insertKeyRehash(java.lang.Object,int,int,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.THash#postInsertHook(boolean)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#rehash(int)
CALLER: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#<init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#<init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#open()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#represent(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serialize(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#close()
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
CALLER: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
CALLER: gnu.trove.set.hash.TCustomHashSet#addAll(java.util.Collection)
	CALLEE: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#add(java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: com.google.common.base.Ticker.1#<init>()
	CALLEE: com.google.common.base.Ticker#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
CALLER: io.netty.channel.ChannelOption#<init>(java.lang.String)
	CALLEE: io.netty.util.UniqueName#<init>(java.lang.String)
CALLER: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.channel.SimpleChannelInboundHandler#<init>()
	CALLEE: io.netty.channel.SimpleChannelInboundHandler#<init>(boolean)
CALLER: joptsimple.OptionException#specToString(joptsimple.OptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#options()
	CALLEE: static joptsimple.internal.Strings#join(java.util.List,java.lang.String)
CALLER: net.md_5.bungee.BungeeCord.1#run()
	CALLEE: net.md_5.bungee.BungeeCord#getReconnectHandler()
CALLER: net.md_5.bungee.Metrics#run()
	CALLEE: net.md_5.bungee.Metrics#postPlugin(boolean)
CALLER: gnu.trove.impl.hash.THash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>(int,float)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.collect.AbstractMultimap#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
CALLER: static org.yaml.snakeyaml.nodes.Tag#<clinit>()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
CALLER: static org.yaml.snakeyaml.nodes.NodeId#<clinit>()
	CALLEE: org.yaml.snakeyaml.nodes.NodeId#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.Constructor#addTypeDescription(org.yaml.snakeyaml.TypeDescription)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getTag()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#<init>(org.yaml.snakeyaml.representer.BaseRepresenter)
CALLER: org.yaml.snakeyaml.resolver.Resolver#<init>(boolean)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolvers()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#<init>()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions.ScalarStyle#getChar()
CALLER: org.yaml.snakeyaml.representer.Representer#setTimeZone(java.util.TimeZone)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#setTimeZone(java.util.TimeZone)
CALLER: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#<init>(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#access$000(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#access$000(java.lang.reflect.Type)
CALLER: org.fusesource.jansi.Ansi#reset()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: static org.fusesource.jansi.internal.Kernel32.COORD#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.COORD#init()
CALLER: static org.fusesource.jansi.internal.Kernel32.SMALL_RECT#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.SMALL_RECT#init()
CALLER: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetLastError()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FormatMessageW(int,long,int,int,byte[],int,long[])
CALLER: org.fusesource.hawtjni.runtime.Library#doLoad()
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#file(java.lang.String[])
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#getOperatingSystemSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getResorucePath()
CALLER: static jline.internal.Configuration#getString(java.lang.String)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
CALLER: static jline.TerminalFactory#create()
	CALLEE: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.TerminalFactory#getFlavor(jline.TerminalFactory.Flavor)
	CALLEE: jline.UnsupportedTerminal#<init>()
	CALLEE: static jline.internal.Configuration#getOsName()
	CALLEE: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: jline.TerminalSupport#init()
CALLER: static jline.TerminalFactory.Flavor#<clinit>()
	CALLEE: jline.TerminalFactory.Flavor#<init>(java.lang.String,int)
CALLER: static jline.internal.Configuration#getLong(java.lang.String,long)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: static jline.internal.Urls#create(java.lang.String)
	CALLEE: static jline.internal.Urls#create(java.io.File)
CALLER: static jline.console.KeyMap#keyMaps()
	CALLEE: static jline.console.KeyMap#emacs()
	CALLEE: static jline.console.KeyMap#bindArrowKeys(jline.console.KeyMap)
	CALLEE: static jline.console.KeyMap#viMovement()
	CALLEE: static jline.console.KeyMap#viInsertion()
	CALLEE: jline.console.KeyMap#getBound(java.lang.CharSequence)
CALLER: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.io.InputStream,java.lang.String)
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
CALLER: org.fusesource.jansi.Ansi.NoAnsi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
CALLER: io.netty.util.internal.logging.Slf4JLogger#<init>(org.slf4j.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
CALLER: io.netty.util.internal.logging.Log4JLogger#<init>(org.apache.log4j.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceCapable()
CALLER: io.netty.util.internal.logging.JdkLogger#<init>(java.util.logging.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.AbstractEventExecutorGroup#<init>()
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#newDefaultThreadFactory()
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#isPowerOfTwo(int)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.PowerOfTwoEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup,io.netty.util.concurrent.MultithreadEventExecutorGroup.1)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.GenericEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup,io.netty.util.concurrent.MultithreadEventExecutorGroup.1)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#terminationFuture()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#getUnsafe()
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.1#<init>()
CALLER: io.netty.channel.ChannelOutboundHandlerAdapter#<init>()
	CALLEE: io.netty.channel.ChannelHandlerAdapter#<init>()
CALLER: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find0(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#get(java.lang.Class)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#typeParameterMatcherFindCache()
CALLER: static io.netty.util.internal.TypeParameterMatcher#<clinit>()
	CALLEE: io.netty.util.internal.NoOpTypeParameterMatcher#<init>()
CALLER: static io.netty.util.internal.PlatformDependent0#getSystemClassLoader()
	CALLEE: io.netty.util.internal.PlatformDependent0.3#<init>()
CALLER: static io.netty.util.internal.PlatformDependent0#getClassLoader(java.lang.Class)
	CALLEE: io.netty.util.internal.PlatformDependent0.1#<init>(java.lang.Class)
CALLER: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#typeName(java.lang.Class)
	CALLEE: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#typeName(java.lang.Class)
CALLER: static javassist.ClassPool#<clinit>()
	CALLEE: javassist.ClassPool.1#<init>()
CALLER: javassist.ClassPool#<init>(boolean)
	CALLEE: javassist.ClassPool#<init>(javassist.ClassPool)
	CALLEE: javassist.ClassPool#appendSystemPath()
CALLER: javassist.ClassPool#appendClassPath(javassist.ClassPath)
	CALLEE: javassist.ClassPoolTail#appendClassPath(javassist.ClassPath)
CALLER: static io.netty.util.internal.NativeLibraryLoader#tmpdir()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#toDirectory(java.lang.String)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#isWindows()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.unix.Errors.NativeIoException#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#checkPrintable(char[],int,int)
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(char)
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#<init>(java.lang.String,int,char,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamStart()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#<init>(int)
CALLER: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: static gnu.trove.impl.HashFunctions#fastCeil(float)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#rehash(int)
CALLER: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
CALLER: org.yaml.snakeyaml.emitter.Emitter#<init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.DumperOptions#isCanonical()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isPrettyFlow()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isAllowUnicode()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndent()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getWidth()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getLineBreak()
	CALLEE: org.yaml.snakeyaml.DumperOptions.LineBreak#getString()
CALLER: org.yaml.snakeyaml.serializer.Serializer#<init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.DumperOptions#isExplicitStart()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isExplicitEnd()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getVersion()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getTags()
CALLER: org.yaml.snakeyaml.serializer.Serializer#open()
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#represent(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
CALLER: org.yaml.snakeyaml.serializer.Serializer#serialize(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
CALLER: org.yaml.snakeyaml.serializer.Serializer#close()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: static com.google.common.base.CharMatcher#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.1#<init>()
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
	CALLEE: com.google.common.base.CharMatcher.2#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.3#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.4#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.5#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.6#<init>(java.lang.String)
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char)
	CALLEE: com.google.common.base.CharMatcher.7#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.8#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.15#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#or(com.google.common.base.CharMatcher)
	CALLEE: com.google.common.base.CharMatcher.Or#withToString(java.lang.String)
CALLER: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher#<init>()
	CALLEE: static com.google.common.math.IntMath#log2(int,java.math.RoundingMode)
	CALLEE: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
	CALLEE: com.google.common.base.CharMatcher.13#matches(char)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding#<init>()
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#matches(char)
CALLER: gnu.trove.set.hash.TCustomHashSet#add(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#postInsertHook(boolean)
CALLER: static io.netty.util.internal.PlatformDependent0#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.internal.UnsafeAtomicReferenceFieldUpdater#<init>(sun.misc.Unsafe,java.lang.Class,java.lang.String)
CALLER: io.netty.channel.SimpleChannelInboundHandler#<init>(boolean)
	CALLEE: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
CALLER: net.md_5.bungee.Metrics#postPlugin(boolean)
	CALLEE: net.md_5.bungee.conf.Configuration#getUuid()
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static net.md_5.bungee.Metrics#encode(java.lang.String)
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: static net.md_5.bungee.Metrics#encodeDataPair(java.lang.StringBuilder,java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getOnlineCount()
CALLER: gnu.trove.impl.hash.THash#<init>(int,float)
	CALLEE: static gnu.trove.impl.HashFunctions#fastCeil(float)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#setUp(int)
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#setUp(int)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
CALLER: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(java.lang.String)
CALLER: static org.yaml.snakeyaml.util.UriEncoder#<clinit>()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#<init>(java.lang.String,boolean)
CALLER: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolvers()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)
CALLER: static com.google.gson.internal..Gson.Types#access$000(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#checkNotPrimitive(java.lang.reflect.Type)
CALLER: org.yaml.snakeyaml.reader.UnicodeReader#read(char[],int,int)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#init()
CALLER: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.Attribute#value()
CALLER: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getPlatform()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
CALLER: org.fusesource.hawtjni.runtime.Library#exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#file(java.lang.String[])
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: org.fusesource.hawtjni.runtime.Library#extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)
CALLER: org.fusesource.hawtjni.runtime.Library#getOperatingSystemSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getOperatingSystem()
CALLER: org.fusesource.hawtjni.runtime.Library#getResorucePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
CALLER: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jline.internal.Configuration#getProperties()
CALLER: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: jline.UnsupportedTerminal#<init>()
	CALLEE: jline.TerminalSupport#<init>(boolean)
	CALLEE: jline.TerminalSupport#setAnsiSupported(boolean)
	CALLEE: jline.TerminalSupport#setEchoEnabled(boolean)
CALLER: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: jline.TerminalSupport#init()
	CALLEE: static jline.internal.ShutdownHooks#remove(jline.internal.ShutdownHooks.Task)
	CALLEE: jline.TerminalSupport.1#<init>(jline.TerminalSupport)
	CALLEE: static jline.internal.ShutdownHooks#add(jline.internal.ShutdownHooks.Task)
CALLER: static jline.console.KeyMap#emacs()
	CALLEE: static jline.console.KeyMap#emacsCtrlX()
	CALLEE: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#bindArrowKeys(jline.console.KeyMap)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object)
CALLER: static jline.console.KeyMap#viMovement()
	CALLEE: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#viInsertion()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: jline.console.ConsoleKeys#loadKeys(java.io.InputStream,java.lang.String)
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
	CALLEE: jline.console.ConsoleKeys#getKeyFromName(java.lang.String)
	CALLEE: static jline.console.Operation#valueOf(java.lang.String)
	CALLEE: static jline.internal.Log#info(java.lang.Object[])
	CALLEE: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
	CALLEE: jline.console.ConsoleKeys#isViEditMode()
	CALLEE: jline.console.ConsoleKeys#setVar(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleKeys#translateQuoted(java.lang.String)
CALLER: static jline.internal.Log#warn(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: static io.netty.util.concurrent.DefaultPromise#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
	CALLEE: static io.netty.util.Signal#valueOf(java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise.CauseHolder#<init>(java.lang.Throwable)
CALLER: static io.netty.util.concurrent.GlobalEventExecutor#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#<init>()
CALLER: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: io.netty.channel.MultithreadEventLoopGroup#newDefaultThreadFactory()
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,int)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.PowerOfTwoEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup,io.netty.util.concurrent.MultithreadEventExecutorGroup.1)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.PowerOfTwoEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.GenericEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup,io.netty.util.concurrent.MultithreadEventExecutorGroup.1)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.GenericEventExecutorChooser#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup)
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.channel.epoll.EpollEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)
CALLER: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.channel.nio.NioEventLoop#<init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
CALLER: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#fastGet(io.netty.util.concurrent.FastThreadLocalThread)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#slowGet()
CALLER: static io.netty.util.internal.TypeParameterMatcher#find0(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#fail(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.TypeParameterMatcher#get(java.lang.Class)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasJavassist()
	CALLEE: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#generate(java.lang.Class)
	CALLEE: io.netty.util.internal.TypeParameterMatcher.ReflectiveMatcher#<init>(java.lang.Class)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#typeParameterMatcherGetCache()
CALLER: io.netty.util.internal.NoOpTypeParameterMatcher#<init>()
	CALLEE: io.netty.util.internal.TypeParameterMatcher#<init>()
CALLER: javassist.ClassPool#<init>(javassist.ClassPool)
	CALLEE: javassist.ClassPoolTail#<init>()
	CALLEE: javassist.ClassPool#clearImportedPackages()
	CALLEE: javassist.CtClass#getName()
CALLER: javassist.ClassPool#appendSystemPath()
	CALLEE: javassist.ClassPoolTail#appendSystemPath()
CALLER: org.yaml.snakeyaml.reader.ReaderException#<init>(java.lang.String,int,char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamStart()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: gnu.trove.impl.hash.TObjectHash#<init>(int)
	CALLEE: gnu.trove.impl.hash.THash#<init>(int)
CALLER: gnu.trove.set.hash.TCustomHashSet#rehash(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
CALLER: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#dumpExtraInfo(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.TObjectHash#buildObjectContractViolation(java.lang.Object,java.lang.Object,java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#needMoreEvents()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#expect()
CALLER: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#representData(java.lang.Object)
CALLER: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#generateAnchor()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getRealNode()
CALLER: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#getFlowStyle()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getRealNode()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getStyle()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
CALLER: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: com.google.common.base.CharMatcher.1#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.13#<init>(java.lang.String,char,char)
CALLER: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.2#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.3#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.4#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.5#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.6#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: static com.google.common.base.CharMatcher#inRange(char,char)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.CharMatcher#inRange(char,char,java.lang.String)
	CALLEE: static com.google.common.base.CharMatcher#showCharacter(char)
CALLER: com.google.common.base.CharMatcher.7#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.8#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.15#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: static com.google.common.math.IntMath#log2(int,java.math.RoundingMode)
	CALLEE: static com.google.common.math.MathPreconditions#checkPositive(java.lang.String,int)
	CALLEE: static com.google.common.math.IntMath#isPowerOfTwo(int)
	CALLEE: static com.google.common.math.MathPreconditions#checkRoundingUnnecessary(boolean)
	CALLEE: static com.google.common.math.IntMath#lessThanBranchFree(int,int)
CALLER: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.math.MathPreconditions#checkRoundingUnnecessary(boolean)
CALLER: com.google.common.io.BaseEncoding.Alphabet#matches(char)
	CALLEE: com.google.common.base.CharMatcher.13#matches(char)
CALLER: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: static net.md_5.bungee.Metrics#encodeDataPair(java.lang.StringBuilder,java.lang.String,java.lang.String)
	CALLEE: static net.md_5.bungee.Metrics#encode(java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getOnlineCount()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.map.hash.TCustomHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#setUp(int)
CALLER: gnu.trove.map.hash.TIntObjectHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TIntHash#setUp(int)
CALLER: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#<clinit>()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#<init>()
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#<init>(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#<init>()
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#createSafeOctets(java.lang.String)
CALLER: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern)
CALLER: static com.google.gson.internal..Gson.Types#checkNotPrimitive(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
CALLER: static org.fusesource.hawtjni.runtime.Library#getPlatform()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getOperatingSystem()
CALLER: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
CALLER: org.fusesource.hawtjni.runtime.Library#extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)
	CALLEE: org.fusesource.hawtjni.runtime.Library#chmod(java.lang.String,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#close(java.io.Closeable)
CALLER: static jline.internal.Configuration#getProperties()
	CALLEE: static jline.internal.Configuration#initProperties()
CALLER: static jline.internal.Log.Level#<clinit>()
	CALLEE: jline.internal.Log.Level#<init>(java.lang.String,int)
CALLER: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
	CALLEE: static jline.internal.Log#render(java.io.PrintStream,java.lang.Object)
CALLER: jline.TerminalSupport#setAnsiSupported(boolean)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: jline.TerminalSupport#setEchoEnabled(boolean)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.internal.ShutdownHooks#remove(jline.internal.ShutdownHooks.Task)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jline.internal.ShutdownHooks#removeHook(java.lang.Thread)
CALLER: static jline.internal.ShutdownHooks#<clinit>()
	CALLEE: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
CALLER: static jline.internal.ShutdownHooks#add(jline.internal.ShutdownHooks.Task)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.internal.ShutdownHooks.1#<init>(java.lang.String)
	CALLEE: static jline.internal.ShutdownHooks#addHook(java.lang.Thread)
CALLER: static jline.console.Operation#<clinit>()
	CALLEE: jline.console.Operation#<init>(java.lang.String,int)
CALLER: static jline.console.KeyMap#emacsCtrlX()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
CALLER: jline.console.ConsoleKeys#isViEditMode()
	CALLEE: jline.console.KeyMap#isViKeyMap()
CALLER: jline.console.ConsoleKeys#setVar(java.lang.String,java.lang.String)
	CALLEE: jline.console.KeyMap#setBlinkMatchingParen(boolean)
CALLER: static jline.internal.Log#info(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: org.fusesource.jansi.Ansi.2#initialValue()
	CALLEE: org.fusesource.jansi.Ansi.2#initialValue()
CALLER: static io.netty.util.Signal#valueOf(java.lang.String)
	CALLEE: io.netty.util.Signal#<init>(java.lang.String)
CALLER: static io.netty.util.Signal#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newConcurrentHashMap()
CALLER: io.netty.util.concurrent.GlobalEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.1#<init>(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos(long)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#<init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#<init>(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: io.netty.util.concurrent.FailedFuture#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduledTaskQueue()
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,int)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,boolean,int)
CALLER: static io.netty.channel.epoll.EpollEventLoop#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.concurrent.SingleThreadEventExecutor#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.1#<init>()
CALLER: io.netty.channel.epoll.EpollEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)
	CALLEE: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)
	CALLEE: io.netty.util.collection.IntObjectHashMap#<init>(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#<init>(int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.epoll.Native#epollCtlAdd(int,int,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
CALLER: static io.netty.channel.nio.NioEventLoop#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.channel.nio.NioEventLoop#<init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
	CALLEE: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#openSelector()
CALLER: static io.netty.util.internal.InternalThreadLocalMap#fastGet(io.netty.util.concurrent.FastThreadLocalThread)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#<init>()
CALLER: static io.netty.util.internal.InternalThreadLocalMap#slowGet()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#<init>()
CALLER: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#generate(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: static io.netty.util.internal.JavassistTypeParameterMatcherGenerator#generate(java.lang.Class,java.lang.ClassLoader)
	CALLEE: static io.netty.util.internal.PlatformDependent#getContextClassLoader()
CALLER: io.netty.util.internal.TypeParameterMatcher.ReflectiveMatcher#<init>(java.lang.Class)
	CALLEE: io.netty.util.internal.TypeParameterMatcher#<init>()
CALLER: static javassist.CtClass#<clinit>()
	CALLEE: javassist.CtPrimitiveType#<init>(java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,int,int,int)
CALLER: javassist.ClassPoolTail#appendSystemPath()
	CALLEE: javassist.ClassClassPath#<init>()
	CALLEE: javassist.ClassPoolTail#appendClassPath(javassist.ClassPath)
CALLER: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.error.Mark#<init>(java.lang.String,int,int,int,java.lang.String,int)
CALLER: org.yaml.snakeyaml.tokens.StreamStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: gnu.trove.impl.hash.THash#<init>(int)
	CALLEE: gnu.trove.impl.hash.THash#<init>(int,float)
CALLER: gnu.trove.impl.hash.TObjectHash#dumpExtraInfo(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.TObjectHash#dumpKeyTypes(java.lang.Object,java.lang.Object)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#reportPotentialConcurrentMod(int,int)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#detectKeyLoss(java.lang.Object[],int)
CALLER: gnu.trove.impl.hash.TObjectHash#buildObjectContractViolation(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#objectInfo(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter#needMoreEvents()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#needEvents(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeStreamStart()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
CALLER: static org.yaml.snakeyaml.serializer.Serializer.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#getRegexp()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#getTag()
CALLER: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: com.google.common.base.CharMatcher.13#<init>(java.lang.String,char,char)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.FastMatcher#<init>(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: gnu.trove.impl.hash.TObjectHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.THash#setUp(int)
CALLER: gnu.trove.impl.hash.TIntHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.TPrimitiveHash#setUp(int)
CALLER: org.fusesource.hawtjni.runtime.Library#chmod(java.lang.String,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getPlatform()
CALLER: static jline.internal.Configuration#initProperties()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Configuration#determineUrl()
	CALLEE: static jline.internal.Configuration#loadProperties(java.net.URL,java.util.Properties)
CALLER: static jline.internal.ShutdownHooks#removeHook(java.lang.Thread)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.internal.ShutdownHooks#addHook(java.lang.Thread)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,boolean)
CALLER: org.fusesource.jansi.Ansi.2#initialValue()
	CALLEE: static org.fusesource.jansi.Ansi#isDetected()
CALLER: io.netty.util.Signal#<init>(java.lang.String)
	CALLEE: io.netty.util.UniqueName#<init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#<init>()
CALLER: static io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#<init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)
	CALLEE: io.netty.util.concurrent.PromiseTask#<init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.Callable)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,boolean,int)
CALLER: io.netty.util.concurrent.FailedFuture#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.CompleteFuture#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,boolean,int)
	CALLEE: static io.netty.util.concurrent.DefaultThreadFactory#toPoolName(java.lang.Class)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int)
CALLER: static io.netty.util.internal.PlatformDependent#newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)
CALLER: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)
CALLER: io.netty.util.collection.IntObjectHashMap#<init>(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#<init>(int,float)
CALLER: static io.netty.channel.epoll.EpollEventArray#<clinit>()
	CALLEE: static io.netty.channel.epoll.Native#sizeofEpollEvent()
	CALLEE: static io.netty.channel.epoll.Native#offsetofEpollData()
CALLER: io.netty.channel.epoll.EpollEventArray#<init>(int)
	CALLEE: static io.netty.channel.epoll.EpollEventArray#allocate(int)
CALLER: static io.netty.channel.epoll.Native#epollCtlAdd(int,int,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlAdd0(int,int,int)
CALLER: io.netty.channel.unix.FileDescriptor#close()
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: static io.netty.channel.unix.FileDescriptor#close(int)
CALLER: io.netty.channel.nio.NioEventLoop#openSelector()
	CALLEE: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: io.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#<init>()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object)
CALLER: io.netty.util.internal.InternalThreadLocalMap#<init>()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#newIndexedVariableTable()
	CALLEE: io.netty.util.internal.UnpaddedInternalThreadLocalMap#<init>(java.lang.Object[])
CALLER: static io.netty.util.internal.PlatformDependent#getContextClassLoader()
	CALLEE: static io.netty.util.internal.PlatformDependent0#getContextClassLoader()
CALLER: javassist.CtPrimitiveType#<init>(java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,int,int,int)
	CALLEE: javassist.CtClass#<init>(java.lang.String)
CALLER: javassist.ClassClassPath#<init>()
	CALLEE: javassist.ClassClassPath#<init>(java.lang.Class)
CALLER: javassist.ClassPoolTail#appendClassPath(javassist.ClassPath)
	CALLEE: javassist.ClassPathList#<init>(javassist.ClassPath,javassist.ClassPathList)
CALLER: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: gnu.trove.impl.hash.TObjectHash#dumpKeyTypes(java.lang.Object,java.lang.Object)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#equalsSymmetryInfo(java.lang.Object,java.lang.Object)
CALLER: static gnu.trove.impl.hash.TObjectHash#detectKeyLoss(java.lang.Object[],int)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#makeKeySet(java.lang.Object[])
CALLER: static gnu.trove.impl.hash.TObjectHash#objectInfo(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character)
CALLER: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: static org.yaml.snakeyaml.resolver.Resolver.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: gnu.trove.impl.hash.THash#setUp(int)
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#computeNextAutoCompactionAmount(int)
CALLER: gnu.trove.impl.hash.TPrimitiveHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.THash#setUp(int)
CALLER: static jline.internal.Configuration#determineUrl()
	CALLEE: static jline.internal.Configuration#getUserHome()
	CALLEE: static jline.internal.Urls#create(java.lang.String)
	CALLEE: static jline.internal.Urls#create(java.io.File)
CALLER: static jline.internal.Configuration#loadProperties(java.net.URL,java.util.Properties)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
CALLER: jline.console.KeyMap#<init>(java.lang.String,boolean)
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static org.fusesource.jansi.Ansi#isDetected()
	CALLEE: org.fusesource.jansi.Ansi.1#call()
CALLER: io.netty.util.UniqueName#<init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.UniqueName#validateArgs(java.lang.Object[])
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#putIfAbsent(java.lang.Object,java.lang.Object)
CALLER: io.netty.util.concurrent.PromiseTask#<init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.Callable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.CompleteFuture#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: static io.netty.util.concurrent.DefaultThreadFactory#toPoolName(java.lang.Class)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static io.netty.util.internal.PlatformDependent0#newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#<init>(sun.misc.Unsafe,java.lang.Class,java.lang.String)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.2#<init>(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.DefaultThreadProperties#<init>(java.lang.Thread)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#newTaskQueue()
	CALLEE: io.netty.channel.nio.NioEventLoop#newTaskQueue()
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder.1#newThread(java.lang.Runnable)
CALLER: io.netty.util.collection.IntObjectHashMap#<init>(int,float)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#adjustCapacity(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#calcMaxSize(int)
CALLER: static io.netty.channel.epoll.EpollEventArray#allocate(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#allocateMemory(long)
CALLER: static io.netty.util.internal.PlatformDependent0#getContextClassLoader()
	CALLEE: io.netty.util.internal.PlatformDependent0.2#<init>()
CALLER: static gnu.trove.impl.hash.TObjectHash#equalsSymmetryInfo(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#equals(java.lang.Object)
	CALLEE: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.ClassInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.Utf8Info#equals(java.lang.Object)
	CALLEE: javassist.bytecode.IntegerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.FloatInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.LongInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.DoubleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.StringInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MemberrefInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.NameAndTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodHandleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#equals(java.lang.Object)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
CALLER: org.fusesource.jansi.Ansi.1#call()
	CALLEE: org.fusesource.jansi.Ansi.1#call()
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#putIfAbsent(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#putVal(java.lang.Object,java.lang.Object,boolean)
CALLER: io.netty.channel.epoll.EpollEventLoop#newTaskQueue()
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue()
CALLER: io.netty.channel.nio.NioEventLoop#newTaskQueue()
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue()
CALLER: static io.netty.util.internal.PlatformDependent#allocateMemory(long)
	CALLEE: static io.netty.util.internal.PlatformDependent0#allocateMemory(long)
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#putVal(java.lang.Object,java.lang.Object,boolean)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#spread(int)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#initTable()
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#tabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#casTabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#helpTransfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#treeifyBin(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#addCount(long,int)
CALLER: static io.netty.util.internal.PlatformDependent#newMpscQueue()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#<init>()
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#helpTransfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#treeifyBin(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#tabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#<init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#setTabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#addCount(long,int)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#fullAddCount(io.netty.util.internal.InternalThreadLocalMap,long,io.netty.util.internal.IntegerHolder,boolean)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8#sumCount()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#counterHashCode()
CALLER: static io.netty.util.internal.MpscLinkedQueueTailRef#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.MpscLinkedQueueHeadRef#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
CALLER: io.netty.util.internal.MpscLinkedQueue#<init>()
	CALLEE: io.netty.util.internal.MpscLinkedQueueTailRef#<init>()
	CALLEE: io.netty.util.internal.MpscLinkedQueue.DefaultNode#<init>(java.lang.Object)
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#setHeadRef(io.netty.util.internal.MpscLinkedQueueNode)
	CALLEE: io.netty.util.internal.MpscLinkedQueueTailRef#setTailRef(io.netty.util.internal.MpscLinkedQueueNode)
CALLER: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#tabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#casTabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#<init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#setTabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.ForwardingNode#<init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#untreeify(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#<clinit>()
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#access$000()
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#<init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#comparableClassFor(java.lang.Object)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#balanceInsertion(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#fullAddCount(io.netty.util.internal.InternalThreadLocalMap,long,io.netty.util.internal.IntegerHolder,boolean)
	CALLEE: io.netty.util.internal.IntegerHolder#<init>()
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.CounterCell#<init>(long)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setCounterHashCode(io.netty.util.internal.IntegerHolder)
CALLER: static io.netty.util.internal.MpscLinkedQueueNode#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)
CALLER: io.netty.util.internal.MpscLinkedQueueTailRef#<init>()
	CALLEE: io.netty.util.internal.MpscLinkedQueuePad1#<init>()
CALLER: io.netty.util.internal.MpscLinkedQueue.DefaultNode#<init>(java.lang.Object)
	CALLEE: io.netty.util.internal.MpscLinkedQueueNode#<init>()
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8.ForwardingNode#<init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[])
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#untreeify(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
	CALLEE: io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node#<init>(int,java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node)
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#access$000()
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#getUnsafe()
CALLER: static io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#balanceInsertion(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#rotateLeft(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeBin#rotateRight(io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode,io.netty.util.internal.chmv8.ConcurrentHashMapV8.TreeNode)
CALLER: io.netty.util.internal.MpscLinkedQueuePad1#<init>()
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#<init>()
CALLER: io.netty.util.internal.MpscLinkedQueueHeadRef#<init>()
	CALLEE: io.netty.util.internal.MpscLinkedQueuePad0#<init>()
CALLER: jline.internal.NonBlockingInputStream#run()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(java.lang.String)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#escapeSlow(java.lang.String,int)
CALLER: com.google.common.base.CharMatcher#or(com.google.common.base.CharMatcher)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
CALLER: io.netty.util.concurrent.AbstractEventExecutor#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
CALLER: javassist.ClassPool#getAndRename(java.lang.String,java.lang.String)
	CALLEE: javassist.ClassPool#get0(java.lang.String,boolean)
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
	CALLEE: javassist.CtClass#setName(java.lang.String)
	CALLEE: javassist.CtClassType#setName(java.lang.String)
	CALLEE: javassist.CtClassType#setClassPool(javassist.ClassPool)
CALLER: org.fusesource.jansi.Ansi#toString()
	CALLEE: org.fusesource.jansi.Ansi#flushAtttributes()
CALLER: com.google.common.io.BaseEncoding#encode(byte[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding#encode(byte[],int,int)
CALLER: io.netty.util.internal.chmv8.ConcurrentHashMapV8#get(java.lang.Object)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#spread(int)
	CALLEE: static io.netty.util.internal.chmv8.ConcurrentHashMapV8#tabAt(io.netty.util.internal.chmv8.ConcurrentHashMapV8.Node[],int)
CALLER: org.fusesource.jansi.Ansi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi.Color#fg()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getSingleData(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructDocument(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.composer.Composer#getSingleNode()
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView.1#<init>(gnu.trove.map.hash.TCustomHashMap.ValueView,gnu.trove.impl.hash.TObjectHash)
CALLER: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#equals(java.lang.Object)
	CALLEE: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.ClassInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.Utf8Info#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.IntegerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.FloatInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.LongInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.DoubleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.StringInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MemberrefInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.NameAndTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodHandleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
CALLER: net.md_5.bungee.module.ModuleVersion#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleVersion#canEqual(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceEnabled()
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceEnabled()
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory.DefaultRunnableDecorator#<init>(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable,java.lang.String)
CALLER: com.google.common.util.concurrent.ThreadFactoryBuilder#build()
	CALLEE: static com.google.common.util.concurrent.ThreadFactoryBuilder#build(com.google.common.util.concurrent.ThreadFactoryBuilder)
CALLER: net.md_5.bungee.jni.NativeCode#load()
	CALLEE: static net.md_5.bungee.jni.NativeCode#isSupported()
	CALLEE: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
	CALLEE: static com.google.gson.internal..Gson.Types#access$100(java.lang.Object)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: javassist.CtMember#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: javassist.CtClass#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
CALLER: joptsimple.OptionParserState.2#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.ArgumentList#next()
	CALLEE: static joptsimple.ParserRules#isOptionTerminator(java.lang.String)
	CALLEE: joptsimple.OptionParser#noMoreOptions()
	CALLEE: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleLongOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: static joptsimple.ParserRules#isShortOptionToken(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleShortOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#doesAllowsUnrecognizedOptions()
	CALLEE: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String,java.util.List)
CALLER: jline.console.ConsoleReader#readLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#readLine(java.lang.String,java.lang.Character)
CALLER: net.md_5.bungee.api.plugin.PluginManager#registerCommand(net.md_5.bungee.api.plugin.Plugin,net.md_5.bungee.api.plugin.Command)
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.gson.GsonBuilder#create()
	CALLEE: com.google.gson.GsonBuilder#addTypeAdaptersForDate(java.lang.String,int,int,java.util.List)
	CALLEE: com.google.gson.Gson#<init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List)
CALLER: com.google.common.cache.CacheBuilder#concurrencyLevel(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
CALLER: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
CALLER: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.1#<init>(gnu.trove.map.hash.TCustomHashMap,java.lang.StringBuilder)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
CALLER: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getArguments()
CALLER: net.md_5.bungee.module.ModuleVersion#toString()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.representer.Representer#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.Representer#representJavaBean(java.util.Set,java.lang.Object)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: javassist.CtMember#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: javassist.CtClass#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character)
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character)
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asByteList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asShortList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asIntList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asLongList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asFloatList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asDoubleList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asCharList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asBooleanList(java.lang.Object)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.CtMember#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
	CALLEE: javassist.CtClass#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.IteratorWrapper#<init>(java.util.Iterator)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.Representer#getTimeZone()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
CALLER: jline.console.KeyMap#setBlinkMatchingParen(boolean)
	CALLEE: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
CALLER: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
CALLER: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
CALLER: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#getHashCode()
CALLER: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
CALLER: net.md_5.bungee.module.ModuleVersion#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
CALLER: joptsimple.OptionSpecBuilder#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
CALLER: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getTags()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getVersion()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getExplicit()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$500(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeVersionDirective(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$700()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$602(org.yaml.snakeyaml.emitter.Emitter,java.util.Map)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$800(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$900(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeTagDirective(java.lang.String,java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeStreamEnd()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#escapeSlow(java.lang.String,int)
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#codePointAt(java.lang.CharSequence,int,int)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(int)
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#growBuffer(char[],int,int)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#nextEscapeIndex(java.lang.CharSequence,int,int)
CALLER: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
CALLER: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#inEventLoop(java.lang.Thread)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#inEventLoop(java.lang.Thread)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#terminationFuture()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#compareAndSet(java.lang.Object,int,int)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
CALLER: javassist.ClassPool#get0(java.lang.String,boolean)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#getCached(java.lang.String)
	CALLEE: javassist.ClassPool#createCtClass(java.lang.String,boolean)
	CALLEE: javassist.ClassPool#cacheCtClass(java.lang.String,javassist.CtClass,boolean)
CALLER: org.fusesource.jansi.Ansi#flushAtttributes()
	CALLEE: org.fusesource.jansi.Ansi#_appendEscapeSequence(char,java.lang.Object[])
CALLER: com.google.common.io.BaseEncoding#encode(byte[],int,int)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#maxEncodedSize(int)
	CALLEE: static com.google.common.io.GwtWorkarounds#stringBuilderOutput(int)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#encodingStream(com.google.common.io.GwtWorkarounds.CharOutput)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding.1#close()
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding.1#write(byte)
	CALLEE: com.google.common.io.GwtWorkarounds.6#toString()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructDocument(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#fillRecursive()
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView.1#<init>(gnu.trove.map.hash.TCustomHashMap.ValueView,gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#name()
	CALLEE: static io.netty.util.internal.logging.JdkLogger#fillCallerData(java.lang.String,java.util.logging.LogRecord)
CALLER: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.BungeeSecurityManager#checkExit(int)
	CALLEE: net.md_5.bungee.BungeeSecurityManager#checkRestricted(java.lang.String)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable,java.lang.String)
	CALLEE: io.netty.util.concurrent.FastThreadLocalThread#<init>(java.lang.Runnable,java.lang.String)
CALLER: static com.google.common.util.concurrent.ThreadFactoryBuilder#build(com.google.common.util.concurrent.ThreadFactoryBuilder)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder.1#<init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread.UncaughtExceptionHandler)
CALLER: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.io.ByteStreams#<clinit>()
	CALLEE: com.google.common.io.ByteStreams.1#<init>()
CALLER: static com.google.gson.internal..Gson.Types#access$100(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#hashCodeOrZero(java.lang.Object)
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
CALLER: joptsimple.OptionParser#noMoreOptions()
	CALLEE: static joptsimple.OptionParserState#noMoreOptions()
CALLER: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isOptionTerminator(java.lang.String)
CALLER: joptsimple.OptionParser#handleLongOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: static joptsimple.OptionParser#parseLongOptionWithArgument(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
CALLER: static joptsimple.ParserRules#isShortOptionToken(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
CALLER: joptsimple.OptionParser#handleShortOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: static joptsimple.OptionParser#parseShortOptionWithArgument(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleShortOptionCluster(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
CALLER: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String,java.util.List)
	CALLEE: net.md_5.bungee.command.CommandReload#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandEnd#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandIP#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandBungee#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandPerms#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
	CALLEE: net.md_5.bungee.command.PlayerCommand#onTabComplete(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getDisabledCommands()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#hasPermission(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.BungeeCord#getConfig()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#getName()
	CALLEE: net.md_5.bungee.conf.Configuration#isLogCommands()
CALLER: jline.console.ConsoleReader#readLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.KeyMap#getBound(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#viPut(int)
	CALLEE: jline.console.ConsoleReader#viCharSearch(int,int,int)
	CALLEE: jline.console.ConsoleReader#viChangeCase(int)
	CALLEE: jline.console.ConsoleReader#viChangeChar(int,int)
	CALLEE: jline.console.ConsoleReader#viDeleteTo(int,int,boolean)
	CALLEE: jline.console.ConsoleReader#viYankTo(int,int)
	CALLEE: jline.console.KeyMap#getAnotherKey()
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: jline.TerminalSupport#isSupported()
	CALLEE: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getPrompt()
	CALLEE: jline.console.ConsoleReader#beforeReadLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.ConsoleReader#readLineSimple()
	CALLEE: jline.console.ConsoleReader#afterReadLine()
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.ConsoleReader#getKeys()
	CALLEE: jline.console.KillRing#resetLastYank()
	CALLEE: jline.console.KillRing#resetLastKill()
	CALLEE: jline.internal.NonBlockingInputStream#isNonBlockingEnabled()
	CALLEE: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#moveTo(int)
	CALLEE: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printForwardSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#restoreLine(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#viDeleteChangeYankToRemap(jline.console.Operation)
	CALLEE: jline.console.ConsoleReader#complete()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#printCompletionCandidates()
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#yank()
	CALLEE: jline.console.ConsoleReader#yankPop()
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#clearScreen()
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.CursorBuffer#isOverTyping()
	CALLEE: jline.console.CursorBuffer#setOverTyping(boolean)
	CALLEE: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleReader#abort()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.UserInterruptException#<init>(java.lang.String)
	CALLEE: jline.console.ConsoleKeys#setKeyMap(java.lang.String)
	CALLEE: jline.console.ConsoleReader#previousWord()
	CALLEE: jline.console.ConsoleReader#nextWord()
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean)
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean,int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#deleteCurrentCharacter()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#resetLine()
	CALLEE: jline.console.ConsoleReader#unixWordRubout(int)
	CALLEE: jline.console.ConsoleReader#deletePreviousWord()
	CALLEE: jline.console.ConsoleReader#deleteNextWord()
	CALLEE: jline.console.history.MemoryHistory#moveToFirst()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#moveToLast()
	CALLEE: jline.console.CursorBuffer#upToCursor()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#capitalizeWord()
	CALLEE: jline.console.ConsoleReader#upCaseWord()
	CALLEE: jline.console.ConsoleReader#downCaseWord()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#transposeChars(int)
	CALLEE: jline.console.ConsoleReader#insertComment(boolean)
	CALLEE: jline.console.ConsoleReader#insertClose(java.lang.String)
	CALLEE: jline.console.ConsoleReader#viMatch()
	CALLEE: jline.console.ConsoleReader#viSearch(char)
	CALLEE: jline.console.ConsoleReader#viNextWord(int)
	CALLEE: jline.console.ConsoleReader#viPreviousWord(int)
	CALLEE: jline.console.ConsoleReader#viEndWord(int)
	CALLEE: jline.console.ConsoleReader#viRubout(int)
	CALLEE: jline.console.ConsoleReader#viDelete(int)
CALLER: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.gson.GsonBuilder#addTypeAdaptersForDate(java.lang.String,int,int,java.util.List)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.lang.String)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(int,int)
	CALLEE: static com.google.gson.reflect.TypeToken#get(java.lang.Class)
	CALLEE: static com.google.gson.TreeTypeAdapter#newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
CALLER: com.google.gson.Gson#<init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.Gson.1#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.Gson.2#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.internal.ConstructorConstructor#<init>(java.util.Map)
	CALLEE: com.google.gson.Gson#longAdapter(com.google.gson.LongSerializationPolicy)
	CALLEE: com.google.gson.Gson#doubleAdapter(boolean)
	CALLEE: com.google.gson.Gson#floatAdapter(boolean)
	CALLEE: com.google.gson.internal.bind.CollectionTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor)
	CALLEE: com.google.gson.internal.bind.MapTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor,boolean)
	CALLEE: com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor)
	CALLEE: com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder)
CALLER: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.1#execute(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EqProcedure#execute(java.lang.Object,java.lang.Object)
CALLER: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#toString()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#toString()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#toString()
CALLER: org.yaml.snakeyaml.representer.Representer#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class)
CALLER: org.yaml.snakeyaml.representer.Representer#representJavaBean(java.util.Set,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getStyle()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer#representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.DumperOptions.FlowStyle#getStyleBoolean()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#get(java.lang.Object)
CALLER: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[],int,int)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.DumperOptions.FlowStyle#getStyleBoolean()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.IteratorWrapper#iterator()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,java.lang.Boolean)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getStyle()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.DumperOptions.FlowStyle#getStyleBoolean()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(java.lang.Boolean)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
CALLER: org.yaml.snakeyaml.representer.Representer#getTimeZone()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTimeZone()
CALLER: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$500(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareVersion(org.yaml.snakeyaml.DumperOptions.Version)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeVersionDirective(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$800(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTagHandle(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$900(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTagPrefix(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeTagDirective(java.lang.String,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$1100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyDocument()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeStreamEnd()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#flushStream()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher#<init>(java.lang.String)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
CALLER: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#compareAndSet(java.lang.Object,int,int)
	CALLEE: static io.netty.channel.epoll.Native#eventFdWrite(int,long)
CALLER: javassist.ClassPool#createCtClass(java.lang.String,boolean)
	CALLEE: javassist.ClassPool#getCached(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toClassName(java.lang.String)
	CALLEE: javassist.ClassPool#find(java.lang.String)
	CALLEE: javassist.CtArray#<init>(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.CtClassType#<init>(java.lang.String,javassist.ClassPool)
CALLER: org.yaml.snakeyaml.nodes.Tag#compareTo(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#compareTo(org.yaml.snakeyaml.nodes.Tag)
CALLER: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#maxEncodedSize(int)
	CALLEE: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
CALLER: static com.google.common.io.GwtWorkarounds#stringBuilderOutput(int)
	CALLEE: com.google.common.io.GwtWorkarounds.6#<init>(java.lang.StringBuilder)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#encodingStream(com.google.common.io.GwtWorkarounds.CharOutput)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding.1#<init>(com.google.common.io.BaseEncoding.StandardBaseEncoding,com.google.common.io.GwtWorkarounds.CharOutput)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#fillRecursive()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#_2()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#_1()
CALLER: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.impl.hash.THashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#getThrowableCandidate(java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#isEscapedDelimeter(java.lang.String,int)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#isDoubleEscaped(java.lang.String,int)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)
CALLER: net.md_5.bungee.BungeeSecurityManager#checkRestricted(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: static com.google.gson.internal..Gson.Types#hashCodeOrZero(java.lang.Object)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: static joptsimple.OptionParserState#noMoreOptions()
	CALLEE: joptsimple.OptionParserState.1#<init>()
CALLER: static joptsimple.OptionParser#parseLongOptionWithArgument(java.lang.String)
	CALLEE: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
CALLER: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#contains(java.lang.String)
CALLER: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.UnrecognizedOptionException#<init>(java.lang.String)
CALLER: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
CALLER: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
CALLER: static joptsimple.OptionParser#parseShortOptionWithArgument(java.lang.String)
	CALLEE: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
CALLER: joptsimple.OptionParser#handleShortOptionCluster(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: static joptsimple.OptionParser#extractShortOptionsFrom(java.lang.String)
	CALLEE: joptsimple.OptionParser#validateOptionCharacters(char[])
	CALLEE: joptsimple.OptionParser#specFor(char)
	CALLEE: joptsimple.NonOptionArgumentSpec#acceptsArguments()
	CALLEE: joptsimple.OptionSpecBuilder#acceptsArguments()
CALLER: net.md_5.bungee.BungeeCord#getDisabledCommands()
	CALLEE: net.md_5.bungee.conf.Configuration#getDisabledCommands()
CALLER: net.md_5.bungee.BungeeCord#getConfig()
	CALLEE: net.md_5.bungee.BungeeCord#getConfig()
CALLER: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#lastLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#stripAnsi(java.lang.String)
CALLER: jline.console.ConsoleReader#beforeReadLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.ConsoleReader.1#<init>(jline.console.ConsoleReader,java.lang.String)
CALLER: jline.console.ConsoleReader#readLineSimple()
	CALLEE: jline.console.ConsoleReader#readCharacter()
CALLER: jline.console.ConsoleReader#readCharacter()
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: jline.TerminalSupport#isSupported()
	CALLEE: jline.internal.InputStreamReader#read()
	CALLEE: jline.console.ConsoleReader#clearEcho(int)
CALLER: jline.console.ConsoleReader#getKeys()
	CALLEE: jline.console.ConsoleKeys#getKeys()
CALLER: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.internal.NonBlockingInputStream#read(long,boolean)
CALLER: static jline.console.ConsoleReader.2#<clinit>()
	CALLEE: static jline.console.Operation#values()
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#index()
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#index()
CALLER: jline.console.history.MemoryHistory#moveTo(int)
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
CALLER: jline.console.ConsoleReader#printForwardSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
CALLER: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(int)
CALLER: jline.console.ConsoleReader#restoreLine(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#lastLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
CALLER: jline.console.ConsoleReader#complete()
	CALLEE: jline.console.ConsoleReader#getCompletionHandler()
	CALLEE: jline.console.completer.CandidateListCompletionHandler#complete(jline.console.ConsoleReader,java.util.List,int)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.CursorBuffer#write(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
CALLER: jline.console.ConsoleReader#printCompletionCandidates()
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: jline.console.ConsoleReader#drawLine()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
CALLER: jline.console.ConsoleReader#yank()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.KillRing#yank()
CALLER: jline.console.ConsoleReader#yankPop()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.KillRing#yank()
	CALLEE: jline.console.KillRing#lastYank()
	CALLEE: jline.console.ConsoleReader#backspace(int)
	CALLEE: jline.console.KillRing#yankPop()
CALLER: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.console.KillRing#add(java.lang.String)
CALLER: jline.console.ConsoleReader#clearScreen()
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
CALLER: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#drawLine()
CALLER: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#finishBuffer()
CALLER: jline.console.ConsoleReader#abort()
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#println()
CALLER: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#previousWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#nextWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#nextChar()
CALLER: jline.console.ConsoleReader#moveHistory(boolean)
	CALLEE: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#next()
	CALLEE: jline.console.history.MemoryHistory#previous()
CALLER: jline.console.ConsoleReader#moveHistory(boolean,int)
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean)
CALLER: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: jline.console.ConsoleReader#deleteCurrentCharacter()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#moveInternal(int)
CALLER: jline.console.ConsoleReader#resetLine()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
CALLER: jline.console.ConsoleReader#unixWordRubout(int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isWhitespace(char)
CALLER: jline.console.ConsoleReader#deletePreviousWord()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
CALLER: jline.console.ConsoleReader#deleteNextWord()
	CALLEE: jline.console.KillRing#add(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#nextChar()
	CALLEE: jline.console.ConsoleReader#delete()
CALLER: jline.console.history.MemoryHistory#moveToFirst()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
CALLER: jline.console.history.MemoryHistory#moveToLast()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#hasPrevious()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#index()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#value()
CALLER: jline.console.ConsoleReader#setBufferKeepPos(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
CALLER: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#hasNext()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#index()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#value()
CALLER: jline.console.ConsoleReader#capitalizeWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#upCaseWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#downCaseWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#transposeChars(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#moveInternal(int)
CALLER: jline.console.ConsoleReader#insertComment(boolean)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleKeys#setKeyMap(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getCommentBegin()
CALLER: jline.console.ConsoleReader#insertClose(java.lang.String)
	CALLEE: jline.internal.NonBlockingInputStream#isNonBlockingEnabled()
	CALLEE: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#viMatch()
CALLER: jline.console.ConsoleReader#viMatch()
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#getBracketType(char)
	CALLEE: jline.console.ConsoleReader#isInViMoveOperationState()
CALLER: jline.console.ConsoleReader#viSearch(char)
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.CursorBuffer#copy()
CALLER: jline.console.ConsoleReader#viNextWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#viPreviousWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.ConsoleReader#isWhitespace(char)
CALLER: jline.console.ConsoleReader#viEndWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#viRubout(int)
	CALLEE: jline.console.ConsoleReader#backspace()
CALLER: jline.console.ConsoleReader#viDelete(int)
	CALLEE: jline.console.ConsoleReader#deleteCurrentCharacter()
CALLER: jline.console.ConsoleReader#viPut(int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
CALLER: jline.console.ConsoleReader#viCharSearch(int,int,int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#isInViMoveOperationState()
	CALLEE: jline.console.ConsoleReader#switchCase(char)
CALLER: jline.console.ConsoleReader#viChangeCase(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viChangeChar(int,int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viDeleteTo(int,int,boolean)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viYankTo(int,int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
CALLER: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.gson.DefaultDateTypeAdapter#<init>(java.lang.String)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.text.DateFormat,java.text.DateFormat)
CALLER: com.google.gson.DefaultDateTypeAdapter#<init>(int,int)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.text.DateFormat,java.text.DateFormat)
CALLER: static com.google.gson.reflect.TypeToken#get(java.lang.Class)
	CALLEE: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
CALLER: static com.google.gson.TreeTypeAdapter#newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: com.google.gson.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class,com.google.gson.TreeTypeAdapter.1)
CALLER: static com.google.gson.internal.bind.ObjectTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.ObjectTypeAdapter.1#<init>()
CALLER: com.google.gson.Gson#longAdapter(com.google.gson.LongSerializationPolicy)
	CALLEE: com.google.gson.Gson.5#<init>(com.google.gson.Gson)
CALLER: com.google.gson.Gson#doubleAdapter(boolean)
	CALLEE: com.google.gson.Gson.3#<init>(com.google.gson.Gson)
CALLER: com.google.gson.Gson#floatAdapter(boolean)
	CALLEE: com.google.gson.Gson.4#<init>(com.google.gson.Gson)
CALLER: static com.google.gson.internal.bind.DateTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.DateTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.TimeTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.TimeTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.SqlDateTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.SqlDateTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.ArrayTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.ArrayTypeAdapter.1#<init>()
CALLER: gnu.trove.map.hash.TCustomHashMap.HashProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: static gnu.trove.impl.HashFunctions#hash(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.representer.Representer#representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.representer.Representer#checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareVersion(org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#getRepresentation()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#getArray()
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTagHandle(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTagPrefix(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#checkEmptyDocument()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
CALLER: javassist.ClassPool#find(java.lang.String)
	CALLEE: javassist.ClassPoolTail#find(java.lang.String)
CALLER: javassist.CtArray#<init>(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.CtClass#<init>(java.lang.String)
CALLER: javassist.CtClassType#<init>(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.CtClass#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.nodes.Tag#compareTo(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getValue()
CALLER: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#startsWith(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#useClassConstructor()
CALLER: gnu.trove.impl.hash.THashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: static io.netty.util.internal.logging.FormattingTuple#<clinit>()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String)
CALLER: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.FormattingTuple#trimmedCopy(java.lang.Object[])
CALLER: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#safeObjectAppend(java.lang.StringBuffer,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#booleanArrayAppend(java.lang.StringBuffer,boolean[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#byteArrayAppend(java.lang.StringBuffer,byte[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#charArrayAppend(java.lang.StringBuffer,char[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#shortArrayAppend(java.lang.StringBuffer,short[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#intArrayAppend(java.lang.StringBuffer,int[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#longArrayAppend(java.lang.StringBuffer,long[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#floatArrayAppend(java.lang.StringBuffer,float[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#doubleArrayAppend(java.lang.StringBuffer,double[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)
CALLER: joptsimple.OptionParserState.1#<init>()
	CALLEE: joptsimple.OptionParserState#<init>()
CALLER: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
	CALLEE: joptsimple.util.KeyValuePair#<init>(java.lang.String,java.lang.String)
CALLER: joptsimple.internal.AbbreviationMap#contains(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
CALLER: joptsimple.UnrecognizedOptionException#<init>(java.lang.String)
	CALLEE: joptsimple.OptionException#<init>(java.util.List)
CALLER: joptsimple.OptionParser#validateOptionCharacters(char[])
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#acceptsArguments()
	CALLEE: joptsimple.OptionSpecBuilder#acceptsArguments()
CALLER: joptsimple.OptionParser#specFor(char)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
CALLER: jline.console.ConsoleReader#stripAnsi(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
CALLER: jline.internal.InputStreamReader#read()
	CALLEE: jline.internal.InputStreamReader#isOpen()
	CALLEE: jline.internal.InputStreamReader#read(char[],int,int)
CALLER: jline.console.ConsoleReader#clearEcho(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.TerminalSupport#isEchoEnabled()
	CALLEE: jline.console.ConsoleReader#countEchoCharacters(int)
	CALLEE: jline.console.ConsoleReader#back(int)
CALLER: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
CALLER: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
	CALLEE: jline.console.ConsoleReader#backspaceAll()
CALLER: jline.console.CursorBuffer#write(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.CursorBuffer#isOverTyping()
CALLER: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#getAutoprintThreshold()
	CALLEE: jline.console.ConsoleReader#readCharacter(char[])
	CALLEE: jline.console.ConsoleReader#printColumns(java.util.Collection)
	CALLEE: jline.console.completer.CandidateListCompletionHandler.Messages#format(java.lang.Object[])
CALLER: jline.console.ConsoleReader#drawLine()
	CALLEE: jline.console.ConsoleReader#getPrompt()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#back(int)
CALLER: jline.console.ConsoleReader#backspace(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#yankPop()
	CALLEE: jline.console.KillRing#prev()
CALLER: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#add(java.lang.String)
	CALLEE: jline.console.KillRing#next()
CALLER: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.ConsoleReader#finishBuffer()
	CALLEE: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.ConsoleReader#expandEvents(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isHistoryEnabled()
	CALLEE: jline.console.history.MemoryHistory#add(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#next()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
	CALLEE: jline.TerminalSupport#hasWeirdWrap()
CALLER: jline.console.ConsoleReader#moveInternal(int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#addBackwards(java.lang.String)
	CALLEE: jline.console.KillRing#next()
CALLER: jline.console.ConsoleReader#delete()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#setBuffer(java.lang.String)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int,jline.console.history.MemoryHistory.1)
CALLER: jline.console.ConsoleReader#getCommentBegin()
	CALLEE: jline.console.ConsoleKeys#getVariable(java.lang.String)
CALLER: jline.console.CursorBuffer#copy()
	CALLEE: jline.console.CursorBuffer#<init>()
	CALLEE: jline.console.CursorBuffer#toString()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
CALLER: com.google.gson.Gson.5#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.3#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.4#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static gnu.trove.impl.HashFunctions#hash(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#createPropertySet(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#<init>(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.representer.Representer#checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.representer.Representer#resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView#<init>(gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.lang.Object)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.util.concurrent.Delayed)
CALLER: javassist.ClassPoolTail#find(java.lang.String)
	CALLEE: javassist.ClassClassPath#find(java.lang.String)
CALLER: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
CALLER: static io.netty.util.internal.logging.MessageFormatter#objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)
CALLER: joptsimple.OptionSpecBuilder#acceptsArguments()
	CALLEE: joptsimple.NoArgumentOptionSpec#acceptsArguments()
CALLER: jline.internal.InputStreamReader#read(char[],int,int)
	CALLEE: jline.internal.InputStreamReader#isOpen()
	CALLEE: jline.internal.NonBlockingInputStream#read(byte[],int,int)
CALLER: jline.console.ConsoleReader#countEchoCharacters(int)
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.console.ConsoleReader#getPrintableCharacters(int)
CALLER: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.ConsoleReader#backspaceAll()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: static jline.console.completer.CandidateListCompletionHandler.Messages#<clinit>()
	CALLEE: jline.console.completer.CandidateListCompletionHandler.Messages#<init>(java.lang.String,int)
CALLER: jline.console.ConsoleReader#readCharacter(char[])
	CALLEE: jline.console.ConsoleReader#readCharacter()
CALLER: jline.console.ConsoleReader#printColumns(java.util.Collection)
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.TerminalSupport#getWidth()
	CALLEE: jline.TerminalSupport#getHeight()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#isPaginationEnabled()
	CALLEE: jline.console.ConsoleReader#println(java.lang.CharSequence)
CALLER: jline.console.ConsoleReader#expandEvents(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#add(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.history.MemoryHistory#isAutoTrim()
	CALLEE: jline.console.history.MemoryHistory#isIgnoreDuplicates()
	CALLEE: jline.console.history.MemoryHistory#internalAdd(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int,jline.console.history.MemoryHistory.1)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory.1#write(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#reset(boolean)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEscapeCommand(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processOperatingSystemCommand(java.util.ArrayList)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#write(int)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#createPropertySet(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.Property#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.Property#isReadable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isReadable()
CALLER: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.nodes.AnchorNode#<init>(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getEndMark()
CALLER: org.yaml.snakeyaml.representer.Representer#resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#matches(java.lang.Class)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.util.concurrent.Delayed)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: jline.internal.NonBlockingInputStream#read(byte[],int,int)
	CALLEE: jline.internal.NonBlockingInputStream#read(long)
CALLER: jline.console.ConsoleReader#println(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.history.MemoryHistory#internalAdd(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#maybeResize()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int)
	CALLEE: static jline.console.history.MemoryHistory#access$100(jline.console.history.MemoryHistory)
CALLER: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
CALLER: org.fusesource.jansi.AnsiOutputStream#reset(boolean)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#write(byte[],int,int)
CALLER: org.fusesource.jansi.AnsiOutputStream#processEscapeCommand(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processUnknownExtension(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorDown(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorDown(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorDownLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorUpLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processScrollUp(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processScrollDown(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processDefaultTextColor()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processDefaultBackgroundColor()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processRestoreCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processRestoreCursorPosition()
CALLER: org.fusesource.jansi.AnsiOutputStream#processOperatingSystemCommand(java.util.ArrayList)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconNameAndWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconName(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processUnknownOperatingSystemCommand(int,java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#<init>(java.lang.reflect.Field)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#<init>(java.beans.PropertyDescriptor)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String,java.lang.Throwable)
CALLER: jline.internal.NonBlockingInputStream#read(long)
	CALLEE: jline.internal.NonBlockingInputStream#read(long,boolean)
CALLER: jline.console.history.MemoryHistory#maybeResize()
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#getMaxSize()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorDown(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.AnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory.1#write(int)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#write(int)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.AnsiOutputStream#processCursorDownLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory.1#write(int)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#write(int)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#height()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FillConsoleOutputCharacterW(long,char,int,org.fusesource.jansi.internal.Kernel32.COORD,int[])
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FillConsoleOutputCharacterW(long,char,int,org.fusesource.jansi.internal.Kernel32.COORD,int[])
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processRestoreCursorPosition()
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: javassist.CtClass.DelayedFileOutputStream#flush()
CALLER: org.fusesource.jansi.AnsiOutputStream#processChangeIconNameAndWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconName(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleTitle(java.lang.String)
CALLER: static org.yaml.snakeyaml.introspector.PropertyUtils.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.introspector.BeanAccess#values()
CALLER: org.yaml.snakeyaml.introspector.FieldProperty#<init>(java.lang.reflect.Field)
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
CALLER: org.yaml.snakeyaml.introspector.MethodProperty#<init>(java.beans.PropertyDescriptor)
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleCursorPosition(long,org.fusesource.jansi.internal.Kernel32.COORD)
CALLER: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#invertAttributeColors(short)
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleTextAttribute(long,short)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#flush()
CALLER: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.yaml.snakeyaml.introspector.Property#<init>(java.lang.String,java.lang.Class)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#next()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#previous()
CALLER: jline.console.completer.CandidateListCompletionHandler#complete(jline.console.ConsoleReader,java.util.List,int)
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: jline.console.ConsoleReader#drawLine()
	CALLEE: jline.console.CursorBuffer#toString()
	CALLEE: jline.console.ConsoleReader#getCursorBuffer()
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#setBuffer(jline.console.ConsoleReader,java.lang.CharSequence,int)
	CALLEE: jline.console.completer.CandidateListCompletionHandler#getUnambiguousCompletions(java.util.List)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding.1#close()
	CALLEE: static com.google.common.io.BaseEncoding.StandardBaseEncoding#access$000(com.google.common.io.BaseEncoding.StandardBaseEncoding)
	CALLEE: com.google.common.io.GwtWorkarounds.6#write(char)
	CALLEE: static com.google.common.io.BaseEncoding.StandardBaseEncoding#access$100(com.google.common.io.BaseEncoding.StandardBaseEncoding)
	CALLEE: com.google.common.io.GwtWorkarounds.6#close()
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#encode(int)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding.1#write(byte)
	CALLEE: static com.google.common.io.BaseEncoding.StandardBaseEncoding#access$000(com.google.common.io.BaseEncoding.StandardBaseEncoding)
	CALLEE: com.google.common.io.GwtWorkarounds.6#write(char)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#encode(int)
CALLER: org.yaml.snakeyaml.composer.Composer#getSingleNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeDocument()
	CALLEE: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#<init>(gnu.trove.map.hash.TCustomHashMap.EntryView,gnu.trove.map.hash.TCustomHashMap)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.Or#withToString(java.lang.String)
	CALLEE: com.google.common.base.CharMatcher.Or#<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String)
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#initialValue()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#initialValue()
CALLER: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: org.fusesource.jansi.Ansi#bold()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: org.fusesource.jansi.Ansi#boldOff()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: com.google.common.cache.CacheBuilder#initialCapacity(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
CALLER: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#moveToNextIndex()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView.1#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
CALLER: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#nextIndex()
CALLER: net.md_5.bungee.conf.YamlConfig#getServers()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: static net.md_5.bungee.api.ChatColor#translateAlternateColorCodes(char,java.lang.String)
	CALLEE: static net.md_5.bungee.Util#getAddr(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#constructServerInfo(java.lang.String,java.net.InetSocketAddress,java.lang.String,boolean)
CALLER: net.md_5.bungee.conf.YamlConfig#getList(java.lang.String,java.util.Collection)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getInt(java.lang.String,int)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getBoolean(java.lang.String,boolean)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getString(java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getListeners()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: static net.md_5.bungee.api.ChatColor#translateAlternateColorCodes(char,java.lang.String)
	CALLEE: static net.md_5.bungee.Util#getAddr(java.lang.String)
	CALLEE: static net.md_5.bungee.conf.YamlConfig.DefaultTabList#valueOf(java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#<init>(java.net.InetSocketAddress,java.lang.String,int,int,java.util.List,boolean,java.util.Map,java.lang.String,boolean,boolean,int,boolean)
CALLER: net.md_5.bungee.conf.YamlConfig#load()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#isEmpty()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: jline.console.ConsoleReader.1#run()
	CALLEE: jline.console.ConsoleReader#getOutput()
CALLER: io.netty.util.concurrent.DefaultThreadFactory.DefaultRunnableDecorator#run()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.2#run()
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#removeAll()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
CALLER: javassist.CtClass#setName(java.lang.String)
	CALLEE: javassist.CtClass#checkModify()
	CALLEE: javassist.CtClassType#checkModify()
CALLER: javassist.CtClassType#setName(java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClass#setName(java.lang.String)
	CALLEE: javassist.ClassPool#checkNotFrozen(java.lang.String)
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.CtClassType#nameReplaced()
	CALLEE: javassist.ClassPool#classNameChanged(java.lang.String,javassist.CtClass)
	CALLEE: javassist.bytecode.ClassFile#setName(java.lang.String)
CALLER: javassist.CtClass#detach()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#cacheCtClass(java.lang.String,javassist.CtClass,boolean)
	CALLEE: javassist.CtClass#getClassPool()
	CALLEE: javassist.CtArray#getClassPool()
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.ClassPool#removeCached(java.lang.String)
CALLER: javassist.CtClass#toBytecode()
	CALLEE: javassist.CtClass#toBytecode(java.io.DataOutputStream)
	CALLEE: javassist.CtClassType#toBytecode(java.io.DataOutputStream)
CALLER: javassist.CtClass#getDeclaredMethod(java.lang.String)
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
CALLER: javassist.CtClassType#getDeclaredMethod(java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
	CALLEE: javassist.CtClassType#getMembers()
	CALLEE: javassist.CtMember.Cache#lastMethod()
	CALLEE: javassist.CtMember.Cache#methodHead()
	CALLEE: javassist.CtMember#next()
	CALLEE: javassist.CtMember.Cache#getName()
	CALLEE: javassist.CtField#getName()
	CALLEE: javassist.CtMethod#getName()
	CALLEE: javassist.CtConstructor#getName()
CALLER: javassist.CtClass#setModifiers(int)
	CALLEE: javassist.CtClass#checkModify()
	CALLEE: javassist.CtClassType#checkModify()
CALLER: javassist.CtClassType#setModifiers(int)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#checkModify()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: static javassist.bytecode.AccessFlag#of(int)
	CALLEE: javassist.bytecode.ClassFile#setAccessFlags(int)
	CALLEE: javassist.bytecode.ClassFile#getInnerAccessFlags()
CALLER: javassist.CtArray#getModifiers()
	CALLEE: javassist.CtPrimitiveType#getModifiers()
	CALLEE: javassist.CtArray#getModifiers()
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtArray#getComponentType()
CALLER: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: static javassist.bytecode.AccessFlag#clear(int,int)
	CALLEE: static javassist.bytecode.AccessFlag#toModifier(int)
	CALLEE: javassist.bytecode.ClassFile#getInnerAccessFlags()
	CALLEE: javassist.bytecode.ClassFile#getAccessFlags()
CALLER: joptsimple.OptionParserState.1#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.ArgumentList#next()
	CALLEE: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getArguments()
CALLER: io.netty.util.Signal#toString()
	CALLEE: io.netty.util.UniqueName#name()
CALLER: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
CALLER: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
CALLER: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
CALLER: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
CALLER: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultMap()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#createEmptyJavaBean(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultList(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createArray(java.lang.Class,int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArray(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#wrapIfPrimitive(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$000()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$100(org.yaml.snakeyaml.constructor.SafeConstructor,int,java.lang.String,int)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[])
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$200()
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$300()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultList(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultMap()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: net.md_5.bungee.module.JenkinsModuleSource#retrieve(net.md_5.bungee.module.ModuleSpec,net.md_5.bungee.module.ModuleVersion)
	CALLEE: static net.md_5.bungee.Util#exception(java.lang.Throwable)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: static com.google.common.io.ByteStreams#toByteArray(java.io.InputStream)
	CALLEE: static com.google.common.io.Files#write(byte[],java.io.File)
CALLER: joptsimple.OptionException#getMessage()
	CALLEE: joptsimple.OptionException#localizedMessage(java.util.Locale)
CALLER: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
CALLER: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
CALLER: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#canEqual(java.lang.Object)
CALLER: io.netty.util.UniqueName#compareTo(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#compareTo(io.netty.util.UniqueName)
CALLER: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
CALLER: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EqProcedure#<init>(java.util.Map)
CALLER: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#canEqual(java.lang.Object)
CALLER: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: javassist.CtMember#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: javassist.CtClass#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
CALLER: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
	CALLEE: net.md_5.bungee.api.plugin.Command#canEqual(java.lang.Object)
CALLER: io.netty.util.UniqueName#toString()
	CALLEE: io.netty.util.UniqueName#name()
CALLER: net.md_5.bungee.command.CommandReload#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.BungeeCord#startListeners()
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: net.md_5.bungee.api.event.ProxyReloadEvent#<init>(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#callEvent(net.md_5.bungee.api.plugin.Event)
CALLER: net.md_5.bungee.command.CommandEnd#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: net.md_5.bungee.BungeeCord#stop()
	CALLEE: static com.google.common.base.Joiner#on(char)
	CALLEE: net.md_5.bungee.BungeeCord#stop(java.lang.String)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Object[])
CALLER: net.md_5.bungee.command.CommandIP#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getPlayer(java.lang.String)
CALLER: net.md_5.bungee.command.CommandBungee#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
CALLER: net.md_5.bungee.command.CommandPerms#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getConfigurationAdapter()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#getGroups()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getPermissions(java.lang.String)
	CALLEE: static net.md_5.bungee.Util#csv(java.lang.Iterable)
CALLER: net.md_5.bungee.command.PlayerCommand#onTabComplete(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.BungeeCord#getPlayers()
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#<init>(net.md_5.bungee.command.PlayerCommand,java.lang.String)
	CALLEE: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#<init>(net.md_5.bungee.command.PlayerCommand)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
CALLER: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.introspector.Property#compareTo(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#compareTo(org.yaml.snakeyaml.introspector.Property)
CALLER: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getTag()
CALLER: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.introspector.FieldProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.MethodProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#getLine()
	CALLEE: org.yaml.snakeyaml.error.Mark#getColumn()
	CALLEE: org.yaml.snakeyaml.error.Mark#getName()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: static jline.console.history.MemoryHistory#access$200(jline.console.history.MemoryHistory)
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#<init>(int,java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: static jline.console.history.MemoryHistory#access$200(jline.console.history.MemoryHistory)
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#<init>(int,java.lang.CharSequence)
CALLER: static jline.console.completer.CandidateListCompletionHandler#setBuffer(jline.console.ConsoleReader,java.lang.CharSequence,int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#getCursorBuffer()
CALLER: jline.console.completer.CandidateListCompletionHandler#getUnambiguousCompletions(java.util.List)
	CALLEE: jline.console.completer.CandidateListCompletionHandler#startsWith(java.lang.String,java.lang.String[])
CALLER: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
CALLER: static org.yaml.snakeyaml.events.Event.ID#<clinit>()
	CALLEE: org.yaml.snakeyaml.events.Event.ID#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#is(org.yaml.snakeyaml.events.Event.ID)
CALLER: org.yaml.snakeyaml.composer.Composer#composeDocument()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#<init>(gnu.trove.map.hash.TCustomHashMap.EntryView,gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectNode(boolean,boolean,boolean)
CALLER: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyLateListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#<init>(io.netty.util.concurrent.GenericFutureListener,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#add(io.netty.util.concurrent.GenericFutureListener)
CALLER: gnu.trove.impl.hash.THashIterator#moveToNextIndex()
	CALLEE: gnu.trove.impl.hash.THashIterator#nextIndex()
CALLER: gnu.trove.impl.hash.THashIterator#nextIndex()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
CALLER: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#save()
CALLER: net.md_5.bungee.BungeeCord#constructServerInfo(java.lang.String,java.net.InetSocketAddress,java.lang.String,boolean)
	CALLEE: net.md_5.bungee.BungeeServerInfo#<init>(java.lang.String,java.net.InetSocketAddress,java.lang.String,boolean)
CALLER: static net.md_5.bungee.conf.YamlConfig.DefaultTabList#<clinit>()
	CALLEE: net.md_5.bungee.conf.YamlConfig.DefaultTabList#<init>(java.lang.String,int)
CALLER: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#save()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#remove(java.lang.Object)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor.2#run()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#compareAndSet(java.lang.Object,int,int)
	CALLEE: io.netty.util.internal.MpscLinkedQueue#isEmpty()
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.MpscLinkedQueue#size()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#updateLastExecutionTime()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#run()
	CALLEE: io.netty.channel.nio.NioEventLoop#run()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$100()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$200(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$000()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#cleanup()
	CALLEE: io.netty.channel.nio.NioEventLoop#cleanup()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$300(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$400(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$500(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#set(java.lang.Object,int)
CALLER: static io.netty.util.concurrent.FastThreadLocal#removeAll()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#getIfSet()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#remove()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#indexedVariable(int)
CALLER: static io.netty.util.concurrent.FastThreadLocal#<clinit>()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#nextVariableIndex()
CALLER: javassist.CtClass#checkModify()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClass#isFrozen()
	CALLEE: javassist.CtClassType#isFrozen()
CALLER: javassist.CtClassType#checkModify()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#isFrozen()
CALLER: javassist.ClassPool#checkNotFrozen(java.lang.String)
	CALLEE: javassist.ClassPool#getCached(java.lang.String)
	CALLEE: javassist.CtClass#isFrozen()
	CALLEE: javassist.CtClassType#isFrozen()
CALLER: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
	CALLEE: javassist.ClassPool#compress()
	CALLEE: javassist.bytecode.ClassFile#<init>(java.io.DataInputStream)
	CALLEE: javassist.ClassPool#openClassfile(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#getName()
CALLER: javassist.CtClassType#nameReplaced()
	CALLEE: javassist.CtClassType#hasMemberCache()
	CALLEE: javassist.CtMember.Cache#lastMethod()
	CALLEE: javassist.CtMember.Cache#methodHead()
	CALLEE: javassist.CtMember#next()
	CALLEE: javassist.CtMember#nameReplaced()
	CALLEE: javassist.CtMethod#nameReplaced()
CALLER: javassist.ClassPool#classNameChanged(java.lang.String,javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#getCached(java.lang.String)
	CALLEE: javassist.ClassPool#cacheCtClass(java.lang.String,javassist.CtClass,boolean)
	CALLEE: javassist.ClassPool#checkNotFrozen(java.lang.String)
	CALLEE: javassist.ClassPool#removeCached(java.lang.String)
CALLER: javassist.CtClass#toBytecode(java.io.DataOutputStream)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String)
CALLER: javassist.CtClassType#toBytecode(java.io.DataOutputStream)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.CtClassType#isModified()
	CALLEE: javassist.CtClassType#checkPruned(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#compact()
	CALLEE: javassist.CtClassType#modifyClassConstructor(javassist.bytecode.ClassFile)
	CALLEE: javassist.CtClassType#modifyConstructors(javassist.bytecode.ClassFile)
	CALLEE: javassist.CtClassType#dumpClassFile(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.ClassFile#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.ClassFile#prune()
	CALLEE: javassist.ClassPool#writeClassfile(java.lang.String,java.io.OutputStream)
	CALLEE: javassist.CannotCompileException#<init>(javassist.NotFoundException)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.Throwable)
CALLER: javassist.CtClassType#getMembers()
	CALLEE: javassist.CtMember.Cache#<init>(javassist.CtClassType)
	CALLEE: javassist.CtClassType#makeFieldCache(javassist.CtMember.Cache)
	CALLEE: javassist.CtClassType#makeBehaviorCache(javassist.CtMember.Cache)
CALLER: javassist.CtArray#getComponentType()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#get(java.lang.String)
CALLER: org.yaml.snakeyaml.events.ScalarEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
CALLER: org.yaml.snakeyaml.events.CollectionStartEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.PromiseTask#toStringBuilder()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#getClassForNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getListPropertyType(java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getMapKeyType(java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getMapValueType(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setUseClassConstructor(java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setOnlyKeyType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#setListType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setTypes(java.lang.Class,java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.CtMember#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#getCalendar()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNumber#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNumber#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
	CALLEE: javassist.CtClass#toString()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultMap()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#createEmptyJavaBean(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet(int)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultList(int)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructArray(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createArray(java.lang.Class,int)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#wrapIfPrimitive(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor#access$100(org.yaml.snakeyaml.constructor.SafeConstructor,int,java.lang.String,int)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#createNumber(int,java.lang.String,int)
CALLER: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[])
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[],int,int)
CALLER: static com.google.common.io.ByteStreams#toByteArray(java.io.InputStream)
	CALLEE: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
CALLER: static com.google.common.io.Files#write(byte[],java.io.File)
	CALLEE: static com.google.common.io.Files#asByteSink(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: com.google.common.io.ByteSink#write(byte[])
CALLER: static com.google.common.io.Files#<clinit>()
	CALLEE: com.google.common.io.Files.2#<init>()
CALLER: joptsimple.OptionException#localizedMessage(java.util.Locale)
	CALLEE: joptsimple.OptionException#formattedMessage(java.util.Locale)
CALLER: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
CALLER: net.md_5.bungee.api.event.ProxyReloadEvent#<init>(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.api.plugin.Event#<init>()
CALLER: net.md_5.bungee.api.plugin.PluginManager#callEvent(net.md_5.bungee.api.plugin.Event)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.event.EventBus#post(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Event#postCall()
CALLER: net.md_5.bungee.BungeeCord#stop()
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.BungeeCord#stop(java.lang.String)
CALLER: static com.google.common.base.Joiner#on(char)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#stop(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord.4#<init>(net.md_5.bungee.BungeeCord,java.lang.String,java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getPlayer(java.lang.String)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getPermissions(java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: static net.md_5.bungee.Util#csv(java.lang.Iterable)
	CALLEE: static net.md_5.bungee.Util#format(java.lang.Iterable,java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getPlayers()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
CALLER: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.8#<init>(java.lang.Iterable,com.google.common.base.Function)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#produce()
CALLER: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeScalarNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeSequenceNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeMappingNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTwoStepsConstruction(boolean)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectNode(boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectAlias()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectScalar()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getFlowStyle()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptySequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectFlowSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectBlockSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectFlowMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectBlockMapping()
CALLER: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isDone0(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#notifyLateListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#futureListenerStackDepth()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setFutureListenerStackDepth(int)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListeners#<init>(io.netty.util.concurrent.DefaultPromise)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListenerNotifier#<init>(io.netty.util.concurrent.DefaultPromise,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#executor()
CALLER: net.md_5.bungee.conf.YamlConfig#save()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#updateLastExecutionTime()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.channel.epoll.EpollEventLoop#run()
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: static io.netty.channel.epoll.Native#eventFdWrite(int,long)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(int,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWait(boolean)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#processReady(io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: io.netty.channel.epoll.EpollEventArray#increase()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#closeAll()
CALLER: io.netty.channel.nio.NioEventLoop#run()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: io.netty.channel.nio.NioEventLoop#selectNow()
	CALLEE: io.netty.channel.nio.NioEventLoop#select(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeys()
	CALLEE: io.netty.channel.nio.NioEventLoop#closeAll()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#cancelScheduledTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runShutdownHooks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
CALLER: io.netty.channel.epoll.EpollEventLoop#cleanup()
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.epoll.EpollEventArray#free()
CALLER: io.netty.channel.nio.NioEventLoop#cleanup()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: javassist.ClassPool#compress()
	CALLEE: javassist.CtClass#compress()
	CALLEE: javassist.CtClassType#compress()
CALLER: javassist.bytecode.ClassFile#<init>(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ClassFile#read(java.io.DataInputStream)
CALLER: javassist.ClassPool#openClassfile(java.lang.String)
	CALLEE: javassist.ClassPoolTail#openClassfile(java.lang.String)
CALLER: javassist.CannotCompileException#<init>(java.lang.String)
	CALLEE: javassist.CannotCompileException#initCause(java.lang.Throwable)
CALLER: javassist.CtClassType#checkPruned(java.lang.String)
	CALLEE: javassist.CtClass#getName()
CALLER: javassist.bytecode.ClassFile#compact()
	CALLEE: javassist.bytecode.ClassFile#compact0()
	CALLEE: static javassist.bytecode.AttributeInfo#copyAll(java.util.ArrayList,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.MethodInfo#compact(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.FieldInfo#compact(javassist.bytecode.ConstPool)
CALLER: javassist.CtClassType#modifyClassConstructor(javassist.bytecode.ClassFile)
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.compiler.Javac#<init>(javassist.bytecode.Bytecode,javassist.CtClass)
	CALLEE: javassist.CtClassType#modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int)
CALLER: javassist.CtClassType#modifyConstructors(javassist.bytecode.ClassFile)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.Throwable)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.ClassFile#getMethods()
	CALLEE: static javassist.bytecode.Descriptor#getParameterTypes(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.CtClassType#makeFieldInitializer(javassist.bytecode.Bytecode,javassist.CtClass[])
	CALLEE: static javassist.CtClassType#insertAuxInitializer(javassist.bytecode.CodeAttribute,javassist.bytecode.Bytecode,int)
	CALLEE: javassist.bytecode.MethodInfo#rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#isConstructor()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxLocals()
CALLER: javassist.CtClassType#dumpClassFile(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.ClassFile#write(java.io.DataOutputStream)
	CALLEE: javassist.CtClass#makeFileOutput(java.lang.String)
CALLER: javassist.bytecode.ClassFile#write(java.io.DataOutputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#writeAll(java.util.ArrayList,java.io.DataOutputStream)
	CALLEE: javassist.bytecode.ConstPool#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.FieldInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.MethodInfo#write(java.io.DataOutputStream)
CALLER: javassist.bytecode.ClassFile#prune()
	CALLEE: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FieldInfo#prune(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.MethodInfo#prune(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ClassFile#compact0()
	CALLEE: javassist.bytecode.ClassFile#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.ClassPool#writeClassfile(java.lang.String,java.io.OutputStream)
	CALLEE: javassist.ClassPoolTail#writeClassfile(java.lang.String,java.io.OutputStream)
CALLER: javassist.CannotCompileException#<init>(javassist.NotFoundException)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String,java.lang.Throwable)
CALLER: javassist.CannotCompileException#<init>(java.lang.Throwable)
	CALLEE: javassist.CannotCompileException#initCause(java.lang.Throwable)
CALLER: javassist.CtMember.Cache#<init>(javassist.CtClassType)
	CALLEE: javassist.CtMember#<init>(javassist.CtClass)
CALLER: javassist.CtClassType#makeFieldCache(javassist.CtMember.Cache)
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.bytecode.ClassFile#getFields()
	CALLEE: javassist.CtField#<init>(javassist.bytecode.FieldInfo,javassist.CtClass)
	CALLEE: javassist.CtMember.Cache#addField(javassist.CtMember)
CALLER: javassist.CtClassType#makeBehaviorCache(javassist.CtMember.Cache)
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.bytecode.ClassFile#getMethods()
	CALLEE: javassist.CtMethod#<init>(javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.CtMember.Cache#addMethod(javassist.CtMember)
	CALLEE: javassist.CtConstructor#<init>(javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.CtMember.Cache#addConstructor(javassist.CtMember)
	CALLEE: javassist.bytecode.MethodInfo#isMethod()
CALLER: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.ClassPool#get0(java.lang.String,boolean)
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
	CALLEE: javassist.CtClass#incGetCounter()
	CALLEE: javassist.CtClassType#incGetCounter()
CALLER: io.netty.util.concurrent.PromiseTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
CALLER: org.yaml.snakeyaml.constructor.Constructor#getClassForNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#getClassForName(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getClassName()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setValue(java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#isMerged()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#<init>(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#<init>(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String)
CALLER: static org.yaml.snakeyaml.constructor.Constructor.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNumber#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNumber#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
CALLER: static com.google.common.io.Files#asByteSink(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files.1)
CALLER: com.google.common.io.Files.2#<init>()
	CALLEE: com.google.common.collect.TreeTraverser#<init>()
CALLER: joptsimple.OptionException#formattedMessage(java.util.Locale)
	CALLEE: joptsimple.MissingRequiredOptionsException#messageArguments()
	CALLEE: joptsimple.IllegalOptionSpecificationException#messageArguments()
	CALLEE: joptsimple.UnrecognizedOptionException#messageArguments()
CALLER: com.google.common.base.Joiner#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static net.md_5.bungee.Util#format(java.lang.Iterable,java.lang.String)
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: com.google.common.collect.Iterables.8#<init>(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#produce()
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
CALLER: org.yaml.snakeyaml.composer.Composer#composeScalarNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getStyle()
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
CALLER: org.yaml.snakeyaml.composer.Composer#composeSequenceNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getFlowStyle()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setEndMark(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
CALLER: org.yaml.snakeyaml.composer.Composer#composeMappingNode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getFlowStyle()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setEndMark(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setMerged(boolean)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectAlias()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
CALLER: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#processTag()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInNonPlainScalar()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectScalar()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processScalar()
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectFlowSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectBlockSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectFlowMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectBlockMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: net.md_5.bungee.BungeeCord.2#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.util.concurrent.Future)
CALLER: static io.netty.util.concurrent.DefaultPromise#execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#execute(java.lang.Runnable)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#isEmpty()
CALLER: static io.netty.channel.epoll.Native#epollWait(int,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: io.netty.channel.epoll.EpollEventArray#memoryAddress()
	CALLEE: static io.netty.channel.epoll.Native#epollWait0(int,long,int,int)
CALLER: io.netty.channel.epoll.EpollEventLoop#epollWait(boolean)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(int,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#delayNanos(long)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#hasScheduledTasks()
CALLER: io.netty.channel.epoll.EpollEventLoop#processReady(io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.channel.epoll.EpollEventArray#fd(int)
	CALLEE: static io.netty.channel.epoll.Native#eventFdRead(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#events(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#get(int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlDel(int,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: io.netty.channel.nio.NioEventLoop#pollTask()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: io.netty.channel.nio.NioEventLoop#pollTask()
CALLER: io.netty.channel.epoll.EpollEventArray#increase()
	CALLEE: static io.netty.channel.epoll.EpollEventArray#allocate(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#free()
CALLER: io.netty.channel.epoll.EpollEventLoop#closeAll()
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(int,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#size()
	CALLEE: io.netty.util.collection.IntObjectHashMap#entries()
	CALLEE: io.netty.util.collection.IntObjectHashMap#iterator()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#value()
CALLER: io.netty.channel.nio.NioEventLoop#select(boolean)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#delayNanos(long)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#hasScheduledTasks()
	CALLEE: io.netty.channel.nio.NioEventLoop#rebuildSelector()
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeys()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#flip()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeysOptimized(java.nio.channels.SelectionKey[])
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeysPlain(java.util.Set)
CALLER: io.netty.channel.nio.NioEventLoop#closeAll()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#cancelScheduledTasks()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#isNullOrEmpty(java.util.Queue)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runShutdownHooks()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#run()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
CALLER: io.netty.channel.epoll.EpollEventArray#free()
	CALLEE: static io.netty.util.internal.PlatformDependent#freeMemory(long)
CALLER: javassist.bytecode.ClassFile#read(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#<init>(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#setThisClassInfo(int)
	CALLEE: javassist.bytecode.FieldInfo#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ClassFile#addField2(javassist.bytecode.FieldInfo)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ClassFile#addMethod2(javassist.bytecode.MethodInfo)
	CALLEE: static javassist.bytecode.AttributeInfo#read(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ClassFile#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
CALLER: javassist.ClassPoolTail#openClassfile(java.lang.String)
	CALLEE: javassist.ClassClassPath#openClassfile(java.lang.String)
CALLER: javassist.bytecode.ClassFile#compact0()
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.ConstPool#<init>(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getThisClassInfo()
	CALLEE: javassist.bytecode.ClassFile#getSuperclass()
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
CALLER: static javassist.bytecode.AttributeInfo#copyAll(java.util.ArrayList,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.ByteVector#<init>()
	CALLEE: javassist.bytecode.ExceptionTable#<init>(javassist.bytecode.ConstPool)
CALLER: javassist.compiler.Javac#<init>(javassist.bytecode.Bytecode,javassist.CtClass)
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.compiler.JvstCodeGen#<init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool)
	CALLEE: javassist.compiler.SymbolTable#<init>()
CALLER: javassist.CtClassType#modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int)
	CALLEE: javassist.bytecode.CodeAttribute#getMaxStack()
	CALLEE: javassist.bytecode.CodeAttribute#iterator()
	CALLEE: javassist.bytecode.CodeAttribute#setMaxStack(int)
	CALLEE: javassist.bytecode.CodeIterator#insert(javassist.bytecode.ExceptionTable,int)
	CALLEE: javassist.bytecode.CodeIterator#insertEx(byte[])
	CALLEE: javassist.CtClassType#hasMemberCache()
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.Throwable)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.CtConstructor#<init>(javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.CtMember.Cache#addConstructor(javassist.CtMember)
	CALLEE: javassist.bytecode.ClassFile#getStaticInitializer()
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#setMaxStack(int)
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.Bytecode#get()
	CALLEE: javassist.bytecode.Bytecode#getExceptionTable()
	CALLEE: javassist.bytecode.MethodInfo#rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxLocals()
	CALLEE: javassist.bytecode.CodeAttribute#setMaxLocals(int)
CALLER: static javassist.bytecode.Descriptor#getParameterTypes(java.lang.String,javassist.ClassPool)
	CALLEE: static javassist.bytecode.Descriptor#numOfParameters(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int)
CALLER: javassist.CtClassType#makeFieldInitializer(javassist.bytecode.Bytecode,javassist.CtClass[])
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: javassist.compiler.Javac#<init>(javassist.bytecode.Bytecode,javassist.CtClass)
	CALLEE: javassist.compiler.Javac#recordParams(javassist.CtClass[],boolean)
	CALLEE: javassist.CannotCompileException#<init>(javassist.compiler.CompileError)
CALLER: static javassist.CtClassType#insertAuxInitializer(javassist.bytecode.CodeAttribute,javassist.bytecode.Bytecode,int)
	CALLEE: javassist.bytecode.Bytecode#get()
	CALLEE: javassist.bytecode.Bytecode#getExceptionTable()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxStack()
	CALLEE: javassist.bytecode.CodeAttribute#iterator()
	CALLEE: javassist.bytecode.CodeAttribute#setMaxStack(int)
	CALLEE: javassist.bytecode.CodeIterator#insert(javassist.bytecode.ExceptionTable,int)
	CALLEE: javassist.bytecode.CodeIterator#insertEx(byte[])
	CALLEE: javassist.bytecode.CodeIterator#skipThisConstructor()
	CALLEE: javassist.bytecode.CodeIterator#skipSuperConstructor()
CALLER: javassist.CtClass#makeFileOutput(java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClass.DelayedFileOutputStream#<init>(java.lang.String)
CALLER: static javassist.bytecode.AttributeInfo#writeAll(java.util.ArrayList,java.io.DataOutputStream)
	CALLEE: javassist.bytecode.AttributeInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.CodeAttribute#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.StackMapTable#write(java.io.DataOutputStream)
CALLER: javassist.bytecode.ClassFile#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: javassist.ClassPoolTail#writeClassfile(java.lang.String,java.io.OutputStream)
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
	CALLEE: javassist.ClassPoolTail#openClassfile(java.lang.String)
	CALLEE: static javassist.ClassPoolTail#copyStream(java.io.InputStream,java.io.OutputStream)
CALLER: javassist.CannotCompileException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String)
	CALLEE: javassist.CannotCompileException#initCause(java.lang.Throwable)
CALLER: javassist.CtField#<init>(javassist.bytecode.FieldInfo,javassist.CtClass)
	CALLEE: javassist.CtMember#<init>(javassist.CtClass)
CALLER: javassist.CtMethod#<init>(javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.CtBehavior#<init>(javassist.CtClass,javassist.bytecode.MethodInfo)
CALLER: javassist.CtConstructor#<init>(javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.CtBehavior#<init>(javassist.CtClass,javassist.bytecode.MethodInfo)
CALLER: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files.1)
	CALLEE: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[])
CALLER: joptsimple.MissingRequiredOptionsException#messageArguments()
	CALLEE: joptsimple.OptionException#multipleOptionString()
CALLER: joptsimple.IllegalOptionSpecificationException#messageArguments()
	CALLEE: joptsimple.OptionException#singleOptionString()
CALLER: joptsimple.UnrecognizedOptionException#messageArguments()
	CALLEE: joptsimple.OptionException#singleOptionString()
CALLER: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getStyle()
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter#processScalar()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.DumperOptions.ScalarStyle#getChar()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#createStyle(java.lang.Character)
	CALLEE: org.yaml.snakeyaml.DumperOptions#calculateScalarStyle(org.yaml.snakeyaml.emitter.ScalarAnalysis,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writePlain(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeDoubleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeSingleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeFolded(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLiteral(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$200(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$300(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$400(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.MpscLinkedQueue#isEmpty()
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#headRef()
	CALLEE: io.netty.util.internal.MpscLinkedQueueTailRef#tailRef()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#delayNanos(long)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#delayNanos(long)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#hasScheduledTasks()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
CALLER: io.netty.channel.epoll.EpollEventArray#fd(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#getInt(long)
CALLER: io.netty.channel.epoll.EpollEventArray#events(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#getInt(long)
CALLER: io.netty.util.collection.IntObjectHashMap#get(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#indexOf(int)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#toExternal(java.lang.Object)
CALLER: static io.netty.channel.epoll.Native#epollCtlDel(int,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlDel0(int,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#hasScheduledTasks()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
	CALLEE: io.netty.util.internal.MpscLinkedQueue#add(java.lang.Object)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#poll()
CALLER: io.netty.channel.nio.NioEventLoop#pollTask()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
CALLER: io.netty.channel.nio.NioEventLoop#rebuildSelector()
	CALLEE: io.netty.channel.nio.NioEventLoop#openSelector()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
	CALLEE: io.netty.channel.nio.NioEventLoop.1#<init>(io.netty.channel.nio.NioEventLoop)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeysOptimized(java.nio.channels.SelectionKey[])
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#flip()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeysPlain(java.util.Set)
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
CALLER: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#run()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: io.netty.util.concurrent.PromiseTask#setUncancellableInternal()
	CALLEE: io.netty.util.concurrent.PromiseTask#setSuccessInternal(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isCancelled()
	CALLEE: io.netty.util.concurrent.PromiseTask#setFailureInternal(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#isShutdown()
CALLER: static io.netty.util.internal.PlatformDependent#freeMemory(long)
	CALLEE: static io.netty.util.internal.PlatformDependent0#freeMemory(long)
CALLER: javassist.bytecode.ConstPool#<init>(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#read(java.io.DataInputStream)
CALLER: javassist.bytecode.FieldInfo#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.FieldInfo#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.FieldInfo#read(java.io.DataInputStream)
CALLER: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.MethodInfo#read(java.io.DataInputStream)
CALLER: static javassist.bytecode.AttributeInfo#read(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.StackMapTable#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstantAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.DeprecatedAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ExceptionsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.InnerClassesAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.LineNumberAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.LocalVariableTypeAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.MethodParametersAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.SignatureAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.SourceFileAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.StackMap#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.ClassFile#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: static javassist.bytecode.Descriptor#toJavaName(java.lang.String)
CALLER: javassist.bytecode.ConstPool#<init>(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.LongVector#<init>()
	CALLEE: javassist.bytecode.ConstPool#addItem0(javassist.bytecode.ConstInfo)
CALLER: javassist.bytecode.ClassFile#getSuperclass()
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
CALLER: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.ClassInfo#<init>(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
CALLER: javassist.compiler.JvstCodeGen#<init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool)
	CALLEE: javassist.compiler.MemberCodeGen#<init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool)
	CALLEE: javassist.compiler.JvstTypeChecker#<init>(javassist.CtClass,javassist.ClassPool,javassist.compiler.JvstCodeGen)
	CALLEE: javassist.compiler.CodeGen#setTypeChecker(javassist.compiler.TypeChecker)
CALLER: javassist.compiler.SymbolTable#<init>()
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
CALLER: javassist.bytecode.ClassFile#getStaticInitializer()
	CALLEE: javassist.bytecode.ClassFile#getMethod(java.lang.String)
CALLER: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.ByteVector#add(int)
CALLER: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
CALLER: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.Bytecode#get()
	CALLEE: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,int,int,byte[],javassist.bytecode.ExceptionTable)
CALLER: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.MethodInfo#removeCodeAttribute()
CALLER: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.ClassFile#testExistingMethod(javassist.bytecode.MethodInfo)
CALLER: javassist.bytecode.Bytecode#get()
	CALLEE: javassist.bytecode.ByteVector#copy()
CALLER: javassist.bytecode.MethodInfo#rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.ClassFile#getMajorVersion()
	CALLEE: javassist.bytecode.MethodInfo#rebuildStackMap(javassist.ClassPool)
	CALLEE: javassist.bytecode.MethodInfo#rebuildStackMapForME(javassist.ClassPool)
CALLER: static javassist.bytecode.Descriptor#toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toPrimitiveClass(char)
CALLER: javassist.compiler.Javac#recordParams(javassist.CtClass[],boolean)
	CALLEE: javassist.compiler.JvstCodeGen#recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)
CALLER: javassist.CannotCompileException#<init>(javassist.compiler.CompileError)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: javassist.compiler.CompileError#getMessage()
CALLER: javassist.CtBehavior#<init>(javassist.CtClass,javassist.bytecode.MethodInfo)
	CALLEE: javassist.CtMember#<init>(javassist.CtClass)
CALLER: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.Property#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isWritable()
CALLER: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.ByteSink#<init>()
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Object[])
CALLER: joptsimple.OptionException#multipleOptionString()
	CALLEE: joptsimple.OptionException#singleOptionString(java.lang.String)
CALLER: joptsimple.OptionException#singleOptionString()
	CALLEE: joptsimple.OptionException#singleOptionString(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#<init>(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#createStyle(java.lang.Character)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writePlain(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeDoubleQuoted(java.lang.String,boolean)
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(char)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeSingleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeFolded(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeLiteral(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: static io.netty.util.internal.PlatformDependent#getInt(long)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getInt(long)
CALLER: io.netty.util.collection.IntObjectHashMap#indexOf(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#hashIndex(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#probeNext(int)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
CALLER: io.netty.util.internal.MpscLinkedQueue#add(java.lang.Object)
	CALLEE: io.netty.util.internal.MpscLinkedQueue#offer(java.lang.Object)
CALLER: io.netty.util.internal.MpscLinkedQueue#poll()
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#headRef()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#peekNode()
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#lazySetHeadRef(io.netty.util.internal.MpscLinkedQueueNode)
	CALLEE: io.netty.util.internal.MpscLinkedQueueNode#unlink()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#addTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#startThread()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#removeTask(java.lang.Runnable)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#reject()
	CALLEE: io.netty.channel.SingleThreadEventLoop#wakesUpForTask(java.lang.Runnable)
CALLER: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
CALLER: io.netty.util.concurrent.PromiseTask#setUncancellableInternal()
	CALLEE: io.netty.util.concurrent.DefaultPromise#setUncancellable()
CALLER: io.netty.util.concurrent.PromiseTask#setSuccessInternal(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#isCancelled()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isCancelled0(java.lang.Object)
CALLER: io.netty.util.concurrent.PromiseTask#setFailureInternal(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
CALLER: javassist.bytecode.ConstPool#read(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#addItem0(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.LongVector#<init>(int)
	CALLEE: javassist.bytecode.ConstPool#readOne(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#addConstInfoPadding()
CALLER: javassist.bytecode.FieldInfo#read(java.io.DataInputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#read(javassist.bytecode.ConstPool,java.io.DataInputStream)
CALLER: javassist.bytecode.MethodInfo#read(java.io.DataInputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#read(javassist.bytecode.ConstPool,java.io.DataInputStream)
CALLER: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.AnnotationDefaultAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.BootstrapMethodsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#read(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,byte[])
	CALLEE: javassist.bytecode.ExceptionTable#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
CALLER: javassist.bytecode.ConstantAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.DeprecatedAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.ExceptionsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.InnerClassesAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.LineNumberAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.LocalVariableTypeAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.MethodParametersAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.AnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.TypeAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.SignatureAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.SourceFileAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.StackMap#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: javassist.bytecode.StackMapTable#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)
CALLER: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.LongVector#elementAt(int)
CALLER: javassist.bytecode.ConstPool#addItem0(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.LongVector#addElement(javassist.bytecode.ConstInfo)
CALLER: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.Utf8Info#<init>(java.lang.String,int)
CALLER: javassist.bytecode.ClassInfo#<init>(int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.LongVector#addElement(javassist.bytecode.ConstInfo)
	CALLEE: static javassist.bytecode.ConstPool#makeItemsCache(javassist.bytecode.LongVector)
CALLER: javassist.compiler.MemberCodeGen#<init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool)
	CALLEE: javassist.compiler.CodeGen#<init>(javassist.bytecode.Bytecode)
	CALLEE: javassist.compiler.MemberResolver#<init>(javassist.ClassPool)
CALLER: javassist.compiler.JvstTypeChecker#<init>(javassist.CtClass,javassist.ClassPool,javassist.compiler.JvstCodeGen)
	CALLEE: javassist.compiler.TypeChecker#<init>(javassist.CtClass,javassist.ClassPool)
CALLER: javassist.bytecode.ClassFile#getMethod(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getName()
CALLER: javassist.bytecode.ByteVector#add(int)
	CALLEE: javassist.bytecode.Bytecode#addGap(int)
CALLER: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,int,int,byte[],javassist.bytecode.ExceptionTable)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
CALLER: javassist.bytecode.MethodInfo#removeCodeAttribute()
	CALLEE: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.ClassFile#testExistingMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.ClassFile#getName()
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: static javassist.bytecode.ClassFile#isDuplicated(javassist.bytecode.MethodInfo,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,java.util.ListIterator)
	CALLEE: javassist.bytecode.DuplicateMemberException#<init>(java.lang.String)
CALLER: javassist.bytecode.MethodInfo#rebuildStackMap(javassist.ClassPool)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: static javassist.bytecode.stackmap.MapMaker#make(javassist.ClassPool,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.CodeAttribute#setAttribute(javassist.bytecode.StackMapTable)
CALLER: javassist.bytecode.MethodInfo#rebuildStackMapForME(javassist.ClassPool)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: static javassist.bytecode.stackmap.MapMaker#make2(javassist.ClassPool,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.CodeAttribute#setAttribute(javassist.bytecode.StackMap)
CALLER: org.yaml.snakeyaml.introspector.MissingProperty#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.Property#<init>(java.lang.String,java.lang.Class)
CALLER: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
CALLER: static org.yaml.snakeyaml.scanner.Constant#<clinit>()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: io.netty.util.internal.MpscLinkedQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.MpscLinkedQueue.DefaultNode#<init>(java.lang.Object)
	CALLEE: io.netty.util.internal.MpscLinkedQueueTailRef#getAndSetTailRef(io.netty.util.internal.MpscLinkedQueueNode)
CALLER: io.netty.util.internal.MpscLinkedQueue#peekNode()
	CALLEE: io.netty.util.internal.MpscLinkedQueueHeadRef#headRef()
	CALLEE: io.netty.util.internal.MpscLinkedQueueTailRef#tailRef()
	CALLEE: io.netty.util.internal.MpscLinkedQueueNode#next()
CALLER: io.netty.util.internal.MpscLinkedQueueHeadRef#lazySetHeadRef(io.netty.util.internal.MpscLinkedQueueNode)
	CALLEE: io.netty.util.internal.UnsafeAtomicReferenceFieldUpdater#lazySet(java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.MpscLinkedQueueNode#unlink()
	CALLEE: io.netty.util.internal.MpscLinkedQueueNode#setNext(io.netty.util.internal.MpscLinkedQueueNode)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#addTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#add(java.lang.Object)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#reject()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#startThread()
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#get(java.lang.Object)
	CALLEE: io.netty.util.internal.UnsafeAtomicIntegerFieldUpdater#compareAndSet(java.lang.Object,int,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#removeTask(java.lang.Runnable)
	CALLEE: io.netty.util.internal.MpscLinkedQueue#remove(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#setUncancellable()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isDone0(java.lang.Object)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isCancelled0(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess0(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListeners()
CALLER: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListeners()
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure0(java.lang.Throwable)
CALLER: javassist.bytecode.ConstPool#readOne(java.io.DataInputStream)
	CALLEE: javassist.bytecode.ConstPool#addItem0(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.Utf8Info#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.IntegerInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.FloatInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.LongInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.DoubleInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ClassInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.StringInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.FieldrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MethodrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.NameAndTypeInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MethodHandleInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MethodTypeInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#<init>(java.io.DataInputStream,int)
CALLER: javassist.bytecode.ConstPool#addConstInfoPadding()
	CALLEE: javassist.bytecode.ConstPool#addItem0(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.ConstInfoPadding#<init>(int)
CALLER: javassist.bytecode.ExceptionTable#<init>(javassist.bytecode.ConstPool,java.io.DataInputStream)
	CALLEE: javassist.bytecode.ExceptionTableEntry#<init>(int,int,int,int)
CALLER: javassist.bytecode.Utf8Info#<init>(java.lang.String,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: static javassist.bytecode.ConstPool#makeItemsCache(javassist.bytecode.LongVector)
	CALLEE: javassist.bytecode.LongVector#elementAt(int)
CALLER: javassist.compiler.CodeGen#<init>(javassist.bytecode.Bytecode)
	CALLEE: javassist.compiler.ast.Visitor#<init>()
CALLER: javassist.compiler.TypeChecker#<init>(javassist.CtClass,javassist.ClassPool)
	CALLEE: javassist.compiler.MemberResolver#<init>(javassist.ClassPool)
	CALLEE: javassist.compiler.ast.Visitor#<init>()
CALLER: javassist.bytecode.Bytecode#addGap(int)
	CALLEE: javassist.bytecode.ByteVector#addGap(int)
CALLER: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: static javassist.bytecode.ClassFile#isDuplicated(javassist.bytecode.MethodInfo,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,java.util.ListIterator)
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: static javassist.bytecode.Descriptor#eqParamTypes(java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.ClassFile#notBridgeMethod(javassist.bytecode.MethodInfo)
CALLER: javassist.bytecode.DuplicateMemberException#<init>(java.lang.String)
	CALLEE: javassist.CannotCompileException#<init>(java.lang.String)
CALLER: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
CALLER: static javassist.bytecode.stackmap.MapMaker#make(javassist.ClassPool,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: static javassist.bytecode.stackmap.TypedBlock#makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)
	CALLEE: javassist.bytecode.stackmap.MapMaker#<init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.stackmap.MapMaker#make(javassist.bytecode.stackmap.TypedBlock[],byte[])
	CALLEE: javassist.bytecode.BadBytecode#<init>(javassist.bytecode.MethodInfo,java.lang.Throwable)
	CALLEE: javassist.bytecode.stackmap.MapMaker#toStackMap(javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.CodeAttribute#getCode()
CALLER: static javassist.bytecode.stackmap.MapMaker#make2(javassist.ClassPool,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: static javassist.bytecode.stackmap.TypedBlock#makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)
	CALLEE: javassist.bytecode.stackmap.MapMaker#<init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.stackmap.MapMaker#make(javassist.bytecode.stackmap.TypedBlock[],byte[])
	CALLEE: javassist.bytecode.BadBytecode#<init>(javassist.bytecode.MethodInfo,java.lang.Throwable)
	CALLEE: javassist.bytecode.MethodInfo#getConstPool()
	CALLEE: javassist.bytecode.stackmap.MapMaker#toStackMap2(javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.CodeAttribute#getCode()
CALLER: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
CALLER: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementNotNull(java.lang.Object,int)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
CALLER: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: io.netty.util.internal.MpscLinkedQueueNode#setNext(io.netty.util.internal.MpscLinkedQueueNode)
	CALLEE: io.netty.util.internal.UnsafeAtomicReferenceFieldUpdater#lazySet(java.lang.Object,java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#setSuccess0(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.util.concurrent.DefaultPromise#hasWaiters()
CALLER: io.netty.util.concurrent.DefaultPromise#notifyListeners()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#futureListenerStackDepth()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setFutureListenerStackDepth(int)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#<init>(io.netty.util.concurrent.DefaultPromise,io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: io.netty.util.concurrent.DefaultPromise.2#<init>(io.netty.util.concurrent.DefaultPromise,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#executor()
CALLER: io.netty.util.concurrent.DefaultPromise#setFailure0(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise.CauseHolder#<init>(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.util.concurrent.DefaultPromise#hasWaiters()
CALLER: javassist.bytecode.Utf8Info#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.IntegerInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.FloatInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.LongInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.DoubleInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.ClassInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.StringInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.FieldrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(java.io.DataInputStream,int)
CALLER: javassist.bytecode.MethodrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(java.io.DataInputStream,int)
CALLER: javassist.bytecode.InterfaceMethodrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(java.io.DataInputStream,int)
CALLER: javassist.bytecode.NameAndTypeInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.MethodHandleInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.MethodTypeInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.InvokeDynamicInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.ConstInfoPadding#<init>(int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,int,byte[])
CALLER: static javassist.bytecode.ClassFile#notBridgeMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
CALLER: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: static javassist.bytecode.stackmap.TypedBlock#makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.MethodInfo#getConstPool()
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#<init>()
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#make(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
	CALLEE: javassist.bytecode.MethodInfo#isConstructor()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxLocals()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxStack()
	CALLEE: javassist.bytecode.ConstPool#getClassName()
	CALLEE: javassist.bytecode.stackmap.TypedBlock#initFirstBlock(int,int,java.lang.String,java.lang.String,boolean,boolean)
CALLER: javassist.bytecode.stackmap.MapMaker#<init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.MethodInfo#getConstPool()
	CALLEE: static javassist.bytecode.stackmap.TypedBlock#getRetType(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.Tracer#<init>(javassist.ClassPool,javassist.bytecode.ConstPool,int,int,java.lang.String)
	CALLEE: javassist.bytecode.CodeAttribute#getMaxLocals()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxStack()
CALLER: javassist.bytecode.stackmap.MapMaker#make(javassist.bytecode.stackmap.TypedBlock[],byte[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#make(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#findDeadCatchers(byte[],javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#fixTypes(byte[],javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String,java.lang.Throwable)
CALLER: javassist.bytecode.BadBytecode#<init>(javassist.bytecode.MethodInfo,java.lang.Throwable)
	CALLEE: javassist.bytecode.MethodInfo#getConstPool()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.ConstPool#getClassName()
CALLER: javassist.bytecode.stackmap.MapMaker#toStackMap(javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#<init>(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#sameFrame(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#stackMapDiff(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#toStackMapBody(javassist.bytecode.StackMapTable.Writer,javassist.bytecode.stackmap.TypedBlock,int,int,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.StackMapTable.Writer#toStackMapTable(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#resetNumLocals()
CALLER: javassist.bytecode.stackmap.MapMaker#toStackMap2(javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.StackMap.Writer#<init>()
	CALLEE: javassist.bytecode.StackMap.Writer#write16bit(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#writeStackFrame(javassist.bytecode.StackMap.Writer,javassist.bytecode.ConstPool,int,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.StackMap.Writer#toStackMap(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#resetNumLocals()
CALLER: static com.google.common.collect.EmptyImmutableSet#<clinit>()
	CALLEE: com.google.common.collect.EmptyImmutableSet#<init>()
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static com.google.common.collect.ObjectArrays#arraysCopyOf(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.ObjectArrays#newArray(java.lang.Object[],int)
CALLER: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static io.netty.util.concurrent.DefaultPromise#notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#size()
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#listeners()
CALLER: javassist.bytecode.MemberrefInfo#<init>(java.io.DataInputStream,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.stackmap.TypedBlock.Maker#<init>()
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#<init>()
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#make(javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.MethodInfo#getCodeAttribute()
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)
	CALLEE: javassist.bytecode.CodeAttribute#getExceptionTable()
	CALLEE: javassist.bytecode.CodeAttribute#iterator()
	CALLEE: javassist.bytecode.CodeIterator#getCodeLength()
CALLER: javassist.bytecode.MethodInfo#isConstructor()
	CALLEE: javassist.bytecode.MethodInfo#getName()
CALLER: javassist.bytecode.stackmap.Tracer#<init>(javassist.ClassPool,javassist.bytecode.ConstPool,int,int,java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
CALLER: javassist.bytecode.stackmap.MapMaker#make(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#make(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#copyTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#traceException(byte[],javassist.bytecode.stackmap.BasicBlock.Catch)
	CALLEE: javassist.bytecode.stackmap.Tracer#doOpcode(int,byte[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean)
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#<init>(javassist.bytecode.stackmap.MapMaker)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#alreadySet()
CALLER: javassist.bytecode.stackmap.MapMaker#findDeadCatchers(byte[],javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#alreadySet()
CALLER: javassist.bytecode.stackmap.MapMaker#fixTypes(byte[],javassist.bytecode.stackmap.TypedBlock[])
	CALLEE: javassist.bytecode.stackmap.TypedBlock#alreadySet()
	CALLEE: javassist.bytecode.stackmap.TypeData#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#dfs(java.util.ArrayList,int,javassist.ClassPool)
CALLER: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
CALLER: javassist.bytecode.StackMapTable.Writer#sameFrame(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
CALLER: static javassist.bytecode.stackmap.MapMaker#stackMapDiff(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: static javassist.bytecode.stackmap.MapMaker#stackMapEq(javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[],int)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#diffSize(javassist.bytecode.stackmap.TypeData[],int,int)
CALLER: javassist.bytecode.stackmap.MapMaker#toStackMapBody(javassist.bytecode.StackMapTable.Writer,javassist.bytecode.stackmap.TypedBlock,int,int,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.StackMapTable.Writer#sameFrame(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#chopFrame(int,int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#appendFrame(int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#sameLocals(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#fullFrame(int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeTag()
CALLER: javassist.bytecode.StackMapTable.Writer#toStackMapTable(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.StackMapTable.Writer#toByteArray()
	CALLEE: javassist.bytecode.StackMapTable#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: javassist.bytecode.stackmap.MapMaker#writeStackFrame(javassist.bytecode.StackMap.Writer,javassist.bytecode.ConstPool,int,javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.StackMap.Writer#write16bit(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#writeVerifyTypeInfo(javassist.bytecode.StackMap.Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int)
CALLER: javassist.bytecode.StackMap.Writer#toStackMap(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.StackMap#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: com.google.common.collect.EmptyImmutableSet#<init>()
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.ImmutableSet#<init>()
	CALLEE: com.google.common.collect.ImmutableCollection#<init>()
CALLER: static com.google.common.collect.ObjectArrays#newArray(java.lang.Object[],int)
	CALLEE: static com.google.common.collect.Platform#newArray(java.lang.Object[],int)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMarks(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeBlocks(java.util.HashMap)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#addCatchers(javassist.bytecode.stackmap.BasicBlock[],javassist.bytecode.ExceptionTable)
CALLER: javassist.bytecode.stackmap.MapMaker#traceException(byte[],javassist.bytecode.stackmap.BasicBlock.Catch)
	CALLEE: javassist.bytecode.stackmap.MapMaker#make(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean)
	CALLEE: javassist.bytecode.stackmap.MapMaker#<init>(javassist.bytecode.stackmap.MapMaker)
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.MapMaker#toExceptionType(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#alreadySet()
CALLER: javassist.bytecode.stackmap.Tracer#doOpcode(int,byte[])
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: javassist.bytecode.stackmap.Tracer#doOpcode0_53(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doOpcode54_95(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doOpcode96_147(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doOpcode148_201(int,byte[],int)
CALLER: javassist.bytecode.stackmap.MapMaker#mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean)
	CALLEE: javassist.bytecode.stackmap.MapMaker#merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int)
CALLER: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock)
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[])
CALLER: javassist.bytecode.stackmap.MapMaker#<init>(javassist.bytecode.stackmap.MapMaker)
	CALLEE: javassist.bytecode.stackmap.Tracer#<init>(javassist.bytecode.stackmap.Tracer)
CALLER: javassist.bytecode.stackmap.MapMaker#fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock)
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.stackmap.MapMaker#recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#toExceptionType(int)
	CALLEE: javassist.bytecode.stackmap.MapMaker#recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.TypeData#join()
CALLER: static javassist.bytecode.stackmap.MapMaker#stackMapEq(javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[],int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#eq(javassist.bytecode.stackmap.TypeData)
CALLER: static javassist.bytecode.stackmap.MapMaker#diffSize(javassist.bytecode.stackmap.TypeData[],int,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
CALLER: javassist.bytecode.StackMapTable.Writer#chopFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
CALLER: javassist.bytecode.stackmap.MapMaker#fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeTag()
	CALLEE: static javassist.bytecode.stackmap.MapMaker#diffSize(javassist.bytecode.stackmap.TypeData[],int,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeData(javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.StackMapTable.Writer#appendFrame(int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#writeTypeInfo(int,int)
CALLER: javassist.bytecode.StackMapTable.Writer#sameLocals(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#writeTypeInfo(int,int)
CALLER: javassist.bytecode.StackMapTable.Writer#fullFrame(int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#writeTypeInfo(int,int)
CALLER: javassist.bytecode.StackMapTable.Writer#toByteArray()
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.StackMapTable#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.stackmap.MapMaker#writeVerifyTypeInfo(javassist.bytecode.StackMap.Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.StackMap.Writer#write16bit(int)
	CALLEE: javassist.bytecode.StackMap.Writer#writeVerifyTypeInfo(int,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
CALLER: javassist.bytecode.StackMap#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeMarks(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeArray(javassist.bytecode.stackmap.BasicBlock,javassist.bytecode.stackmap.BasicBlock)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeGoto(java.util.HashMap,int,int,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeJsr(java.util.HashMap,int,int,int)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeArray(int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark0(java.util.HashMap,int,boolean,boolean)
	CALLEE: javassist.bytecode.CodeIterator#begin()
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: javassist.bytecode.ExceptionTable#handlerPc(int)
	CALLEE: javassist.bytecode.ExceptionTable#startPc(int)
	CALLEE: javassist.bytecode.CodeIterator#byteAt(int)
	CALLEE: javassist.bytecode.CodeIterator#s32bitAt(int)
	CALLEE: javassist.bytecode.CodeIterator#s16bitAt(int)
	CALLEE: javassist.bytecode.CodeIterator#next()
	CALLEE: javassist.bytecode.CodeIterator#hasNext()
	CALLEE: javassist.bytecode.CodeIterator#move(int)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeBlocks(java.util.HashMap)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeArray(int)
	CALLEE: static javassist.bytecode.stackmap.BasicBlock.Maker#getBBlock(javassist.bytecode.stackmap.BasicBlock.Mark)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeBlock(int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeArray(javassist.bytecode.stackmap.BasicBlock)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#addCatchers(javassist.bytecode.stackmap.BasicBlock[],javassist.bytecode.ExceptionTable)
	CALLEE: static javassist.bytecode.stackmap.BasicBlock#find(javassist.bytecode.stackmap.BasicBlock[],int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Catch#<init>(javassist.bytecode.stackmap.BasicBlock,int,javassist.bytecode.stackmap.BasicBlock.Catch)
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: javassist.bytecode.ExceptionTable#handlerPc(int)
	CALLEE: javassist.bytecode.ExceptionTable#startPc(int)
	CALLEE: javassist.bytecode.ExceptionTable#catchType(int)
	CALLEE: javassist.bytecode.ExceptionTable#endPc(int)
CALLER: static javassist.bytecode.stackmap.TypeTag#<clinit>()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#<init>(java.lang.String,int)
CALLER: javassist.bytecode.stackmap.MapMaker#toExceptionType(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.MapMaker#merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#merge(javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.Tracer#doOpcode0_53(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#<init>()
	CALLEE: javassist.bytecode.stackmap.Tracer#doLDC(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doALOAD(int)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#make(javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.Tracer#doOpcode54_95(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.Tracer#doASTORE(int)
	CALLEE: static javassist.bytecode.stackmap.TypeData#aastore(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.Tracer#doDUP_XX(int,int)
CALLER: javassist.bytecode.stackmap.Tracer#doOpcode148_201(int,byte[],int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitThrow(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#doWIDE(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#doMultiANewArray(int,byte[])
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readS16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitBranch(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitGoto(int,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitJSR(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#visitRET(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#read32bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitTableSwitch(int,byte[],int,int,int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitLookupSwitch(int,byte[],int,int,int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitReturn(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#doGetField(int,byte[],boolean)
	CALLEE: javassist.bytecode.stackmap.Tracer#doPutField(int,byte[],boolean)
	CALLEE: javassist.bytecode.stackmap.Tracer#doInvokeMethod(int,byte[],boolean)
	CALLEE: javassist.bytecode.stackmap.Tracer#doInvokeIntfMethod(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#doInvokeDynamic(int,byte[])
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#<init>(int,java.lang.String)
	CALLEE: javassist.bytecode.stackmap.Tracer#doNEWARRAY(int,byte[])
CALLER: static javassist.bytecode.stackmap.MapMaker#validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
CALLER: static javassist.bytecode.stackmap.MapMaker#recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: static javassist.bytecode.stackmap.MapMaker#validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#join()
	CALLEE: javassist.bytecode.stackmap.TypeData#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#join()
CALLER: javassist.bytecode.stackmap.MapMaker#recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
	CALLEE: static javassist.bytecode.stackmap.MapMaker#recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.TypedBlock#setStackMap(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[])
CALLER: javassist.bytecode.stackmap.Tracer#<init>(javassist.bytecode.stackmap.Tracer)
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
CALLER: javassist.bytecode.StackMapTable.Writer#writeTypeInfo(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#write16(int)
CALLER: javassist.bytecode.StackMap.Writer#writeVerifyTypeInfo(int,int)
	CALLEE: javassist.bytecode.StackMap.Writer#write16bit(int)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark0(java.util.HashMap,int,boolean,boolean)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeArray(javassist.bytecode.stackmap.BasicBlock,javassist.bytecode.stackmap.BasicBlock)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeArray(int)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark0(java.util.HashMap,int,boolean,boolean)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Mark#setJump(javassist.bytecode.stackmap.BasicBlock[],int,boolean)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeGoto(java.util.HashMap,int,int,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark(java.util.HashMap,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Maker#makeArray(javassist.bytecode.stackmap.BasicBlock)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeJsr(java.util.HashMap,int,int,int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.JsrBytecode#<init>()
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeMark0(java.util.HashMap,int,boolean,boolean)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeBlock(int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock.Mark#<init>(int)
CALLER: javassist.bytecode.stackmap.TypedBlock.Maker#makeBlock(int)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#<init>(int)
CALLER: javassist.bytecode.stackmap.BasicBlock.Maker#makeArray(javassist.bytecode.stackmap.BasicBlock)
	CALLEE: javassist.bytecode.stackmap.TypedBlock.Maker#makeArray(int)
CALLER: static javassist.bytecode.stackmap.BasicBlock#find(javassist.bytecode.stackmap.BasicBlock[],int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.TypeData.BasicType#<init>(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.TypeData#<init>()
CALLER: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData#<init>()
CALLER: javassist.bytecode.stackmap.TypeData.NullType#<init>()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.Tracer#doLDC(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getTag(int)
CALLER: javassist.bytecode.stackmap.Tracer#doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXLOAD(int,javassist.bytecode.stackmap.TypeData)
CALLER: static javassist.bytecode.stackmap.TypeData.ArrayElement#make(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#<init>(javassist.bytecode.stackmap.TypeData.AbsTypeVar)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#typeName(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.stackmap.Tracer#doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXSTORE(int,javassist.bytecode.stackmap.TypeData)
CALLER: static javassist.bytecode.stackmap.TypeData#aastore(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#make(javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayType#make(javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#access$000(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.Tracer#doGetField(int,byte[],boolean)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#setFieldTarget(boolean,int)
	CALLEE: javassist.bytecode.stackmap.Tracer#pushMemberType(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getFieldrefType(int)
CALLER: javassist.bytecode.stackmap.Tracer#doPutField(int,byte[],boolean)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#setFieldTarget(boolean,int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.Tracer#getFieldClassName(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.ConstPool#getFieldrefType(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.Tracer#doInvokeMethod(int,byte[],boolean)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#pushMemberType(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.Tracer#checkParamTypes(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.Tracer#constructorCalled(javassist.bytecode.stackmap.TypeData,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#offset()
	CALLEE: javassist.bytecode.ConstPool#getMethodrefClassName(int)
	CALLEE: javassist.bytecode.ConstPool#getMethodrefType(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#offset()
CALLER: javassist.bytecode.stackmap.Tracer#doInvokeIntfMethod(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#pushMemberType(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.Tracer#checkParamTypes(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.ConstPool#getInterfaceMethodrefClassName(int)
	CALLEE: javassist.bytecode.ConstPool#getInterfaceMethodrefType(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.Tracer#doInvokeDynamic(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#pushMemberType(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.Tracer#checkParamTypes(java.lang.String,int)
	CALLEE: javassist.bytecode.ConstPool#getInvokeDynamicType(int)
CALLER: javassist.bytecode.stackmap.TypeData.UninitData#<init>(int,java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.Tracer#doNEWARRAY(int,byte[])
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.Tracer#doWIDE(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doALOAD(int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doASTORE(int)
	CALLEE: javassist.bytecode.stackmap.Tracer#visitRET(int,byte[])
	CALLEE: javassist.bytecode.stackmap.Tracer#doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.Tracer#doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.Tracer#doMultiANewArray(int,byte[])
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.stackmap.TypeData.BasicType#join()
	CALLEE: javassist.bytecode.stackmap.TypeData#join()
CALLER: javassist.bytecode.stackmap.BasicBlock.JsrBytecode#<init>()
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.TypedBlock#<init>(int)
	CALLEE: javassist.bytecode.stackmap.BasicBlock#<init>(int)
CALLER: javassist.bytecode.stackmap.Tracer#doXLOAD(int,javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#<init>(javassist.bytecode.stackmap.TypeData.AbsTypeVar)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#<init>()
CALLER: javassist.bytecode.stackmap.Tracer#doXSTORE(int,javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
CALLER: static javassist.bytecode.stackmap.TypeData.ArrayType#make(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#<init>(javassist.bytecode.stackmap.TypeData.AbsTypeVar)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayType#typeName(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#arrayType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: static javassist.bytecode.stackmap.TypeData.ArrayElement#access$000(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#typeName(java.lang.String)
CALLER: javassist.bytecode.stackmap.Tracer#setFieldTarget(boolean,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.ConstPool#getFieldrefClassName(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.Tracer#pushMemberType(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.Tracer#getFieldClassName(java.lang.String,int)
CALLER: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String,boolean)
CALLER: javassist.bytecode.stackmap.Tracer#checkParamTypes(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.Tracer#checkParamTypes(java.lang.String,int)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.Tracer#constructorCalled(javassist.bytecode.stackmap.TypeData,int)
	CALLEE: javassist.bytecode.stackmap.TypeData#constructorCalled(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#constructorCalled(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#constructorCalled(int)
CALLER: javassist.bytecode.stackmap.Tracer#doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXLOAD(int,javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.Tracer#doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.stackmap.Tracer#doXSTORE(int,javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.TypeData#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#<init>(javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.TypeData.AbsTypeVar#<init>()
	CALLEE: javassist.bytecode.stackmap.TypeData#<init>()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayType#<init>(javassist.bytecode.stackmap.TypeData.AbsTypeVar)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#<init>()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#<init>(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#<init>()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
CALLER: gnu.trove.map.hash.TCustomHashMap.MapBackedView#size()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: net.md_5.bungee.BungeeCord.4#run()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: static net.md_5.bungee.BungeeCord#access$100(net.md_5.bungee.BungeeCord)
	CALLEE: static net.md_5.bungee.BungeeCord#access$200(net.md_5.bungee.BungeeCord)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutorGroup#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: static net.md_5.bungee.BungeeCord#access$300(net.md_5.bungee.BungeeCord)
	CALLEE: static net.md_5.bungee.BungeeCord#access$400(net.md_5.bungee.BungeeCord)
	CALLEE: static net.md_5.bungee.BungeeCord#access$500(net.md_5.bungee.BungeeCord)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#getPlugins()
	CALLEE: static com.google.common.collect.Lists#reverse(java.util.List)
	CALLEE: net.md_5.bungee.BungeeCord#getScheduler()
	CALLEE: com.google.common.collect.Lists.ReverseList#iterator()
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.plugin.Plugin)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
CALLER: io.netty.util.concurrent.GlobalEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#addTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#startThread()
CALLER: gnu.trove.map.hash.TCustomHashMap.EqProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#equals(java.lang.Object)
	CALLEE: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.ClassInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.Utf8Info#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.IntegerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.FloatInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.LongInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.DoubleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.StringInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MemberrefInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.NameAndTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodHandleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#equals(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2010(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2200(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2010(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2200(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
CALLER: com.google.common.cache.CacheBuilder#expireAfterWrite(long,java.util.concurrent.TimeUnit)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
CALLER: joptsimple.OptionSpecBuilder#isRequired()
	CALLEE: joptsimple.NoArgumentOptionSpec#isRequired()
CALLER: io.netty.util.internal.logging.JdkLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.io.ByteSink#write(byte[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.io.Closer#create()
	CALLEE: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.io.Closer#close()
	CALLEE: com.google.common.io.Closer#rethrow(java.lang.Throwable)
	CALLEE: com.google.common.io.Closer#register(java.io.Closeable)
CALLER: javassist.bytecode.ConstPool#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.LongVector#elementAt(int)
	CALLEE: javassist.bytecode.ClassInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.Utf8Info#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.IntegerInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.FloatInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.LongInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.DoubleInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.StringInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.MemberrefInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.NameAndTypeInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.MethodHandleInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.MethodTypeInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.ConstInfoPadding#write(java.io.DataOutputStream)
CALLER: io.netty.util.internal.MpscLinkedQueue#size()
	CALLEE: io.netty.util.internal.MpscLinkedQueue#peekNode()
CALLER: net.md_5.bungee.api.event.ProxyReloadEvent#hashCode()
	CALLEE: net.md_5.bungee.api.event.ProxyReloadEvent#getSender()
CALLER: org.yaml.snakeyaml.nodes.Node#useClassConstructor()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#isSecondary()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isResolved()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#isCompatible(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.Tag#getClassName()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#decode(java.lang.String)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#setOnlyKeyType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#setListType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#setTypes(java.lang.Class,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: javassist.compiler.JvstCodeGen#recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.MemberCodeGen#getThisName()
	CALLEE: javassist.compiler.JvstCodeGen#recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,javassist.compiler.SymbolTable)
CALLER: javassist.CtClass.DelayedFileOutputStream#flush()
	CALLEE: javassist.CtClass.DelayedFileOutputStream#init()
CALLER: javassist.CtClass.DelayedFileOutputStream#write(byte[],int,int)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#init()
CALLER: javassist.CtClass.DelayedFileOutputStream#write(int)
	CALLEE: javassist.CtClass.DelayedFileOutputStream#init()
CALLER: javassist.CtClass.DelayedFileOutputStream#close()
	CALLEE: javassist.CtClass.DelayedFileOutputStream#init()
CALLER: gnu.trove.map.hash.TCustomHashMap#remove(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#removeAt(int)
CALLER: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
CALLER: javassist.bytecode.stackmap.TypeData.UninitData#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#<init>(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#copy()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#<init>(javassist.bytecode.stackmap.TypeData.UninitData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#copy()
CALLER: javassist.bytecode.AttributeInfo#getName()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#close()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#getMethods()
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.BootstrapMethodsAttribute.BootstrapMethod[])
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute.RuntimeCopyException#<init>(java.lang.String)
CALLER: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.ConstantAttribute#getConstantValue()
	CALLEE: javassist.bytecode.ConstantAttribute#<init>(javassist.bytecode.ConstPool,int)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#<init>(javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#methodIndex()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#className()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#methodName()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#methodDescriptor()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.ExceptionsAttribute,java.util.Map)
CALLER: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AttributeInfo#get()
	CALLEE: javassist.bytecode.InnerClassesAttribute#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AttributeInfo#get()
	CALLEE: javassist.bytecode.LocalVariableAttribute#makeThisAttr(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.LocalVariableTypeAttribute#makeThisAttr(javassist.bytecode.ConstPool,byte[])
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.MethodParametersAttribute#size()
	CALLEE: javassist.bytecode.MethodParametersAttribute#name(int)
	CALLEE: javassist.bytecode.MethodParametersAttribute#accessFlags(int)
	CALLEE: javassist.bytecode.MethodParametersAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String[],int[])
CALLER: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#close()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
	CALLEE: javassist.bytecode.AnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#close()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#parameters()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#close()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SignatureAttribute#getSignature()
	CALLEE: javassist.bytecode.SignatureAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
CALLER: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SourceFileAttribute#getFileName()
	CALLEE: javassist.bytecode.SourceFileAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
CALLER: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap.Copier#<init>(javassist.bytecode.StackMap,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap.Copier#visit()
	CALLEE: javassist.bytecode.StackMap.Copier#getStackMap()
CALLER: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.StackMapTable.Copier#<init>(javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#doit()
	CALLEE: javassist.bytecode.StackMapTable.RuntimeCopyException#<init>(java.lang.String)
CALLER: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
CALLER: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#getDefaultValue()
	CALLEE: javassist.bytecode.annotation.ByteMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.CharMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.DoubleMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.FloatMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.IntegerMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.LongMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ShortMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.BooleanMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.StringMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ArrayMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.AnnotationMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ClassMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.EnumMemberValue#toString()
CALLER: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#getAnnotations()
	CALLEE: javassist.bytecode.annotation.Annotation#toString()
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#getAnnotations()
	CALLEE: javassist.bytecode.annotation.Annotation#toString()
CALLER: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
CALLER: javassist.bytecode.CodeAttribute#setAttribute(javassist.bytecode.StackMapTable)
	CALLEE: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.CodeAttribute#setAttribute(javassist.bytecode.StackMap)
	CALLEE: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.CodeAttribute#iterator()
	CALLEE: javassist.bytecode.CodeIterator#<init>(javassist.bytecode.CodeAttribute)
CALLER: javassist.bytecode.CodeAttribute#write(java.io.DataOutputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#writeAll(java.util.ArrayList,java.io.DataOutputStream)
	CALLEE: javassist.bytecode.CodeAttribute#length()
	CALLEE: javassist.bytecode.ExceptionTable#write(java.io.DataOutputStream)
CALLER: javassist.bytecode.StackMapTable#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.AttributeInfo#write(java.io.DataOutputStream)
CALLER: javassist.bytecode.MethodInfo#compact(javassist.bytecode.ConstPool)
	CALLEE: static javassist.bytecode.AttributeInfo#copyAll(java.util.ArrayList,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
CALLER: javassist.bytecode.FieldInfo#prune(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#<init>(javassist.bytecode.ConstPool,int)
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.bytecode.FieldInfo#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.FieldInfo#getConstantValue()
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.CtMember#toString()
	CALLEE: javassist.CtMember.Cache#getModifiers()
	CALLEE: static javassist.Modifier#toString(int)
	CALLEE: javassist.CtMember.Cache#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtField#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtBehavior#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtField#getModifiers()
	CALLEE: javassist.CtBehavior#getModifiers()
	CALLEE: javassist.CtMethod#hashCode()
CALLER: javassist.bytecode.FieldInfo#compact(javassist.bytecode.ConstPool)
	CALLEE: static javassist.bytecode.AttributeInfo#copyAll(java.util.ArrayList,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
CALLER: javassist.bytecode.FieldInfo#write(java.io.DataOutputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#writeAll(java.util.ArrayList,java.io.DataOutputStream)
CALLER: javassist.bytecode.MethodInfo#isMethod()
	CALLEE: javassist.bytecode.MethodInfo#getName()
CALLER: javassist.bytecode.MethodInfo#prune(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodInfo#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getExceptionsAttribute()
CALLER: javassist.bytecode.MethodInfo#write(java.io.DataOutputStream)
	CALLEE: static javassist.bytecode.AttributeInfo#writeAll(java.util.ArrayList,java.io.DataOutputStream)
CALLER: com.google.common.base.Joiner#join(java.lang.Object[])
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: com.google.common.collect.Iterables.8#iterator()
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
CALLER: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: javassist.bytecode.stackmap.TypedBlock#toString2(java.lang.StringBuffer)
CALLER: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#getAddress()
	CALLEE: static com.google.common.base.Objects#equal(java.lang.Object,java.lang.Object)
CALLER: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getAddress()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getName()
	CALLEE: net.md_5.bungee.BungeeServerInfo#isRestricted()
CALLER: javassist.bytecode.ConstPool#getClassName()
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
CALLER: javassist.bytecode.ClassFile#getInnerAccessFlags()
	CALLEE: javassist.bytecode.ClassFile#getName()
	CALLEE: javassist.bytecode.ClassFile#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.InnerClassesAttribute#tableLength()
	CALLEE: javassist.bytecode.InnerClassesAttribute#innerClass(int)
	CALLEE: javassist.bytecode.InnerClassesAttribute#accessFlags(int)
CALLER: javassist.bytecode.ClassFile#setName(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#renameClass(java.lang.String,java.lang.String)
CALLER: javassist.bytecode.ConstInfo#toString()
	CALLEE: javassist.bytecode.ClassInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.Utf8Info#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.IntegerInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.FloatInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.LongInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.DoubleInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.StringInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.MemberrefInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.NameAndTypeInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.MethodHandleInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.MethodTypeInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.ConstInfoPadding#print(java.io.PrintWriter)
CALLER: javassist.bytecode.ConstPool#getTag(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.ClassInfo#getTag()
	CALLEE: javassist.bytecode.Utf8Info#getTag()
	CALLEE: javassist.bytecode.IntegerInfo#getTag()
	CALLEE: javassist.bytecode.FloatInfo#getTag()
	CALLEE: javassist.bytecode.LongInfo#getTag()
	CALLEE: javassist.bytecode.DoubleInfo#getTag()
	CALLEE: javassist.bytecode.StringInfo#getTag()
	CALLEE: javassist.bytecode.FieldrefInfo#getTag()
	CALLEE: javassist.bytecode.MethodrefInfo#getTag()
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#getTag()
	CALLEE: javassist.bytecode.NameAndTypeInfo#getTag()
	CALLEE: javassist.bytecode.MethodHandleInfo#getTag()
	CALLEE: javassist.bytecode.MethodTypeInfo#getTag()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#getTag()
	CALLEE: javassist.bytecode.ConstInfoPadding#getTag()
CALLER: javassist.bytecode.ConstPool#getFieldrefType(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getMethodrefClassName(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getMethodrefType(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getInterfaceMethodrefClassName(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getInterfaceMethodrefType(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getInvokeDynamicType(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getFieldrefClassName(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayElement#typeName(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayType#typeName(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayType#make(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#merge(javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$500()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$402(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.VersionTagsTuple)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
CALLER: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: com.google.common.base.Joiner#join(java.util.Iterator)
CALLER: io.netty.util.collection.IntObjectHashMap#iterator()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
CALLER: javassist.CtClassType#compress()
	CALLEE: javassist.CtClassType#isFrozen()
	CALLEE: javassist.CtClassType#isModified()
	CALLEE: javassist.CtClassType#removeClassFile()
	CALLEE: javassist.CtClassType#saveClassFile()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#flushStream()
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#getExplicit()
CALLER: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#canEqual(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
CALLER: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
CALLER: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
CALLER: javassist.bytecode.stackmap.TypedBlock#initFirstBlock(int,int,java.lang.String,java.lang.String,boolean,boolean)
	CALLEE: static javassist.bytecode.stackmap.TypeData#make(int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.TypedBlock#descToTag(java.lang.String,int,int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
CALLER: javassist.bytecode.stackmap.TypedBlock#resetNumLocals()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isBasicType()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isUninit()
CALLER: io.netty.util.concurrent.AbstractEventExecutorGroup#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#isTerminated()
CALLER: static com.google.common.collect.Lists#reverse(java.util.List)
	CALLEE: com.google.common.collect.Lists.RandomAccessReverseList#<init>(java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#startThread()
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkSimpleKey()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#<init>(gnu.trove.map.hash.TCustomHashMap,java.lang.Object,java.lang.Object,int)
CALLER: static com.google.common.io.Closer#create()
	CALLEE: com.google.common.io.Closer#<init>(com.google.common.io.Closer.Suppressor)
CALLER: static com.google.common.io.Closer#<clinit>()
	CALLEE: static com.google.common.io.Closer.SuppressingSuppressor#isAvailable()
CALLER: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.io.Files.FileByteSink#openStream()
CALLER: javassist.bytecode.MemberrefInfo#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.FieldrefInfo#getTag()
	CALLEE: javassist.bytecode.MethodrefInfo#getTag()
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#getTag()
CALLER: static org.yaml.snakeyaml.util.UriEncoder#decode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
CALLER: javassist.compiler.MemberCodeGen#getThisName()
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
CALLER: javassist.compiler.JvstCodeGen#recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Declarator#<init>(int,java.lang.String,int,int,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.SymbolTable#append(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.JvstCodeGen#recordVar(javassist.CtClass,java.lang.String,int,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.compiler.CodeGen#setMaxLocals(int)
CALLER: gnu.trove.map.hash.TCustomHashMap#removeAt(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#removeAt(int)
CALLER: javassist.bytecode.stackmap.TypeData.UninitData#copy()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#<init>(int,java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#<init>(javassist.bytecode.stackmap.TypeData.UninitData)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#<init>()
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,boolean)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#annotationMemberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#constValueMember(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationMemberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#constValueMember(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#constValueMember(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#annotationMemberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#enumMemberValue(int,int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#close()
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#close()
CALLER: javassist.bytecode.AnnotationDefaultAttribute#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.BootstrapMethodsAttribute#getMethods()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute.BootstrapMethod#<init>(int,int[])
CALLER: javassist.bytecode.BootstrapMethodsAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.BootstrapMethodsAttribute.BootstrapMethod[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.CodeAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute,java.util.Map)
	CALLEE: javassist.bytecode.MethodParametersAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SignatureAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SourceFileAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMap#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.BootstrapMethodsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstantAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DeprecatedAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InnerClassesAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LineNumberAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LocalVariableAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#getMaxLocals()
	CALLEE: javassist.bytecode.CodeAttribute#getMaxStack()
	CALLEE: javassist.bytecode.CodeAttribute#getExceptionTable()
	CALLEE: javassist.bytecode.ExceptionTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute#getAttributes()
	CALLEE: javassist.bytecode.CodeAttribute#copyCode(javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
CALLER: javassist.bytecode.ConstantAttribute#getConstantValue()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.ConstantAttribute#<init>(javassist.bytecode.ConstPool,int)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.DeprecatedAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.EnclosingMethodAttribute#methodIndex()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.EnclosingMethodAttribute#className()
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#classIndex()
CALLER: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.EnclosingMethodAttribute#methodName()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#methodIndex()
	CALLEE: javassist.bytecode.ConstPool#getNameAndTypeName(int)
CALLER: javassist.bytecode.EnclosingMethodAttribute#methodDescriptor()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#methodIndex()
	CALLEE: javassist.bytecode.ConstPool#getNameAndTypeDescriptor(int)
CALLER: javassist.bytecode.EnclosingMethodAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(java.lang.String,java.lang.String)
CALLER: javassist.bytecode.ExceptionsAttribute#<init>(javassist.bytecode.ConstPool,javassist.bytecode.ExceptionsAttribute,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copyFrom(javassist.bytecode.ExceptionsAttribute,java.util.Map)
CALLER: javassist.bytecode.InnerClassesAttribute#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.LineNumberAttribute#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.LocalVariableAttribute#makeThisAttr(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.LocalVariableTypeAttribute#makeThisAttr(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.LocalVariableTypeAttribute#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: javassist.bytecode.MethodParametersAttribute#name(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.MethodParametersAttribute#accessFlags(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.MethodParametersAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String[],int[])
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int)
CALLER: javassist.bytecode.AnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#parameters()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#parameters(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#parameters(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#parameters(int,int)
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.TypeAnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,boolean)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#<init>(java.io.OutputStream,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.annotation.TypeAnnotationsWriter)
CALLER: javassist.bytecode.TypeAnnotationsAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.SignatureAttribute#getSignature()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.SignatureAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.SourceFileAttribute#getFileName()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.SourceFileAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.StackMap.Copier#<init>(javassist.bytecode.StackMap,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.StackMap.Walker#<init>(javassist.bytecode.StackMap)
CALLER: javassist.bytecode.StackMap.Copier#visit()
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMap.Walker#visit()
CALLER: javassist.bytecode.StackMap.Copier#getStackMap()
	CALLEE: javassist.bytecode.StackMap#<init>(javassist.bytecode.ConstPool,byte[])
CALLER: javassist.bytecode.StackMapTable.Copier#<init>(javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#<init>(byte[])
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#doit()
	CALLEE: javassist.bytecode.StackMapTable.Writer#toByteArray()
	CALLEE: javassist.bytecode.StackMapTable.Walker#parse()
CALLER: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.AnnotationDefaultAttribute#getDefaultValue()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#<init>(byte[],javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#parseMemberValue()
CALLER: javassist.bytecode.AnnotationsAttribute#getAnnotations()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#<init>(byte[],javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#parseAnnotations()
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#getAnnotations()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#<init>(byte[],javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#parseParameters()
CALLER: javassist.bytecode.CodeIterator#<init>(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.CodeAttribute#getCode()
	CALLEE: javassist.bytecode.CodeIterator#begin()
CALLER: javassist.bytecode.CodeAttribute#length()
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: static javassist.bytecode.AttributeInfo#getLength(java.util.ArrayList)
CALLER: javassist.bytecode.ExceptionTable#write(java.io.DataOutputStream)
	CALLEE: javassist.bytecode.ExceptionTable#size()
CALLER: javassist.bytecode.FieldInfo#getAttribute(java.lang.String)
	CALLEE: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.FieldInfo#getConstantValue()
	CALLEE: javassist.bytecode.ConstantAttribute#getConstantValue()
	CALLEE: javassist.bytecode.FieldInfo#getAttribute(java.lang.String)
CALLER: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.ClassInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.Utf8Info#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.IntegerInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FloatInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LongInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DoubleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StringInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MemberrefInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.NameAndTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodHandleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstInfoPadding#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.MethodInfo#getAttribute(java.lang.String)
	CALLEE: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.MethodInfo#getExceptionsAttribute()
	CALLEE: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
CALLER: com.google.common.collect.Iterables.6#iterator()
	CALLEE: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.8#<init>(java.util.Iterator,com.google.common.base.Function)
CALLER: static com.google.common.collect.Iterators#<clinit>()
	CALLEE: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.Iterators.2#<init>()
CALLER: javassist.bytecode.stackmap.TypedBlock#toString2(java.lang.StringBuffer)
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString2(java.lang.StringBuffer)
	CALLEE: javassist.bytecode.stackmap.TypedBlock#printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[])
CALLER: javassist.bytecode.InnerClassesAttribute#tableLength()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.InnerClassesAttribute#innerClass(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.InnerClassesAttribute#innerClassIndex(int)
CALLER: javassist.bytecode.InnerClassesAttribute#accessFlags(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.ClassFile#renameClass(java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.bytecode.ConstPool#renameClass(java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.AttributeInfo#renameClass(java.util.List,java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setDescriptor(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getAttributes()
	CALLEE: javassist.bytecode.FieldInfo#setDescriptor(java.lang.String)
	CALLEE: javassist.bytecode.FieldInfo#getAttributes()
CALLER: javassist.bytecode.MemberrefInfo#print(java.io.PrintWriter)
	CALLEE: javassist.bytecode.FieldrefInfo#getTagName()
	CALLEE: javassist.bytecode.MethodrefInfo#getTagName()
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#getTagName()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: static javassist.bytecode.stackmap.TypeData.ArrayType#typeName(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: static org.yaml.snakeyaml.tokens.Token.ID#<clinit>()
	CALLEE: org.yaml.snakeyaml.tokens.Token.ID#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getTags()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getVersion()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1000(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#isEmpty()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
CALLER: com.google.common.base.Joiner#join(java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#<init>(io.netty.util.collection.IntObjectHashMap)
CALLER: javassist.CtClassType#removeClassFile()
	CALLEE: javassist.CtClassType#hasMemberCache()
	CALLEE: javassist.CtClassType#isModified()
CALLER: javassist.CtClassType#saveClassFile()
	CALLEE: javassist.CtClassType#hasMemberCache()
	CALLEE: javassist.bytecode.ClassFile#write(java.io.DataOutputStream)
CALLER: javassist.bytecode.stackmap.TypeData.UninitThis#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#<init>(int,java.lang.String)
CALLER: static javassist.bytecode.stackmap.TypedBlock#descToTag(java.lang.String,int,int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.stackmap.TypedBlock#toPrimitiveTag(char)
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isBasicType()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#terminationFuture()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#isTerminated()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
CALLER: com.google.common.collect.Lists.RandomAccessReverseList#<init>(java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
CALLER: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter#checkSimpleKey()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptySequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyMapping()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: com.google.common.io.Closer#<init>(com.google.common.io.Closer.Suppressor)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.io.Closer.SuppressingSuppressor#<clinit>()
	CALLEE: com.google.common.io.Closer.SuppressingSuppressor#<init>()
	CALLEE: static com.google.common.io.Closer.SuppressingSuppressor#getAddSuppressed()
CALLER: static com.google.common.io.Closer.LoggingSuppressor#<clinit>()
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#<init>()
CALLER: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.EmptyImmutableSet#contains(java.lang.Object)
CALLER: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: javassist.compiler.ast.Declarator#<init>(int,java.lang.String,int,int,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.JvstCodeGen#recordVar(javassist.CtClass,java.lang.String,int,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Declarator#<init>(int,java.lang.String,int,int,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.SymbolTable#append(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.JvstCodeGen#setType(javassist.CtClass)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
CALLER: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.bytecode.Bytecode#getMaxLocals()
CALLER: javassist.compiler.CodeGen#setMaxLocals(int)
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
CALLER: gnu.trove.impl.hash.TObjectHash#removeAt(int)
	CALLEE: gnu.trove.impl.hash.THash#removeAt(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,boolean)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#<init>(byte[])
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#<init>(java.io.OutputStream,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copyType(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copy(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#enumConstValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#enumMemberValue(int,int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copyType(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#classInfoIndex(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#classMemberValue(int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#annotationMemberValue(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#annotationValue()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationMemberValue(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#arrayValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#arrayMemberValue(int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#constValueMember(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copy(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#constValueIndex(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#constValueMember(int,int)
CALLER: javassist.bytecode.ExceptionTable#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionTable#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: javassist.bytecode.ExceptionTable#add(int,int,int,int)
CALLER: javassist.bytecode.CodeAttribute#copyCode(javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.CodeAttribute#getCodeLength()
	CALLEE: static javassist.bytecode.CodeAttribute#copyCode(byte[],int,int,javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: static javassist.bytecode.CodeAttribute.LdcEntry#doit(byte[],javassist.bytecode.CodeAttribute.LdcEntry,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
CALLER: javassist.bytecode.EnclosingMethodAttribute#classIndex()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.ConstPool#getNameAndTypeName(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getNameAndTypeDescriptor(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#addNameAndTypeInfo(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(int,int)
CALLER: javassist.bytecode.ExceptionsAttribute#copyFrom(javassist.bytecode.ExceptionsAttribute,java.util.Map)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
	CALLEE: javassist.bytecode.AttributeInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.LocalVariableTypeAttribute#<init>(javassist.bytecode.ConstPool,byte[])
	CALLEE: javassist.bytecode.LocalVariableAttribute#<init>(javassist.bytecode.ConstPool,java.lang.String,byte[])
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#annotationArray(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.Copier#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#annotationArray(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.Renamer#annotationArray(int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#parameters(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#numParameters(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#parameters(int,int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#<init>(java.io.OutputStream,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#<init>(java.io.OutputStream,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#<init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.annotation.TypeAnnotationsWriter)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#<init>(byte[])
CALLER: javassist.bytecode.StackMap.Walker#<init>(javassist.bytecode.StackMap)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.StackMap.Walker#visit()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMap.Copier#locals(int,int,int)
	CALLEE: javassist.bytecode.StackMap.Walker#stack(int,int,int)
	CALLEE: javassist.bytecode.StackMap.Shifter#locals(int,int,int)
	CALLEE: javassist.bytecode.StackMap.SwitchShifter#locals(int,int,int)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#<init>(byte[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#<init>(int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#<init>(byte[])
CALLER: javassist.bytecode.StackMapTable.Walker#parse()
	CALLEE: javassist.bytecode.StackMapTable.Walker#stackMapFrames(int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#<init>(byte[],javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#<init>(byte[])
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#parseMemberValue()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#parseAnnotations()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#parseParameters()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#parameters()
CALLER: javassist.bytecode.CodeIterator#begin()
	CALLEE: javassist.bytecode.CodeIterator#getCodeLength()
CALLER: static javassist.bytecode.AttributeInfo#getLength(java.util.ArrayList)
	CALLEE: javassist.bytecode.CodeAttribute#length()
	CALLEE: javassist.bytecode.AttributeInfo#length()
CALLER: javassist.bytecode.ClassInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.Utf8Info#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
CALLER: javassist.bytecode.IntegerInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addIntegerInfo(int)
CALLER: javassist.bytecode.FloatInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addFloatInfo(float)
CALLER: javassist.bytecode.LongInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addLongInfo(long)
CALLER: javassist.bytecode.DoubleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addDoubleInfo(double)
CALLER: javassist.bytecode.StringInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addStringInfo(java.lang.String)
CALLER: javassist.bytecode.MemberrefInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.ClassInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.Utf8Info#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.IntegerInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FloatInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LongInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DoubleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StringInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MemberrefInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.NameAndTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodHandleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstInfoPadding#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FieldrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.MethodrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
CALLER: javassist.bytecode.NameAndTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(int,int)
CALLER: javassist.bytecode.MethodHandleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.ClassInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.Utf8Info#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.IntegerInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FloatInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LongInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DoubleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StringInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MemberrefInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.NameAndTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodHandleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstInfoPadding#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addMethodHandleInfo(int,int)
CALLER: javassist.bytecode.MethodTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addMethodTypeInfo(int)
CALLER: javassist.bytecode.InvokeDynamicInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
	CALLEE: javassist.bytecode.ClassInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.Utf8Info#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.IntegerInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.FloatInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.LongInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.DoubleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.StringInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MemberrefInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.NameAndTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodHandleInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.MethodTypeInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstInfoPadding#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addInvokeDynamicInfo(int,int)
CALLER: javassist.bytecode.ConstInfoPadding#copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#addConstInfoPadding()
CALLER: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Predicate)
CALLER: com.google.common.collect.Iterators.8#<init>(java.util.Iterator,com.google.common.base.Function)
	CALLEE: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.UnmodifiableListIterator#<init>()
CALLER: javassist.bytecode.stackmap.TypedBlock#printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[])
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
CALLER: javassist.bytecode.InnerClassesAttribute#innerClassIndex(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.bytecode.ConstPool#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.LongVector#elementAt(int)
	CALLEE: javassist.bytecode.ClassInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.ConstInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.NameAndTypeInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.MethodTypeInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
CALLER: static javassist.bytecode.AttributeInfo#renameClass(java.util.List,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.CodeAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.LocalVariableAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.AnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.lang.String)
CALLER: javassist.bytecode.MethodInfo#setDescriptor(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
CALLER: javassist.bytecode.FieldInfo#setDescriptor(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#nextPossibleSimpleKey()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanToNextToken()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkValue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchValue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAlias()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAnchor()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchTag()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchLiteral()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFolded()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchSingle()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDouble()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkPlain()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchPlain()
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1000(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#processDirectives()
CALLER: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
CALLER: static com.google.common.io.FileWriteMode#<clinit>()
	CALLEE: com.google.common.io.FileWriteMode#<init>(java.lang.String,int)
CALLER: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#equals(java.lang.Object)
	CALLEE: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.ClassInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.Utf8Info#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.IntegerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.FloatInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.LongInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.DoubleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.StringInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MemberrefInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.NameAndTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodHandleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#equals(java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
CALLER: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.ASTList#concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.JvstCodeGen#setType(javassist.CtClass)
	CALLEE: javassist.compiler.JvstCodeGen#setType(javassist.CtClass,int)
CALLER: gnu.trove.impl.hash.THash#removeAt(int)
	CALLEE: gnu.trove.impl.hash.THash#compact()
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#copyType(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.util.Map)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#copy(int)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#enumConstValue(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#classInfoIndex(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotationMemberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#arrayValue(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#constValueIndex(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.ExceptionTable#add(int,int,int,int)
	CALLEE: javassist.bytecode.ExceptionTableEntry#<init>(int,int,int,int)
CALLER: static javassist.bytecode.CodeAttribute#copyCode(byte[],int,int,javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: static javassist.bytecode.CodeIterator#nextOpcode(byte[],int)
	CALLEE: static javassist.bytecode.CodeAttribute#copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.CodeAttribute.LdcEntry#<init>()
CALLER: static javassist.bytecode.CodeAttribute.LdcEntry#doit(byte[],javassist.bytecode.CodeAttribute.LdcEntry,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: static javassist.bytecode.CodeIterator#changeLdcToLdcW(byte[],javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeAttribute.LdcEntry)
CALLER: javassist.bytecode.ConstPool#addNameAndTypeInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.NameAndTypeInfo#<init>(int,int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#annotationArray(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.Copier#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#targetInfo(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#parameters(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int)
CALLER: javassist.bytecode.StackMap.Copier#locals(int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.StackMap.Walker#locals(int,int,int)
CALLER: javassist.bytecode.StackMap.Walker#stack(int,int,int)
	CALLEE: javassist.bytecode.StackMap.Copier#typeInfoArray(int,int,int,boolean)
	CALLEE: javassist.bytecode.StackMap.Walker#typeInfoArray(int,int,int,boolean)
CALLER: javassist.bytecode.StackMapTable.Walker#<init>(byte[])
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.StackMapTable.Walker#stackMapFrames(int,int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#sameFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#sameLocals(int,int)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#chopFrame(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#appendFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#fullFrame(int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#sameFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#sameFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#chopFrame(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#chopFrame(int,int,int)
CALLER: javassist.bytecode.ConstPool#addIntegerInfo(int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.IntegerInfo#<init>(int,int)
CALLER: javassist.bytecode.ConstPool#addFloatInfo(float)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.FloatInfo#<init>(float,int)
CALLER: javassist.bytecode.ConstPool#addLongInfo(long)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.ConstPool#addConstInfoPadding()
	CALLEE: javassist.bytecode.LongInfo#<init>(long,int)
CALLER: javassist.bytecode.ConstPool#addDoubleInfo(double)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.ConstPool#addConstInfoPadding()
	CALLEE: javassist.bytecode.DoubleInfo#<init>(double,int)
CALLER: javassist.bytecode.ConstPool#addStringInfo(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.StringInfo#<init>(int,int)
CALLER: javassist.bytecode.FieldrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,int)
CALLER: javassist.bytecode.MethodrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.ConstPool#addMethodrefInfo(int,int)
CALLER: javassist.bytecode.InterfaceMethodrefInfo#copy2(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,int)
CALLER: javassist.bytecode.ConstPool#addMethodHandleInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.MethodHandleInfo#<init>(int,int,int)
CALLER: javassist.bytecode.ConstPool#addMethodTypeInfo(int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.MethodTypeInfo#<init>(int,int)
CALLER: javassist.bytecode.ConstPool#addInvokeDynamicInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#<init>(int,int,int)
CALLER: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.AbstractIterator#<init>()
CALLER: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.UnmodifiableListIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: javassist.bytecode.ClassInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.NameAndTypeInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.MethodTypeInfo#renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.HashMap)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.CodeAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.AttributeInfo#renameClass(java.util.List,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.LocalVariableAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.LocalVariableAttribute#tableLength()
	CALLEE: javassist.bytecode.LocalVariableAttribute#renameEntry(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.LocalVariableTypeAttribute#renameEntry(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.AnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.AnnotationsAttribute#renameClass(java.util.Map)
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#renameClass(java.util.Map)
CALLER: javassist.bytecode.TypeAnnotationsAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute#renameClass(java.util.Map)
CALLER: javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.SignatureAttribute#getSignature()
	CALLEE: static javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.SignatureAttribute#setSignature(java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getLine()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#isRequired()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getLine()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#nextPossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getTokenNumber()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanToNextToken()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamEnd()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDirective()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirective()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockEntry()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowEntry()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkKey()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchKey()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkValue()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchValue()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getTokenNumber()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getColumn()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAlias()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAnchor()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchTag()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTag()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchLiteral()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFolded()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchSingle()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDouble()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkPlain()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchPlain()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlain()
CALLER: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
CALLER: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner#toString(java.lang.Object)
CALLER: com.google.common.collect.HashMultimap#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#equals(java.lang.Object)
CALLER: javassist.compiler.JvstCodeGen#setType(javassist.CtClass,int)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.compiler.JvstCodeGen#setType(javassist.CtClass,int)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: gnu.trove.impl.hash.THash#compact()
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: static gnu.trove.impl.HashFunctions#fastCeil(float)
	CALLEE: gnu.trove.impl.hash.THash#computeNextAutoCompactionAmount(int)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#annotation(int,int,int)
CALLER: static javassist.bytecode.CodeIterator#nextOpcode(byte[],int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#read32bit(byte[],int)
	CALLEE: javassist.bytecode.BadBytecode#<init>(int)
CALLER: static javassist.bytecode.CodeAttribute#copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: static javassist.bytecode.CodeIterator#changeLdcToLdcW(byte[],javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeAttribute.LdcEntry)
	CALLEE: javassist.bytecode.CodeIterator.Pointers#<init>(int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: static javassist.bytecode.CodeIterator#makeJumpList(byte[],int,javassist.bytecode.CodeIterator.Pointers)
	CALLEE: static javassist.bytecode.CodeIterator#addLdcW(javassist.bytecode.CodeAttribute.LdcEntry,java.util.ArrayList)
	CALLEE: static javassist.bytecode.CodeIterator#insertGap2w(byte[],int,int,boolean,java.util.ArrayList,javassist.bytecode.CodeIterator.Pointers)
CALLER: javassist.bytecode.NameAndTypeInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#numAnnotations(int)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#numAnnotations(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#targetInfo(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typeParameterBoundTarget(int,int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#throwsTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typeParameterTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#supertypeTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typeArgumentTarget(int,int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeParameterTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#supertypeTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeParameterBoundTarget(int,int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#emptyTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#formalParameterTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#throwsTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#localvarTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#catchTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#offsetTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeArgumentTarget(int,int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#localvarTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#offsetTarget(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#catchTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#formalParameterTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#emptyTarget(int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typePath(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int,int)
CALLER: javassist.bytecode.StackMap.Walker#locals(int,int,int)
	CALLEE: javassist.bytecode.StackMap.Copier#typeInfoArray(int,int,int,boolean)
	CALLEE: javassist.bytecode.StackMap.Walker#typeInfoArray(int,int,int,boolean)
CALLER: javassist.bytecode.StackMap.Copier#typeInfoArray(int,int,int,boolean)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.StackMap.Walker#typeInfoArray(int,int,int,boolean)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#sameFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#sameFrame(int)
CALLER: javassist.bytecode.StackMapTable.Walker#sameLocals(int,int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#objectOrUninitialized(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#sameLocals(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#sameLocals(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#sameLocals(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.OffsetShifter#objectOrUninitialized(int,int,int)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#chopFrame(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#chopFrame(int,int)
CALLER: javassist.bytecode.StackMapTable.Walker#appendFrame(int,int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#objectOrUninitialized(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#appendFrame(int,int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.OffsetShifter#objectOrUninitialized(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#appendFrame(int,int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Shifter#appendFrame(int,int,int[],int[])
CALLER: javassist.bytecode.StackMapTable.Walker#fullFrame(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#verifyTypeInfo(int,int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.SimpleCopy#fullFrame(int,int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Walker#fullFrame(int,int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Shifter#fullFrame(int,int,int[],int[],int[],int[])
CALLER: javassist.bytecode.IntegerInfo#<init>(int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.FloatInfo#<init>(float,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.LongInfo#<init>(long,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.DoubleInfo#<init>(double,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.StringInfo#<init>(int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.ConstPool#addFieldrefInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.FieldrefInfo#<init>(int,int,int)
CALLER: javassist.bytecode.ConstPool#addMethodrefInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.MethodrefInfo#<init>(int,int,int)
CALLER: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,int)
	CALLEE: javassist.bytecode.ConstPool#addItem(javassist.bytecode.ConstInfo)
	CALLEE: javassist.bytecode.InterfaceMethodrefInfo#<init>(int,int,int)
CALLER: javassist.bytecode.MethodHandleInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.MethodTypeInfo#<init>(int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: javassist.bytecode.InvokeDynamicInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: com.google.common.collect.AbstractIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: javassist.bytecode.LocalVariableAttribute#tableLength()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.LocalVariableAttribute#renameEntry(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.LocalVariableTypeAttribute#renameEntry(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.AnnotationsAttribute#renameClass(java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.ParameterAnnotationsAttribute#renameClass(java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#parameters()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.TypeAnnotationsAttribute#renameClass(java.util.Map)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray()
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
CALLER: static javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.SignatureAttribute#renameClass(java.lang.String,java.util.Map)
CALLER: javassist.bytecode.SignatureAttribute#setSignature(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
CALLER: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#update()
CALLER: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#update()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
CALLER: org.yaml.snakeyaml.tokens.BlockEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#isRequired()
CALLER: org.yaml.snakeyaml.tokens.StreamEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirective()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveName(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#<init>(java.lang.String,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#update()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.BlockEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.ValueToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getLine()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#<init>(int,boolean,int,int,int,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTag()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#<init>(java.lang.String,java.lang.String)
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#<init>(org.yaml.snakeyaml.tokens.TagTuple,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.Constant#hasNo(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlain()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlainSpaces()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
CALLER: com.google.common.base.Joiner#toString(java.lang.Object)
	CALLEE: javassist.CtMember#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: javassist.CtClass#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.ClassPool#toString()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.NonOptionArgumentSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.yaml.snakeyaml.tokens.Token#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: joptsimple.OptionSpecBuilder#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: io.netty.util.UniqueName#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: javassist.bytecode.MethodInfo#toString()
	CALLEE: javassist.bytecode.FieldInfo#toString()
	CALLEE: javassist.bytecode.AnnotationDefaultAttribute#toString()
	CALLEE: javassist.bytecode.AnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.ParameterAnnotationsAttribute#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#toString()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#toString()
	CALLEE: javassist.bytecode.stackmap.BasicBlock#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: javassist.bytecode.ConstInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
CALLER: com.google.common.collect.AbstractSetMultimap#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMultimap#equals(java.lang.Object)
CALLER: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: static javassist.compiler.MemberResolver#fatal()
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copyType(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#annotation(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int,int,int)
CALLER: javassist.bytecode.CodeIterator.Pointers#<init>(int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.CodeAttribute#getAttribute(java.lang.String)
CALLER: static javassist.bytecode.CodeIterator#makeJumpList(byte[],int,javassist.bytecode.CodeIterator.Pointers)
	CALLEE: static javassist.bytecode.ByteArray#read32bit(byte[],int)
	CALLEE: static javassist.bytecode.CodeIterator#nextOpcode(byte[],int)
	CALLEE: javassist.bytecode.CodeIterator.Jump16#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.If16#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Jump32#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Table#<init>(int,int,int,int,int[],javassist.bytecode.CodeIterator.Pointers)
	CALLEE: javassist.bytecode.CodeIterator.Lookup#<init>(int,int,int[],int[],javassist.bytecode.CodeIterator.Pointers)
CALLER: static javassist.bytecode.CodeIterator#addLdcW(javassist.bytecode.CodeAttribute.LdcEntry,java.util.ArrayList)
	CALLEE: javassist.bytecode.CodeIterator.LdcW#<init>(int,int)
CALLER: static javassist.bytecode.CodeIterator#insertGap2w(byte[],int,int,boolean,java.util.ArrayList,javassist.bytecode.CodeIterator.Pointers)
	CALLEE: javassist.bytecode.CodeIterator.Pointers#shiftPc(int,int,boolean)
	CALLEE: static javassist.bytecode.CodeIterator#makeExapndedCode(byte[],java.util.ArrayList,int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch16#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Jump32#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Switcher#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Branch#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Branch#gapChanged()
	CALLEE: javassist.bytecode.CodeIterator.Switcher#gapChanged()
	CALLEE: javassist.bytecode.CodeIterator.Jump16#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.If16#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Branch#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Switcher#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.LdcW#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Branch16#expanded()
	CALLEE: javassist.bytecode.CodeIterator.Branch#expanded()
	CALLEE: javassist.bytecode.CodeIterator.LdcW#expanded()
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeParameterTarget(int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#typeParameterTarget(int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#supertypeTarget(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#supertypeTarget(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeParameterBoundTarget(int,int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#typeParameterBoundTarget(int,int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#emptyTarget(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#emptyTarget(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#formalParameterTarget(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#formalParameterTarget(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#throwsTarget(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#throwsTarget(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#localvarTarget(int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#localVarTarget(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#localvarTarget(int,int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#catchTarget(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#catchTarget(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#offsetTarget(int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#offsetTarget(int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typeArgumentTarget(int,int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#typeArgumentTarget(int,int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typePath(int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#typePath(int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int,int)
CALLER: javassist.bytecode.StackMap.Walker#typeInfoArray(int,int,int,boolean)
	CALLEE: javassist.bytecode.StackMap.Walker#typeInfoArray2(int,int)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#sameLocals(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Writer#sameLocals(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Copier#copyData(int,int)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#appendFrame(int,int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#appendFrame(int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Copier#copyData(int[],int[])
CALLER: javassist.bytecode.StackMapTable.Walker#verifyTypeInfo(int,int,int[],int[])
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#objectOrUninitialized(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.OffsetShifter#objectOrUninitialized(int,int,int)
CALLER: javassist.bytecode.StackMapTable.SimpleCopy#fullFrame(int,int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Writer#fullFrame(int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Copier#copyData(int[],int[])
CALLER: javassist.bytecode.FieldrefInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(int,int,int)
CALLER: javassist.bytecode.MethodrefInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(int,int,int)
CALLER: javassist.bytecode.InterfaceMethodrefInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.MemberrefInfo#<init>(int,int,int)
CALLER: static com.google.common.collect.AbstractIterator.State#<clinit>()
	CALLEE: com.google.common.collect.AbstractIterator.State#<init>(java.lang.String,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#<init>(byte[])
CALLER: javassist.bytecode.TypeAnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#<init>(byte[])
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#<init>(byte[],javassist.bytecode.ConstPool,java.util.Map)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveName(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveNumber(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveHandle(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectivePrefix(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.tokens.DirectiveToken#<init>(java.lang.String,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.DocumentStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.DocumentEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowMappingEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.tokens.AnchorToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.AliasToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanUriEscapes(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.tokens.TagToken#<init>(org.yaml.snakeyaml.tokens.TagTuple,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#getIncrement()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndicators(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndentation()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarBreaks(int)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#chompTailIsTrue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#chompTailIsNotFalse()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalar(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarNonSpaces(boolean,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarSpaces(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlainSpaces()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,char)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.collect.AbstractMultimap#equals(java.lang.Object)
	CALLEE: static com.google.common.collect.Multimaps#equalsImpl(com.google.common.collect.Multimap,java.lang.Object)
CALLER: static javassist.compiler.MemberResolver#fatal()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.bytecode.annotation.AnnotationsWriter#annotation(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int)
CALLER: javassist.bytecode.CodeAttribute#getAttribute(java.lang.String)
	CALLEE: static javassist.bytecode.AttributeInfo#lookup(java.util.ArrayList,java.lang.String)
CALLER: javassist.bytecode.CodeIterator.Jump16#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch16#<init>(int,int)
CALLER: javassist.bytecode.CodeIterator.If16#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch16#<init>(int,int)
CALLER: javassist.bytecode.CodeIterator.Jump32#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch#<init>(int)
CALLER: javassist.bytecode.CodeIterator.Table#<init>(int,int,int,int,int[],javassist.bytecode.CodeIterator.Pointers)
	CALLEE: javassist.bytecode.CodeIterator.Switcher#<init>(int,int,int[],javassist.bytecode.CodeIterator.Pointers)
CALLER: javassist.bytecode.CodeIterator.Lookup#<init>(int,int,int[],int[],javassist.bytecode.CodeIterator.Pointers)
	CALLEE: javassist.bytecode.CodeIterator.Switcher#<init>(int,int,int[],javassist.bytecode.CodeIterator.Pointers)
CALLER: javassist.bytecode.CodeIterator.LdcW#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch#<init>(int)
CALLER: javassist.bytecode.CodeIterator.Pointers#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.ExceptionTable#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMap#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.LineNumberAttribute#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.LocalVariableAttribute#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMapTable#shiftPc(int,int,boolean)
CALLER: static javassist.bytecode.CodeIterator#makeExapndedCode(byte[],java.util.ArrayList,int,int)
	CALLEE: javassist.bytecode.CodeIterator.Jump16#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.If16#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Branch#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Switcher#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.LdcW#deltaSize()
	CALLEE: javassist.bytecode.CodeIterator.Branch16#write(int,byte[],int,byte[])
	CALLEE: javassist.bytecode.CodeIterator.Jump32#write(int,byte[],int,byte[])
	CALLEE: javassist.bytecode.CodeIterator.Switcher#write(int,byte[],int,byte[])
	CALLEE: javassist.bytecode.CodeIterator.LdcW#write(int,byte[],int,byte[])
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#supertypeTarget(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#throwsTarget(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#localVarTarget(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#localvarTarget(int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#localvarTarget(int,int,int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#localvarTarget(int,int,int,int,int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#catchTarget(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#offsetTarget(int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#typeArgumentTarget(int,int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typePath(int,int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int,int,int)
CALLER: javassist.bytecode.StackMap.Walker#typeInfoArray2(int,int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.StackMap.Copier#objectVariable(int,int)
	CALLEE: javassist.bytecode.StackMap.Copier#uninitialized(int,int)
	CALLEE: javassist.bytecode.StackMap.Copier#typeInfo(int,byte)
	CALLEE: javassist.bytecode.StackMap.Walker#typeInfo(int,byte)
	CALLEE: javassist.bytecode.StackMap.Shifter#uninitialized(int,int)
	CALLEE: javassist.bytecode.StackMap.Walker#uninitialized(int,int)
	CALLEE: javassist.bytecode.StackMap.Walker#objectVariable(int,int)
CALLER: javassist.bytecode.StackMapTable.Copier#copyData(int,int)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.StackMapTable.Copier#copyData(int[],int[])
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.MemberrefInfo#<init>(int,int,int)
	CALLEE: javassist.bytecode.ConstInfo#<init>(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveNumber(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveHandle(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectivePrefix(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanUriEscapes(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#decode(java.nio.ByteBuffer)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndicators(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#<init>(java.lang.Boolean,int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndentation()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarBreaks(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,char)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarNonSpaces(boolean,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(char,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarSpaces(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
CALLER: static com.google.common.collect.Multimaps#equalsImpl(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#memberValuePair(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Parser#memberValuePair(int,int)
CALLER: javassist.bytecode.CodeIterator.Branch16#<init>(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Branch#<init>(int)
CALLER: javassist.bytecode.CodeIterator.Switcher#<init>(int,int,int[],javassist.bytecode.CodeIterator.Pointers)
	CALLEE: javassist.bytecode.CodeIterator.Branch#<init>(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#localvarTarget(int,int,int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#localVarTargetTable(int,int,int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.SubCopier#typePath(int,int,int)
	CALLEE: javassist.bytecode.annotation.TypeAnnotationsWriter#typePathPath(int,int)
CALLER: javassist.bytecode.StackMap.Copier#objectVariable(int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.ConstPool#copy(int,javassist.bytecode.ConstPool,java.util.Map)
CALLER: javassist.bytecode.StackMap.Copier#uninitialized(int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractSetMultimap#asMap()
CALLER: javassist.bytecode.AnnotationsAttribute.Copier#memberValuePair(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Copier#copy(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#memberValuePair(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int,int)
CALLER: javassist.bytecode.annotation.TypeAnnotationsWriter#localVarTargetTable(int,int,int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: com.google.common.collect.AbstractSetMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
CALLER: javassist.bytecode.annotation.AnnotationsWriter#memberValuePair(int)
	CALLEE: javassist.bytecode.annotation.AnnotationsWriter#write16bit(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
CALLER: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
	CALLEE: com.google.common.collect.Maps.ImprovedAbstractMap#<init>()
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#parameters(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationArray(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#constValueMember(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#constValueMember(int,int)
	CALLEE: javassist.bytecode.annotation.ByteMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.CharMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.DoubleMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.FloatMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.IntegerMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.LongMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.ShortMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.BooleanMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.StringMemberValue#<init>(int,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#arrayMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValue(int)
	CALLEE: javassist.bytecode.annotation.ArrayMemberValue#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.ArrayMemberValue#setValue(javassist.bytecode.annotation.MemberValue[])
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#annotationMemberValue(int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotationMemberValue(int)
	CALLEE: javassist.bytecode.annotation.AnnotationMemberValue#<init>(javassist.bytecode.annotation.Annotation,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#classMemberValue(int,int)
	CALLEE: javassist.bytecode.annotation.ClassMemberValue#<init>(int,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.annotation.EnumMemberValue#<init>(int,int,javassist.bytecode.ConstPool)
CALLER: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#takeTask()
	CALLEE: static io.netty.util.concurrent.GlobalEventExecutor#access$000()
	CALLEE: static io.netty.util.concurrent.GlobalEventExecutor#access$100(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListeners#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListenerNotifier#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.2#run()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1400(org.yaml.snakeyaml.parser.ParserImpl,boolean,boolean)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
CALLER: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#doBind(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.ServerBootstrap#validate()
CALLER: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)
CALLER: com.google.common.cache.CacheBuilder#build()
	CALLEE: com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: com.google.common.cache.CacheBuilder#checkNonLoadingCache()
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.CacheBuilder)
CALLER: javassist.bytecode.stackmap.TypeData.UninitThis#copy()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#<init>(java.lang.String)
CALLER: javassist.bytecode.CodeIterator#s32bitAt(int)
	CALLEE: static javassist.bytecode.ByteArray#read32bit(byte[],int)
CALLER: javassist.bytecode.CodeIterator#s16bitAt(int)
	CALLEE: static javassist.bytecode.ByteArray#readS16bit(byte[],int)
CALLER: javassist.bytecode.CodeIterator#next()
	CALLEE: static javassist.bytecode.CodeIterator#nextOpcode(byte[],int)
CALLER: javassist.compiler.ast.ASTList#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
	CALLEE: javassist.compiler.ast.Declarator#getTag()
	CALLEE: javassist.compiler.ast.Symbol#toString()
	CALLEE: javassist.compiler.ast.Pair#toString()
	CALLEE: javassist.compiler.ast.IntConst#toString()
	CALLEE: javassist.compiler.ast.DoubleConst#toString()
	CALLEE: javassist.compiler.ast.Keyword#toString()
	CALLEE: javassist.compiler.ast.Variable#toString()
	CALLEE: javassist.compiler.ast.StringL#toString()
	CALLEE: javassist.compiler.ast.ASTree#getTag()
	CALLEE: javassist.compiler.ast.Stmnt#getTag()
	CALLEE: javassist.compiler.ast.CondExpr#getTag()
	CALLEE: javassist.compiler.ast.Expr#getTag()
	CALLEE: javassist.compiler.ast.CastExpr#getTag()
	CALLEE: javassist.compiler.ast.InstanceOfExpr#getTag()
	CALLEE: javassist.compiler.ast.ArrayInit#getTag()
	CALLEE: javassist.compiler.ast.NewExpr#getTag()
CALLER: javassist.bytecode.stackmap.TypeData.ClassName#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
CALLER: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeData(javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeTag()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#dfs(java.util.ArrayList,int,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#dfs(java.util.ArrayList,int,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#fixTypes(java.util.ArrayList,javassist.ClassPool)
CALLER: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#get_snippet()
CALLER: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.plugin.Plugin)
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#get(java.lang.Object)
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.scheduler.ScheduledTask)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
CALLER: jline.internal.ShutdownHooks.1#run()
	CALLEE: static jline.internal.ShutdownHooks#access$000()
CALLER: com.google.common.io.Closer#close()
	CALLEE: com.google.common.io.Closer.SuppressingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
CALLER: com.google.common.io.Closer#rethrow(java.lang.Throwable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
CALLER: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.8#transform(java.lang.Object)
CALLER: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
CALLER: javassist.bytecode.CodeIterator#insert(javassist.bytecode.ExceptionTable,int)
	CALLEE: javassist.bytecode.CodeAttribute#getExceptionTable()
	CALLEE: javassist.bytecode.ExceptionTable#add(int,javassist.bytecode.ExceptionTable,int)
CALLER: javassist.bytecode.CodeIterator#insertEx(byte[])
	CALLEE: javassist.bytecode.CodeIterator#insert0(int,byte[],boolean)
CALLER: javassist.bytecode.CodeIterator#skipThisConstructor()
	CALLEE: javassist.bytecode.CodeIterator#skipSuperConstructor0(int)
CALLER: javassist.bytecode.CodeIterator#skipSuperConstructor()
	CALLEE: javassist.bytecode.CodeIterator#skipSuperConstructor0(int)
CALLER: javassist.bytecode.stackmap.TypeData.ClassName#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.stackmap.TypeData.UninitData#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
CALLER: javassist.bytecode.stackmap.TypeData.AbsTypeVar#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
CALLER: javassist.bytecode.TypeAnnotationsAttribute.Renamer#annotationArray(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#targetInfo(int,int)
	CALLEE: javassist.bytecode.TypeAnnotationsAttribute.SubWalker#typePath(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int,int,int)
	CALLEE: javassist.bytecode.annotation.Annotation#<init>(int,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.AnnotationsAttribute.Renamer#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#annotation(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#renameType(int,int)
CALLER: javassist.bytecode.ExceptionTable#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: static javassist.bytecode.ExceptionTable#shiftPc(int,int,int,boolean)
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#next()
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#scanNext()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$300(io.netty.util.collection.IntObjectHashMap)
CALLER: javassist.CtClass#toString()
	CALLEE: javassist.CtClass#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtClassType#extendToString(java.lang.StringBuffer)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#processDirectives()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getName()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getValue()
CALLER: org.yaml.snakeyaml.tokens.TagToken#getArguments()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getHandle()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getSuffix()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2010(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2200(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2200(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
CALLER: javassist.bytecode.CodeIterator.Branch16#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Branch#shift(int,int,boolean)
	CALLEE: static javassist.bytecode.CodeIterator.Branch#shiftOffset(int,int,int,int,boolean)
CALLER: javassist.bytecode.CodeIterator.Jump32#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Branch#shift(int,int,boolean)
	CALLEE: static javassist.bytecode.CodeIterator.Branch#shiftOffset(int,int,int,int,boolean)
CALLER: javassist.bytecode.CodeIterator.Switcher#shift(int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.Branch#shift(int,int,boolean)
	CALLEE: static javassist.bytecode.CodeIterator.Branch#shiftOffset(int,int,int,int,boolean)
CALLER: javassist.bytecode.StackMap#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMap.Walker#visit()
	CALLEE: javassist.bytecode.StackMap.Shifter#<init>(javassist.bytecode.StackMap,int,int,boolean)
CALLER: javassist.bytecode.LineNumberAttribute#shiftPc(int,int,boolean)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.LineNumberAttribute#tableLength()
CALLER: javassist.bytecode.CodeIterator.Branch16#write(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.CodeIterator.Jump16#write32(int,byte[],int,byte[])
	CALLEE: javassist.bytecode.CodeIterator.If16#write32(int,byte[],int,byte[])
CALLER: javassist.bytecode.CodeIterator.Jump32#write(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
CALLER: javassist.bytecode.CodeIterator.Switcher#write(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
	CALLEE: javassist.bytecode.CodeIterator.Table#tableSize()
	CALLEE: javassist.bytecode.CodeIterator.Lookup#tableSize()
	CALLEE: javassist.bytecode.CodeIterator.Switcher#adjustOffsets(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Table#write2(int,byte[])
	CALLEE: javassist.bytecode.CodeIterator.Lookup#write2(int,byte[])
CALLER: javassist.bytecode.CodeIterator.LdcW#write(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.LocalVariableAttribute#shiftPc(int,int,boolean)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.LocalVariableAttribute#tableLength()
CALLER: javassist.bytecode.StackMapTable#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMapTable.Walker#parse()
	CALLEE: javassist.bytecode.StackMapTable.OffsetShifter#<init>(javassist.bytecode.StackMapTable,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#<init>(javassist.bytecode.StackMapTable,int,int,boolean)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#doit()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#setType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#setType(java.lang.String,javassist.ClassPool)
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#merge(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.AbsTypeVar#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#eq(javassist.bytecode.stackmap.TypeData)
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#isUninit()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#constructorCalled(int)
	CALLEE: javassist.bytecode.stackmap.TypeData#constructorCalled(int)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#constructorCalled(int)
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#join()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#join()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#isBasicType()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeData(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeData(javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#getTypeTag()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitThis#getTypeTag()
CALLER: javassist.bytecode.stackmap.TypeData.UninitTypeVar#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#eq(javassist.bytecode.stackmap.TypeData)
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#eq(javassist.bytecode.stackmap.TypeData)
CALLER: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
	CALLEE: javassist.bytecode.InvokeDynamicInfo#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: io.netty.util.UniqueName#equals(java.lang.Object)
	CALLEE: joptsimple.NonOptionArgumentSpec#equals(java.lang.Object)
	CALLEE: joptsimple.OptionSpecBuilder#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.ClassInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.Utf8Info#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.IntegerInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.FloatInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.LongInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.DoubleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.StringInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MemberrefInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.NameAndTypeInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodHandleInfo#equals(java.lang.Object)
	CALLEE: javassist.bytecode.MethodTypeInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: static gnu.trove.map.hash.TCustomHashMap#access$600(gnu.trove.map.hash.TCustomHashMap)
CALLER: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: joptsimple.NonOptionArgumentSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.yaml.snakeyaml.tokens.Token#hashCode()
	CALLEE: joptsimple.OptionSpecBuilder#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: io.netty.util.UniqueName#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: javassist.bytecode.ClassInfo#hashCode()
	CALLEE: javassist.bytecode.Utf8Info#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: javassist.bytecode.IntegerInfo#hashCode()
	CALLEE: javassist.bytecode.FloatInfo#hashCode()
	CALLEE: javassist.bytecode.LongInfo#hashCode()
	CALLEE: javassist.bytecode.DoubleInfo#hashCode()
	CALLEE: javassist.bytecode.StringInfo#hashCode()
	CALLEE: javassist.bytecode.MemberrefInfo#hashCode()
	CALLEE: javassist.bytecode.NameAndTypeInfo#hashCode()
	CALLEE: javassist.bytecode.MethodHandleInfo#hashCode()
	CALLEE: javassist.bytecode.MethodTypeInfo#hashCode()
	CALLEE: javassist.bytecode.InvokeDynamicInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
CALLER: javassist.bytecode.annotation.ByteMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.CharMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.DoubleMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.FloatMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.IntegerMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.LongMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.ShortMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.BooleanMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.StringMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.ArrayMemberValue#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.AnnotationMemberValue#<init>(javassist.bytecode.annotation.Annotation,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.ClassMemberValue#<init>(int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: javassist.bytecode.annotation.EnumMemberValue#<init>(int,int,javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.annotation.MemberValue#<init>(char,javassist.bytecode.ConstPool)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#takeTask()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#delayNanos()
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1400(org.yaml.snakeyaml.parser.ParserImpl,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#processEmptyScalar(org.yaml.snakeyaml.error.Mark)
CALLER: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.Bootstrap#validate()
CALLER: io.netty.bootstrap.AbstractBootstrap#doBind(java.net.SocketAddress)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#initAndRegister()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel,io.netty.bootstrap.AbstractBootstrap.1)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#<init>(io.netty.bootstrap.AbstractBootstrap,io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise,io.netty.channel.Channel,io.netty.channel.ChannelFuture,java.net.SocketAddress)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
CALLER: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group(io.netty.channel.EventLoopGroup)
CALLER: com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#checkNonLoadingCache()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.CacheBuilder)
	CALLEE: com.google.common.cache.LocalCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.LocalCache)
CALLER: javassist.bytecode.stackmap.TypeData.ArrayElement#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#toTypeVar()
CALLER: javassist.bytecode.stackmap.TypeData.ArrayType#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#toTypeVar()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#toTypeVar()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#fixTypes(java.util.ArrayList,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#is2WordType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#fixTypes2(java.util.ArrayList,java.util.HashSet,javassist.ClassPool)
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.NullType#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitData#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isNullType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.BasicType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ClassName#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayElement#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.ArrayType#isBasicType()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#getName()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isUninit()
	CALLEE: javassist.bytecode.stackmap.TypeData.UninitTypeVar#isBasicType()
CALLER: org.yaml.snakeyaml.error.Mark#get_snippet()
	CALLEE: org.yaml.snakeyaml.error.Mark#get_snippet(int,int)
CALLER: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#get(java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#delegate()
	CALLEE: static com.google.common.collect.Synchronized#access$400(java.util.Collection,java.lang.Object)
CALLER: static jline.internal.ShutdownHooks#access$000()
	CALLEE: static jline.internal.ShutdownHooks#runTasks()
CALLER: com.google.common.io.Closer.SuppressingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
CALLER: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Throwables#propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable)
CALLER: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
CALLER: com.google.common.collect.Iterators.8#transform(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#apply(java.lang.Object)
CALLER: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: com.google.common.collect.AbstractIterator#tryToComputeNext()
CALLER: javassist.bytecode.ExceptionTable#add(int,javassist.bytecode.ExceptionTable,int)
	CALLEE: javassist.bytecode.ExceptionTable#size()
	CALLEE: javassist.bytecode.ExceptionTable#add(int,int,int,int,int)
CALLER: javassist.bytecode.CodeIterator#insert0(int,byte[],boolean)
	CALLEE: javassist.bytecode.CodeIterator#insertGapAt(int,int,boolean)
CALLER: javassist.bytecode.CodeIterator#skipSuperConstructor0(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.ConstPool#getMethodrefClassName(int)
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
	CALLEE: javassist.bytecode.CodeIterator#begin()
	CALLEE: javassist.bytecode.CodeIterator#byteAt(int)
	CALLEE: javassist.bytecode.CodeIterator#next()
	CALLEE: javassist.bytecode.CodeIterator#hasNext()
	CALLEE: javassist.bytecode.CodeAttribute#getDeclaringClass()
	CALLEE: javassist.bytecode.ConstPool#getMethodrefName(int)
CALLER: javassist.bytecode.AnnotationsAttribute.Renamer#renameType(int,int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#addUtf8Info(java.lang.String)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.Descriptor#rename(java.lang.String,java.util.Map)
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.IteratorImpl#scanNext()
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#scanNext()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$200(io.netty.util.collection.IntObjectHashMap)
CALLER: javassist.CtClass#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtClass#getName()
CALLER: javassist.CtClassType#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtClassType#getMembers()
	CALLEE: javassist.CtMember.Cache#lastMethod()
	CALLEE: javassist.CtMember.Cache#methodHead()
	CALLEE: static javassist.Modifier#toString(int)
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClassType#getInterfaces()
	CALLEE: javassist.CtMember.Cache#fieldHead()
	CALLEE: javassist.CtMember.Cache#lastField()
	CALLEE: javassist.CtClassType#exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember)
	CALLEE: javassist.CtMember.Cache#consHead()
	CALLEE: javassist.CtMember.Cache#lastCons()
CALLER: static org.yaml.snakeyaml.DumperOptions.Version#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#<init>(java.lang.String,int,java.lang.Integer[])
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: javassist.bytecode.StackMap.Shifter#<init>(javassist.bytecode.StackMap,int,int,boolean)
	CALLEE: javassist.bytecode.StackMap.Walker#<init>(javassist.bytecode.StackMap)
CALLER: javassist.bytecode.LineNumberAttribute#tableLength()
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
CALLER: javassist.bytecode.CodeIterator.Jump16#write32(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
CALLER: javassist.bytecode.CodeIterator.If16#write32(int,byte[],int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
	CALLEE: javassist.bytecode.CodeIterator.If16#opcode(int)
CALLER: javassist.bytecode.CodeIterator.Switcher#adjustOffsets(int,int)
	CALLEE: javassist.bytecode.CodeIterator.Pointers#shiftForSwitch(int,int)
CALLER: javassist.bytecode.CodeIterator.Table#write2(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
CALLER: javassist.bytecode.CodeIterator.Lookup#write2(int,byte[])
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
CALLER: javassist.bytecode.StackMapTable.OffsetShifter#<init>(javassist.bytecode.StackMapTable,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Walker#<init>(javassist.bytecode.StackMapTable)
CALLER: javassist.bytecode.StackMapTable.Shifter#<init>(javassist.bytecode.StackMapTable,int,int,boolean)
	CALLEE: javassist.bytecode.StackMapTable.Walker#<init>(javassist.bytecode.StackMapTable)
CALLER: javassist.bytecode.StackMapTable.Shifter#doit()
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
	CALLEE: javassist.bytecode.StackMapTable.Walker#parse()
CALLER: io.netty.util.concurrent.GlobalEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#hasScheduledTasks()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getHandle()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getSuffix()
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getValue()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getTags()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getPlain()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getStyle()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#processEmptyScalar(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Character)
CALLER: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#handler()
CALLER: io.netty.bootstrap.AbstractBootstrap#initAndRegister()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channelFactory()
	CALLEE: io.netty.bootstrap.Bootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.BootstrapChannelFactory#newChannel()
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.bootstrap.ServerBootstrap#init(io.netty.channel.Channel)
CALLER: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.2#<init>(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel,io.netty.bootstrap.AbstractBootstrap.1)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel)
CALLER: static com.google.common.cache.LocalCache#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.1#<init>()
	CALLEE: com.google.common.cache.LocalCache.2#<init>()
CALLER: com.google.common.cache.LocalCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.CacheBuilder#getInitialCapacity()
	CALLEE: com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: com.google.common.cache.LocalCache#customWeigher()
	CALLEE: com.google.common.cache.LocalCache#newSegmentArray(int)
	CALLEE: com.google.common.cache.LocalCache#createSegment(int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: com.google.common.base.Suppliers.SupplierOfInstance#get()
	CALLEE: com.google.common.cache.CacheBuilder#getConcurrencyLevel()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getMaximumWeight()
	CALLEE: com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: com.google.common.cache.CacheBuilder#getExpireAfterAccessNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getExpireAfterWriteNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getRefreshNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: com.google.common.cache.LocalCache#recordsTime()
	CALLEE: com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: static com.google.common.cache.LocalCache.EntryFactory#getFactory(com.google.common.cache.LocalCache.Strength,boolean,boolean)
	CALLEE: com.google.common.cache.CacheBuilder#getStatsCounterSupplier()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#fixTypes2(java.util.ArrayList,java.util.HashSet,javassist.ClassPool)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: static javassist.bytecode.stackmap.TypeData#commonSuperClassEx(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClass#getSuperclass()
	CALLEE: javassist.CtArray#getSuperclass()
	CALLEE: static javassist.bytecode.stackmap.TypeData.TypeVar#isObjectArray(javassist.CtClass)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#fixByUppers(java.util.ArrayList,javassist.ClassPool,java.util.HashSet,javassist.CtClass)
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(javassist.CtClass)
CALLER: org.yaml.snakeyaml.error.Mark#get_snippet(int,int)
	CALLEE: org.yaml.snakeyaml.error.Mark#isLineBreak(char)
CALLER: com.google.common.collect.HashMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#delegate()
CALLER: static com.google.common.collect.Synchronized#access$400(java.util.Collection,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#typePreservingCollection(java.util.Collection,java.lang.Object)
CALLER: static jline.internal.ShutdownHooks#runTasks()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
CALLER: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable)
	CALLEE: static com.google.common.base.Throwables#propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)
CALLER: net.md_5.bungee.command.PlayerCommand.2#apply(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#apply(net.md_5.bungee.api.connection.ProxiedPlayer)
CALLER: static com.google.common.collect.AbstractIterator.1#<clinit>()
	CALLEE: static com.google.common.collect.AbstractIterator.State#values()
CALLER: com.google.common.collect.AbstractIterator#tryToComputeNext()
	CALLEE: com.google.common.collect.Iterators.7#computeNext()
CALLER: javassist.bytecode.ExceptionTable#add(int,int,int,int,int)
	CALLEE: javassist.bytecode.ExceptionTableEntry#<init>(int,int,int,int)
CALLER: javassist.bytecode.CodeIterator#insertGapAt(int,int,boolean)
	CALLEE: javassist.bytecode.CodeAttribute#getExceptionTable()
	CALLEE: javassist.bytecode.CodeIterator#getCodeLength()
	CALLEE: javassist.bytecode.CodeIterator.Gap#<init>()
	CALLEE: javassist.bytecode.CodeIterator#get()
	CALLEE: javassist.bytecode.CodeIterator#insertGapCore0w(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeIterator.Gap)
	CALLEE: static javassist.bytecode.CodeIterator#insertGapCore0(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.CodeAttribute#setCode(byte[])
	CALLEE: javassist.bytecode.CodeIterator#updateCursors(int,int)
CALLER: javassist.bytecode.CodeAttribute#getDeclaringClass()
	CALLEE: javassist.bytecode.ConstPool#getClassName()
	CALLEE: javassist.bytecode.AttributeInfo#getConstPool()
CALLER: javassist.bytecode.ConstPool#getMethodrefName(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#getSuperclass()
CALLER: javassist.CtClassType#getInterfaces()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#getInterfaces()
CALLER: javassist.CtClassType#exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember)
	CALLEE: javassist.CtMember#next()
CALLER: javassist.bytecode.CodeIterator.Pointers#shiftForSwitch(int,int)
	CALLEE: javassist.bytecode.StackMapTable#shiftForSwitch(int,int)
	CALLEE: javassist.bytecode.StackMap#shiftForSwitch(int,int)
CALLER: javassist.bytecode.StackMapTable.Walker#<init>(javassist.bytecode.StackMapTable)
	CALLEE: javassist.bytecode.AttributeInfo#get()
	CALLEE: javassist.bytecode.StackMapTable.Walker#<init>(byte[])
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.bootstrap.Bootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#handler()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#options()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#attrs()
CALLER: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
CALLER: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
CALLER: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: static com.google.common.cache.CacheBuilder.NullListener#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.NullListener#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#recordsTime()
	CALLEE: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#recordsAccess()
CALLER: com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: static com.google.common.base.Ticker#systemTicker()
CALLER: com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: com.google.common.cache.LocalCache#usesAccessQueue()
CALLER: com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#usesWriteQueue()
CALLER: static com.google.common.cache.LocalCache.EntryFactory#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#createSegment(int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: com.google.common.cache.LocalCache.Segment#<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache.StatsCounter)
CALLER: static javassist.bytecode.stackmap.TypeData#commonSuperClassEx(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClass#getClassPool()
	CALLEE: javassist.CtArray#getClassPool()
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: static javassist.bytecode.stackmap.TypeData#commonSuperClassEx(javassist.CtClass,javassist.CtClass)
	CALLEE: static javassist.bytecode.stackmap.TypeData#commonSuperClass(javassist.CtClass,javassist.CtClass)
CALLER: javassist.CtArray#getSuperclass()
	CALLEE: javassist.ClassPool#get(java.lang.String)
CALLER: static javassist.bytecode.stackmap.TypeData.TypeVar#isObjectArray(javassist.CtClass)
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClass#getSuperclass()
	CALLEE: javassist.CtArray#getSuperclass()
CALLER: javassist.bytecode.stackmap.TypeData.TypeVar#fixByUppers(java.util.ArrayList,javassist.ClassPool,java.util.HashSet,javassist.CtClass)
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.bytecode.stackmap.TypeData.TypeVar#fixByUppers(java.util.ArrayList,javassist.ClassPool,java.util.HashSet,javassist.CtClass)
	CALLEE: javassist.CtClass#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtArray#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClassType#subtypeOf(javassist.CtClass)
CALLER: static javassist.bytecode.Descriptor#toJvmName(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(java.lang.String)
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: static javassist.bytecode.Descriptor#of(javassist.CtClass)
CALLER: org.yaml.snakeyaml.error.Mark#isLineBreak(char)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(char)
CALLER: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#typePreservingCollection(java.util.Collection,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#sortedSet(java.util.SortedSet,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#set(java.util.Set,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#list(java.util.List,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#collection(java.util.Collection,java.lang.Object)
CALLER: com.google.common.collect.Iterators.7#computeNext()
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#apply(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractIterator#endOfData()
CALLER: javassist.bytecode.CodeIterator#insertGapCore0w(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeIterator.Gap)
	CALLEE: javassist.bytecode.CodeIterator.Pointers#<init>(int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: static javassist.bytecode.CodeIterator#makeJumpList(byte[],int,javassist.bytecode.CodeIterator.Pointers)
	CALLEE: static javassist.bytecode.CodeIterator#insertGap2w(byte[],int,int,boolean,java.util.ArrayList,javassist.bytecode.CodeIterator.Pointers)
CALLER: static javassist.bytecode.CodeIterator#insertGapCore0(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: static javassist.bytecode.CodeIterator#insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
CALLER: javassist.bytecode.CodeAttribute#setCode(byte[])
	CALLEE: javassist.bytecode.AttributeInfo#set(byte[])
CALLER: javassist.bytecode.ClassFile#getInterfaces()
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
CALLER: javassist.bytecode.StackMapTable#shiftForSwitch(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#doit()
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#<init>(javassist.bytecode.StackMapTable,int,int)
CALLER: javassist.bytecode.StackMap#shiftForSwitch(int,int)
	CALLEE: javassist.bytecode.StackMap.Walker#visit()
	CALLEE: javassist.bytecode.StackMap.SwitchShifter#<init>(javassist.bytecode.StackMap,int,int)
CALLER: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>()
CALLER: static com.google.common.cache.LocalCache.Strength#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
CALLER: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.cache.CacheBuilder.OneWeigher#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.OneWeigher#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterWrite()
	CALLEE: com.google.common.cache.LocalCache#refreshes()
CALLER: com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterWrite()
CALLER: com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Segment#<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: com.google.common.cache.LocalCache.Segment#newEntryArray(int)
	CALLEE: com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: com.google.common.cache.LocalCache#usesKeyReferences()
	CALLEE: com.google.common.cache.LocalCache#usesValueReferences()
	CALLEE: com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.AccessQueue#<init>()
CALLER: static javassist.bytecode.stackmap.TypeData#commonSuperClass(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClass#getSuperclass()
	CALLEE: javassist.CtArray#getSuperclass()
	CALLEE: static javassist.bytecode.stackmap.TypeData#eq(javassist.CtClass,javassist.CtClass)
CALLER: javassist.CtClass#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
CALLER: javassist.CtArray#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: javassist.CtClass#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtArray#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClassType#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtArray#getInterfaces()
CALLER: javassist.CtClassType#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#getSuperclass()
	CALLEE: javassist.bytecode.ClassFile#getInterfaces()
	CALLEE: javassist.CtClass#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtArray#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClassType#subtypeOf(javassist.CtClass)
CALLER: static javassist.bytecode.Descriptor#of(javassist.CtClass)
	CALLEE: static javassist.bytecode.Descriptor#toDescriptor(java.lang.StringBuffer,javassist.CtClass)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
CALLER: static com.google.common.collect.Synchronized#sortedSet(java.util.SortedSet,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#<init>(java.util.SortedSet,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#set(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#list(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedRandomAccessList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#collection(java.util.Collection,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: net.md_5.bungee.command.PlayerCommand.1#apply(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#apply(net.md_5.bungee.api.connection.ProxiedPlayer)
CALLER: static javassist.bytecode.CodeIterator#insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.CodeAttribute#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.ExceptionTable#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMap#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.LineNumberAttribute#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.LocalVariableAttribute#shiftPc(int,int,boolean)
	CALLEE: javassist.bytecode.StackMapTable#shiftPc(int,int,boolean)
	CALLEE: static javassist.bytecode.CodeIterator#insertGap2(byte[],int,int,int,byte[],boolean)
CALLER: javassist.bytecode.StackMapTable.SwitchShifter#<init>(javassist.bytecode.StackMapTable,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#<init>(javassist.bytecode.StackMapTable,int,int,boolean)
CALLER: javassist.bytecode.StackMap.SwitchShifter#<init>(javassist.bytecode.StackMap,int,int)
	CALLEE: javassist.bytecode.StackMap.Walker#<init>(javassist.bytecode.StackMap)
CALLER: io.netty.util.concurrent.DefaultPromise#<init>()
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: com.google.common.cache.LocalCache#customWeigher()
CALLER: com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.WriteQueue.1#<init>(com.google.common.cache.LocalCache.WriteQueue)
CALLER: com.google.common.cache.LocalCache.AccessQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.AccessQueue.1#<init>(com.google.common.cache.LocalCache.AccessQueue)
CALLER: static javassist.bytecode.stackmap.TypeData#eq(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
CALLER: javassist.CtArray#getInterfaces()
	CALLEE: javassist.ClassPool#get(java.lang.String)
CALLER: static javassist.bytecode.Descriptor#toDescriptor(java.lang.StringBuffer,javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(java.lang.String)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: static javassist.bytecode.Descriptor#toDescriptor(java.lang.StringBuffer,javassist.CtClass)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#<init>(java.util.SortedSet,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: com.google.common.collect.Synchronized.SynchronizedRandomAccessList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object)
CALLER: static javassist.bytecode.CodeIterator#insertGap2(byte[],int,int,int,byte[],boolean)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#read32bit(byte[],int)
	CALLEE: static javassist.bytecode.CodeIterator#nextOpcode(byte[],int)
	CALLEE: static javassist.bytecode.ByteArray#write32bit(int,byte[],int)
	CALLEE: static javassist.bytecode.CodeIterator#newOffset(int,int,int,int,boolean)
	CALLEE: javassist.bytecode.CodeIterator.AlignmentException#<init>()
	CALLEE: static javassist.bytecode.CodeIterator#copyGapBytes(byte[],int,byte[],int,int)
	CALLEE: static javassist.bytecode.ByteArray#copy32bit(byte[],int,byte[],int)
CALLER: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache.WriteQueue.1#<init>(com.google.common.cache.LocalCache.WriteQueue)
	CALLEE: com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: com.google.common.cache.LocalCache.AccessQueue.1#<init>(com.google.common.cache.LocalCache.AccessQueue)
	CALLEE: com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.Lists.ReverseList#listIterator(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#reversePosition(int)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#<init>(com.google.common.collect.Lists.ReverseList,java.util.ListIterator)
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: javassist.CtField#toString()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.CtField#getName()
	CALLEE: javassist.CtField#getDeclaringClass()
CALLER: javassist.bytecode.StackMap.Shifter#locals(int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.StackMap.Walker#locals(int,int,int)
CALLER: javassist.bytecode.StackMap.SwitchShifter#locals(int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: javassist.bytecode.StackMap.Walker#locals(int,int,int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#produce()
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
CALLER: javassist.CtField#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.CtField#getName()
CALLER: javassist.CtBehavior#extendToString(java.lang.StringBuffer)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.CtMethod#getName()
	CALLEE: javassist.CtConstructor#getName()
CALLER: javassist.CtField#getModifiers()
	CALLEE: static javassist.bytecode.AccessFlag#toModifier(int)
	CALLEE: javassist.bytecode.FieldInfo#getAccessFlags()
CALLER: javassist.CtBehavior#getModifiers()
	CALLEE: static javassist.bytecode.AccessFlag#toModifier(int)
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
CALLER: javassist.CtMethod#hashCode()
	CALLEE: javassist.CtMethod#getStringRep()
CALLER: javassist.bytecode.StackMapTable.Shifter#sameFrame(int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#update(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int,int,int)
CALLER: javassist.bytecode.StackMapTable.Shifter#chopFrame(int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#update(int,int)
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int)
CALLER: javassist.bytecode.annotation.ByteMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ByteMemberValue#getValue()
CALLER: javassist.bytecode.annotation.CharMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.CharMemberValue#getValue()
CALLER: javassist.bytecode.annotation.DoubleMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.DoubleMemberValue#getValue()
CALLER: javassist.bytecode.annotation.FloatMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.FloatMemberValue#getValue()
CALLER: javassist.bytecode.annotation.IntegerMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.IntegerMemberValue#getValue()
CALLER: javassist.bytecode.annotation.LongMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.LongMemberValue#getValue()
CALLER: javassist.bytecode.annotation.ShortMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ShortMemberValue#getValue()
CALLER: javassist.bytecode.annotation.BooleanMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.BooleanMemberValue#getValue()
CALLER: javassist.bytecode.annotation.StringMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.StringMemberValue#getValue()
CALLER: javassist.bytecode.annotation.ArrayMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ByteMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.CharMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.DoubleMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.FloatMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.IntegerMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.LongMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ShortMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.BooleanMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.StringMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ArrayMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.AnnotationMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ClassMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.EnumMemberValue#toString()
CALLER: javassist.bytecode.annotation.AnnotationMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.Annotation#toString()
CALLER: javassist.bytecode.annotation.ClassMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.ClassMemberValue#getValue()
CALLER: javassist.bytecode.annotation.EnumMemberValue#toString()
	CALLEE: javassist.bytecode.annotation.EnumMemberValue#getType()
	CALLEE: javassist.bytecode.annotation.EnumMemberValue#getValue()
CALLER: javassist.bytecode.StackMapTable.Shifter#sameLocals(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.Shifter#update(int,int,int,int)
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int,int,int)
CALLER: javassist.bytecode.StackMapTable.OffsetShifter#objectOrUninitialized(int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.StackMapTable.Shifter#appendFrame(int,int,int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Shifter#update(int,int)
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int)
CALLER: javassist.bytecode.StackMapTable.Shifter#fullFrame(int,int,int[],int[],int[],int[])
	CALLEE: javassist.bytecode.StackMapTable.Shifter#update(int,int)
	CALLEE: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int)
CALLER: javassist.bytecode.StackMap.Shifter#uninitialized(int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.AnnotationsAttribute.Parser#memberValuePair(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#memberValuePair(int,int)
	CALLEE: javassist.bytecode.annotation.Annotation#addMemberValue(int,javassist.bytecode.annotation.MemberValue)
CALLER: javassist.CtField#getName()
	CALLEE: javassist.bytecode.FieldInfo#getName()
CALLER: javassist.CtMethod#getName()
	CALLEE: javassist.bytecode.MethodInfo#getName()
CALLER: javassist.CtConstructor#getName()
	CALLEE: javassist.bytecode.MethodInfo#isStaticInitializer()
	CALLEE: javassist.CtClass#getSimpleName()
CALLER: javassist.CtBehavior#setBody(java.lang.String)
	CALLEE: javassist.CtBehavior#setBody(java.lang.String,java.lang.String,java.lang.String)
CALLER: com.google.common.collect.Lists.ReverseList#get(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#reverseIndex(int)
CALLER: joptsimple.OptionSpecBuilder#defaultValues()
	CALLEE: joptsimple.NoArgumentOptionSpec#defaultValues()
CALLER: io.netty.util.concurrent.DefaultPromise.LateListeners#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$100(io.netty.util.concurrent.DefaultPromise)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$400(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#executor()
CALLER: io.netty.util.concurrent.DefaultPromise.LateListenerNotifier#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListeners#<init>(io.netty.util.concurrent.DefaultPromise)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LateListeners#run()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$500(io.netty.util.concurrent.DefaultPromise)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$502(io.netty.util.concurrent.DefaultPromise,io.netty.util.concurrent.DefaultPromise.LateListeners)
CALLER: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$000(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$102(io.netty.util.concurrent.DefaultPromise,java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise.2#run()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$102(io.netty.util.concurrent.DefaultPromise,java.lang.Object)
CALLER: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: javassist.bytecode.AnnotationsAttribute.Renamer#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#classMemberValue(int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#renameType(int,int)
CALLER: javassist.bytecode.AnnotationsAttribute.Renamer#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Walker#enumMemberValue(int,int,int)
	CALLEE: javassist.bytecode.AnnotationsAttribute.Renamer#renameType(int,int)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1900(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2010(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2200(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: io.netty.util.collection.IntObjectHashMap.IteratorImpl#value()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$200(io.netty.util.collection.IntObjectHashMap)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$500(java.lang.Object)
CALLER: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
CALLER: io.netty.bootstrap.AbstractBootstrap.BootstrapChannelFactory#newChannel()
	CALLEE: io.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#next()
	CALLEE: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel)
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
	CALLEE: static com.google.common.base.Equivalence#equals()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: javassist.bytecode.annotation.Annotation#toString()
	CALLEE: javassist.bytecode.annotation.Annotation#getTypeName()
	CALLEE: javassist.bytecode.annotation.Annotation#getMemberValue(java.lang.String)
CALLER: io.netty.bootstrap.ServerBootstrap#validate()
	CALLEE: io.netty.bootstrap.ServerBootstrap#validate()
CALLER: io.netty.bootstrap.ServerBootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#options()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#attrs()
	CALLEE: static io.netty.bootstrap.ServerBootstrap#newOptionArray(int)
	CALLEE: static io.netty.bootstrap.ServerBootstrap#newAttrArray(int)
	CALLEE: io.netty.bootstrap.ServerBootstrap.1#<init>(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map.Entry[],java.util.Map.Entry[])
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.Lists.ReverseList#reversePosition(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#size()
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
CALLER: javassist.CtField#getDeclaringClass()
	CALLEE: javassist.CtMember#getDeclaringClass()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.Boolean)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: javassist.CtMethod#getStringRep()
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: static javassist.bytecode.Descriptor#getParamDescriptor(java.lang.String)
CALLER: javassist.bytecode.StackMapTable.Shifter#update(int,int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.StackMapTable.Shifter#insertGap(byte[],int,int)
CALLER: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int,int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
	CALLEE: static javassist.bytecode.StackMapTable.Shifter#insertGap(byte[],int,int)
	CALLEE: static javassist.bytecode.StackMapTable.SwitchShifter#deleteGap(byte[],int,int)
CALLER: javassist.bytecode.StackMapTable.Shifter#update(int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.StackMapTable.SwitchShifter#update(int,int)
	CALLEE: static javassist.bytecode.ByteArray#write16bit(int,byte[],int)
CALLER: javassist.bytecode.annotation.ByteMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
CALLER: javassist.bytecode.annotation.CharMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
CALLER: javassist.bytecode.annotation.DoubleMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getDoubleInfo(int)
CALLER: javassist.bytecode.annotation.FloatMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getFloatInfo(int)
CALLER: javassist.bytecode.annotation.IntegerMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
CALLER: javassist.bytecode.annotation.LongMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getLongInfo(int)
CALLER: javassist.bytecode.annotation.ShortMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
CALLER: javassist.bytecode.annotation.BooleanMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
CALLER: javassist.bytecode.annotation.StringMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.annotation.ClassMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: static javassist.bytecode.SignatureAttribute#toTypeSignature(java.lang.String)
	CALLEE: javassist.bytecode.SignatureAttribute.Type#jvmTypeName()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#jvmTypeName()
CALLER: javassist.bytecode.annotation.EnumMemberValue#getType()
	CALLEE: static javassist.bytecode.Descriptor#toClassName(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.annotation.EnumMemberValue#getValue()
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.bytecode.annotation.Annotation#addMemberValue(int,javassist.bytecode.annotation.MemberValue)
	CALLEE: javassist.bytecode.annotation.Annotation.Pair#<init>()
	CALLEE: javassist.bytecode.annotation.Annotation#addMemberValue(javassist.bytecode.annotation.Annotation.Pair)
CALLER: javassist.bytecode.MethodInfo#isStaticInitializer()
	CALLEE: javassist.bytecode.MethodInfo#getName()
CALLER: javassist.CtBehavior#setBody(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#checkModify()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.CannotCompileException#<init>(java.lang.Throwable)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.MethodInfo#rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)
	CALLEE: javassist.CannotCompileException#<init>(javassist.compiler.CompileError)
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
	CALLEE: javassist.compiler.Javac#<init>(javassist.CtClass)
	CALLEE: javassist.compiler.Javac#recordProceed(java.lang.String,java.lang.String)
	CALLEE: javassist.compiler.Javac#compileBody(javassist.CtBehavior,java.lang.String)
	CALLEE: javassist.CtClassType#rebuildClassFile()
CALLER: com.google.common.collect.Lists.ReverseList#reverseIndex(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#size()
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int)
CALLER: static io.netty.util.concurrent.ImmediateEventExecutor#<clinit>()
	CALLEE: io.netty.util.concurrent.ImmediateEventExecutor#<init>()
CALLER: static io.netty.util.concurrent.DefaultPromise#access$400(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
CALLER: static io.netty.util.concurrent.DefaultPromise#access$000(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)
CALLER: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: static io.netty.util.collection.IntObjectHashMap#access$500(java.lang.Object)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#toExternal(java.lang.Object)
CALLER: io.netty.channel.MultithreadEventLoopGroup#next()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#next()
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#delegate()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$000(com.google.common.collect.AbstractMapBasedMultimap)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
CALLER: javassist.bytecode.annotation.Annotation#getTypeName()
	CALLEE: static javassist.bytecode.Descriptor#toClassName(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: io.netty.bootstrap.ServerBootstrap#validate()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group()
CALLER: io.netty.bootstrap.ServerBootstrap.1#<init>(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map.Entry[],java.util.Map.Entry[])
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
CALLER: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseFlowNode()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseBlockNodeOrIndentlessSequence()
CALLER: javassist.bytecode.ConstPool#getIntegerInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getDoubleInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getFloatInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.bytecode.ConstPool#getLongInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: static javassist.bytecode.SignatureAttribute#toTypeSignature(java.lang.String)
	CALLEE: javassist.bytecode.SignatureAttribute.Cursor#<init>(javassist.bytecode.SignatureAttribute.1)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: static javassist.bytecode.SignatureAttribute#error(java.lang.String)
CALLER: javassist.bytecode.annotation.Annotation#addMemberValue(javassist.bytecode.annotation.Annotation.Pair)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
CALLER: javassist.compiler.Javac#<init>(javassist.CtClass)
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool,int,int)
	CALLEE: javassist.compiler.Javac#<init>(javassist.bytecode.Bytecode,javassist.CtClass)
CALLER: javassist.compiler.Javac#recordProceed(java.lang.String,java.lang.String)
	CALLEE: javassist.compiler.Lex#<init>(java.lang.String)
	CALLEE: javassist.compiler.Parser#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Javac.1#<init>(javassist.compiler.Javac,java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.JvstCodeGen#setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String)
CALLER: javassist.compiler.Javac#compileBody(javassist.CtBehavior,java.lang.String)
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: javassist.compiler.Javac#recordParams(javassist.CtClass[],boolean)
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.CtBehavior#getModifiers()
	CALLEE: javassist.compiler.Lex#<init>(java.lang.String)
	CALLEE: javassist.compiler.Parser#<init>(javassist.compiler.Lex)
	CALLEE: javassist.CtBehavior#getParameterTypes()
	CALLEE: javassist.CtMethod#getReturnType()
	CALLEE: javassist.compiler.Javac#recordReturnType(javassist.CtClass,boolean)
	CALLEE: static javassist.compiler.Javac#makeDefaultBody(javassist.bytecode.Bytecode,javassist.CtClass)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#hasMore()
	CALLEE: javassist.compiler.CodeGen#atMethodBody(javassist.compiler.ast.Stmnt,boolean,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#setThisMethod(javassist.CtMethod)
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
CALLER: io.netty.util.concurrent.ImmediateEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.FailedFuture#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#<init>()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#next()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.PowerOfTwoEventExecutorChooser#next()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.GenericEventExecutorChooser#next()
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: static com.google.common.base.Equivalence.Equals#<clinit>()
	CALLEE: com.google.common.base.Equivalence.Equals#<init>()
CALLER: static com.google.common.collect.AbstractMapBasedMultimap#access$100(com.google.common.collect.AbstractMapBasedMultimap,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#iteratorOrListIterator(java.util.Collection)
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: static com.google.common.collect.Maps#capacity(int)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
CALLER: static com.google.common.collect.Maps#<clinit>()
	CALLEE: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseFlowNode()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: javassist.bytecode.SignatureAttribute.Cursor#<init>(javassist.bytecode.SignatureAttribute.1)
	CALLEE: javassist.bytecode.SignatureAttribute.Cursor#<init>()
CALLER: static javassist.bytecode.SignatureAttribute#parseType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseObjectType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,boolean)
	CALLEE: javassist.bytecode.SignatureAttribute.BaseType#<init>(char)
CALLER: static javassist.bytecode.SignatureAttribute#error(java.lang.String)
	CALLEE: javassist.bytecode.BadBytecode#<init>(java.lang.String)
CALLER: static javassist.compiler.Lex#<clinit>()
	CALLEE: javassist.compiler.KeywordTable#<init>()
	CALLEE: javassist.compiler.KeywordTable#append(java.lang.String,int)
CALLER: javassist.compiler.Lex#<init>(java.lang.String)
	CALLEE: javassist.compiler.Token#<init>()
CALLER: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseConditionalExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: static javassist.compiler.Parser#isAssignOp(int)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: static javassist.compiler.ast.AssignExpr#makeAssign(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.CtBehavior#getParameterTypes()
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: static javassist.bytecode.Descriptor#getParameterTypes(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
CALLER: javassist.CtMethod#getReturnType()
	CALLEE: javassist.CtBehavior#getReturnType0()
CALLER: javassist.compiler.Javac#recordReturnType(javassist.CtClass,boolean)
	CALLEE: javassist.compiler.JvstCodeGen#recordReturnType(javassist.CtClass,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.JvstCodeGen#recordType(javassist.CtClass)
CALLER: static javassist.compiler.Javac#makeDefaultBody(javassist.bytecode.Bytecode,javassist.CtClass)
	CALLEE: javassist.CtPrimitiveType#getReturnOp()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
CALLER: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseBlock(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: static javassist.compiler.ast.Stmnt#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseIf(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseWhile(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseDo(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseFor(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseTry(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseSwitch(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseSynchronized(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseReturn(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseThrow(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseBreak(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseContinue(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean)
CALLER: javassist.compiler.Parser#hasMore()
	CALLEE: javassist.compiler.Lex#lookAhead()
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.PowerOfTwoEventExecutorChooser#next()
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$300(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$500(io.netty.util.concurrent.MultithreadEventExecutorGroup)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.GenericEventExecutorChooser#next()
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$300(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$500(io.netty.util.concurrent.MultithreadEventExecutorGroup)
CALLER: com.google.common.base.Equivalence.Equals#<init>()
	CALLEE: com.google.common.base.Equivalence#<init>()
CALLER: static com.google.common.collect.Collections2#<clinit>()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#useForNull(java.lang.String)
CALLER: static javassist.bytecode.SignatureAttribute#parseObjectType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,boolean)
	CALLEE: static javassist.bytecode.SignatureAttribute#error(java.lang.String)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseClassType2(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,javassist.bytecode.SignatureAttribute.ClassType)
	CALLEE: javassist.bytecode.SignatureAttribute.Cursor#indexOf(java.lang.String,int)
	CALLEE: javassist.bytecode.SignatureAttribute.TypeVariable#<init>(java.lang.String,int,int)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseArray(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
CALLER: javassist.bytecode.SignatureAttribute.BaseType#<init>(char)
	CALLEE: javassist.bytecode.SignatureAttribute.Type#<init>()
CALLER: javassist.compiler.Parser#parseConditionalExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseBinaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.CondExpr#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
CALLER: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#get(javassist.compiler.Token)
CALLER: static javassist.compiler.ast.AssignExpr#makeAssign(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.AssignExpr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.CtBehavior#getReturnType0()
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: static javassist.bytecode.Descriptor#getReturnType(java.lang.String,javassist.ClassPool)
CALLER: javassist.compiler.Parser#parseBlock(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.Token#<init>()
	CALLEE: javassist.compiler.Lex#get(javassist.compiler.Token)
CALLER: static javassist.compiler.ast.Stmnt#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseIf(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseParExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseWhile(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseParExpression(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.Parser#parseDo(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseFor(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseExprList(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.Parser#parseTry(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseBlock(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseFormalParam(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Pair#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.Stmnt#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
CALLER: javassist.compiler.Parser#parseSwitch(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseParExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseSwitchBlock(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.Parser#parseSynchronized(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseBlock(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseReturn(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
CALLER: javassist.compiler.Parser#parseThrow(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseBreak(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseContinue(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.Parser#parseContinue(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
CALLER: javassist.compiler.Parser#parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseExprList(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.ast.Declarator#<init>(int,int)
	CALLEE: javassist.compiler.Parser#parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.Parser#nextIsClassType(int)
	CALLEE: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Declarator#<init>(javassist.compiler.ast.ASTList,int)
CALLER: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: com.google.common.base.Joiner#useForNull(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
CALLER: static javassist.bytecode.SignatureAttribute#parseClassType2(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,javassist.bytecode.SignatureAttribute.ClassType)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseClassType2(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,javassist.bytecode.SignatureAttribute.ClassType)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseTypeArgs(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: static javassist.bytecode.SignatureAttribute.ClassType#make(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[],javassist.bytecode.SignatureAttribute.ClassType)
CALLER: javassist.bytecode.SignatureAttribute.Cursor#indexOf(java.lang.String,int)
	CALLEE: static javassist.bytecode.SignatureAttribute#access$000(java.lang.String)
CALLER: javassist.bytecode.SignatureAttribute.TypeVariable#<init>(java.lang.String,int,int)
	CALLEE: javassist.bytecode.SignatureAttribute.ObjectType#<init>()
CALLER: static javassist.bytecode.SignatureAttribute#parseArray(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: javassist.bytecode.SignatureAttribute.ArrayType#<init>(int,javassist.bytecode.SignatureAttribute.Type)
CALLER: javassist.compiler.Parser#parseBinaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Parser#parseUnaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#getOpPrecedence(int)
	CALLEE: javassist.compiler.Parser#binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int)
CALLER: javassist.compiler.ast.CondExpr#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Lex#get(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#readLine(javassist.compiler.Token)
CALLER: javassist.compiler.ast.AssignExpr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: static javassist.bytecode.Descriptor#getReturnType(java.lang.String,javassist.ClassPool)
	CALLEE: static javassist.bytecode.Descriptor#toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int)
CALLER: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.Lex#getTextAround()
CALLER: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseParExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
CALLER: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: javassist.compiler.Parser#parseExprList(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseFormalParam(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.SymbolTable#append(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.Parser#parseFormalType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Declarator#addArrayDim(int)
	CALLEE: javassist.compiler.ast.Declarator#setVariable(javassist.compiler.ast.Symbol)
CALLER: javassist.compiler.ast.Pair#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: static javassist.compiler.ast.Stmnt#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseSwitchBlock(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.SymbolTable#<init>(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseStmntOrCase(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Stmnt#getOperator()
CALLER: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
CALLER: javassist.compiler.ast.Declarator#<init>(int,int)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)
	CALLEE: static javassist.compiler.ast.ASTList#concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseDeclarator(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)
CALLER: javassist.compiler.Parser#nextIsClassType(int)
	CALLEE: javassist.compiler.Lex#lookAhead(int)
CALLER: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
CALLER: javassist.compiler.ast.Declarator#<init>(javassist.compiler.ast.ASTList,int)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.Declarator#astToClassName(javassist.compiler.ast.ASTList,char)
CALLER: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
CALLER: static javassist.bytecode.SignatureAttribute#parseTypeArgs(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor)
	CALLEE: static javassist.bytecode.SignatureAttribute#parseObjectType(java.lang.String,javassist.bytecode.SignatureAttribute.Cursor,boolean)
	CALLEE: javassist.bytecode.SignatureAttribute.TypeArgument#<init>(javassist.bytecode.SignatureAttribute.ObjectType,char)
CALLER: static javassist.bytecode.SignatureAttribute.ClassType#make(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[],javassist.bytecode.SignatureAttribute.ClassType)
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#<init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[])
	CALLEE: javassist.bytecode.SignatureAttribute.NestedClassType#<init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[],javassist.bytecode.SignatureAttribute.ClassType)
CALLER: static javassist.bytecode.SignatureAttribute.ClassType#<clinit>()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#<init>(java.lang.String,javassist.bytecode.SignatureAttribute.TypeArgument[])
CALLER: static javassist.bytecode.SignatureAttribute#access$000(java.lang.String)
	CALLEE: static javassist.bytecode.SignatureAttribute#error(java.lang.String)
CALLER: javassist.bytecode.SignatureAttribute.ObjectType#<init>()
	CALLEE: javassist.bytecode.SignatureAttribute.Type#<init>()
CALLER: javassist.bytecode.SignatureAttribute.ArrayType#<init>(int,javassist.bytecode.SignatureAttribute.Type)
	CALLEE: javassist.bytecode.SignatureAttribute.ObjectType#<init>()
CALLER: javassist.compiler.Parser#parseUnaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseUnaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#getLong()
	CALLEE: javassist.compiler.ast.IntConst#<init>(long,int)
	CALLEE: javassist.compiler.Lex#getDouble()
	CALLEE: javassist.compiler.ast.DoubleConst#<init>(double,int)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseCast(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parsePostfix(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.Parser#binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Parser#parseUnaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#getOpPrecedence(int)
	CALLEE: javassist.compiler.Parser#binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int)
	CALLEE: javassist.compiler.Parser#parseInstanceOf(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.BinExpr#makeBin(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Lex#readLine(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getNextNonWhiteChar()
	CALLEE: javassist.compiler.Lex#readCharConst(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#readStringL(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#readNumber(int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#readDouble(java.lang.StringBuffer,int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#ungetc(int)
	CALLEE: javassist.compiler.Lex#readSeparator(int)
	CALLEE: javassist.compiler.Lex#readIdentifier(int,javassist.compiler.Token)
CALLER: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parseFormalType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.ast.Declarator#<init>(int,int)
	CALLEE: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Declarator#<init>(javassist.compiler.ast.ASTList,int)
CALLER: javassist.compiler.Parser#parseStmntOrCase(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseStatement(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.Stmnt#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseDeclarator(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.SymbolTable#append(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.Parser#parseInitializer(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Declarator#make(javassist.compiler.ast.Symbol,int,javassist.compiler.ast.ASTree)
CALLER: static javassist.compiler.ast.Declarator#astToClassName(javassist.compiler.ast.ASTList,char)
	CALLEE: static javassist.compiler.ast.Declarator#astToClassName(java.lang.StringBuffer,javassist.compiler.ast.ASTList,char)
CALLER: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner)
CALLER: javassist.bytecode.SignatureAttribute.ClassType#<init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[])
	CALLEE: javassist.bytecode.SignatureAttribute.ObjectType#<init>()
CALLER: javassist.bytecode.SignatureAttribute.NestedClassType#<init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[],javassist.bytecode.SignatureAttribute.ClassType)
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#<init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute.TypeArgument[])
CALLER: javassist.bytecode.SignatureAttribute.ClassType#<init>(java.lang.String,javassist.bytecode.SignatureAttribute.TypeArgument[])
	CALLEE: javassist.bytecode.SignatureAttribute.ObjectType#<init>()
CALLER: javassist.compiler.ast.IntConst#<init>(long,int)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: javassist.compiler.ast.DoubleConst#<init>(double,int)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseCast(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseUnaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parsePostfix(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#nextIsBuiltinCast()
	CALLEE: javassist.compiler.ast.CastExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#nextIsClassCast()
	CALLEE: javassist.compiler.ast.CastExpr#<init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parsePostfix(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.Lex#getLong()
	CALLEE: javassist.compiler.ast.IntConst#<init>(long,int)
	CALLEE: javassist.compiler.Lex#getDouble()
	CALLEE: javassist.compiler.ast.DoubleConst#<init>(double,int)
	CALLEE: javassist.compiler.Parser#parsePrimaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseMethodCall(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseDotClass(javassist.compiler.ast.ASTree,int)
	CALLEE: javassist.compiler.Parser#parseArrayIndex(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Keyword#<init>(int)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
CALLER: javassist.compiler.Parser#parseInstanceOf(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#<init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)
CALLER: static javassist.compiler.ast.BinExpr#makeBin(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.BinExpr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Lex#getNextNonWhiteChar()
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#ungetc(int)
	CALLEE: static javassist.compiler.Lex#isBlank(int)
CALLER: javassist.compiler.Lex#readCharConst(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#readEscapeChar()
CALLER: javassist.compiler.Lex#readStringL(javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#ungetc(int)
	CALLEE: static javassist.compiler.Lex#isBlank(int)
	CALLEE: javassist.compiler.Lex#readEscapeChar()
CALLER: javassist.compiler.Lex#readNumber(int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#readDouble(java.lang.StringBuffer,int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#ungetc(int)
CALLER: javassist.compiler.Lex#readDouble(java.lang.StringBuffer,int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#ungetc(int)
CALLER: javassist.compiler.Lex#readSeparator(int)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#ungetc(int)
CALLER: javassist.compiler.Lex#readIdentifier(int,javassist.compiler.Token)
	CALLEE: javassist.compiler.Lex#getc()
	CALLEE: javassist.compiler.Lex#ungetc(int)
	CALLEE: javassist.compiler.KeywordTable#lookup(java.lang.String)
CALLER: javassist.compiler.Parser#parseInitializer(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Parser#parseArrayInitializer(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.ast.Declarator#make(javassist.compiler.ast.Symbol,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Declarator#<init>(int,int)
CALLER: static javassist.compiler.ast.Declarator#astToClassName(java.lang.StringBuffer,javassist.compiler.ast.ASTList,char)
	CALLEE: static javassist.compiler.ast.Declarator#astToClassName(java.lang.StringBuffer,javassist.compiler.ast.ASTList,char)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#nextIsBuiltinCast()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
CALLER: javassist.compiler.ast.CastExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#nextIsClassCast()
	CALLEE: javassist.compiler.Lex#lookAhead(int)
	CALLEE: javassist.compiler.Parser#nextIsClassType(int)
CALLER: javassist.compiler.ast.CastExpr#<init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#parsePrimaryExpr(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.Lex#getString()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseArrayDimension()
	CALLEE: javassist.compiler.ast.Keyword#<init>(int)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Variable#<init>(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.ast.StringL#<init>(java.lang.String)
	CALLEE: javassist.compiler.Parser#parseNew(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseDotClass(int,int)
	CALLEE: javassist.compiler.SymbolTable#lookup(java.lang.String)
CALLER: javassist.compiler.Parser#parseMethodCall(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#parseArgumentList(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Keyword#get()
CALLER: javassist.compiler.Parser#parseDotClass(javassist.compiler.ast.ASTree,int)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
CALLER: javassist.compiler.Parser#parseArrayIndex(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
CALLER: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)
CALLER: javassist.compiler.ast.Keyword#<init>(int)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
CALLER: javassist.compiler.ast.InstanceOfExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CastExpr#<init>(int,int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.InstanceOfExpr#<init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CastExpr#<init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.BinExpr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Lex#readEscapeChar()
	CALLEE: javassist.compiler.Lex#getc()
CALLER: javassist.compiler.Parser#parseArrayInitializer(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: javassist.compiler.ast.ArrayInit#<init>(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.Variable#<init>(java.lang.String,javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
CALLER: javassist.compiler.ast.StringL#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.ASTree#<init>()
CALLER: javassist.compiler.Parser#parseNew(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.SyntaxError#<init>(javassist.compiler.Lex)
	CALLEE: static javassist.compiler.Parser#isBuiltinType(int)
	CALLEE: javassist.compiler.Parser#parseClassType(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseArrayInitializer(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseArgumentList(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Parser#parseArraySize(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.ast.NewExpr#<init>(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.ast.NewExpr#<init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.ast.NewExpr#makeObjectArray(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)
CALLER: javassist.compiler.Parser#parseDotClass(int,int)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#toJvmTypeName(int,int)
CALLER: javassist.compiler.Parser#parseArgumentList(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Parser#parseExpression(javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Lex#get()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
CALLER: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CallExpr#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String,javassist.compiler.Lex)
	CALLEE: javassist.compiler.Parser#toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Symbol#get()
CALLER: javassist.compiler.ast.ArrayInit#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.Parser#parseArraySize(javassist.compiler.SymbolTable)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.Lex#lookAhead()
	CALLEE: javassist.compiler.Parser#parseArrayIndex(javassist.compiler.SymbolTable)
CALLER: javassist.compiler.ast.NewExpr#<init>(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.NewExpr#<init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: static javassist.compiler.ast.NewExpr#makeObjectArray(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)
	CALLEE: static javassist.compiler.ast.ASTList#append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.NewExpr#<init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.CallExpr#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Expr#<init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.Declarator#setVariable(javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
CALLER: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
CALLER: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
CALLER: javassist.compiler.JvstCodeGen#recordReturnType(javassist.CtClass,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.JvstCodeGen#recordVar(javassist.CtClass,java.lang.String,int,javassist.compiler.SymbolTable)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.compiler.CodeGen#setMaxLocals(int)
CALLER: javassist.compiler.CodeGen#atMethodBody(javassist.compiler.ast.Stmnt,boolean,boolean)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#needsSuperCall(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.MemberCodeGen#insertDefaultSuperCall()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.MemberCodeGen#setThisMethod(javassist.CtMethod)
	CALLEE: javassist.CtBehavior#getMethodInfo2()
	CALLEE: javassist.compiler.TypeChecker#setThisMethod(javassist.bytecode.MethodInfo)
CALLER: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.SymbolTable#lookup(java.lang.String)
	CALLEE: javassist.compiler.SymbolTable#lookup(java.lang.String)
CALLER: javassist.bytecode.SignatureAttribute.Type#jvmTypeName()
	CALLEE: javassist.bytecode.SignatureAttribute.BaseType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeVariable#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ArrayType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString()
CALLER: javassist.bytecode.SignatureAttribute.ClassType#jvmTypeName()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#jvmTypeName()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#getDeclaringClass()
	CALLEE: javassist.bytecode.SignatureAttribute.NestedClassType#getDeclaringClass()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString2(java.lang.StringBuffer)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: javassist.compiler.ast.Pair#toString()
	CALLEE: javassist.compiler.ast.ASTList#toString()
CALLER: javassist.compiler.ast.Variable#toString()
	CALLEE: javassist.compiler.ast.Declarator#getType()
CALLER: javassist.compiler.ast.Expr#getTag()
	CALLEE: javassist.compiler.ast.Expr#getName()
CALLER: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseBlockNodeOrIndentlessSequence()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: net.md_5.bungee.BungeeCord.2#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.2#operationComplete(io.netty.channel.ChannelFuture)
CALLER: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.channel.ChannelFuture)
CALLER: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.channel.ChannelFuture)
CALLER: javassist.bytecode.SignatureAttribute.TypeArgument#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeVariable#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ArrayType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString()
CALLER: org.yaml.snakeyaml.DumperOptions.Version#toString()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#getRepresentation()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#delayNanos()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#delayNanos(long)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
CALLER: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#setStackDepth(int)
CALLER: javassist.compiler.CodeGen#needsSuperCall(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Keyword#get()
	CALLEE: javassist.compiler.ast.Stmnt#getOperator()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.MemberCodeGen#insertDefaultSuperCall()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)
CALLER: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.ast.Visitor#atStmnt(javassist.compiler.ast.Stmnt)
CALLER: javassist.bytecode.SignatureAttribute.BaseType#toString()
	CALLEE: static javassist.bytecode.Descriptor#toClassName(java.lang.String)
CALLER: javassist.bytecode.SignatureAttribute.ArrayType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.BaseType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.TypeVariable#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ArrayType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString()
CALLER: javassist.bytecode.SignatureAttribute.ClassType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#getDeclaringClass()
	CALLEE: javassist.bytecode.SignatureAttribute.NestedClassType#getDeclaringClass()
	CALLEE: javassist.bytecode.SignatureAttribute.ClassType#toString2(java.lang.StringBuffer)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: net.md_5.bungee.BungeeCord.2#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
	CALLEE: static net.md_5.bungee.BungeeCord#access$000(net.md_5.bungee.BungeeCord)
CALLER: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
	CALLEE: static net.md_5.bungee.BungeeCord#access$000(net.md_5.bungee.BungeeCord)
CALLER: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#access$102(io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#access$200(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.CtClassType#getSuperclass()
CALLER: javassist.bytecode.Bytecode#addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(boolean,int,java.lang.String,java.lang.String)
	CALLEE: javassist.CtClass#isInterface()
	CALLEE: javassist.CtClassType#isInterface()
CALLER: javassist.compiler.CodeGen#atStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#getOperator()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
	CALLEE: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#atAssignExpr(javassist.compiler.ast.AssignExpr,boolean)
	CALLEE: static javassist.compiler.CodeGen#isPlusPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atIfStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CodeGen#atWhileStmnt(javassist.compiler.ast.Stmnt,boolean)
	CALLEE: javassist.compiler.CodeGen#atForStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CodeGen#atBreakStmnt(javassist.compiler.ast.Stmnt,boolean)
	CALLEE: javassist.compiler.JvstCodeGen#atReturnStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CodeGen#atThrowStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.MemberCodeGen#atTryStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CodeGen#atSwitchStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CodeGen#atSyncStmnt(javassist.compiler.ast.Stmnt)
CALLER: static io.netty.bootstrap.AbstractBootstrap#access$200(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#add(int,int)
CALLER: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: static javassist.bytecode.Descriptor#toJvmName(javassist.CtClass)
CALLER: javassist.bytecode.Bytecode#addInvokespecial(boolean,int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addMethodrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.CodeGen#atAssignExpr(javassist.compiler.ast.AssignExpr,boolean)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.CodeGen#atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.CodeGen#atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.JvstCodeGen#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
CALLER: static javassist.compiler.CodeGen#isPlusPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
CALLER: javassist.compiler.CodeGen#atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.CodeGen#getLocalVar(javassist.compiler.ast.Declarator)
	CALLEE: static javassist.compiler.CodeGen#badType(javassist.compiler.ast.Expr)
	CALLEE: javassist.bytecode.Bytecode#addDload(int)
	CALLEE: javassist.bytecode.Bytecode#addDconst(double)
	CALLEE: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#addLload(int)
	CALLEE: javassist.bytecode.Bytecode#addLconst(long)
	CALLEE: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#addFload(int)
	CALLEE: javassist.bytecode.Bytecode#addFconst(float)
	CALLEE: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.bytecode.Bytecode#addIload(int)
	CALLEE: javassist.compiler.CodeGen#atArrayPlusPlus(int,boolean,javassist.compiler.ast.Expr,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean)
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
CALLER: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atDeclarator(javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.ast.Visitor#atDeclarator(javassist.compiler.ast.Declarator)
CALLER: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atASTList(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Visitor#atASTList(javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atSymbol(javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.ast.Visitor#atSymbol(javassist.compiler.ast.Symbol)
CALLER: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atCondExpr(javassist.compiler.ast.CondExpr)
	CALLEE: javassist.compiler.TypeChecker#atCondExpr(javassist.compiler.ast.CondExpr)
CALLER: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atAssignExpr(javassist.compiler.ast.AssignExpr)
	CALLEE: javassist.compiler.TypeChecker#atAssignExpr(javassist.compiler.ast.AssignExpr)
CALLER: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atPair(javassist.compiler.ast.Pair)
	CALLEE: javassist.compiler.ast.Visitor#atPair(javassist.compiler.ast.Pair)
CALLER: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atIntConst(javassist.compiler.ast.IntConst)
	CALLEE: javassist.compiler.TypeChecker#atIntConst(javassist.compiler.ast.IntConst)
CALLER: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atDoubleConst(javassist.compiler.ast.DoubleConst)
	CALLEE: javassist.compiler.TypeChecker#atDoubleConst(javassist.compiler.ast.DoubleConst)
CALLER: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atExpr(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.TypeChecker#atExpr(javassist.compiler.ast.Expr)
CALLER: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#atCastExpr(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.JvstTypeChecker#atCastExpr(javassist.compiler.ast.CastExpr)
CALLER: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atKeyword(javassist.compiler.ast.Keyword)
	CALLEE: javassist.compiler.TypeChecker#atKeyword(javassist.compiler.ast.Keyword)
CALLER: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#atMember(javassist.compiler.ast.Member)
	CALLEE: javassist.compiler.JvstTypeChecker#atMember(javassist.compiler.ast.Member)
CALLER: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr)
	CALLEE: javassist.compiler.TypeChecker#atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr)
CALLER: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atBinExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.TypeChecker#atBinExpr(javassist.compiler.ast.BinExpr)
CALLER: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atVariable(javassist.compiler.ast.Variable)
	CALLEE: javassist.compiler.TypeChecker#atVariable(javassist.compiler.ast.Variable)
CALLER: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#atStringL(javassist.compiler.ast.StringL)
	CALLEE: javassist.compiler.TypeChecker#atStringL(javassist.compiler.ast.StringL)
CALLER: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.MemberCodeGen#atArrayInit(javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.TypeChecker#atArrayInit(javassist.compiler.ast.ArrayInit)
CALLER: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.MemberCodeGen#atNewExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.compiler.TypeChecker#atNewExpr(javassist.compiler.ast.NewExpr)
CALLER: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#atCallExpr(javassist.compiler.ast.CallExpr)
	CALLEE: javassist.compiler.JvstTypeChecker#atCallExpr(javassist.compiler.ast.CallExpr)
CALLER: javassist.compiler.CodeGen#atIfStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.CodeGen#compileBooleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
CALLER: javassist.compiler.CodeGen#atWhileStmnt(javassist.compiler.ast.Stmnt,boolean)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.CodeGen#compileBooleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.CodeGen#patchGoto(java.util.ArrayList,int)
CALLER: javassist.compiler.CodeGen#atForStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.CodeGen#compileBooleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.CodeGen#patchGoto(java.util.ArrayList,int)
CALLER: javassist.compiler.CodeGen#atBreakStmnt(javassist.compiler.ast.Stmnt,boolean)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
CALLER: javassist.compiler.JvstCodeGen#atReturnStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#atReturnStmnt2(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.CodeGen#atThrowStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.MemberCodeGen#atTryStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.compiler.CodeGen#patchGoto(java.util.ArrayList,int)
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.compiler.CodeGen.ReturnHook#remove(javassist.compiler.CodeGen)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,int)
	CALLEE: javassist.compiler.MemberCodeGen#addFinally(java.util.ArrayList,javassist.compiler.ast.Stmnt)
	CALLEE: javassist.compiler.ast.Declarator#setLocalVar(int)
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
	CALLEE: javassist.compiler.ast.Declarator#setClassName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook#<init>(javassist.compiler.CodeGen)
	CALLEE: javassist.compiler.CodeGen#incMaxLocals(int)
	CALLEE: javassist.compiler.ast.Pair#getLeft()
	CALLEE: javassist.compiler.ast.Pair#getRight()
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,javassist.CtClass)
CALLER: javassist.compiler.CodeGen#atSwitchStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addGap(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Stmnt#getOperator()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.compiler.CodeGen#patchGoto(java.util.ArrayList,int)
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#add32bit(int)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: javassist.compiler.CodeGen#computeLabel(javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#write32bit(int,int)
CALLER: javassist.compiler.CodeGen#atSyncStmnt(javassist.compiler.ast.Stmnt)
	CALLEE: javassist.bytecode.Bytecode#getMaxLocals()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.compiler.CodeGen.ReturnHook#remove(javassist.compiler.CodeGen)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,int)
	CALLEE: static javassist.compiler.CodeGen#getListSize(java.util.ArrayList)
	CALLEE: javassist.bytecode.Bytecode#incMaxLocals(int)
	CALLEE: javassist.compiler.CodeGen.1#<init>(javassist.compiler.CodeGen,javassist.compiler.CodeGen,int)
	CALLEE: javassist.compiler.CodeGen.1#doit(javassist.bytecode.Bytecode,int)
CALLER: javassist.bytecode.Bytecode#add(int,int)
	CALLEE: javassist.bytecode.ByteVector#add(int,int)
CALLER: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,int)
CALLER: javassist.bytecode.ConstPool#addMethodrefInfo(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addMethodrefInfo(int,int)
CALLER: javassist.compiler.CodeGen#atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#getLocalVar(javassist.compiler.ast.Declarator)
	CALLEE: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.compiler.CodeGen#atVariable(javassist.compiler.ast.Variable)
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.compiler.MemberCodeGen#atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String)
	CALLEE: javassist.compiler.CodeGen#atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.bytecode.Bytecode#addIstore(int)
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
CALLER: javassist.compiler.CodeGen#atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.CodeGen#atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String)
	CALLEE: javassist.compiler.CodeGen#arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#getArrayReadOp(int,int)
	CALLEE: static javassist.compiler.CodeGen#getArrayWriteOp(int,int)
CALLER: javassist.compiler.JvstCodeGen#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#atAssignParamList(javassist.CtClass[],javassist.bytecode.Bytecode)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean)
CALLER: javassist.compiler.CodeGen#getLocalVar(javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.compiler.CodeGen#incMaxLocals(int)
	CALLEE: javassist.compiler.ast.Declarator#setLocalVar(int)
	CALLEE: javassist.compiler.ast.Declarator#getLocalVar()
CALLER: static javassist.compiler.CodeGen#badType(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#getName()
CALLER: javassist.bytecode.Bytecode#addDload(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addDconst(double)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addLdc2w(double)
CALLER: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addLload(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addLconst(long)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addLdc2w(long)
CALLER: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addFload(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addFconst(float)
	CALLEE: javassist.bytecode.ConstPool#addFloatInfo(float)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addLdc(int)
CALLER: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addIload(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.CodeGen#atArrayPlusPlus(int,boolean,javassist.compiler.ast.Expr,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: static javassist.compiler.CodeGen#badType(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CodeGen#arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#getArrayReadOp(int,int)
	CALLEE: static javassist.compiler.CodeGen#getArrayWriteOp(int,int)
	CALLEE: javassist.compiler.CodeGen#atPlusPlusCore(int,boolean,int,boolean,javassist.compiler.ast.Expr)
CALLER: javassist.compiler.MemberCodeGen#atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#atPlusPlusCore(int,boolean,int,boolean,javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.MemberCodeGen#fieldAccess(javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldRead(javassist.CtField,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldAssignCore(javassist.CtField,boolean,int,boolean)
CALLER: javassist.compiler.CodeGen#atDeclarator(javassist.compiler.ast.Declarator)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.CodeGen#incMaxLocals(int)
	CALLEE: javassist.compiler.ast.Declarator#setLocalVar(int)
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(java.lang.String)
	CALLEE: javassist.compiler.ast.Declarator#setClassName(java.lang.String)
	CALLEE: javassist.compiler.ast.Declarator#getInitializer()
CALLER: javassist.compiler.CodeGen#atASTList(javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.CodeGen#fatal()
CALLER: javassist.compiler.CodeGen#atSymbol(javassist.compiler.ast.Symbol)
	CALLEE: static javassist.compiler.CodeGen#fatal()
CALLER: javassist.compiler.CodeGen#atCondExpr(javassist.compiler.ast.CondExpr)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.ast.CondExpr#condExpr()
	CALLEE: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CondExpr#elseExpr()
	CALLEE: javassist.compiler.ast.CondExpr#thenExpr()
CALLER: javassist.compiler.TypeChecker#atCondExpr(javassist.compiler.ast.CondExpr)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#condExpr()
	CALLEE: javassist.compiler.ast.CondExpr#elseExpr()
	CALLEE: javassist.compiler.ast.CondExpr#thenExpr()
	CALLEE: javassist.compiler.TypeChecker#booleanExpr(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#rightIsStrong(int,int)
	CALLEE: javassist.compiler.ast.CondExpr#setThen(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CondExpr#setElse(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.CodeGen#atAssignExpr(javassist.compiler.ast.AssignExpr)
	CALLEE: javassist.compiler.CodeGen#atAssignExpr(javassist.compiler.ast.AssignExpr,boolean)
CALLER: javassist.compiler.TypeChecker#atAssignExpr(javassist.compiler.ast.AssignExpr)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.TypeChecker#atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.JvstTypeChecker#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
CALLER: javassist.compiler.CodeGen#atPair(javassist.compiler.ast.Pair)
	CALLEE: static javassist.compiler.CodeGen#fatal()
CALLER: javassist.compiler.CodeGen#atIntConst(javassist.compiler.ast.IntConst)
	CALLEE: javassist.bytecode.Bytecode#addLconst(long)
	CALLEE: javassist.compiler.ast.IntConst#get()
	CALLEE: javassist.compiler.ast.IntConst#getType()
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
CALLER: javassist.compiler.TypeChecker#atIntConst(javassist.compiler.ast.IntConst)
	CALLEE: javassist.compiler.ast.IntConst#getType()
CALLER: javassist.compiler.CodeGen#atDoubleConst(javassist.compiler.ast.DoubleConst)
	CALLEE: javassist.bytecode.Bytecode#addDconst(double)
	CALLEE: javassist.bytecode.Bytecode#addFconst(float)
	CALLEE: javassist.compiler.ast.DoubleConst#getType()
	CALLEE: javassist.compiler.ast.DoubleConst#get()
CALLER: javassist.compiler.TypeChecker#atDoubleConst(javassist.compiler.ast.DoubleConst)
	CALLEE: javassist.compiler.ast.DoubleConst#getType()
CALLER: javassist.compiler.CodeGen#atExpr(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.CodeGen#atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#badType(javassist.compiler.ast.Expr)
	CALLEE: javassist.bytecode.Bytecode#addLconst(long)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: javassist.compiler.CodeGen#atClassObject(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldRead(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
CALLER: javassist.compiler.TypeChecker#atExpr(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#booleanExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atArrayLength(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.TypeChecker#atFieldRead(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atClassObject(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.TypeChecker#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr)
	CALLEE: static javassist.compiler.TypeChecker#fatal()
	CALLEE: javassist.compiler.TypeChecker#isConstant(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#isP_INT(int)
CALLER: javassist.compiler.JvstCodeGen#atCastExpr(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.ast.CastExpr#getArrayDim()
	CALLEE: javassist.compiler.JvstCodeGen#atCastToRtype(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.JvstCodeGen#atCastToWrapper(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.CodeGen#atCastExpr(javassist.compiler.ast.CastExpr)
CALLER: javassist.compiler.JvstTypeChecker#atCastExpr(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.ast.CastExpr#getArrayDim()
	CALLEE: javassist.compiler.JvstTypeChecker#atCastToRtype(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.JvstTypeChecker#atCastToWrapper(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.TypeChecker#atCastExpr(javassist.compiler.ast.CastExpr)
CALLER: javassist.compiler.CodeGen#atKeyword(javassist.compiler.ast.Keyword)
	CALLEE: javassist.compiler.MemberCodeGen#getThisName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Keyword#get()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: javassist.compiler.MemberCodeGen#getSuperName()
CALLER: javassist.compiler.TypeChecker#atKeyword(javassist.compiler.ast.Keyword)
	CALLEE: javassist.compiler.ast.Keyword#get()
	CALLEE: static javassist.compiler.TypeChecker#fatal()
	CALLEE: javassist.compiler.TypeChecker#getThisName()
	CALLEE: javassist.compiler.TypeChecker#getSuperName()
CALLER: javassist.compiler.JvstCodeGen#atMember(javassist.compiler.ast.Member)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#of(javassist.CtClass)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.JvstCodeGen#indexOfParam1()
	CALLEE: static javassist.compiler.JvstCodeGen#compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int)
	CALLEE: static javassist.bytecode.Descriptor#ofMethod(javassist.CtClass,javassist.CtClass[])
	CALLEE: javassist.bytecode.Bytecode#addLdc(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.compiler.JvstCodeGen#callGetType(java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#atMember(javassist.compiler.ast.Member)
CALLER: javassist.compiler.JvstTypeChecker#atMember(javassist.compiler.ast.Member)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.TypeChecker#atMember(javassist.compiler.ast.Member)
CALLER: javassist.compiler.CodeGen#atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr)
	CALLEE: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.CodeGen#checkCastExpr(javassist.compiler.ast.CastExpr,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInstanceof(java.lang.String)
CALLER: javassist.compiler.TypeChecker#atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
CALLER: javassist.compiler.CodeGen#atBinExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: static javassist.compiler.CodeGen#lookupBinOp(int)
	CALLEE: javassist.compiler.CodeGen#atStringConcatExpr(javassist.compiler.ast.Expr,int,int,java.lang.String)
	CALLEE: javassist.compiler.CodeGen#atArithBinExpr(javassist.compiler.ast.Expr,int,int,int)
CALLER: javassist.compiler.TypeChecker#atBinExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#booleanExpr(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#lookupBinOp(int)
	CALLEE: javassist.compiler.TypeChecker#atPlusExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.ast.Expr#setOprand1(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#setOprand2(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#computeBinExprType(javassist.compiler.ast.BinExpr,int,int)
CALLER: javassist.compiler.CodeGen#atVariable(javassist.compiler.ast.Variable)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.compiler.CodeGen#getLocalVar(javassist.compiler.ast.Declarator)
	CALLEE: javassist.bytecode.Bytecode#addDload(int)
	CALLEE: javassist.bytecode.Bytecode#addLload(int)
	CALLEE: javassist.bytecode.Bytecode#addFload(int)
	CALLEE: javassist.bytecode.Bytecode#addIload(int)
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
CALLER: javassist.compiler.TypeChecker#atVariable(javassist.compiler.ast.Variable)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
CALLER: javassist.compiler.CodeGen#atStringL(javassist.compiler.ast.StringL)
	CALLEE: javassist.bytecode.Bytecode#addLdc(java.lang.String)
	CALLEE: javassist.compiler.ast.StringL#get()
CALLER: javassist.compiler.MemberCodeGen#atArrayInit(javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.TypeChecker#atArrayInit(javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.MemberCodeGen#atNewExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.NewExpr#isArray()
	CALLEE: javassist.compiler.MemberCodeGen#atNewArrayExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.compiler.ast.NewExpr#getClassName()
	CALLEE: javassist.compiler.MemberResolver#lookupClassByName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.NewExpr#getArguments()
	CALLEE: javassist.bytecode.Bytecode#addNew(java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList,boolean,boolean,int,javassist.compiler.MemberResolver.Method)
CALLER: javassist.compiler.TypeChecker#atNewExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.compiler.ast.NewExpr#isArray()
	CALLEE: javassist.compiler.ast.NewExpr#getClassName()
	CALLEE: javassist.compiler.MemberResolver#lookupClassByName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.NewExpr#getArguments()
	CALLEE: javassist.compiler.TypeChecker#atNewArrayExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.compiler.TypeChecker#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.JvstCodeGen#atCallExpr(javassist.compiler.ast.CallExpr)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.Javac.1#doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.JvstCodeGen#atCflow(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.MemberCodeGen#atCallExpr(javassist.compiler.ast.CallExpr)
CALLER: javassist.compiler.JvstTypeChecker#atCallExpr(javassist.compiler.ast.CallExpr)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.Javac.1#setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.JvstTypeChecker#atCflow(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.TypeChecker#atCallExpr(javassist.compiler.ast.CallExpr)
CALLER: javassist.compiler.CodeGen#compileBooleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
CALLER: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.ByteVector#getSize()
CALLER: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.bytecode.Bytecode#write(int,int)
CALLER: javassist.compiler.CodeGen#patchGoto(java.util.ArrayList,int)
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
CALLER: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.CodeGen#atReturnStmnt2(javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen.1#doit(javassist.bytecode.Bytecode,int)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook#doit(javassist.bytecode.Bytecode,int)
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook2#doit(javassist.bytecode.Bytecode,int)
CALLER: javassist.compiler.MemberCodeGen.JsrHook#<init>(javassist.compiler.CodeGen)
	CALLEE: javassist.compiler.CodeGen.ReturnHook#<init>(javassist.compiler.CodeGen)
CALLER: javassist.compiler.CodeGen#incMaxLocals(int)
	CALLEE: javassist.bytecode.Bytecode#incMaxLocals(int)
CALLER: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
CALLER: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,javassist.CtClass)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,int)
CALLER: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,int)
	CALLEE: javassist.bytecode.ExceptionTable#add(int,int,int,int)
CALLER: javassist.compiler.MemberCodeGen#addFinally(java.util.ArrayList,javassist.compiler.ast.Stmnt)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.CodeGen.ReturnHook#remove(javassist.compiler.CodeGen)
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook2#<init>(javassist.compiler.CodeGen,int[])
CALLER: javassist.bytecode.Bytecode#add32bit(int)
	CALLEE: javassist.bytecode.Bytecode#add(int,int,int,int)
CALLER: static javassist.compiler.CodeGen#fatal()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.CodeGen#computeLabel(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.CodeGen#doTypeCheck(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.IntConst#get()
	CALLEE: static javassist.compiler.TypeChecker#stripPlusExpr(javassist.compiler.ast.ASTree)
CALLER: javassist.bytecode.Bytecode#write32bit(int,int)
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
CALLER: javassist.compiler.CodeGen.1#<init>(javassist.compiler.CodeGen,javassist.compiler.CodeGen,int)
	CALLEE: javassist.compiler.CodeGen.ReturnHook#<init>(javassist.compiler.CodeGen)
CALLER: javassist.compiler.CodeGen.1#doit(javassist.bytecode.Bytecode,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
CALLER: javassist.bytecode.ByteVector#add(int,int)
	CALLEE: javassist.bytecode.Bytecode#addGap(int)
CALLER: javassist.compiler.MemberCodeGen#atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#atNewArrayExpr2(int,javassist.compiler.ast.ASTree,java.lang.String,javassist.compiler.ast.ArrayInit)
CALLER: javassist.compiler.CodeGen#atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: static javassist.compiler.CodeGen#lookupBinOp(int)
	CALLEE: javassist.compiler.CodeGen#atArithBinExpr(javassist.compiler.ast.Expr,int,int,int)
	CALLEE: javassist.compiler.CodeGen#atStringPlusEq(javassist.compiler.ast.Expr,int,int,java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#invalidDim(int,int,java.lang.String,int,int,java.lang.String,boolean)
	CALLEE: static javassist.compiler.CodeGen#badAssign(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CodeGen#atNumCastExpr(int,int)
CALLER: javassist.bytecode.Bytecode#addIstore(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.CodeGen#arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
CALLER: javassist.compiler.JvstCodeGen#atAssignParamList(javassist.CtClass[],javassist.bytecode.Bytecode)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: javassist.compiler.JvstCodeGen#indexOfParam1()
	CALLEE: javassist.compiler.JvstCodeGen#compileUnwrapValue(javassist.CtClass,javassist.bytecode.Bytecode)
	CALLEE: javassist.bytecode.Bytecode#addStore(int,javassist.CtClass)
CALLER: javassist.compiler.MemberCodeGen#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#fieldAccess(javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldRead(javassist.CtField,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldAssignCore(javassist.CtField,boolean,int,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#setFieldType(javassist.bytecode.FieldInfo)
	CALLEE: javassist.compiler.MemberCodeGen#isAccessibleField(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.compiler.MemberCodeGen#addFieldrefInfo(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.CtField#getFieldInfo2()
CALLER: javassist.bytecode.Bytecode#addLdc2w(double)
	CALLEE: javassist.bytecode.ConstPool#addDoubleInfo(double)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addLdc2w(long)
	CALLEE: javassist.bytecode.ConstPool#addLongInfo(long)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addLdc(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.CodeGen#atPlusPlusCore(int,boolean,int,boolean,javassist.compiler.ast.Expr)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.CodeGen#badType(javassist.compiler.ast.Expr)
	CALLEE: javassist.bytecode.Bytecode#addDconst(double)
	CALLEE: javassist.bytecode.Bytecode#addLconst(long)
	CALLEE: javassist.bytecode.Bytecode#addFconst(float)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
CALLER: javassist.compiler.MemberCodeGen#fieldAccess(javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.CtField#getModifiers()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.NoFieldException#getField()
	CALLEE: javassist.compiler.NoFieldException#getExpr()
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.CtClass#getField(java.lang.String)
	CALLEE: javassist.compiler.NoFieldException#<init>(java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.MemberResolver#lookupField(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.MemberResolver#lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: static javassist.compiler.MemberCodeGen#badLvalue()
	CALLEE: javassist.compiler.MemberResolver#lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.MemberCodeGen#atFieldRead(javassist.CtField,boolean)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.CtField#getDeclaringClass()
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.MemberCodeGen#setFieldType(javassist.bytecode.FieldInfo)
	CALLEE: javassist.compiler.MemberCodeGen#isAccessibleField(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.compiler.MemberCodeGen#addFieldrefInfo(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.CtField#getFieldInfo2()
	CALLEE: javassist.compiler.AccessorMaker#getFieldGetter(javassist.bytecode.FieldInfo,boolean)
CALLER: javassist.compiler.MemberCodeGen#atFieldAssignCore(javassist.CtField,boolean,int,boolean)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.CtField#getDeclaringClass()
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.CtField#getFieldInfo2()
	CALLEE: javassist.CtClassType#getAccessorMaker()
	CALLEE: javassist.compiler.AccessorMaker#getFieldSetter(javassist.bytecode.FieldInfo,boolean)
CALLER: javassist.compiler.MemberCodeGen#resolveClassName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#resolveJvmClassName(java.lang.String)
CALLER: javassist.compiler.ast.Declarator#getInitializer()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.ast.CondExpr#condExpr()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.compiler.CodeGen#booleanExpr(boolean,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#getCompOperator(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#compileOprands(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.CodeGen#compareExpr(boolean,int,int,javassist.compiler.ast.BinExpr)
	CALLEE: static javassist.compiler.CodeGen#isAlwaysBranch(javassist.compiler.ast.ASTree,boolean)
CALLER: javassist.compiler.ast.CondExpr#elseExpr()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.ast.CondExpr#thenExpr()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.TypeChecker#booleanExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#getCompOperator(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#insertCast(javassist.compiler.ast.BinExpr,int,int)
CALLER: static javassist.compiler.CodeGen#rightIsStrong(int,int)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
CALLER: javassist.compiler.ast.CondExpr#setThen(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#setHead(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.CondExpr#setElse(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#setHead(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.TypeChecker#atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#atVariable(javassist.compiler.ast.Variable)
	CALLEE: javassist.compiler.ast.Declarator#getClassName()
CALLER: javassist.compiler.TypeChecker#atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.JvstTypeChecker#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstTypeChecker#compileUnwrapValue(javassist.CtClass)
	CALLEE: javassist.compiler.TypeChecker#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.ConstPool#addIntegerInfo(int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addLdc(int)
CALLER: javassist.compiler.CodeGen#atClassObject(javassist.compiler.ast.Expr)
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#atClassObject2(java.lang.String)
CALLER: javassist.compiler.MemberCodeGen#atFieldRead(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.MemberCodeGen#fieldAccess(javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldRead(javassist.CtField,boolean)
	CALLEE: javassist.compiler.MemberCodeGen#setFieldType(javassist.bytecode.FieldInfo)
	CALLEE: javassist.compiler.MemberCodeGen#atArrayLength(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.TypeChecker#getConstantFieldValue(javassist.CtField)
	CALLEE: javassist.CtField#getFieldInfo2()
CALLER: javassist.compiler.CodeGen#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.CodeGen#getArrayReadOp(int,int)
CALLER: static javassist.compiler.CodeGen#typePrecedence(int)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
CALLER: javassist.compiler.TypeChecker#atArrayLength(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.NoFieldException#<init>(java.lang.String,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.TypeChecker#atFieldRead(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#fieldAccess(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atFieldRead(javassist.CtField)
CALLER: javassist.compiler.TypeChecker#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.TypeChecker#atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.ast.Declarator#getType()
	CALLEE: javassist.compiler.ast.Declarator#getArrayDim()
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.TypeChecker#atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Variable#getDeclarator()
	CALLEE: javassist.compiler.TypeChecker#atFieldPlusPlus(javassist.compiler.ast.ASTree)
CALLER: static javassist.compiler.TypeChecker#fatal()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.TypeChecker#isConstant(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.IntConst#get()
	CALLEE: javassist.compiler.ast.DoubleConst#get()
	CALLEE: static javassist.compiler.TypeChecker#stripPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#setOperator(int)
	CALLEE: javassist.compiler.ast.IntConst#set(long)
	CALLEE: javassist.compiler.ast.DoubleConst#set(double)
CALLER: static javassist.compiler.CodeGen#isP_INT(int)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
CALLER: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.JvstCodeGen#atCastToRtype(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.CodeGen#atNumCastExpr(int,int)
	CALLEE: javassist.compiler.JvstCodeGen#compileUnwrapValue(javassist.CtClass,javassist.bytecode.Bytecode)
CALLER: javassist.compiler.JvstCodeGen#atCastToWrapper(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.bytecode.Bytecode#addNew(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(int,int,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.CtPrimitiveType#getWrapperName()
	CALLEE: javassist.CtPrimitiveType#getDataSize()
CALLER: javassist.compiler.CodeGen#atCastExpr(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.ast.CastExpr#getArrayDim()
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.CodeGen#checkCastExpr(javassist.compiler.ast.CastExpr,java.lang.String)
	CALLEE: javassist.compiler.CodeGen#atNumCastExpr(int,int)
	CALLEE: javassist.compiler.ast.CastExpr#getType()
	CALLEE: javassist.bytecode.Bytecode#addCheckcast(java.lang.String)
CALLER: javassist.compiler.JvstTypeChecker#atCastToRtype(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.JvstTypeChecker#compileUnwrapValue(javassist.CtClass)
CALLER: javassist.compiler.JvstTypeChecker#atCastToWrapper(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.MemberResolver#lookupClass(int,int,java.lang.String)
CALLER: javassist.compiler.TypeChecker#atCastExpr(javassist.compiler.ast.CastExpr)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#getClassName()
	CALLEE: javassist.compiler.ast.CastExpr#getArrayDim()
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.ast.CastExpr#getType()
	CALLEE: javassist.compiler.TypeChecker#resolveClassName(javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.MemberCodeGen#getSuperName()
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
CALLER: javassist.compiler.TypeChecker#getThisName()
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
CALLER: javassist.compiler.TypeChecker#getSuperName()
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
CALLER: static javassist.compiler.JvstCodeGen#compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: static javassist.bytecode.Descriptor#ofMethod(javassist.CtClass,javassist.CtClass[])
	CALLEE: javassist.bytecode.Bytecode#addNew(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addAnewarray(java.lang.String)
	CALLEE: javassist.CtPrimitiveType#getWrapperName()
	CALLEE: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
CALLER: static javassist.bytecode.Descriptor#ofMethod(javassist.CtClass,javassist.CtClass[])
	CALLEE: static javassist.bytecode.Descriptor#toDescriptor(java.lang.StringBuffer,javassist.CtClass)
CALLER: javassist.bytecode.Bytecode#addLdc(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addStringInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addLdc(int)
CALLER: javassist.bytecode.Bytecode#addInvokestatic(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(int,java.lang.String,java.lang.String)
CALLER: javassist.compiler.JvstCodeGen#callGetType(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.compiler.MemberCodeGen#atMember(javassist.compiler.ast.Member)
	CALLEE: javassist.compiler.MemberCodeGen#atFieldRead(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.TypeChecker#atMember(javassist.compiler.ast.Member)
	CALLEE: javassist.compiler.TypeChecker#atFieldRead(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.MemberCodeGen#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.MemberResolver#resolveClassName(javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.CodeGen#checkCastExpr(javassist.compiler.ast.CastExpr,java.lang.String)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#toJvmTypeName(int,int)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.compiler.ast.CastExpr#getArrayDim()
	CALLEE: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.CodeGen#invalidDim(int,int,java.lang.String,int,int,java.lang.String,boolean)
	CALLEE: javassist.compiler.ast.CastExpr#getType()
	CALLEE: static javassist.compiler.CodeGen#toJvmArrayName(java.lang.String,int)
CALLER: javassist.bytecode.Bytecode#addInstanceof(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.ast.CastExpr#getOprand()
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.CodeGen#atStringConcatExpr(javassist.compiler.ast.Expr,int,int,java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.CodeGen#convToString(int,int)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.compiler.CodeGen#atArithBinExpr(javassist.compiler.ast.Expr,int,int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
	CALLEE: static javassist.compiler.CodeGen#badTypes(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CodeGen#convertOprandTypes(int,int,javassist.compiler.ast.Expr)
CALLER: javassist.compiler.TypeChecker#atPlusExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.NewExpr#<init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#atPlusExpr(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.TypeChecker#isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#computeBinExprType(javassist.compiler.ast.BinExpr,int,int)
	CALLEE: static javassist.compiler.TypeChecker#isPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.TypeChecker#makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.ASTList#make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.Expr#setOprand1(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.ast.Expr#setOprand2(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#getRight()
CALLER: javassist.compiler.TypeChecker#isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.StringL#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#setOprand1(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#setOprand2(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.StringL#get()
	CALLEE: static javassist.compiler.TypeChecker#stripPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#setOperator(int)
	CALLEE: javassist.compiler.ast.IntConst#compute(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.DoubleConst#compute(int,javassist.compiler.ast.ASTree)
CALLER: javassist.compiler.TypeChecker#computeBinExprType(javassist.compiler.ast.BinExpr,int,int)
	CALLEE: static javassist.compiler.CodeGen#isP_INT(int)
	CALLEE: javassist.compiler.TypeChecker#insertCast(javassist.compiler.ast.BinExpr,int,int)
CALLER: javassist.compiler.MemberCodeGen#atNewArrayExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.Declarator#astToClassName(javassist.compiler.ast.ASTList,char)
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.NewExpr#getClassName()
	CALLEE: javassist.compiler.MemberCodeGen#atNewArrayExpr2(int,javassist.compiler.ast.ASTree,java.lang.String,javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.ast.NewExpr#getArrayType()
	CALLEE: javassist.compiler.ast.NewExpr#getArraySize()
	CALLEE: javassist.compiler.ast.NewExpr#getInitializer()
	CALLEE: javassist.compiler.MemberCodeGen#atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#length()
CALLER: javassist.compiler.ast.NewExpr#getClassName()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.MemberResolver#lookupClassByName(javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.ast.Declarator#astToClassName(javassist.compiler.ast.ASTList,char)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
CALLER: javassist.compiler.ast.NewExpr#getArguments()
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.bytecode.Bytecode#addNew(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.MemberCodeGen#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList,boolean,boolean,int,javassist.compiler.MemberResolver.Method)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.JvstCodeGen#getMethodArgsLength(javassist.compiler.ast.ASTList)
	CALLEE: javassist.bytecode.Bytecode#getStackDepth()
	CALLEE: javassist.compiler.JvstCodeGen#atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.MemberCodeGen#atMethodCallCore2(javassist.CtClass,java.lang.String,boolean,boolean,int,int,javassist.compiler.MemberResolver.Method)
	CALLEE: javassist.compiler.MemberResolver.Method#isStatic()
CALLER: javassist.compiler.TypeChecker#atNewArrayExpr(javassist.compiler.ast.NewExpr)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#length()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#getClassName()
	CALLEE: javassist.compiler.TypeChecker#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.NewExpr#getArrayType()
	CALLEE: javassist.compiler.ast.NewExpr#getArraySize()
	CALLEE: javassist.compiler.ast.NewExpr#getInitializer()
	CALLEE: javassist.compiler.TypeChecker#atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.TypeChecker#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.JvstTypeChecker#getMethodArgsLength(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.JvstTypeChecker#atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])
	CALLEE: static javassist.compiler.TypeChecker#argTypesToString(int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.TypeChecker#setReturnType(java.lang.String)
CALLER: javassist.compiler.Javac.1#doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CodeGen#compileExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.JvstCodeGen#addNullIfVoid()
CALLER: javassist.compiler.JvstCodeGen#atCflow(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static javassist.compiler.JvstCodeGen#makeCflowName(java.lang.StringBuffer,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.MemberResolver#getClassPool()
	CALLEE: javassist.bytecode.Bytecode#addGetstatic(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.ClassPool#lookupCflow(java.lang.String)
CALLER: javassist.compiler.MemberCodeGen#atCallExpr(javassist.compiler.ast.CallExpr)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.NoFieldException#getField()
	CALLEE: javassist.compiler.NoFieldException#getExpr()
	CALLEE: javassist.compiler.MemberResolver.Method#isStatic()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Keyword#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: javassist.compiler.MemberCodeGen#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList,boolean,boolean,int,javassist.compiler.MemberResolver.Method)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: javassist.compiler.ast.CallExpr#getMethod()
	CALLEE: static javassist.compiler.TypeChecker#isDotSuper(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.MemberResolver#getSuperInterface(javassist.CtClass,java.lang.String)
	CALLEE: static javassist.compiler.MemberCodeGen#badMethod()
CALLER: javassist.compiler.Javac.1#setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstTypeChecker#addNullIfVoid()
CALLER: javassist.compiler.TypeChecker#atCallExpr(javassist.compiler.ast.CallExpr)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.NoFieldException#getField()
	CALLEE: javassist.compiler.NoFieldException#getExpr()
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Keyword#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.MemberResolver#getSuperclass(javassist.CtClass)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
	CALLEE: static javassist.compiler.TypeChecker#fatal()
	CALLEE: javassist.compiler.ast.Expr#setOprand1(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: javassist.compiler.ast.Expr#setOperator(int)
	CALLEE: static javassist.compiler.TypeChecker#isDotSuper(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.MemberResolver#getSuperInterface(javassist.CtClass,java.lang.String)
	CALLEE: static javassist.compiler.TypeChecker#badMethod()
	CALLEE: javassist.compiler.ast.CallExpr#setMethod(javassist.compiler.MemberResolver.Method)
CALLER: javassist.bytecode.Bytecode#write(int,int)
	CALLEE: javassist.bytecode.ByteVector#write(int,int)
CALLER: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#getInvalidNames()
	CALLEE: javassist.compiler.MemberResolver#lookupClass0(java.lang.String,boolean)
	CALLEE: javassist.compiler.MemberResolver#searchImports(java.lang.String)
CALLER: javassist.compiler.MemberCodeGen.JsrHook2#<init>(javassist.compiler.CodeGen,int[])
	CALLEE: javassist.compiler.CodeGen.ReturnHook#<init>(javassist.compiler.CodeGen)
CALLER: javassist.bytecode.Bytecode#add(int,int,int,int)
	CALLEE: javassist.bytecode.ByteVector#add(int,int,int,int)
CALLER: static javassist.compiler.TypeChecker#stripPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
	CALLEE: static javassist.compiler.TypeChecker#getConstantFieldValue(javassist.compiler.ast.Member)
CALLER: javassist.compiler.MemberCodeGen#atNewArrayExpr2(int,javassist.compiler.ast.ASTree,java.lang.String,javassist.compiler.ast.ArrayInit)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: static javassist.compiler.CodeGen#getArrayWriteOp(int,int)
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addIconst(int)
	CALLEE: javassist.compiler.CodeGen#atNumCastExpr(int,int)
	CALLEE: javassist.bytecode.Bytecode#addAnewarray(java.lang.String)
	CALLEE: static javassist.compiler.MemberCodeGen#badNewExpr()
	CALLEE: javassist.compiler.ast.ASTList#length()
CALLER: javassist.compiler.CodeGen#atStringPlusEq(javassist.compiler.ast.Expr,int,int,java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: static javassist.compiler.CodeGen#badAssign(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CodeGen#convToString(int,int)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)
CALLER: static javassist.compiler.CodeGen#badAssign(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#getName()
CALLER: javassist.compiler.CodeGen#atNumCastExpr(int,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
CALLER: javassist.compiler.JvstCodeGen#compileUnwrapValue(javassist.CtClass,javassist.bytecode.Bytecode)
	CALLEE: javassist.compiler.JvstCodeGen#setType(javassist.CtClass)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addCheckcast(java.lang.String)
	CALLEE: javassist.CtPrimitiveType#getWrapperName()
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.compiler.JvstCodeGen#addNullIfVoid()
	CALLEE: javassist.CtPrimitiveType#getGetMethodName()
	CALLEE: javassist.CtPrimitiveType#getGetMethodDescriptor()
	CALLEE: javassist.bytecode.Bytecode#addCheckcast(javassist.CtClass)
CALLER: javassist.bytecode.Bytecode#addStore(int,javassist.CtClass)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.bytecode.Bytecode#addIstore(int)
CALLER: javassist.compiler.MemberCodeGen#setFieldType(javassist.bytecode.FieldInfo)
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
CALLER: javassist.compiler.MemberCodeGen#isAccessibleField(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.CtField#getName()
	CALLEE: javassist.CtField#getDeclaringClass()
	CALLEE: javassist.bytecode.FieldInfo#getAccessFlags()
	CALLEE: static javassist.bytecode.AccessFlag#isPrivate(int)
	CALLEE: javassist.compiler.MemberCodeGen#isEnclosing(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClassType#getAccessorMaker()
CALLER: javassist.compiler.MemberCodeGen#addFieldrefInfo(javassist.CtField,javassist.bytecode.FieldInfo)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.CtField#getDeclaringClass()
	CALLEE: javassist.bytecode.Bytecode#getConstPool()
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.CtClass#getField(java.lang.String)
	CALLEE: javassist.CtClassType#getField(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClass#getField(java.lang.String,java.lang.String)
CALLER: javassist.compiler.NoFieldException#<init>(java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.MemberResolver#lookupField(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: javassist.CtClass#getField(java.lang.String)
CALLER: javassist.compiler.MemberResolver#lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupField(java.lang.String,javassist.compiler.ast.Symbol)
CALLER: static javassist.compiler.MemberCodeGen#badLvalue()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.MemberResolver#lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: javassist.CtClass#getField(java.lang.String)
	CALLEE: javassist.compiler.NoFieldException#<init>(java.lang.String,javassist.compiler.ast.ASTree)
CALLER: javassist.bytecode.Bytecode#addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(int,java.lang.String,java.lang.String)
CALLER: javassist.compiler.MemberResolver#resolveJvmClassName(java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
CALLER: static javassist.compiler.CodeGen#getCompOperator(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
CALLER: javassist.compiler.CodeGen#compileOprands(javassist.compiler.ast.BinExpr)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
CALLER: javassist.compiler.CodeGen#compareExpr(boolean,int,int,javassist.compiler.ast.BinExpr)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
	CALLEE: static javassist.compiler.CodeGen#badTypes(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CodeGen#convertOprandTypes(int,int,javassist.compiler.ast.Expr)
CALLER: static javassist.compiler.CodeGen#isAlwaysBranch(javassist.compiler.ast.ASTree,boolean)
	CALLEE: javassist.compiler.ast.Keyword#get()
CALLER: javassist.compiler.TypeChecker#insertCast(javassist.compiler.ast.BinExpr,int,int)
	CALLEE: javassist.compiler.ast.ASTList#setLeft(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CastExpr#<init>(int,int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: static javassist.compiler.CodeGen#rightIsStrong(int,int)
CALLER: javassist.compiler.JvstTypeChecker#compileUnwrapValue(javassist.CtClass)
	CALLEE: javassist.compiler.JvstTypeChecker#addNullIfVoid()
	CALLEE: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass)
CALLER: javassist.compiler.TypeChecker#atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#fieldAccess(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atFieldRead(javassist.CtField)
CALLER: javassist.compiler.MemberCodeGen#atClassObject2(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addLdc(int)
	CALLEE: javassist.bytecode.Bytecode#getConstPool()
	CALLEE: javassist.compiler.MemberCodeGen#getMajorVersion()
	CALLEE: javassist.compiler.CodeGen#atClassObject2(java.lang.String)
CALLER: javassist.compiler.MemberCodeGen#atArrayLength(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
CALLER: static javassist.compiler.TypeChecker#getConstantFieldValue(javassist.CtField)
	CALLEE: javassist.compiler.ast.IntConst#<init>(long,int)
	CALLEE: javassist.compiler.ast.DoubleConst#<init>(double,int)
	CALLEE: javassist.compiler.ast.Keyword#<init>(int)
	CALLEE: javassist.compiler.ast.StringL#<init>(java.lang.String)
	CALLEE: javassist.CtField#getConstantValue()
CALLER: javassist.compiler.TypeChecker#fieldAccess(javassist.compiler.ast.ASTree)
	CALLEE: javassist.CtField#getModifiers()
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#setField(javassist.CtField)
	CALLEE: javassist.compiler.NoFieldException#getField()
	CALLEE: javassist.compiler.NoFieldException#getExpr()
	CALLEE: static javassist.Modifier#isStatic(int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.CtClass#getField(java.lang.String)
	CALLEE: javassist.compiler.NoFieldException#<init>(java.lang.String,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.MemberResolver#lookupField(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.MemberResolver#lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol)
	CALLEE: javassist.compiler.TypeChecker#fieldAccess2(javassist.compiler.ast.Expr,java.lang.String)
CALLER: javassist.compiler.TypeChecker#atFieldRead(javassist.CtField)
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.CtField#getFieldInfo2()
CALLER: javassist.compiler.TypeChecker#atFieldPlusPlus(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#fieldAccess(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.TypeChecker#atFieldRead(javassist.CtField)
CALLER: javassist.compiler.MemberResolver#lookupClass(int,int,java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupClass(java.lang.String,boolean)
	CALLEE: static javassist.compiler.MemberResolver#getTypeName(int)
CALLER: javassist.bytecode.Bytecode#addInvokespecial(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(boolean,int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addCheckcast(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.TypeChecker#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.MemberResolver#resolveClassName(javassist.compiler.ast.ASTList)
CALLER: javassist.bytecode.Bytecode#addAnewarray(java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#addDload(int)
	CALLEE: javassist.bytecode.Bytecode#addLload(int)
	CALLEE: javassist.bytecode.Bytecode#addFload(int)
	CALLEE: javassist.bytecode.Bytecode#addIload(int)
CALLER: javassist.bytecode.Bytecode#addInvokestatic(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addMethodrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.compiler.MemberResolver#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.CtClass#getName()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#lookupClassByName(javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.CodeGen#convToString(int,int)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#isRefType(int)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(int,java.lang.String,java.lang.String)
CALLER: static javassist.compiler.CodeGen#badTypes(javassist.compiler.ast.Expr)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#getName()
CALLER: javassist.compiler.CodeGen#convertOprandTypes(int,int,javassist.compiler.ast.Expr)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.CodeGen#fatal()
	CALLEE: static javassist.compiler.CodeGen#typePrecedence(int)
	CALLEE: static javassist.compiler.CodeGen#badTypes(javassist.compiler.ast.Expr)
CALLER: static javassist.compiler.TypeChecker#isPlusExpr(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#getOperator()
CALLER: static javassist.compiler.TypeChecker#makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: static javassist.compiler.ast.Expr#make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Member#<init>(java.lang.String)
	CALLEE: static javassist.compiler.ast.CallExpr#makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
CALLER: static javassist.compiler.ast.ASTList#make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.ASTList#<init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.NewExpr#getArraySize()
	CALLEE: javassist.compiler.ast.NewExpr#getArguments()
CALLER: javassist.compiler.ast.NewExpr#getInitializer()
	CALLEE: javassist.compiler.ast.ASTList#getRight()
	CALLEE: javassist.compiler.ast.ASTList#getLeft()
CALLER: javassist.compiler.MemberCodeGen#atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: static javassist.compiler.CodeGen#toJvmTypeName(int,int)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.MemberCodeGen#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: static javassist.compiler.CodeGen#toJvmArrayName(java.lang.String,int)
	CALLEE: javassist.bytecode.Bytecode#addMultiNewarray(java.lang.String,int)
	CALLEE: javassist.compiler.ast.ASTList#length()
CALLER: javassist.compiler.JvstCodeGen#getMethodArgsLength(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.JvstCodeGen#atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#setType(javassist.CtClass)
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstCodeGen#indexOfParam1()
	CALLEE: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
CALLER: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[])
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.compiler.MemberResolver#compareSignature(java.lang.String,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.MemberResolver.Method#<init>(javassist.CtClass,javassist.bytecode.MethodInfo,int)
	CALLEE: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,java.lang.String,int[],int[],java.lang.String[],boolean)
CALLER: javassist.compiler.MemberCodeGen#atMethodCallCore2(javassist.CtClass,java.lang.String,boolean,boolean,int,int,javassist.compiler.MemberResolver.Method)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtPrimitiveType#getModifiers()
	CALLEE: javassist.CtArray#getModifiers()
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtClassType#isInterface()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#write(int,int)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.AccessFlag#isPrivate(int)
	CALLEE: javassist.compiler.MemberCodeGen#getAccessibleConstructor(java.lang.String,javassist.CtClass,javassist.bytecode.MethodInfo)
	CALLEE: static javassist.bytecode.Descriptor#insertParameter(java.lang.String,java.lang.String)
	CALLEE: static javassist.bytecode.AccessFlag#setPackage(int)
	CALLEE: javassist.compiler.MemberCodeGen#getAccessiblePrivate(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: static javassist.Modifier#isPublic(int)
	CALLEE: javassist.bytecode.Bytecode#addInvokeinterface(javassist.CtClass,java.lang.String,java.lang.String,int)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#setReturnType(java.lang.String,boolean,boolean)
	CALLEE: javassist.CtClass#isInterface()
CALLER: javassist.compiler.TypeChecker#atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.TypeChecker#resolveClassName(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.ASTList#length()
CALLER: javassist.compiler.JvstTypeChecker#getMethodArgsLength(javassist.compiler.ast.ASTList)
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.ASTList#head()
CALLER: javassist.compiler.JvstTypeChecker#atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.ASTList#tail()
	CALLEE: javassist.compiler.ast.CallExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#head()
	CALLEE: javassist.compiler.ast.Stmnt#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Declarator#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ASTList#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Symbol#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CondExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.AssignExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Pair#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.IntConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.DoubleConst#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Expr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.CastExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Keyword#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Member#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.InstanceOfExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.BinExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.Variable#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.StringL#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.ArrayInit#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.ast.NewExpr#accept(javassist.compiler.ast.Visitor)
	CALLEE: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass)
CALLER: static javassist.compiler.TypeChecker#argTypesToString(int[],int[],java.lang.String[])
	CALLEE: static javassist.compiler.TypeChecker#typeToString(java.lang.StringBuffer,int,int,java.lang.String)
CALLER: javassist.compiler.TypeChecker#setReturnType(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: static javassist.compiler.TypeChecker#badMethod()
CALLER: javassist.compiler.JvstCodeGen#addNullIfVoid()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
CALLER: static javassist.compiler.JvstCodeGen#makeCflowName(java.lang.StringBuffer,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: static javassist.compiler.JvstCodeGen#makeCflowName(java.lang.StringBuffer,javassist.compiler.ast.ASTree)
CALLER: javassist.bytecode.Bytecode#addGetstatic(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
CALLER: static javassist.compiler.TypeChecker#isDotSuper(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#oprand1()
	CALLEE: javassist.compiler.ast.Expr#getOperator()
	CALLEE: javassist.compiler.ast.Symbol#get()
	CALLEE: javassist.compiler.ast.Keyword#get()
CALLER: static javassist.compiler.MemberResolver#getSuperInterface(javassist.CtClass,java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.CtClassType#getInterfaces()
CALLER: static javassist.compiler.MemberCodeGen#badMethod()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: static javassist.compiler.TypeChecker#badMethod()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.compiler.MemberResolver#lookupClass0(java.lang.String,boolean)
	CALLEE: javassist.ClassPool#get(java.lang.String)
CALLER: javassist.compiler.MemberResolver#searchImports(java.lang.String)
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.MemberResolver#getInvalidNames()
	CALLEE: javassist.ClassPool#getImportedPackages()
CALLER: javassist.bytecode.ByteVector#add(int,int,int,int)
	CALLEE: javassist.bytecode.Bytecode#addGap(int)
CALLER: static javassist.compiler.TypeChecker#getConstantFieldValue(javassist.compiler.ast.Member)
	CALLEE: static javassist.compiler.TypeChecker#getConstantFieldValue(javassist.CtField)
	CALLEE: javassist.compiler.ast.Member#getField()
CALLER: static javassist.compiler.MemberCodeGen#badNewExpr()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.bytecode.Bytecode#addCheckcast(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
CALLER: javassist.compiler.MemberCodeGen#isEnclosing(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClassType#getDeclaringClass()
	CALLEE: javassist.CtClass#getDeclaringClass()
CALLER: javassist.CtClassType#getField(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#getField2(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#checkGetField(javassist.CtField,java.lang.String,java.lang.String)
CALLER: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass)
	CALLEE: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass,int)
CALLER: javassist.compiler.MemberCodeGen#getMajorVersion()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.bytecode.ClassFile#getMajorVersion()
CALLER: javassist.compiler.CodeGen#atClassObject2(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#write16bit(int,int)
	CALLEE: javassist.bytecode.Bytecode#addLdc(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,java.lang.String)
CALLER: javassist.compiler.TypeChecker#fieldAccess2(javassist.compiler.ast.Expr,java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: javassist.compiler.ast.Symbol#<init>(java.lang.String)
	CALLEE: javassist.compiler.ast.Expr#oprand2()
	CALLEE: javassist.compiler.ast.Expr#setOprand1(javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.MemberResolver#lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.Expr#setOperator(int)
	CALLEE: javassist.compiler.ast.Member#setField(javassist.CtField)
CALLER: static javassist.compiler.MemberResolver#getTypeName(int)
	CALLEE: static javassist.compiler.MemberResolver#fatal()
CALLER: javassist.bytecode.Bytecode#addInvokevirtual(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addMethodrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addMultiNewarray(java.lang.String,int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
CALLER: javassist.compiler.MemberResolver#compareSignature(java.lang.String,int[],int[],java.lang.String[])
	CALLEE: static javassist.bytecode.Descriptor#numOfParameters(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.CtClass#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtArray#subtypeOf(javassist.CtClass)
	CALLEE: javassist.CtClassType#subtypeOf(javassist.CtClass)
	CALLEE: javassist.compiler.MemberResolver#lookupClassByJvmName(java.lang.String)
CALLER: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,java.lang.String,int[],int[],java.lang.String[],boolean)
	CALLEE: javassist.CtPrimitiveType#getModifiers()
	CALLEE: javassist.CtArray#getModifiers()
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.bytecode.ClassFile#getMethods()
	CALLEE: javassist.bytecode.MethodInfo#getName()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClassType#getInterfaces()
	CALLEE: javassist.CtClass#getSuperclass()
	CALLEE: javassist.CtArray#getSuperclass()
	CALLEE: javassist.CtArray#getInterfaces()
	CALLEE: javassist.compiler.MemberResolver#compareSignature(java.lang.String,int[],int[],java.lang.String[])
	CALLEE: javassist.compiler.MemberResolver.Method#<init>(javassist.CtClass,javassist.bytecode.MethodInfo,int)
	CALLEE: javassist.compiler.MemberResolver#lookupMethod(javassist.CtClass,java.lang.String,int[],int[],java.lang.String[],boolean)
	CALLEE: static javassist.Modifier#isInterface(int)
	CALLEE: static javassist.Modifier#isAbstract(int)
	CALLEE: javassist.CtClass#getInterfaces()
	CALLEE: javassist.CtClass#getClassFile2()
CALLER: javassist.compiler.MemberCodeGen#getAccessibleConstructor(java.lang.String,javassist.CtClass,javassist.bytecode.MethodInfo)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#isEnclosing(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClassType#getAccessorMaker()
	CALLEE: javassist.CtClass#getAccessorMaker()
	CALLEE: javassist.compiler.AccessorMaker#getConstructor(javassist.CtClass,java.lang.String,javassist.bytecode.MethodInfo)
CALLER: javassist.compiler.MemberCodeGen#getAccessiblePrivate(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,javassist.CtClass)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.MemberCodeGen#isEnclosing(javassist.CtClass,javassist.CtClass)
	CALLEE: javassist.CtClassType#getAccessorMaker()
	CALLEE: javassist.CtClass#getAccessorMaker()
	CALLEE: javassist.compiler.AccessorMaker#getMethodAccessor(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo)
CALLER: javassist.bytecode.Bytecode#addInvokeinterface(javassist.CtClass,java.lang.String,java.lang.String,int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokeinterface(int,java.lang.String,java.lang.String,int)
CALLER: javassist.bytecode.Bytecode#addInvokevirtual(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(int,java.lang.String,java.lang.String)
CALLER: javassist.compiler.MemberCodeGen#setReturnType(java.lang.String,boolean,boolean)
	CALLEE: static javassist.compiler.CodeGen#is2word(int,int)
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: static javassist.compiler.MemberCodeGen#badMethod()
CALLER: static javassist.compiler.TypeChecker#typeToString(java.lang.StringBuffer,int,int,java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#jvmToJavaName(java.lang.String)
	CALLEE: static javassist.compiler.MemberResolver#getTypeName(int)
CALLER: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addNameAndTypeInfo(java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,int)
CALLER: javassist.CtClassType#getDeclaringClass()
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtClassType#getClassFile2()
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: javassist.bytecode.ClassFile#getAttribute(java.lang.String)
	CALLEE: javassist.bytecode.EnclosingMethodAttribute#className()
	CALLEE: javassist.bytecode.InnerClassesAttribute#tableLength()
	CALLEE: javassist.bytecode.InnerClassesAttribute#innerClass(int)
	CALLEE: javassist.bytecode.InnerClassesAttribute#outerClass(int)
CALLER: javassist.CtClassType#getField2(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#getSuperclass()
	CALLEE: javassist.CtClassType#getInterfaces()
	CALLEE: javassist.CtClassType#getField2(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#getDeclaredField2(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClass#getField2(java.lang.String,java.lang.String)
CALLER: javassist.CtClassType#checkGetField(javassist.CtField,java.lang.String,java.lang.String)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
CALLER: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass,int)
	CALLEE: javassist.CtClass#getName()
	CALLEE: javassist.CtArray#getComponentType()
	CALLEE: static javassist.compiler.MemberResolver#javaToJvmName(java.lang.String)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.CtPrimitiveType#getDescriptor()
	CALLEE: static javassist.compiler.MemberResolver#descToType(char)
	CALLEE: javassist.CtClass#isArray()
	CALLEE: javassist.CtArray#isArray()
	CALLEE: javassist.CtClass#getComponentType()
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.compiler.JvstTypeChecker#setType(javassist.CtClass,int)
CALLER: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addExceptionHandler(int,int,int,int)
CALLER: javassist.bytecode.Bytecode#addInvokeinterface(int,java.lang.String,java.lang.String,int)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addInterfaceMethodrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.InnerClassesAttribute#outerClass(int)
	CALLEE: javassist.bytecode.ConstPool#getClassInfo(int)
	CALLEE: javassist.bytecode.InnerClassesAttribute#outerClassIndex(int)
CALLER: javassist.CtClassType#getDeclaredField2(java.lang.String,java.lang.String)
	CALLEE: javassist.CtClassType#getMembers()
	CALLEE: javassist.CtMember#next()
	CALLEE: javassist.CtMember.Cache#fieldHead()
	CALLEE: javassist.CtMember.Cache#lastField()
	CALLEE: javassist.CtMember.Cache#getName()
	CALLEE: javassist.CtField#getName()
	CALLEE: javassist.CtMethod#getName()
	CALLEE: javassist.CtConstructor#getName()
	CALLEE: javassist.CtMember.Cache#getSignature()
	CALLEE: javassist.CtField#getSignature()
	CALLEE: javassist.CtBehavior#getSignature()
CALLER: javassist.bytecode.InnerClassesAttribute#outerClassIndex(int)
	CALLEE: static javassist.bytecode.ByteArray#readU16bit(byte[],int)
	CALLEE: javassist.bytecode.AttributeInfo#get()
CALLER: javassist.CtField#getSignature()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
CALLER: javassist.CtBehavior#getSignature()
	CALLEE: javassist.bytecode.MethodInfo#getDescriptor()
CALLER: javassist.CtClass#getField(java.lang.String,java.lang.String)
	CALLEE: javassist.NotFoundException#<init>(java.lang.String)
CALLER: javassist.ClassPool#toString()
	CALLEE: javassist.ClassPoolTail#toString()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2500(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: javassist.compiler.ast.ASTList#length()
	CALLEE: static javassist.compiler.ast.ASTList#length(javassist.compiler.ast.ASTList)
CALLER: javassist.compiler.ast.IntConst#compute(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.IntConst#compute0(int,javassist.compiler.ast.IntConst)
	CALLEE: javassist.compiler.ast.IntConst#compute0(int,javassist.compiler.ast.DoubleConst)
CALLER: javassist.compiler.ast.DoubleConst#compute(int,javassist.compiler.ast.ASTree)
	CALLEE: javassist.compiler.ast.DoubleConst#compute0(int,javassist.compiler.ast.IntConst)
	CALLEE: javassist.compiler.ast.DoubleConst#compute0(int,javassist.compiler.ast.DoubleConst)
CALLER: javassist.compiler.MemberCodeGen.JsrHook#doit(javassist.bytecode.Bytecode,int)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#addDload(int)
	CALLEE: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#addLload(int)
	CALLEE: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#addFload(int)
	CALLEE: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.bytecode.Bytecode#addIload(int)
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.bytecode.Bytecode#addIstore(int)
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook#jsrJmp(javassist.bytecode.Bytecode)
	CALLEE: javassist.compiler.MemberCodeGen.JsrHook#getVar(int)
CALLER: javassist.compiler.MemberCodeGen.JsrHook2#doit(javassist.bytecode.Bytecode,int)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#addDstore(int)
	CALLEE: javassist.bytecode.Bytecode#addLstore(int)
	CALLEE: javassist.bytecode.Bytecode#addFstore(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
	CALLEE: javassist.bytecode.Bytecode#addAstore(int)
	CALLEE: javassist.bytecode.Bytecode#addIstore(int)
CALLER: javassist.CtClassType#getAccessorMaker()
	CALLEE: javassist.compiler.AccessorMaker#<init>(javassist.CtClass)
CALLER: javassist.CtField#getConstantValue()
	CALLEE: javassist.bytecode.ConstPool#getTag(int)
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: javassist.bytecode.FieldInfo#getConstantValue()
	CALLEE: javassist.bytecode.ConstPool#getIntegerInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getDoubleInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getFloatInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getLongInfo(int)
	CALLEE: javassist.bytecode.FieldInfo#getConstPool()
	CALLEE: javassist.bytecode.ConstPool#getStringInfo(int)
CALLER: javassist.CtClassType#isInterface()
	CALLEE: javassist.CtClassType#getModifiers()
	CALLEE: static javassist.Modifier#isInterface(int)
CALLER: javassist.compiler.MemberResolver.Method#isStatic()
	CALLEE: javassist.bytecode.MethodInfo#getAccessFlags()
CALLER: javassist.ClassPoolTail#toString()
	CALLEE: javassist.ClassClassPath#toString()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: javassist.compiler.ast.IntConst#compute0(int,javassist.compiler.ast.IntConst)
	CALLEE: javassist.compiler.ast.IntConst#<init>(long,int)
CALLER: javassist.compiler.ast.IntConst#compute0(int,javassist.compiler.ast.DoubleConst)
	CALLEE: javassist.compiler.ast.DoubleConst#<init>(double,int)
CALLER: javassist.compiler.ast.DoubleConst#compute0(int,javassist.compiler.ast.IntConst)
	CALLEE: static javassist.compiler.ast.DoubleConst#compute(int,double,double,int)
CALLER: javassist.compiler.ast.DoubleConst#compute0(int,javassist.compiler.ast.DoubleConst)
	CALLEE: static javassist.compiler.ast.DoubleConst#compute(int,double,double,int)
CALLER: javassist.compiler.MemberCodeGen.JsrHook#jsrJmp(javassist.bytecode.Bytecode)
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.Bytecode#currentPc()
CALLER: javassist.compiler.MemberCodeGen.JsrHook#getVar(int)
	CALLEE: javassist.compiler.CodeGen#getMaxLocals()
	CALLEE: javassist.compiler.CodeGen#incMaxLocals(int)
CALLER: static javassist.compiler.ast.DoubleConst#compute(int,double,double,int)
	CALLEE: javassist.compiler.ast.DoubleConst#<init>(double,int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#produce()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
CALLER: javassist.compiler.AccessorMaker#getFieldSetter(javassist.bytecode.FieldInfo,boolean)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.CannotCompileException)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.NotFoundException)
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: static javassist.bytecode.Descriptor#of(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
	CALLEE: javassist.CtClass#getClassFile()
	CALLEE: javassist.compiler.AccessorMaker#findAccessorName(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.MethodInfo#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool)
	CALLEE: static javassist.bytecode.Descriptor#toCtClass(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.Bytecode#addPutstatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addPutfield(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addReturn(javassist.CtClass)
CALLER: javassist.compiler.AccessorMaker#getFieldGetter(javassist.bytecode.FieldInfo,boolean)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.CannotCompileException)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.NotFoundException)
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.FieldInfo#getName()
	CALLEE: javassist.bytecode.FieldInfo#getDescriptor()
	CALLEE: static javassist.bytecode.Descriptor#of(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.CtClass#getClassFile()
	CALLEE: javassist.compiler.AccessorMaker#findAccessorName(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.MethodInfo#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool)
	CALLEE: static javassist.bytecode.Descriptor#toCtClass(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.Bytecode#addReturn(javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addGetstatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addGetfield(javassist.CtClass,java.lang.String,java.lang.String)
CALLER: javassist.compiler.AccessorMaker#getConstructor(javassist.CtClass,java.lang.String,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.CannotCompileException)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.NotFoundException)
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: static javassist.bytecode.Descriptor#getParameterTypes(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.MethodInfo#getExceptionsAttribute()
	CALLEE: javassist.bytecode.Bytecode#addAload(int)
	CALLEE: javassist.bytecode.Bytecode#addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
	CALLEE: javassist.CtClass#getClassFile()
	CALLEE: javassist.bytecode.MethodInfo#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.Bytecode#addReturn(javassist.CtClass)
	CALLEE: static javassist.bytecode.Descriptor#appendParameter(java.lang.String,java.lang.String)
CALLER: javassist.compiler.AccessorMaker#getMethodAccessor(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo)
	CALLEE: javassist.bytecode.ClassFile#getConstPool()
	CALLEE: javassist.bytecode.Bytecode#toCodeAttribute()
	CALLEE: javassist.bytecode.MethodInfo#setCodeAttribute(javassist.bytecode.CodeAttribute)
	CALLEE: javassist.bytecode.ClassFile#addMethod(javassist.bytecode.MethodInfo)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.CannotCompileException)
	CALLEE: javassist.compiler.CompileError#<init>(javassist.NotFoundException)
	CALLEE: javassist.CtClassType#getClassPool()
	CALLEE: static javassist.bytecode.Descriptor#getParameterTypes(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.Bytecode#setMaxLocals(int)
	CALLEE: javassist.bytecode.MethodInfo#<init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.MethodInfo#setAccessFlags(int)
	CALLEE: javassist.bytecode.ExceptionsAttribute#copy(javassist.bytecode.ConstPool,java.util.Map)
	CALLEE: javassist.bytecode.SyntheticAttribute#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.MethodInfo#getExceptionsAttribute()
	CALLEE: static javassist.bytecode.Descriptor#getReturnType(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.bytecode.Bytecode#addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addLoad(int,javassist.CtClass)
	CALLEE: javassist.bytecode.Bytecode#addInvokevirtual(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.CtClass#getClassFile()
	CALLEE: javassist.compiler.AccessorMaker#findAccessorName(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.MethodInfo#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.Bytecode#addReturn(javassist.CtClass)
CALLER: javassist.bytecode.ConstPool#getStringInfo(int)
	CALLEE: javassist.bytecode.ConstPool#getUtf8Info(int)
	CALLEE: javassist.bytecode.ConstPool#getItem(int)
CALLER: javassist.CtClass#getClassFile()
	CALLEE: javassist.CtClassType#checkModify()
	CALLEE: javassist.CtClassType#getClassFile2()
CALLER: javassist.compiler.AccessorMaker#findAccessorName(javassist.bytecode.ClassFile)
	CALLEE: javassist.bytecode.ClassFile#getMethod(java.lang.String)
CALLER: javassist.bytecode.MethodInfo#addAttribute(javassist.bytecode.AttributeInfo)
	CALLEE: static javassist.bytecode.AttributeInfo#remove(java.util.ArrayList,java.lang.String)
	CALLEE: javassist.bytecode.AttributeInfo#getName()
CALLER: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool)
	CALLEE: javassist.bytecode.Bytecode#<init>(javassist.bytecode.ConstPool,int,int)
CALLER: static javassist.bytecode.Descriptor#toCtClass(java.lang.String,javassist.ClassPool)
	CALLEE: javassist.ClassPool#get(java.lang.String)
	CALLEE: static javassist.bytecode.Descriptor#toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int)
CALLER: javassist.bytecode.Bytecode#addPutstatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addPutstatic0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addPutfield(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#addPutfield0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addReturn(javassist.CtClass)
	CALLEE: javassist.CtPrimitiveType#isPrimitive()
	CALLEE: javassist.CtClass#isPrimitive()
	CALLEE: javassist.CtPrimitiveType#getReturnOp()
	CALLEE: javassist.bytecode.Bytecode#addOpcode(int)
CALLER: javassist.compiler.CompileError#<init>(javassist.CannotCompileException)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
	CALLEE: javassist.CannotCompileException#getReason()
CALLER: javassist.compiler.CompileError#<init>(javassist.NotFoundException)
	CALLEE: javassist.compiler.CompileError#<init>(java.lang.String)
CALLER: javassist.bytecode.Bytecode#addGetstatic(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addGetfield(javassist.CtClass,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addPutstatic0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
CALLER: javassist.bytecode.Bytecode#addPutfield0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#add(int)
	CALLEE: static javassist.bytecode.Descriptor#dataSize(java.lang.String)
	CALLEE: javassist.bytecode.Bytecode#growStack(int)
	CALLEE: javassist.bytecode.Bytecode#addIndex(int)
	CALLEE: javassist.bytecode.ConstPool#addClassInfo(javassist.CtClass)
	CALLEE: javassist.bytecode.ConstPool#addFieldrefInfo(int,java.lang.String,java.lang.String)
