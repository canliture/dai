CALLER: static org.traccar.Main#main(java.lang.String[])
	CALLEE: static org.traccar.Context#init(java.lang.String[])
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.Context#getServerManager()
	CALLEE: static org.traccar.Context#getWebServer()
	CALLEE: org.traccar.Main.1#<init>()
	CALLEE: org.traccar.Main.2#<init>()
	CALLEE: org.traccar.web.WebServer#start()
	CALLEE: org.traccar.ServerManager#start()
CALLER: static org.traccar.Context#init(java.lang.String[])
	CALLEE: org.traccar.location.MozillaLocationProvider#<init>()
	CALLEE: org.traccar.location.OpenCellIdLocationProvider#<init>(java.lang.String)
	CALLEE: org.traccar.database.DataManager#getDataSource()
	CALLEE: org.traccar.web.WebServer#<init>(org.traccar.Config,javax.sql.DataSource)
	CALLEE: org.traccar.database.PermissionsManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.ConnectionManager#<init>()
	CALLEE: org.traccar.database.GeofenceManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.NotificationManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.ServerManager#<init>()
	CALLEE: org.traccar.notification.EventForwarder#<init>()
	CALLEE: org.traccar.database.AliasesManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.Config#<init>()
	CALLEE: org.traccar.Config#load(java.lang.String)
	CALLEE: org.traccar.Config#getBoolean(java.lang.String)
	CALLEE: static org.traccar.helper.Log#setupLogger(org.traccar.Config)
	CALLEE: org.traccar.Config#hasKey(java.lang.String)
	CALLEE: org.traccar.database.DataManager#<init>(org.traccar.Config)
	CALLEE: org.traccar.database.DeviceManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.Config#getString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: org.traccar.Config#getInteger(java.lang.String)
	CALLEE: org.traccar.geocode.NominatimReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.GisgraphyReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.MapQuestReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.OpenCageReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.BingMapsReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.FactualReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.GeocodeFarmReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.GeocodeFarmReverseGeocoder#<init>(int)
	CALLEE: org.traccar.geocode.GoogleReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.GoogleReverseGeocoder#<init>(int)
CALLER: static org.traccar.Context#<clinit>()
	CALLEE: com.ning.http.client.AsyncHttpClient#<init>()
CALLER: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#info(java.lang.Object)
	CALLEE: org.apache.log4j.Category#info(java.lang.Object)
CALLER: static org.traccar.helper.Log#setupLogger(org.traccar.Config)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: org.apache.log4j.PatternLayout#<init>(java.lang.String)
	CALLEE: org.apache.log4j.DailyRollingFileAppender#<init>(org.apache.log4j.Layout,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#resetConfiguration()
	CALLEE: static org.apache.log4j.LogManager#getRootLogger()
	CALLEE: org.apache.log4j.varia.NullAppender#<init>()
	CALLEE: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.Level#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.traccar.helper.Log.1#<init>()
	CALLEE: static org.jboss.netty.logging.InternalLoggerFactory#setDefaultFactory(org.jboss.netty.logging.InternalLoggerFactory)
	CALLEE: static org.traccar.helper.Log#logSystemInfo()
	CALLEE: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
CALLER: org.traccar.database.DataManager#<init>(org.traccar.Config)
	CALLEE: org.traccar.database.DataManager#initDatabase()
	CALLEE: org.traccar.database.DataManager#initDatabaseSchema()
CALLER: org.traccar.database.DeviceManager#<init>(org.traccar.database.DataManager)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.traccar.Config#getBoolean(java.lang.String)
	CALLEE: static org.traccar.Context#getConfig()
	CALLEE: org.traccar.database.DeviceManager#updateGroupCache(boolean)
	CALLEE: org.traccar.database.DeviceManager#updateDeviceCache(boolean)
	CALLEE: org.traccar.database.DataManager#getLatestPositions()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.Config#getLong(java.lang.String,long)
CALLER: org.traccar.Config#getInteger(java.lang.String)
	CALLEE: org.traccar.Config#getInteger(java.lang.String,int)
CALLER: org.traccar.geocode.NominatimReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.GisgraphyReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.MapQuestReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.OpenCageReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.BingMapsReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.FactualReverseGeocoder#<init>(java.lang.String,java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.GeocodeFarmReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.GeocodeFarmReverseGeocoder#<init>(int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.GoogleReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.geocode.GoogleReverseGeocoder#<init>(int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
CALLER: org.traccar.location.MozillaLocationProvider#<init>()
	CALLEE: org.traccar.location.MozillaLocationProvider#<init>(java.lang.String,java.lang.String)
CALLER: org.traccar.location.OpenCellIdLocationProvider#<init>(java.lang.String)
	CALLEE: org.traccar.location.OpenCellIdLocationProvider#<init>(java.lang.String,java.lang.String)
CALLER: org.traccar.web.WebServer#<init>(org.traccar.Config,javax.sql.DataSource)
	CALLEE: org.traccar.Config#getBoolean(java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.Config#getInteger(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerList#<init>()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setMaxInactiveInterval(int)
	CALLEE: org.traccar.web.WebServer#initServer()
	CALLEE: org.traccar.web.WebServer#initApi()
	CALLEE: org.traccar.web.WebServer#initConsole()
	CALLEE: org.traccar.web.WebServer#initOldWebApp()
	CALLEE: org.traccar.web.WebServer#initWebApp()
	CALLEE: org.traccar.web.WebServer.1#<init>(org.traccar.web.WebServer)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
CALLER: org.traccar.database.PermissionsManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.PermissionsManager#refreshUsers()
	CALLEE: org.traccar.database.PermissionsManager#refreshPermissions()
CALLER: org.traccar.database.ConnectionManager#<init>()
	CALLEE: static org.traccar.Context#getConfig()
	CALLEE: org.traccar.Config#getLong(java.lang.String,long)
CALLER: org.traccar.database.GeofenceManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.GeofenceManager#refreshGeofences()
CALLER: org.traccar.database.NotificationManager#<init>(org.traccar.database.DataManager)
	CALLEE: org.traccar.database.NotificationManager#refresh()
CALLER: org.traccar.ServerManager#<init>()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.traccar.ServerManager#initProtocolServer(org.traccar.Protocol)
CALLER: org.traccar.notification.EventForwarder#<init>()
	CALLEE: org.traccar.Config#getString(java.lang.String,java.lang.String)
	CALLEE: static org.traccar.Context#getConfig()
CALLER: org.traccar.database.AliasesManager#<init>(org.traccar.database.DataManager)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#getAttributeAliases()
	CALLEE: org.traccar.database.AliasesManager#getAttributeAliases(long)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
CALLER: static com.ning.http.client.AsyncHttpClient#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.ning.http.client.AsyncHttpClient#<init>()
	CALLEE: com.ning.http.client.AsyncHttpClientConfig.Builder#<init>()
	CALLEE: com.ning.http.client.AsyncHttpClientConfig.Builder#build()
	CALLEE: com.ning.http.client.AsyncHttpClient#<init>(com.ning.http.client.AsyncHttpClientConfig)
CALLER: static org.traccar.helper.Log#getLogger()
	CALLEE: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
CALLER: org.apache.log4j.PatternLayout#<init>(java.lang.String)
	CALLEE: org.apache.log4j.Layout#<init>()
	CALLEE: org.apache.log4j.PatternLayout#createPatternParser(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#parse()
CALLER: org.apache.log4j.DailyRollingFileAppender#<init>(org.apache.log4j.Layout,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#<init>(org.apache.log4j.Layout,java.lang.String,boolean)
	CALLEE: org.apache.log4j.RollingCalendar#<init>()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#activateOptions()
CALLER: static org.apache.log4j.LogManager#resetConfiguration()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#resetConfiguration()
CALLER: static org.apache.log4j.LogManager#<clinit>()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.spi.RootLogger#<init>(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#<init>(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#<init>(org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#getResource(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.LogManager#getRootLogger()
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
CALLER: static org.apache.log4j.varia.NullAppender#<clinit>()
	CALLEE: org.apache.log4j.varia.NullAppender#<init>()
CALLER: org.apache.log4j.varia.NullAppender#<init>()
	CALLEE: org.apache.log4j.AppenderSkeleton#<init>()
CALLER: static org.apache.log4j.Logger#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#getLogger(java.lang.String)
CALLER: static org.apache.log4j.Logger#<clinit>()
	CALLEE: static org.apache.log4j.Logger#class$(java.lang.String)
CALLER: static org.apache.log4j.Category#<clinit>()
	CALLEE: static org.apache.log4j.Category#class$(java.lang.String)
CALLER: static org.apache.log4j.Level#<clinit>()
	CALLEE: org.apache.log4j.Level#<init>(int,java.lang.String,int)
CALLER: static org.apache.log4j.Priority#<clinit>()
	CALLEE: org.apache.log4j.Level#<init>(int,java.lang.String,int)
CALLER: static org.jboss.netty.logging.InternalLoggerFactory#<clinit>()
	CALLEE: org.jboss.netty.logging.JdkLoggerFactory#<init>()
CALLER: org.traccar.helper.Log.1#<init>()
	CALLEE: org.jboss.netty.logging.InternalLoggerFactory#<init>()
CALLER: static org.traccar.helper.Log#logSystemInfo()
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String)
CALLER: org.traccar.database.DataManager#initDatabase()
	CALLEE: org.traccar.Config#getString(java.lang.String,java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: org.traccar.Config#getInteger(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#<init>()
	CALLEE: com.zaxxer.hikari.HikariConfig#setDriverClassName(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#setJdbcUrl(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#setUsername(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#setPassword(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#setConnectionInitSql(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#setIdleTimeout(long)
	CALLEE: com.zaxxer.hikari.HikariConfig#setMaximumPoolSize(int)
	CALLEE: com.zaxxer.hikari.HikariDataSource#<init>(com.zaxxer.hikari.HikariConfig)
CALLER: org.traccar.database.DataManager#initDatabaseSchema()
	CALLEE: org.traccar.Config#hasKey(java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: liquibase.resource.FileSystemResourceAccessor#<init>()
	CALLEE: static liquibase.database.DatabaseFactory#getInstance()
	CALLEE: liquibase.Liquibase#<init>(java.lang.String,liquibase.resource.ResourceAccessor,liquibase.database.Database)
	CALLEE: liquibase.Liquibase#clearCheckSums()
	CALLEE: liquibase.Contexts#<init>()
	CALLEE: liquibase.Liquibase#update(liquibase.Contexts)
	CALLEE: liquibase.database.DatabaseFactory#openDatabase(java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
CALLER: org.traccar.database.DeviceManager#updateGroupCache(boolean)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.traccar.database.DataManager#getAllGroups()
CALLER: org.traccar.database.DeviceManager#updateDeviceCache(boolean)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.Context#getGeofenceManager()
	CALLEE: org.traccar.database.DataManager#getAllDevices()
	CALLEE: org.traccar.database.DeviceManager#getLastPosition(long)
	CALLEE: org.traccar.database.GeofenceManager#getCurrentDeviceGeofences(org.traccar.model.Position)
CALLER: org.traccar.database.DataManager#getLatestPositions()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.String,java.lang.Throwable)
CALLER: org.traccar.geocode.JsonReverseGeocoder#<init>(java.lang.String,int)
	CALLEE: org.traccar.geocode.JsonReverseGeocoder.1#<init>(org.traccar.geocode.JsonReverseGeocoder,int)
CALLER: org.traccar.location.MozillaLocationProvider#<init>(java.lang.String,java.lang.String)
	CALLEE: org.traccar.location.BaseLocationProvider#<init>()
CALLER: org.traccar.location.OpenCellIdLocationProvider#<init>(java.lang.String,java.lang.String)
	CALLEE: org.traccar.location.BaseLocationProvider#<init>()
CALLER: static org.eclipse.jetty.server.handler.AbstractHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.component.ContainerLifeCycle#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.component.AbstractLifeCycle#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.HandlerList#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#<init>()
CALLER: static org.eclipse.jetty.server.session.AbstractSessionManager#<clinit>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.1#<init>()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#<init>()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
CALLER: org.traccar.web.WebServer#initServer()
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: org.traccar.Config#getInteger(java.lang.String,int)
	CALLEE: org.eclipse.jetty.server.Server#<init>(int)
	CALLEE: org.eclipse.jetty.server.Server#<init>(java.net.InetSocketAddress)
CALLER: org.traccar.web.WebServer#initApi()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.traccar.api.AsyncSocketServlet#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.lang.Class[])
	CALLEE: org.glassfish.jersey.servlet.ServletContainer#<init>(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#addHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
CALLER: org.traccar.web.WebServer#initConsole()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#addHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.traccar.web.ConsoleServlet#<init>()
CALLER: org.traccar.web.WebServer#initOldWebApp()
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#addHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#<init>()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setWar(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
CALLER: org.traccar.web.WebServer#initWebApp()
	CALLEE: org.traccar.Config#getBoolean(java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#addHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setResourceBase(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setWelcomeFiles(java.lang.String[])
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setMinMemoryMappedContentLength(int)
CALLER: static org.eclipse.jetty.server.handler.ErrorHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.traccar.web.WebServer.1#<init>(org.traccar.web.WebServer)
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#<init>()
CALLER: org.traccar.database.PermissionsManager#refreshUsers()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#getServer()
	CALLEE: org.traccar.database.DataManager#getUsers()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.traccar.database.PermissionsManager#refreshPermissions()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: static org.traccar.Context#getDeviceManager()
	CALLEE: org.traccar.database.GroupTree#<init>(java.util.Collection,java.util.Collection)
	CALLEE: org.traccar.database.DataManager#getGroupPermissions()
	CALLEE: org.traccar.database.PermissionsManager#getGroupPermissions(long)
	CALLEE: org.traccar.database.PermissionsManager#getDevicePermissions(long)
	CALLEE: org.traccar.database.GroupTree#getGroups(long)
	CALLEE: org.traccar.database.GroupTree#getDevices(long)
	CALLEE: org.traccar.database.DataManager#getDevicePermissions()
	CALLEE: org.traccar.database.PermissionsManager#getGroupDevices(long)
	CALLEE: org.traccar.database.PermissionsManager#getDeviceUsers(long)
	CALLEE: org.traccar.database.DeviceManager#getAllDevices()
	CALLEE: org.traccar.database.DeviceManager#getAllGroups()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.traccar.database.GeofenceManager#refreshGeofences()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#getGeofences()
	CALLEE: org.traccar.database.GeofenceManager#refreshUserGeofences()
	CALLEE: org.traccar.database.GeofenceManager#refresh()
CALLER: org.traccar.database.NotificationManager#refresh()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#getNotifications()
	CALLEE: org.traccar.database.NotificationManager#getUserNotificationsUnsafe(long)
CALLER: org.traccar.ServerManager#initProtocolServer(org.traccar.Protocol)
	CALLEE: org.traccar.Config#hasKey(java.lang.String)
	CALLEE: static org.traccar.Context#getConfig()
CALLER: org.traccar.database.DataManager#getAttributeAliases()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#getCallingClass()
	CALLEE: static org.slf4j.LoggerFactory#nonMatchingClasses(java.lang.Class,java.lang.Class)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.helpers.NOPLogger#getName()
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#getName()
CALLER: static org.slf4j.LoggerFactory#<clinit>()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#<init>()
	CALLEE: org.slf4j.helpers.NOPLoggerFactory#<init>()
	CALLEE: static org.slf4j.helpers.Util#safeGetBooleanSystemProperty(java.lang.String)
CALLER: com.ning.http.client.AsyncHttpClient#finalize()
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#<init>()
	CALLEE: org.apache.log4j.RollingCalendar#<init>()
	CALLEE: org.apache.log4j.FileAppender#<init>()
CALLER: org.apache.log4j.AppenderSkeleton#finalize()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
CALLER: com.ning.http.client.AsyncHttpClientConfig.Builder#<init>()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultMaxRequestRetry()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultDisableUrlEncodingForBoundRequests()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultIoThreadMultiplier()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultEnabledProtocols()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultSslSessionCacheSize()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultSslSessionTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultConnectTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultMaxConnections()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultMaxConnectionsPerHost()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultRequestTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultReadTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultWebSocketTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAllowPoolingConnections()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAllowPoolingSslConnections()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultPooledConnectionIdleTimeout()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultConnectionTTL()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAcceptAnyCertificate()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultFollowRedirect()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultMaxRedirects()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultStrict302Handling()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultUseProxySelector()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultUseProxyProperties()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultUseRelativeURIsWithConnectProxies()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultCompressionEnforced()
	CALLEE: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultUserAgent()
CALLER: com.ning.http.client.AsyncHttpClientConfig.Builder#build()
	CALLEE: com.ning.http.client.AsyncHttpClientConfig.Builder.1#<init>(com.ning.http.client.AsyncHttpClientConfig.Builder)
	CALLEE: static com.ning.http.util.ProxyUtils#getJdkDefaultProxyServerSelector()
	CALLEE: static com.ning.http.util.ProxyUtils#createProxyServerSelector(java.util.Properties)
	CALLEE: com.ning.http.client.AsyncHttpClientConfig#<init>(int,int,int,int,int,int,boolean,boolean,int,int,javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier,boolean,boolean,int,boolean,java.util.concurrent.ExecutorService,com.ning.http.client.ProxyServerSelector,boolean,boolean,java.lang.String,com.ning.http.client.Realm,java.util.List,java.util.List,java.util.List,int,boolean,int,java.lang.String[],java.lang.String[],java.lang.Integer,java.lang.Integer,com.ning.http.client.AsyncHttpProviderConfig,com.ning.http.client.AsyncHttpClientConfig.1)
CALLER: com.ning.http.client.AsyncHttpClient#<init>(com.ning.http.client.AsyncHttpClientConfig)
	CALLEE: static com.ning.http.client.AsyncHttpClient#loadDefaultProvider(java.lang.String,com.ning.http.client.AsyncHttpClientConfig)
	CALLEE: com.ning.http.client.AsyncHttpClient#<init>(com.ning.http.client.AsyncHttpProvider,com.ning.http.client.AsyncHttpClientConfig)
CALLER: org.apache.log4j.PatternLayout#createPatternParser(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#<init>(java.lang.String)
CALLER: org.apache.log4j.FileAppender#<init>(org.apache.log4j.Layout,java.lang.String,boolean)
	CALLEE: org.apache.log4j.WriterAppender#<init>()
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
CALLER: org.apache.log4j.DailyRollingFileAppender#activateOptions()
	CALLEE: org.apache.log4j.FileAppender#activateOptions()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#computeCheckPeriod()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#printPeriodicity(int)
	CALLEE: org.apache.log4j.RollingCalendar#setType(int)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#<init>(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#<init>()
	CALLEE: static org.apache.log4j.LogManager#isLikelySafeScenario(java.lang.Exception)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.DefaultRepositorySelector#getLoggerRepository()
CALLER: org.apache.log4j.spi.RootLogger#<init>(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
CALLER: org.apache.log4j.Hierarchy#<init>(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setHierarchy(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.or.RendererMap#<init>()
	CALLEE: org.apache.log4j.DefaultCategoryFactory#<init>()
CALLER: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
CALLER: static org.apache.log4j.helpers.Loader#getResource(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.Loader#getTCL()
	CALLEE: static org.apache.log4j.helpers.Loader#class$(java.lang.String)
CALLER: static org.apache.log4j.helpers.Loader#<clinit>()
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
CALLER: static org.apache.log4j.helpers.LogLog#<clinit>()
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
CALLER: static org.apache.log4j.helpers.OptionConverter#selectAndConfigure(java.net.URL,java.lang.String,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#class$(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.PropertyConfigurator#<init>()
	CALLEE: org.apache.log4j.PropertyConfigurator#doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)
CALLER: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace()
CALLER: org.apache.log4j.AppenderSkeleton#<init>()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#<init>()
CALLER: static org.apache.log4j.LogManager#getLogger(java.lang.String)
	CALLEE: static org.apache.log4j.LogManager#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
CALLER: org.apache.log4j.Level#<init>(int,java.lang.String,int)
	CALLEE: org.apache.log4j.Priority#<init>(int,java.lang.String,int)
CALLER: org.jboss.netty.logging.JdkLoggerFactory#<init>()
	CALLEE: org.jboss.netty.logging.InternalLoggerFactory#<init>()
CALLER: static org.traccar.helper.Log#warning(java.lang.String)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Category#warn(java.lang.Object)
CALLER: static com.zaxxer.hikari.HikariConfig#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.HikariConfig#<init>()
	CALLEE: com.zaxxer.hikari.HikariConfig#loadProperties(java.lang.String)
CALLER: static com.zaxxer.hikari.HikariDataSource#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.HikariDataSource#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: com.zaxxer.hikari.HikariConfig#<init>()
	CALLEE: com.zaxxer.hikari.HikariConfig#validate()
	CALLEE: com.zaxxer.hikari.HikariConfig#copyState(com.zaxxer.hikari.HikariConfig)
	CALLEE: com.zaxxer.hikari.HikariConfig#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object)
CALLER: liquibase.resource.FileSystemResourceAccessor#<init>()
	CALLEE: liquibase.resource.AbstractResourceAccessor#<init>()
CALLER: static liquibase.database.DatabaseFactory#getInstance()
	CALLEE: liquibase.database.DatabaseFactory#<init>()
CALLER: liquibase.Liquibase#<init>(java.lang.String,liquibase.resource.ResourceAccessor,liquibase.database.Database)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.changelog.ChangeLogParameters#<init>(liquibase.database.Database)
CALLER: liquibase.Liquibase#clearCheckSums()
	CALLEE: liquibase.Contexts#<init>()
	CALLEE: static liquibase.lockservice.LockServiceFactory#getInstance()
	CALLEE: liquibase.LabelExpression#<init>()
	CALLEE: liquibase.Liquibase#checkLiquibaseTables(boolean,liquibase.changelog.DatabaseChangeLog,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: liquibase.Liquibase#getDatabase()
	CALLEE: liquibase.statement.core.UpdateStatement#<init>(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: liquibase.statement.core.UpdateStatement#addNewColumnValue(java.lang.String,java.lang.Object)
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: liquibase.Liquibase#resetServices()
	CALLEE: liquibase.lockservice.LockServiceFactory#getLockService(liquibase.database.Database)
	CALLEE: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: liquibase.logging.core.DefaultLogger#info(java.lang.String)
	CALLEE: liquibase.database.AbstractJdbcDatabase#commit()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseChangeLogTableName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getLiquibaseSchemaName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getLiquibaseCatalogName()
CALLER: liquibase.Liquibase#update(liquibase.Contexts)
	CALLEE: liquibase.LabelExpression#<init>()
	CALLEE: liquibase.Liquibase#update(liquibase.Contexts,liquibase.LabelExpression)
CALLER: org.traccar.database.DataManager#getAllGroups()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DataManager#getAllDevices()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: org.traccar.Config#getString(java.lang.String)
CALLER: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#<init>(javax.sql.DataSource,java.lang.String,boolean)
CALLER: static org.traccar.helper.Log#warning(java.lang.String,java.lang.Throwable)
	CALLEE: static org.traccar.helper.Log#getLogger()
	CALLEE: static org.traccar.helper.Log#exceptionStack(java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.NOPLogger#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Category#warn(java.lang.Object)
CALLER: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: static org.eclipse.jetty.util.log.Log#<clinit>()
	CALLEE: org.eclipse.jetty.util.log.Log.1#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
CALLER: static org.eclipse.jetty.server.session.SessionHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#<init>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#<init>()
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager.CookieConfig#<init>(org.eclipse.jetty.server.session.AbstractSessionManager)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionTrackingModes(java.util.Set)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager.Scavenger#<init>(org.eclipse.jetty.server.session.HashSessionManager)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.2#cancel()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.ScheduledFutureTask#cancel()
CALLER: static org.eclipse.jetty.server.Server#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.Server#<init>(int)
	CALLEE: org.eclipse.jetty.server.Server#<init>(org.eclipse.jetty.util.thread.ThreadPool)
	CALLEE: org.eclipse.jetty.server.ServerConnector#<init>(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#setPort(int)
	CALLEE: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
CALLER: org.eclipse.jetty.server.Server#<init>(java.net.InetSocketAddress)
	CALLEE: org.eclipse.jetty.server.Server#<init>(org.eclipse.jetty.util.thread.ThreadPool)
	CALLEE: org.eclipse.jetty.server.ServerConnector#<init>(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#setPort(int)
	CALLEE: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#setHost(java.lang.String)
CALLER: static org.eclipse.jetty.server.handler.ContextHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(int)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newSessionHandler()
CALLER: static org.eclipse.jetty.servlet.ServletHolder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.servlet.Holder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.servlet.BaseHolder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.traccar.api.AsyncSocketServlet#<init>()
	CALLEE: org.eclipse.jetty.websocket.servlet.WebSocketServlet#<init>()
CALLER: org.eclipse.jetty.servlet.ServletHolder#<init>(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#setServlet(javax.servlet.Servlet)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#addServlet(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
CALLER: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: javax.ws.rs.core.Application#<init>()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#invalidateCache()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#register(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Class)
CALLER: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.lang.Class[])
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Object[])
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.util.Set)
CALLER: static org.glassfish.jersey.servlet.ServletContainer#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#<init>(java.util.logging.Logger,java.util.logging.Level)
CALLER: org.glassfish.jersey.servlet.ServletContainer#<init>(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: javax.servlet.http.HttpServlet#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#addHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: static org.eclipse.jetty.util.ArrayUtil#addToArray(java.lang.Object[],java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
CALLER: org.traccar.web.ConsoleServlet#<init>()
	CALLEE: org.h2.server.web.WebServlet#<init>()
CALLER: static org.eclipse.jetty.webapp.WebAppContext#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.webapp.WebAppContext#<init>()
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler,int)
CALLER: static org.eclipse.jetty.server.handler.ResourceHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.http.MimeTypes#<init>()
CALLER: org.eclipse.jetty.server.handler.ResourceHandler#setResourceBase(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ResourceHandler#setBaseResource(org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
CALLER: org.eclipse.jetty.server.handler.ErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
CALLER: org.traccar.database.DataManager#getServer()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuerySingle(java.lang.Class)
CALLER: org.traccar.database.DataManager#getUsers()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.GroupTree#<init>(java.util.Collection,java.util.Collection)
	CALLEE: org.traccar.database.GroupTree.TreeNode#<init>(org.traccar.model.Group)
	CALLEE: org.traccar.database.GroupTree.TreeNode#<init>(org.traccar.model.Device)
	CALLEE: org.traccar.database.GroupTree.TreeNode#setParent(org.traccar.database.GroupTree.TreeNode)
	CALLEE: org.traccar.database.GroupTree.TreeNode#getDevice()
	CALLEE: org.traccar.database.GroupTree.TreeNode#getGroup()
CALLER: org.traccar.database.DataManager#getGroupPermissions()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.GroupTree#getGroups(long)
	CALLEE: org.traccar.database.GroupTree#getNodes(java.util.Set,org.traccar.database.GroupTree.TreeNode)
	CALLEE: org.traccar.database.GroupTree.TreeNode#getGroup()
CALLER: org.traccar.database.GroupTree#getDevices(long)
	CALLEE: org.traccar.database.GroupTree#getNodes(java.util.Set,org.traccar.database.GroupTree.TreeNode)
	CALLEE: org.traccar.database.GroupTree.TreeNode#getDevice()
CALLER: org.traccar.database.DataManager#getDevicePermissions()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DataManager#getGeofences()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.GeofenceManager#refreshUserGeofences()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DataManager#getGeofencePermissions()
	CALLEE: org.traccar.database.GeofenceManager#getUserGeofences(long)
CALLER: org.traccar.database.GeofenceManager#refresh()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.traccar.database.DeviceManager#getLastPosition(long)
	CALLEE: static org.traccar.Context#getDeviceManager()
	CALLEE: org.traccar.database.DataManager#getGroupGeofences()
	CALLEE: org.traccar.database.GeofenceManager#getGroupGeofences(long)
	CALLEE: org.traccar.database.DataManager#getDeviceGeofences()
	CALLEE: org.traccar.database.DeviceManager#getAllDevices()
	CALLEE: org.traccar.database.GeofenceManager#getDeviceGeofences(java.util.Map,long)
	CALLEE: org.traccar.database.DeviceManager#getGroupById(long)
	CALLEE: static org.traccar.Context#getIdentityManager()
	CALLEE: org.traccar.database.GeofenceManager#getGeofence(long)
CALLER: org.traccar.database.DataManager#getNotifications()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#getILoggerFactory()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLoggerFactory#getLogger(java.lang.String)
CALLER: static org.slf4j.helpers.Util#getCallingClass()
	CALLEE: static org.slf4j.helpers.Util#getSecurityManager()
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#getClassContext()
CALLER: static org.slf4j.helpers.Util#safeGetBooleanSystemProperty(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#safeGetSystemProperty(java.lang.String)
CALLER: org.apache.log4j.FileAppender#<init>()
	CALLEE: org.apache.log4j.WriterAppender#<init>()
CALLER: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.WriterAppender#writeFooter()
	CALLEE: org.apache.log4j.FileAppender#reset()
CALLER: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAllowPoolingConnections()
	CALLEE: static com.ning.http.util.MiscUtils#getBoolean(java.lang.String,boolean)
CALLER: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAllowPoolingSslConnections()
	CALLEE: static com.ning.http.util.MiscUtils#getBoolean(java.lang.String,boolean)
CALLER: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultAcceptAnyCertificate()
	CALLEE: static com.ning.http.util.MiscUtils#getBoolean(java.lang.String,boolean)
CALLER: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultUseRelativeURIsWithConnectProxies()
	CALLEE: static com.ning.http.util.MiscUtils#getBoolean(java.lang.String,boolean)
CALLER: static com.ning.http.client.AsyncHttpClientConfigDefaults#defaultCompressionEnforced()
	CALLEE: static com.ning.http.util.MiscUtils#getBoolean(java.lang.String,boolean)
CALLER: static com.ning.http.util.ProxyUtils#getJdkDefaultProxyServerSelector()
	CALLEE: static com.ning.http.util.ProxyUtils#createProxyServerSelector(java.net.ProxySelector)
CALLER: static com.ning.http.util.ProxyUtils#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static com.ning.http.util.ProxyUtils#createProxyServerSelector(java.util.Properties)
	CALLEE: static com.ning.http.client.ProxyServer.Protocol#valueOf(java.lang.String)
	CALLEE: com.ning.http.client.ProxyServer#<init>(com.ning.http.client.ProxyServer.Protocol,java.lang.String,int,java.lang.String,java.lang.String)
	CALLEE: com.ning.http.client.ProxyServer#addNonProxyHost(java.lang.String)
	CALLEE: static com.ning.http.util.ProxyUtils#createProxyServerSelector(com.ning.http.client.ProxyServer)
CALLER: static com.ning.http.client.ProxyServerSelector#<clinit>()
	CALLEE: com.ning.http.client.ProxyServerSelector.1#<init>()
CALLER: com.ning.http.client.AsyncHttpClientConfig#<init>(int,int,int,int,int,int,boolean,boolean,int,int,javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier,boolean,boolean,int,boolean,java.util.concurrent.ExecutorService,com.ning.http.client.ProxyServerSelector,boolean,boolean,java.lang.String,com.ning.http.client.Realm,java.util.List,java.util.List,java.util.List,int,boolean,int,java.lang.String[],java.lang.String[],java.lang.Integer,java.lang.Integer,com.ning.http.client.AsyncHttpProviderConfig,com.ning.http.client.AsyncHttpClientConfig.1)
	CALLEE: com.ning.http.client.AsyncHttpClientConfig#<init>(int,int,int,int,int,int,boolean,boolean,int,int,javax.net.ssl.SSLContext,javax.net.ssl.HostnameVerifier,boolean,boolean,int,boolean,java.util.concurrent.ExecutorService,com.ning.http.client.ProxyServerSelector,boolean,boolean,java.lang.String,com.ning.http.client.Realm,java.util.List,java.util.List,java.util.List,int,boolean,int,java.lang.String[],java.lang.String[],java.lang.Integer,java.lang.Integer,com.ning.http.client.AsyncHttpProviderConfig)
CALLER: static com.ning.http.client.AsyncHttpClient#loadDefaultProvider(java.lang.String,com.ning.http.client.AsyncHttpClientConfig)
	CALLEE: org.slf4j.impl.SimpleLogger#isErrorEnabled()
	CALLEE: com.ning.http.client.providers.jdk.JDKAsyncHttpProvider#<init>(com.ning.http.client.AsyncHttpClientConfig)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#isErrorEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.apache.log4j.helpers.PatternParser#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#<init>()
CALLER: org.apache.log4j.WriterAppender#<init>()
	CALLEE: org.apache.log4j.AppenderSkeleton#<init>()
CALLER: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#reset()
	CALLEE: org.apache.log4j.WriterAppender#setImmediateFlush(boolean)
	CALLEE: org.apache.log4j.WriterAppender#createWriter(java.io.OutputStream)
	CALLEE: org.apache.log4j.FileAppender#setQWForFiles(java.io.Writer)
	CALLEE: org.apache.log4j.WriterAppender#writeHeader()
CALLER: org.apache.log4j.FileAppender#activateOptions()
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: org.apache.log4j.DailyRollingFileAppender#computeCheckPeriod()
	CALLEE: org.apache.log4j.RollingCalendar#setType(int)
	CALLEE: org.apache.log4j.RollingCalendar#<init>(java.util.TimeZone,java.util.Locale)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
CALLER: org.apache.log4j.DailyRollingFileAppender#printPeriodicity(int)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
CALLER: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace()
CALLER: org.apache.log4j.Logger#<init>(java.lang.String)
	CALLEE: org.apache.log4j.Category#<init>(java.lang.String)
CALLER: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.or.RendererMap#<clinit>()
	CALLEE: org.apache.log4j.or.DefaultRenderer#<init>()
CALLER: static org.apache.log4j.helpers.Loader#getTCL()
	CALLEE: static org.apache.log4j.helpers.Loader#class$(java.lang.String)
CALLER: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#<init>()
	CALLEE: org.apache.log4j.DefaultCategoryFactory#<init>()
CALLER: org.apache.log4j.PropertyConfigurator#doConfigure(java.net.URL,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.PropertyConfigurator#doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
CALLER: com.zaxxer.hikari.HikariConfig#loadProperties(java.lang.String)
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#setTargetFromProperties(java.lang.Object,java.util.Properties)
CALLER: com.zaxxer.hikari.HikariConfig#validate()
	CALLEE: com.zaxxer.hikari.HikariConfig#generatePoolNumber()
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#getNullIfEmpty(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#validateNumerics()
	CALLEE: com.zaxxer.hikari.HikariConfig#logConfiguration()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object)
CALLER: com.zaxxer.hikari.pool.HikariPool#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#createThreadPoolExecutor(int,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)
	CALLEE: com.zaxxer.hikari.HikariConfig#getScheduledExecutorService()
	CALLEE: com.zaxxer.hikari.util.UtilityElf.DefaultThreadFactory#<init>(java.lang.String,boolean)
	CALLEE: com.zaxxer.hikari.HikariConfig#getLeakDetectionThreshold()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#<init>(long,java.util.concurrent.ScheduledExecutorService)
	CALLEE: com.zaxxer.hikari.pool.HikariPool.HouseKeeper#<init>(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.HikariPool.1)
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#<init>(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.HikariPool.1)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#<init>(com.zaxxer.hikari.util.ConcurrentBag.IBagStateListener)
	CALLEE: com.zaxxer.hikari.HikariConfig#isAllowPoolSuspension()
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#<init>()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#checkFailFast()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMetricsTrackerFactory()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory)
	CALLEE: com.zaxxer.hikari.HikariConfig#getMetricRegistry()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#setMetricRegistry(java.lang.Object)
	CALLEE: com.zaxxer.hikari.HikariConfig#getHealthCheckRegistry()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#setHealthCheckRegistry(java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#registerMBeans(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.HikariConfig#getThreadFactory()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMaximumPoolSize()
CALLER: liquibase.resource.AbstractResourceAccessor#<init>()
	CALLEE: liquibase.resource.AbstractResourceAccessor#init()
CALLER: liquibase.database.DatabaseFactory#<init>()
	CALLEE: liquibase.logging.LogFactory#<init>()
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.database.DatabaseFactory#register(liquibase.database.Database)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
CALLER: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.logging.LogFactory#getInstance()
CALLER: static liquibase.logging.LogFactory#<clinit>()
	CALLEE: liquibase.logging.core.DefaultLogger#<init>()
CALLER: liquibase.changelog.ChangeLogParameters#<init>(liquibase.database.Database)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: liquibase.Contexts#<init>()
	CALLEE: liquibase.LabelExpression#<init>()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#<init>(liquibase.changelog.ChangeLogParameters,java.lang.String,java.lang.Object)
	CALLEE: liquibase.changelog.ChangeLogParameters#set(java.lang.String,java.lang.Object)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: liquibase.changelog.ChangeLogParameters.ExpressionExpander#<init>(liquibase.changelog.ChangeLogParameters)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getShortName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseChangeLogTableName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getLiquibaseSchemaName()
	CALLEE: liquibase.database.core.UnsupportedDatabase#supportsTablespaces()
	CALLEE: liquibase.database.core.UnsupportedDatabase#supportsSequences()
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsSchemas()
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsRestrictForeignKeys()
	CALLEE: liquibase.database.core.UnsupportedDatabase#supportsInitiallyDeferrableColumns()
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsForeignKeyDisable()
	CALLEE: liquibase.database.AbstractJdbcDatabase#requiresUsername()
	CALLEE: liquibase.database.AbstractJdbcDatabase#requiresPassword()
	CALLEE: liquibase.database.AbstractJdbcDatabase#isSafeToRunUpdate()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getLineComment()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDefaultSchemaName()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getDefaultCatalogName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseProductVersion()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseProductName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseMinorVersion()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseMajorVersion()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDatabaseChangeLogLockTableName()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getCurrentDateTimeFunction()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementClause(java.math.BigInteger,java.math.BigInteger)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
CALLER: static liquibase.lockservice.LockServiceFactory#getInstance()
	CALLEE: liquibase.lockservice.LockServiceFactory#<init>()
CALLER: liquibase.Liquibase#checkLiquibaseTables(boolean,liquibase.changelog.DatabaseChangeLog,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: static liquibase.lockservice.LockServiceFactory#getInstance()
	CALLEE: liquibase.Liquibase#getDatabase()
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.lockservice.LockServiceFactory#getLockService(liquibase.database.Database)
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#upgradeChecksums(liquibase.changelog.DatabaseChangeLog,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#init()
CALLER: liquibase.statement.core.UpdateStatement#<init>(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: liquibase.statement.AbstractSqlStatement#<init>()
CALLER: static liquibase.executor.ExecutorService#<clinit>()
	CALLEE: liquibase.executor.ExecutorService#<init>()
CALLER: liquibase.Liquibase#resetServices()
	CALLEE: static liquibase.lockservice.LockServiceFactory#getInstance()
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.lockservice.LockServiceFactory#resetAll()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#resetAll()
	CALLEE: liquibase.executor.ExecutorService#reset()
CALLER: liquibase.Liquibase#update(liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: liquibase.Liquibase#update(liquibase.Contexts,liquibase.LabelExpression,boolean)
CALLER: org.traccar.database.QueryBuilder#<init>(javax.sql.DataSource,java.lang.String,boolean)
	CALLEE: com.zaxxer.hikari.HikariDataSource#getConnection()
	CALLEE: static org.traccar.database.QueryBuilder#parse(java.lang.String,java.util.Map)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#close()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyConnection#prepareStatement(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyConnection#prepareStatement(java.lang.String,int)
CALLER: static org.traccar.helper.Log#exceptionStack(java.lang.Throwable)
	CALLEE: org.apache.log4j.config.PropertySetterException#getMessage()
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: org.glassfish.hk2.api.MultiException#getMessage()
	CALLEE: org.glassfish.jersey.server.model.ModelValidationException#getMessage()
CALLER: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#initialized()
	CALLEE: org.eclipse.jetty.util.log.AbstractLogger#getLogger(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
CALLER: static javax.servlet.SessionTrackingMode#<clinit>()
	CALLEE: javax.servlet.SessionTrackingMode#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.server.Server#<init>(org.eclipse.jetty.util.thread.ThreadPool)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
CALLER: org.eclipse.jetty.server.ServerConnector#<init>(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.HttpConnectionFactory#<init>()
	CALLEE: org.eclipse.jetty.server.ServerConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,int,org.eclipse.jetty.server.ConnectionFactory[])
CALLER: org.eclipse.jetty.server.Server#setConnectors(org.eclipse.jetty.server.Connector[])
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getServer()
	CALLEE: org.eclipse.jetty.server.Server#getConnectors()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,int)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler,int)
CALLER: static org.eclipse.jetty.server.handler.ContextHandlerCollection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#newSessionHandler()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#<init>()
CALLER: org.eclipse.jetty.websocket.servlet.WebSocketServlet#<init>()
	CALLEE: javax.servlet.http.HttpServlet#<init>()
CALLER: static org.eclipse.jetty.servlet.BaseHolder.Source#<clinit>()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder.Source#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.servlet.ServletHolder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
	CALLEE: org.eclipse.jetty.servlet.Holder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
CALLER: org.eclipse.jetty.servlet.ServletHolder#setServlet(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.Holder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.servlet.Holder#setName(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newServletHandler()
CALLER: static org.glassfish.jersey.model.internal.CommonConfig#<clinit>()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig.State#<init>()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#<init>(javax.ws.rs.RuntimeType,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoaderPA()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
CALLER: org.glassfish.jersey.server.ResourceConfig#invalidateCache()
	CALLEE: static org.glassfish.jersey.server.ResourceConfig.State#access$100(org.glassfish.jersey.server.ResourceConfig.State)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#reset()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#reset()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#reset()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#register(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#checkComponentClassNotNull(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getModelEnhancer(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#processFeatureRegistration(java.lang.Object,java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#register(java.lang.Class,org.glassfish.jersey.process.Inflector)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
CALLER: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
CALLER: javax.servlet.http.HttpServlet#<init>()
	CALLEE: javax.servlet.GenericServlet#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
CALLER: org.h2.server.web.WebServlet#<init>()
	CALLEE: javax.servlet.http.HttpServlet#<init>()
CALLER: org.eclipse.jetty.servlet.ErrorPageErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ErrorHandler#<init>()
CALLER: org.eclipse.jetty.webapp.WebAppContext#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler,int)
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler,int)
	CALLEE: org.eclipse.jetty.webapp.MetaData#<init>()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext.Context#<init>(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setProtectedTargets(java.lang.String[])
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#<init>()
CALLER: static org.eclipse.jetty.http.MimeTypes#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>(int)
	CALLEE: static org.eclipse.jetty.http.MimeTypes.Type#values()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.StringUtil#asciiToLowerCase(java.lang.String)
	CALLEE: static org.eclipse.jetty.http.MimeTypes#normalizeMimeType(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String,boolean)
CALLER: static org.eclipse.jetty.util.resource.Resource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#<init>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#<init>()
CALLER: org.traccar.database.QueryBuilder#executeQuerySingle(java.lang.Class)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
CALLER: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#close()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#close()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#executeQuery()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#close()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#next()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getMetaData()
	CALLEE: org.traccar.database.QueryBuilder#addProcessors(java.util.List,java.lang.Class,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.1#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.2#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.3#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.4#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.5#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.6#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: org.traccar.database.QueryBuilder.7#process(java.lang.Object,java.sql.ResultSet)
CALLER: org.traccar.database.GroupTree#getNodes(java.util.Set,org.traccar.database.GroupTree.TreeNode)
	CALLEE: org.traccar.database.GroupTree#getNodes(java.util.Set,org.traccar.database.GroupTree.TreeNode)
	CALLEE: org.traccar.database.GroupTree.TreeNode#getChildren()
CALLER: org.traccar.database.DataManager#getGeofencePermissions()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DataManager#getGroupGeofences()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DataManager#getDeviceGeofences()
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#executeQuery(java.lang.Class)
CALLER: org.traccar.database.DeviceManager#getAllDevices()
	CALLEE: org.traccar.database.DeviceManager#updateDeviceCache(boolean)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
CALLER: static org.slf4j.LoggerFactory#getILoggerFactory()
	CALLEE: static org.slf4j.LoggerFactory#performInitialization()
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: org.slf4j.impl.StaticLoggerBinder#getLoggerFactory()
CALLER: static org.slf4j.helpers.Util#getSecurityManager()
	CALLEE: static org.slf4j.helpers.Util#safeCreateSecurityManager()
CALLER: org.apache.log4j.WriterAppender#writeFooter()
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.helpers.QuietWriter#flush()
	CALLEE: org.apache.log4j.Layout#getFooter()
CALLER: org.apache.log4j.FileAppender#reset()
	CALLEE: org.apache.log4j.FileAppender#closeFile()
	CALLEE: org.apache.log4j.WriterAppender#reset()
CALLER: static com.ning.http.util.ProxyUtils#createProxyServerSelector(java.net.ProxySelector)
	CALLEE: com.ning.http.util.ProxyUtils.1#<init>(java.net.ProxySelector)
CALLER: static com.ning.http.client.ProxyServer.Protocol#<clinit>()
	CALLEE: com.ning.http.client.ProxyServer.Protocol#<init>(java.lang.String,int,java.lang.String)
CALLER: static com.ning.http.util.ProxyUtils#createProxyServerSelector(com.ning.http.client.ProxyServer)
	CALLEE: com.ning.http.util.ProxyUtils.2#<init>(com.ning.http.client.ProxyServer)
CALLER: static com.ning.http.client.providers.jdk.JDKAsyncHttpProvider#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.ning.http.client.providers.jdk.JDKAsyncHttpProvider#<init>(com.ning.http.client.AsyncHttpClientConfig)
	CALLEE: com.ning.http.client.providers.jdk.JDKAsyncHttpProvider#configure(com.ning.http.client.providers.jdk.JDKAsyncHttpProviderConfig)
	CALLEE: com.ning.http.client.AsyncHttpClientConfig#getAsyncHttpProviderConfig()
CALLER: org.apache.log4j.WriterAppender#createWriter(java.io.OutputStream)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.WriterAppender#getEncoding()
CALLER: org.apache.log4j.FileAppender#setQWForFiles(java.io.Writer)
	CALLEE: org.apache.log4j.helpers.QuietWriter#<init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)
CALLER: org.apache.log4j.WriterAppender#writeHeader()
	CALLEE: org.apache.log4j.Layout#getHeader()
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
CALLER: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckDate(java.util.Date)
CALLER: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#getTCL()
CALLER: org.apache.log4j.PropertyConfigurator#doConfigure(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#setInternalDebugging(boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.apache.log4j.PropertyConfigurator#configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.PropertyConfigurator#configureLoggerFactory(java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.Hierarchy#getThreshold()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getThreshold()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#resetConfiguration()
CALLER: static com.zaxxer.hikari.util.PropertyElf#setTargetFromProperties(java.lang.Object,java.util.Properties)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: com.zaxxer.hikari.HikariConfig#addDataSourceProperty(java.lang.String,java.lang.Object)
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
CALLER: static com.zaxxer.hikari.util.PropertyElf#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.HikariConfig#validateNumerics()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
CALLER: com.zaxxer.hikari.HikariConfig#logConfiguration()
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#getPropertyNames(java.lang.Class)
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#getProperty(java.lang.String,java.lang.Object)
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#copyProperties(java.util.Properties)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object)
CALLER: static com.zaxxer.hikari.util.ClockSource#<clinit>()
	CALLEE: static com.zaxxer.hikari.util.ClockSource.Factory#access$000()
CALLER: com.zaxxer.hikari.pool.PoolBase#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: com.zaxxer.hikari.HikariConfig#getPoolName()
	CALLEE: com.zaxxer.hikari.HikariConfig#getCatalog()
	CALLEE: com.zaxxer.hikari.HikariConfig#isReadOnly()
	CALLEE: com.zaxxer.hikari.HikariConfig#isAutoCommit()
	CALLEE: com.zaxxer.hikari.HikariConfig#getTransactionIsolation()
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#getTransactionIsolation(java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTestQuery()
	CALLEE: com.zaxxer.hikari.HikariConfig#isIsolateInternalQueries()
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTimeout()
	CALLEE: com.zaxxer.hikari.HikariConfig#getValidationTimeout()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#initializeDataSource()
CALLER: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#<init>(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.HikariPool.1)
	CALLEE: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#<init>(com.zaxxer.hikari.pool.HikariPool)
CALLER: static com.zaxxer.hikari.util.ConcurrentBag#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.util.ConcurrentBag#<init>(com.zaxxer.hikari.util.ConcurrentBag.IBagStateListener)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#useWeakThreadLocals()
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#<init>()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag.1#<init>(com.zaxxer.hikari.util.ConcurrentBag)
CALLER: static com.zaxxer.hikari.util.SuspendResumeLock#<clinit>()
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock.1#<init>(boolean)
CALLER: com.zaxxer.hikari.util.SuspendResumeLock#<init>()
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#<init>(boolean)
CALLER: com.zaxxer.hikari.pool.HikariPool#checkFailFast()
	CALLEE: com.zaxxer.hikari.HikariConfig#isInitializationFailFast()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#newConnection()
	CALLEE: com.zaxxer.hikari.pool.HikariPool.PoolInitializationException#<init>(java.lang.Throwable)
CALLER: com.zaxxer.hikari.pool.HikariPool#setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory)
	CALLEE: com.zaxxer.hikari.HikariConfig#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getPoolStats()
	CALLEE: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#<init>(com.zaxxer.hikari.metrics.MetricsTracker)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.NopMetricsTrackerDelegate#<init>()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodahaleMetricsTrackerFactory#create(java.lang.String,com.zaxxer.hikari.metrics.PoolStats)
CALLER: com.zaxxer.hikari.pool.HikariPool#setMetricRegistry(java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#setMetricsTrackerFactory(com.zaxxer.hikari.metrics.MetricsTrackerFactory)
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodahaleMetricsTrackerFactory#<init>(com.codahale.metrics.MetricRegistry)
CALLER: com.zaxxer.hikari.pool.HikariPool#setHealthCheckRegistry(java.lang.Object)
	CALLEE: static com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker#registerHealthChecks(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.HikariConfig,com.codahale.metrics.health.HealthCheckRegistry)
CALLER: com.zaxxer.hikari.pool.PoolBase#registerMBeans(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.HikariConfig#isRegisterMbeans()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static com.zaxxer.hikari.util.UtilityElf#createThreadPoolExecutor(int,java.lang.String,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)
	CALLEE: com.zaxxer.hikari.util.UtilityElf.DefaultThreadFactory#<init>(java.lang.String,boolean)
CALLER: static com.zaxxer.hikari.pool.ProxyLeakTask#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask.1#<init>()
CALLER: com.zaxxer.hikari.pool.HikariPool.HouseKeeper#<init>(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.HikariPool.1)
	CALLEE: com.zaxxer.hikari.pool.HikariPool.HouseKeeper#<init>(com.zaxxer.hikari.pool.HikariPool)
CALLER: liquibase.resource.AbstractResourceAccessor#init()
	CALLEE: liquibase.resource.FileSystemResourceAccessor#toClassLoader()
	CALLEE: liquibase.resource.AbstractResourceAccessor#addRootPath(java.net.URL)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#toClassLoader()
CALLER: liquibase.logging.LogFactory#getLog()
	CALLEE: liquibase.logging.LogFactory#getLog(java.lang.String)
CALLER: static liquibase.servicelocator.ServiceLocator#<clinit>()
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.logging.LogFactory#getInstance()
	CALLEE: static liquibase.osgi.OSGiUtil#isLiquibaseLoadedAsOSGiBundle()
	CALLEE: liquibase.osgi.OSGiPackageScanClassResolver#<init>(org.osgi.framework.Bundle)
	CALLEE: liquibase.osgi.OSGiResourceAccessor#<init>(org.osgi.framework.Bundle)
	CALLEE: liquibase.servicelocator.ServiceLocator#<init>(liquibase.servicelocator.PackageScanClassResolver,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.servicelocator.ServiceLocator#<init>()
	CALLEE: liquibase.logging.core.DefaultLogger#severe(java.lang.String,java.lang.Throwable)
CALLER: liquibase.database.DatabaseFactory#register(liquibase.database.Database)
	CALLEE: liquibase.database.DatabaseFactory.DatabaseComparator#<init>(liquibase.database.DatabaseFactory.1)
CALLER: static liquibase.logging.LogFactory#getInstance()
	CALLEE: liquibase.logging.LogFactory#<init>()
CALLER: liquibase.logging.core.DefaultLogger#<init>()
	CALLEE: liquibase.logging.core.AbstractLogger#<init>()
CALLER: liquibase.changelog.ChangeLogParameters#set(java.lang.String,java.lang.Object)
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#<init>(liquibase.changelog.ChangeLogParameters,java.lang.String,java.lang.Object)
	CALLEE: liquibase.changelog.ChangeLogParameters#findParameter(java.lang.String,liquibase.changelog.DatabaseChangeLog)
CALLER: liquibase.changelog.ChangeLogParameters.ExpressionExpander#<init>(liquibase.changelog.ChangeLogParameters)
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
CALLER: liquibase.lockservice.LockServiceFactory#<init>()
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.lockservice.LockServiceFactory#register(liquibase.lockservice.LockService)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
CALLER: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#<init>()
CALLER: liquibase.lockservice.LockServiceFactory#getLockService(liquibase.database.Database)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.lockservice.LockServiceFactory.1#<init>(liquibase.lockservice.LockServiceFactory)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
	CALLEE: liquibase.database.core.UnsupportedDatabase#getShortName()
CALLER: liquibase.Liquibase#update(liquibase.Contexts,liquibase.LabelExpression,boolean)
	CALLEE: static liquibase.lockservice.LockServiceFactory#getInstance()
	CALLEE: liquibase.Liquibase#checkLiquibaseTables(boolean,liquibase.changelog.DatabaseChangeLog,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: liquibase.Liquibase#resetServices()
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.lockservice.LockServiceFactory#getLockService(liquibase.database.Database)
	CALLEE: liquibase.changelog.ChangeLogParameters#setContexts(liquibase.Contexts)
	CALLEE: liquibase.changelog.ChangeLogParameters#setLabels(liquibase.LabelExpression)
	CALLEE: liquibase.Liquibase#getDatabaseChangeLog()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.Liquibase#getStandardChangelogIterator(liquibase.Contexts,liquibase.LabelExpression,liquibase.changelog.DatabaseChangeLog)
	CALLEE: liquibase.Liquibase#createUpdateVisitor()
	CALLEE: liquibase.RuntimeEnvironment#<init>(liquibase.database.Database,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: liquibase.changelog.ChangeLogIterator#run(liquibase.changelog.visitor.ChangeSetVisitor,liquibase.RuntimeEnvironment)
	CALLEE: liquibase.logging.core.DefaultLogger#severe(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.database.AbstractJdbcDatabase#setObjectQuotingStrategy(liquibase.database.ObjectQuotingStrategy)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#generateDeploymentId()
CALLER: com.zaxxer.hikari.HikariDataSource#getConnection()
	CALLEE: com.zaxxer.hikari.HikariConfig#validate()
	CALLEE: com.zaxxer.hikari.HikariConfig#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#<init>(com.zaxxer.hikari.HikariConfig)
	CALLEE: com.zaxxer.hikari.HikariDataSource#isClosed()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getConnection()
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object)
CALLER: static org.eclipse.jetty.util.log.Log#initialized()
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#initStandardLogging(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.Uptime#getUptime()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.util.thread.QueuedThreadPool#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
CALLER: org.eclipse.jetty.server.HttpConnectionFactory#<init>()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#<init>()
	CALLEE: org.eclipse.jetty.server.HttpConnectionFactory#<init>(org.eclipse.jetty.server.HttpConfiguration)
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#setInputBufferSize(int)
CALLER: org.eclipse.jetty.server.ServerConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,int,org.eclipse.jetty.server.ConnectionFactory[])
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,org.eclipse.jetty.server.ConnectionFactory[])
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getExecutor()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getScheduler()
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#<init>(org.eclipse.jetty.server.ServerConnector,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int,org.eclipse.jetty.server.ServerConnector.1)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#<init>(org.eclipse.jetty.server.HandlerContainer,java.lang.String,org.eclipse.jetty.server.session.SessionHandler,org.eclipse.jetty.security.SecurityHandler,org.eclipse.jetty.servlet.ServletHandler,org.eclipse.jetty.server.handler.ErrorHandler,int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setContextPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#<init>(org.eclipse.jetty.server.handler.ContextHandler.Context)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
CALLER: org.eclipse.jetty.server.session.SessionHandler#<init>()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#<init>(org.eclipse.jetty.server.SessionManager)
CALLER: org.eclipse.jetty.servlet.Holder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
CALLER: org.eclipse.jetty.servlet.Holder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#hashCode()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#newServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#<init>()
CALLER: static javax.ws.rs.RuntimeType#<clinit>()
	CALLEE: javax.ws.rs.RuntimeType#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.model.internal.ComponentBag#<clinit>()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.1#<init>()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.2#<init>()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.3#<init>()
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#alwaysTrue()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.4#<init>()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#<init>(javax.ws.rs.RuntimeType,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#newInstance(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoaderPA()
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.8#<init>()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.1#<init>()
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.13#<init>()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNamePA(java.lang.String,java.lang.ClassLoader)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#checkComponentClassNotNull(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_CLASS_CANNOT_BE_NULL()
CALLER: org.glassfish.jersey.server.ResourceConfig.State#getModelEnhancer(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State.1#<init>(org.glassfish.jersey.server.ResourceConfig.State,java.lang.Class)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#processFeatureRegistration(java.lang.Object,java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(javax.ws.rs.core.Feature,org.glassfish.jersey.model.internal.CommonConfig.1)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(java.lang.Class,org.glassfish.jersey.model.internal.CommonConfig.1)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#capacity(int)
CALLER: static org.eclipse.jetty.webapp.MetaData#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.webapp.WebAppContext.Context#<init>(org.eclipse.jetty.webapp.WebAppContext)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setErrorHandler(org.eclipse.jetty.server.handler.ErrorHandler)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.util.ArrayTrie#<init>(int)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#<init>(boolean)
CALLER: static org.eclipse.jetty.http.MimeTypes.Type#<clinit>()
	CALLEE: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String,java.nio.charset.Charset)
	CALLEE: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String,org.eclipse.jetty.http.MimeTypes.Type)
CALLER: static org.eclipse.jetty.util.StringUtil#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>(int)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
CALLER: static org.eclipse.jetty.http.MimeTypes#normalizeMimeType(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#asciiToLowerCase(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#get(java.lang.String)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#<init>(java.io.File)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
CALLER: org.traccar.database.QueryBuilder#addProcessors(java.util.List,java.lang.Class,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.1#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.2#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.3#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.4#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.5#<init>(org.traccar.database.QueryBuilder,java.lang.reflect.Method,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder.6#<init>(org.traccar.database.QueryBuilder,java.lang.String,java.lang.reflect.Method)
	CALLEE: org.traccar.database.QueryBuilder.7#<init>(org.traccar.database.QueryBuilder,java.lang.String,java.lang.reflect.Method)
CALLER: static org.slf4j.LoggerFactory#performInitialization()
	CALLEE: static org.slf4j.LoggerFactory#bind()
	CALLEE: static org.slf4j.LoggerFactory#versionSanityCheck()
CALLER: static org.slf4j.impl.StaticLoggerBinder#<clinit>()
	CALLEE: org.slf4j.impl.StaticLoggerBinder#<init>()
CALLER: static org.slf4j.helpers.Util#safeCreateSecurityManager()
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>(org.slf4j.helpers.Util.1)
CALLER: org.apache.log4j.FileAppender#closeFile()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.apache.log4j.WriterAppender#reset()
	CALLEE: org.apache.log4j.WriterAppender#closeWriter()
CALLER: static com.ning.http.client.Realm.AuthScheme#<clinit>()
	CALLEE: com.ning.http.client.Realm.AuthScheme#<init>(java.lang.String,int)
CALLER: org.traccar.Main.1#run()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: static org.traccar.Context#getDataManager()
	CALLEE: org.traccar.database.DataManager#clearPositionsHistory()
CALLER: org.apache.log4j.helpers.QuietWriter#<init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)
	CALLEE: org.apache.log4j.helpers.QuietWriter#setErrorHandler(org.apache.log4j.spi.ErrorHandler)
CALLER: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
CALLER: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.Level#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#class$(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#configureRootCategory(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
CALLER: org.apache.log4j.PropertyConfigurator#configureLoggerFactory(java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#parseCatsAndRenderers(java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)
	CALLEE: static org.apache.log4j.or.RendererMap#addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.Hierarchy#setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)
CALLER: static com.zaxxer.hikari.util.PropertyElf#setProperty(java.lang.Object,java.lang.String,java.lang.Object,java.util.List)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
CALLER: static com.zaxxer.hikari.util.PropertyElf#copyProperties(java.util.Properties)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
CALLER: static com.zaxxer.hikari.util.ClockSource.Factory#access$000()
	CALLEE: static com.zaxxer.hikari.util.ClockSource.Factory#create()
CALLER: com.zaxxer.hikari.pool.PoolBase#initializeDataSource()
	CALLEE: static com.zaxxer.hikari.util.PropertyElf#setTargetFromProperties(java.lang.Object,java.util.Properties)
	CALLEE: com.zaxxer.hikari.HikariConfig#getJdbcUrl()
	CALLEE: com.zaxxer.hikari.HikariConfig#getUsername()
	CALLEE: com.zaxxer.hikari.HikariConfig#getPassword()
	CALLEE: com.zaxxer.hikari.HikariConfig#getDataSourceClassName()
	CALLEE: com.zaxxer.hikari.HikariConfig#getDriverClassName()
	CALLEE: com.zaxxer.hikari.HikariConfig#getDataSourceProperties()
	CALLEE: com.zaxxer.hikari.HikariConfig#getDataSource()
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#createInstance(java.lang.String,java.lang.Class,java.lang.Object[])
	CALLEE: com.zaxxer.hikari.util.DriverDataSource#<init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setLoginTimeout(javax.sql.DataSource)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#createNetworkTimeoutExecutor(javax.sql.DataSource,java.lang.String,java.lang.String)
CALLER: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#<init>()
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer.Synchronizer#<init>(com.zaxxer.hikari.util.QueuedSequenceSynchronizer,com.zaxxer.hikari.util.QueuedSequenceSynchronizer.1)
	CALLEE: static com.zaxxer.hikari.util.Sequence.Factory#create()
CALLER: com.zaxxer.hikari.util.SuspendResumeLock.1#<init>(boolean)
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#<init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock.1)
CALLER: com.zaxxer.hikari.pool.PoolBase#newConnection()
	CALLEE: com.zaxxer.hikari.HikariConfig#getUsername()
	CALLEE: com.zaxxer.hikari.HikariConfig#getPassword()
	CALLEE: com.zaxxer.hikari.util.DriverDataSource#getConnection()
	CALLEE: com.zaxxer.hikari.util.DriverDataSource#getConnection(java.lang.String,java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setupConnection(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#quietlyCloseConnection(java.sql.Connection,java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariPool.PoolInitializationException#<init>(java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
CALLER: com.zaxxer.hikari.pool.HikariPool#getPoolStats()
	CALLEE: com.zaxxer.hikari.pool.HikariPool.4#<init>(com.zaxxer.hikari.pool.HikariPool,long)
CALLER: com.zaxxer.hikari.pool.PoolBase.NopMetricsTrackerDelegate#<init>()
	CALLEE: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#<init>()
CALLER: static com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker#registerHealthChecks(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.HikariConfig,com.codahale.metrics.health.HealthCheckRegistry)
	CALLEE: com.zaxxer.hikari.HikariConfig#getPoolName()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMetricRegistry()
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTimeout()
	CALLEE: com.zaxxer.hikari.HikariConfig#getHealthCheckProperties()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodahaleHealthChecker.1#<init>(com.zaxxer.hikari.HikariConfig)
CALLER: com.zaxxer.hikari.pool.ProxyLeakTask.1#<init>()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#<init>(com.zaxxer.hikari.pool.ProxyLeakTask.1)
CALLER: com.zaxxer.hikari.pool.HikariPool.HouseKeeper#<init>(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$700()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$800(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#plusMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#plusMillis(long,long)
CALLER: liquibase.logging.LogFactory#getLog(java.lang.String)
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.servicelocator.ServiceLocator#newInstance(java.lang.Class)
CALLER: liquibase.osgi.OSGiPackageScanClassResolver#<init>(org.osgi.framework.Bundle)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#<init>()
CALLER: liquibase.osgi.OSGiResourceAccessor#<init>(org.osgi.framework.Bundle)
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#<init>(java.lang.ClassLoader)
CALLER: liquibase.servicelocator.ServiceLocator#<init>(liquibase.servicelocator.PackageScanClassResolver,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.logging.core.DefaultLogger#<init>()
	CALLEE: liquibase.servicelocator.ServiceLocator#setResourceAccessor(liquibase.resource.ResourceAccessor)
CALLER: liquibase.servicelocator.ServiceLocator#<init>()
	CALLEE: liquibase.logging.core.DefaultLogger#<init>()
	CALLEE: liquibase.servicelocator.ServiceLocator#setResourceAccessor(liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.servicelocator.ServiceLocator#defaultClassLoader()
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#<init>()
CALLER: liquibase.database.DatabaseFactory.DatabaseComparator#<init>(liquibase.database.DatabaseFactory.1)
	CALLEE: liquibase.database.DatabaseFactory.DatabaseComparator#<init>()
CALLER: liquibase.changelog.ChangeLogParameters#findParameter(java.lang.String,liquibase.changelog.DatabaseChangeLog)
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#isValid()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#getKey()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#getChangeLog()
CALLER: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#<init>()
	CALLEE: liquibase.configuration.SystemPropertyProvider#<init>()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#init(liquibase.configuration.ConfigurationValueProvider[])
CALLER: liquibase.changelog.ChangeLogHistoryServiceFactory#<init>()
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#register(liquibase.changelog.ChangeLogHistoryService)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
CALLER: liquibase.Liquibase#getDatabaseChangeLog()
	CALLEE: static liquibase.parser.ChangeLogParserFactory#getInstance()
	CALLEE: liquibase.parser.ChangeLogParserFactory#getParser(java.lang.String,liquibase.resource.ResourceAccessor)
CALLER: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory.1#<init>(liquibase.changelog.ChangeLogHistoryServiceFactory)
	CALLEE: liquibase.database.core.UnsupportedDatabase#getShortName()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#supports(liquibase.database.Database)
CALLER: liquibase.Liquibase#getStandardChangelogIterator(liquibase.Contexts,liquibase.LabelExpression,liquibase.changelog.DatabaseChangeLog)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#<init>(liquibase.database.Database,boolean)
	CALLEE: liquibase.changelog.filter.ContextChangeSetFilter#<init>(liquibase.Contexts)
	CALLEE: liquibase.changelog.filter.LabelChangeSetFilter#<init>(liquibase.LabelExpression)
	CALLEE: liquibase.changelog.filter.DbmsChangeSetFilter#<init>(liquibase.database.Database)
	CALLEE: liquibase.changelog.ChangeLogIterator#<init>(liquibase.changelog.DatabaseChangeLog,liquibase.changelog.filter.ChangeSetFilter[])
CALLER: liquibase.Liquibase#createUpdateVisitor()
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#<init>(liquibase.database.Database,liquibase.changelog.visitor.ChangeExecListener)
CALLER: static liquibase.database.ObjectQuotingStrategy#<clinit>()
	CALLEE: liquibase.database.ObjectQuotingStrategy#<init>(java.lang.String,int)
CALLER: com.zaxxer.hikari.pool.HikariPool#getConnection()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getConnection(long)
CALLER: static org.eclipse.jetty.util.log.Log#initStandardLogging(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: static org.eclipse.jetty.util.Uptime#getUptime()
	CALLEE: static org.eclipse.jetty.util.Uptime#getInstance()
	CALLEE: org.eclipse.jetty.util.Uptime.DefaultImpl#getUptime()
CALLER: static org.eclipse.jetty.util.Uptime#<clinit>()
	CALLEE: org.eclipse.jetty.util.Uptime#<init>()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int)
CALLER: static org.eclipse.jetty.util.component.ContainerLifeCycle.Managed#<clinit>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Managed#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#contains(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#<init>(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle.1)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addEventListener(org.eclipse.jetty.util.component.Container.Listener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
	CALLEE: org.eclipse.jetty.server.Server#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$102(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#start(org.eclipse.jetty.util.component.LifeCycle)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
CALLER: org.eclipse.jetty.server.HttpConfiguration#<init>()
	CALLEE: org.eclipse.jetty.http.HttpScheme#asString()
CALLER: org.eclipse.jetty.server.HttpConnectionFactory#<init>(org.eclipse.jetty.server.HttpConfiguration)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpVersion#toString()
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,org.eclipse.jetty.server.ConnectionFactory[])
	CALLEE: org.eclipse.jetty.server.AbstractConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,org.eclipse.jetty.server.ConnectionFactory[])
CALLER: static org.eclipse.jetty.io.SelectorManager#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#<init>(org.eclipse.jetty.server.ServerConnector,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int,org.eclipse.jetty.server.ServerConnector.1)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#<init>(org.eclipse.jetty.server.ServerConnector,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#remove(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#<init>(org.eclipse.jetty.server.handler.ContextHandler.Context)
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.ApproveNonExistentDirectoryAliases#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addAliasCheck(org.eclipse.jetty.server.handler.ContextHandler.AliasCheck)
CALLER: static org.eclipse.jetty.security.ConstraintSecurityHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.security.SecurityHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.security.SecurityHandler.2#<init>()
	CALLEE: org.eclipse.jetty.security.SecurityHandler.3#<init>()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler.Context#<init>(org.eclipse.jetty.servlet.ServletContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#<init>(org.eclipse.jetty.server.handler.ContextHandler)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSessionHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getServletHandler()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#getSecurityHandler()
CALLER: org.eclipse.jetty.server.session.SessionHandler#<init>(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
CALLER: org.eclipse.jetty.servlet.BaseHolder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: static org.eclipse.jetty.servlet.Holder.1#<clinit>()
	CALLEE: static org.eclipse.jetty.servlet.BaseHolder.Source#values()
CALLER: static org.eclipse.jetty.servlet.ServletHandler#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.servlet.ServletHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
CALLER: static jersey.repackaged.com.google.common.base.Predicates#alwaysTrue()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#withNarrowedType()
CALLER: static jersey.repackaged.com.google.common.base.Predicates#<clinit>()
	CALLEE: static jersey.repackaged.com.google.common.base.Joiner#on(char)
CALLER: static org.glassfish.jersey.model.internal.ComponentBag#newInstance(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#<init>(jersey.repackaged.com.google.common.base.Predicate)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newIdentityHashMap()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newSetFromMap(java.util.Map)
CALLER: org.glassfish.jersey.internal.util.ReflectionHelper.13#<init>()
	CALLEE: org.glassfish.jersey.internal.util.TypeVisitor#<init>()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNamePA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.2#<init>(java.lang.ClassLoader,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_CLASS_CANNOT_BE_NULL()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_CLASS_CANNOT_BE_NULL()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#<clinit>()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#<init>()
CALLER: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(javax.ws.rs.core.Feature,org.glassfish.jersey.model.internal.CommonConfig.1)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(javax.ws.rs.core.Feature)
CALLER: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(java.lang.Class,org.glassfish.jersey.model.internal.CommonConfig.1)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#<init>(java.lang.Class)
CALLER: static jersey.repackaged.com.google.common.collect.Maps#capacity(int)
	CALLEE: static jersey.repackaged.com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
CALLER: static jersey.repackaged.com.google.common.collect.Maps#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
CALLER: static org.eclipse.jetty.util.resource.EmptyResource#<clinit>()
	CALLEE: org.eclipse.jetty.util.resource.EmptyResource#<init>()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
CALLER: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#toBuffer(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.CachedHttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
CALLER: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String,java.nio.charset.Charset)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#toBuffer(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.CachedHttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
CALLER: org.eclipse.jetty.http.MimeTypes.Type#<init>(java.lang.String,int,java.lang.String,org.eclipse.jetty.http.MimeTypes.Type)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#toBuffer(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.CachedHttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
CALLER: org.eclipse.jetty.util.AbstractTrie#get(java.lang.String)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#get(java.lang.String,int,int)
CALLER: static org.eclipse.jetty.util.resource.FileResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.resource.FileResource#<init>(java.io.File)
	CALLEE: org.eclipse.jetty.util.resource.Resource#<init>()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#assertValidPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.FileResource#normalizeURI(java.io.File,java.net.URI)
	CALLEE: static org.eclipse.jetty.util.resource.FileResource#checkFileAlias(java.io.File)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL)
	CALLEE: org.eclipse.jetty.util.resource.BadResource#<init>(java.net.URL,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
CALLER: static org.slf4j.LoggerFactory#bind()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: static org.slf4j.LoggerFactory#isAndroid()
	CALLEE: static org.slf4j.LoggerFactory#findPossibleStaticLoggerBinderPathSet()
	CALLEE: static org.slf4j.LoggerFactory#reportMultipleBindingAmbiguity(java.util.Set)
	CALLEE: static org.slf4j.LoggerFactory#reportActualBinding(java.util.Set)
	CALLEE: static org.slf4j.LoggerFactory#fixSubstituteLoggers()
	CALLEE: static org.slf4j.LoggerFactory#replayEvents()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#clear()
	CALLEE: static org.slf4j.LoggerFactory#messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#failedBinding(java.lang.Throwable)
CALLER: static org.slf4j.LoggerFactory#versionSanityCheck()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.StaticLoggerBinder#<init>()
	CALLEE: org.slf4j.impl.SimpleLoggerFactory#<init>()
CALLER: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>(org.slf4j.helpers.Util.1)
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>()
CALLER: org.apache.log4j.WriterAppender#closeWriter()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.resource.Resource#finalize()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#close()
	CALLEE: org.eclipse.jetty.util.resource.EmptyResource#close()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#close()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#close()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#close()
CALLER: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#getSystemProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#substVars(java.lang.String,java.util.Properties)
CALLER: org.apache.log4j.PropertyConfigurator#parseCategory(java.util.Properties,org.apache.log4j.Logger,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Category#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.spi.NOPLogger#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#getLevel()
CALLER: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#parseAdditivityForLogger(java.util.Properties,org.apache.log4j.Logger,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.Category#setAdditivity(boolean)
CALLER: static org.apache.log4j.or.RendererMap#addRenderer(org.apache.log4j.spi.RendererSupport,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.Loader#loadClass(java.lang.String)
	CALLEE: static org.apache.log4j.or.RendererMap#class$(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
CALLER: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
CALLER: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperties(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#class$(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#activate()
CALLER: static com.zaxxer.hikari.util.ClockSource.Factory#create()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#<init>()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#<init>()
CALLER: static com.zaxxer.hikari.util.DriverDataSource#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.util.DriverDataSource#<init>(java.lang.String,java.lang.String,java.util.Properties,java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
CALLER: com.zaxxer.hikari.pool.PoolBase#setLoginTimeout(javax.sql.DataSource)
	CALLEE: com.zaxxer.hikari.util.DriverDataSource#setLoginTimeout(int)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: com.zaxxer.hikari.pool.PoolBase#createNetworkTimeoutExecutor(javax.sql.DataSource,java.lang.String,java.lang.String)
	CALLEE: com.zaxxer.hikari.HikariConfig#getThreadFactory()
	CALLEE: com.zaxxer.hikari.util.UtilityElf.DefaultThreadFactory#<init>(java.lang.String,boolean)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.SynchronousExecutor#<init>(com.zaxxer.hikari.pool.PoolBase.1)
CALLER: com.zaxxer.hikari.util.QueuedSequenceSynchronizer.Synchronizer#<init>(com.zaxxer.hikari.util.QueuedSequenceSynchronizer,com.zaxxer.hikari.util.QueuedSequenceSynchronizer.1)
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer.Synchronizer#<init>(com.zaxxer.hikari.util.QueuedSequenceSynchronizer)
CALLER: static com.zaxxer.hikari.util.Sequence.Factory#create()
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#isJdk8Plus()
	CALLEE: com.zaxxer.hikari.util.Sequence.Java8Sequence#<init>()
	CALLEE: com.zaxxer.hikari.util.Sequence.DropwizardSequence#<init>(java.lang.Class)
	CALLEE: com.zaxxer.hikari.util.Sequence.Java7Sequence#<init>()
CALLER: com.zaxxer.hikari.util.SuspendResumeLock#<init>(boolean,com.zaxxer.hikari.util.SuspendResumeLock.1)
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#<init>(boolean)
CALLER: com.zaxxer.hikari.util.DriverDataSource#getConnection(java.lang.String,java.lang.String)
	CALLEE: com.zaxxer.hikari.util.DriverDataSource#getConnection()
CALLER: com.zaxxer.hikari.pool.PoolBase#setupConnection(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#getAndSetNetworkTimeout(java.sql.Connection,long)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setNetworkTimeout(java.sql.Connection,long)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#checkDriverSupport(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionInitSql()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#executeSql(java.sql.Connection,java.lang.String,boolean)
CALLER: com.zaxxer.hikari.pool.PoolBase#quietlyCloseConnection(java.sql.Connection,java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setNetworkTimeout(java.sql.Connection,long)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object[])
CALLER: com.zaxxer.hikari.pool.HikariPool.4#<init>(com.zaxxer.hikari.pool.HikariPool,long)
	CALLEE: com.zaxxer.hikari.metrics.PoolStats#<init>(long)
CALLER: com.zaxxer.hikari.pool.ProxyLeakTask#<init>(com.zaxxer.hikari.pool.ProxyLeakTask.1)
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#<init>()
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#<init>()
	CALLEE: liquibase.logging.core.DefaultLogger#<init>()
CALLER: liquibase.resource.ClassLoaderResourceAccessor#<init>(java.lang.ClassLoader)
	CALLEE: liquibase.resource.AbstractResourceAccessor#<init>()
	CALLEE: liquibase.resource.AbstractResourceAccessor#init()
CALLER: liquibase.servicelocator.ServiceLocator#setResourceAccessor(liquibase.resource.ResourceAccessor)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#toClassLoader()
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#setClassLoaders(java.util.Set)
	CALLEE: liquibase.servicelocator.ServiceLocator#addPackageToScan(java.lang.String)
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#getResourcesAsStream(java.lang.String)
CALLER: liquibase.servicelocator.ServiceLocator#defaultClassLoader()
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#<init>()
	CALLEE: static liquibase.servicelocator.WebSpherePackageScanClassResolver#isWebSphereClassLoader(java.lang.ClassLoader)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.WebSpherePackageScanClassResolver#<init>(java.lang.String)
CALLER: liquibase.resource.ClassLoaderResourceAccessor#<init>()
	CALLEE: liquibase.resource.AbstractResourceAccessor#<init>()
	CALLEE: liquibase.resource.AbstractResourceAccessor#init()
CALLER: liquibase.configuration.LiquibaseConfiguration#init(liquibase.configuration.ConfigurationValueProvider[])
	CALLEE: liquibase.configuration.LiquibaseConfiguration#reset()
CALLER: static liquibase.parser.ChangeLogParserFactory#getInstance()
	CALLEE: liquibase.parser.ChangeLogParserFactory#<init>()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#<init>(liquibase.database.Database,boolean)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getRanChangeSetList()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: liquibase.changelog.RanChangeSet#getOrderExecuted()
	CALLEE: liquibase.changelog.RanChangeSet#getDateExecuted()
CALLER: liquibase.changelog.visitor.UpdateVisitor#<init>(liquibase.database.Database,liquibase.changelog.visitor.ChangeExecListener)
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#<init>(liquibase.database.Database)
CALLER: com.zaxxer.hikari.pool.HikariPool#getConnection(long)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#createProxyConnection(com.zaxxer.hikari.pool.ProxyLeakTask,long)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#isMarkedEvicted()
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#acquire()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#borrow(long,java.util.concurrent.TimeUnit)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#isConnectionAlive(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordBorrowStats(com.zaxxer.hikari.pool.PoolEntry,long)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.NopMetricsTrackerDelegate#recordBorrowStats(com.zaxxer.hikari.pool.PoolEntry,long)
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#schedule(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock#release()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#createTimeoutException(long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedMillis(long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedMillis(long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock.1#release()
	CALLEE: com.zaxxer.hikari.util.SuspendResumeLock.1#acquire()
CALLER: static org.eclipse.jetty.util.log.StdErrLog#<clinit>()
	CALLEE: org.eclipse.jetty.util.DateCache#<init>(java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.Uptime#<init>()
	CALLEE: org.eclipse.jetty.util.Uptime.DefaultImpl#<init>()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#contains(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#<init>(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle.1)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#<init>(java.lang.Object)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#addEventListener(org.eclipse.jetty.util.component.Container.Listener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#isManaged()
CALLER: static org.eclipse.jetty.util.component.ContainerLifeCycle.1#<clinit>()
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Managed#values()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$102(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$102(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean,org.eclipse.jetty.util.component.ContainerLifeCycle.Managed)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getStopTimeout()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.server.Server#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)
CALLER: org.eclipse.jetty.server.Server#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#start(org.eclipse.jetty.util.component.LifeCycle)
CALLER: static org.eclipse.jetty.http.HttpScheme#<clinit>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.HttpScheme#<init>(java.lang.String,int,java.lang.String)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>()
	CALLEE: static org.eclipse.jetty.http.HttpScheme#values()
CALLER: static org.eclipse.jetty.http.HttpVersion#<clinit>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>()
	CALLEE: org.eclipse.jetty.http.HttpVersion#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: static org.eclipse.jetty.http.HttpVersion#values()
CALLER: org.eclipse.jetty.server.AbstractConnectionFactory#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#<init>()
CALLER: org.eclipse.jetty.server.AbstractConnector#<init>(org.eclipse.jetty.server.Server,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,int,org.eclipse.jetty.server.ConnectionFactory[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.server.Server#getThreadPool()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>()
	CALLEE: org.eclipse.jetty.io.ArrayByteBufferPool#<init>()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#<init>(org.eclipse.jetty.server.ServerConnector,java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int)
	CALLEE: org.eclipse.jetty.io.SelectorManager#<init>(java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#remove(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeEventListener(org.eclipse.jetty.util.component.Container.Listener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#stop(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#isManaged()
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#<init>()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#<init>()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#<init>(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#<init>()
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#setServletHandler(org.eclipse.jetty.servlet.ServletHandler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#setSecurityHandler(org.eclipse.jetty.security.SecurityHandler)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#getSecurityHandler()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#newSecurityHandler()
CALLER: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)
CALLER: static jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.3#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.4#<init>(java.lang.String,int)
CALLER: static jersey.repackaged.com.google.common.base.Joiner#on(char)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: org.glassfish.jersey.model.internal.ComponentBag#<init>(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newIdentityHashMap()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet()
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newSetFromMap(java.util.Map)
	CALLEE: static jersey.repackaged.com.google.common.collect.Platform#newSetFromMap(java.util.Map)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_CLASS_CANNOT_BE_NULL()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.internal.l10n.Localizer#<init>()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#<init>(java.util.Locale)
CALLER: static jersey.repackaged.com.google.common.collect.Collections2#<clinit>()
	CALLEE: static jersey.repackaged.com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#useForNull(java.lang.String)
CALLER: org.eclipse.jetty.util.resource.EmptyResource#<init>()
	CALLEE: org.eclipse.jetty.util.resource.Resource#<init>()
CALLER: static org.eclipse.jetty.http.HttpHeader#<clinit>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>(int)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.HttpHeader#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpHeader#values()
CALLER: org.eclipse.jetty.http.HttpGenerator.CachedHttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpHeader#getBytesColonSpace()
CALLER: org.eclipse.jetty.util.resource.FileResource#assertValidPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#indexOfControlChars(java.lang.String)
CALLER: static org.eclipse.jetty.util.resource.FileResource#checkFileAlias(java.io.File)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
CALLER: org.eclipse.jetty.util.resource.FileResource#<init>(java.net.URL)
	CALLEE: org.eclipse.jetty.util.resource.Resource#<init>()
	CALLEE: org.eclipse.jetty.util.resource.FileResource#assertValidPath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.resource.FileResource#normalizeURI(java.io.File,java.net.URI)
	CALLEE: static org.eclipse.jetty.util.resource.FileResource#checkFileAlias(java.io.File)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.resource.URLResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.resource.BadResource#<init>(java.net.URL,java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
CALLER: static org.eclipse.jetty.util.resource.JarFileResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.util.resource.JarResource#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
CALLER: org.eclipse.jetty.util.resource.JarResource#<init>(java.net.URL,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
CALLER: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection,boolean)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
CALLER: static org.slf4j.LoggerFactory#isAndroid()
	CALLEE: static org.slf4j.helpers.Util#safeGetSystemProperty(java.lang.String)
CALLER: static org.slf4j.LoggerFactory#findPossibleStaticLoggerBinderPathSet()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: static org.slf4j.LoggerFactory#reportMultipleBindingAmbiguity(java.util.Set)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#isAmbiguousStaticLoggerBinderPathSet(java.util.Set)
CALLER: static org.slf4j.LoggerFactory#reportActualBinding(java.util.Set)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: static org.slf4j.LoggerFactory#isAmbiguousStaticLoggerBinderPathSet(java.util.Set)
	CALLEE: org.slf4j.impl.StaticLoggerBinder#getLoggerFactoryClassStr()
CALLER: static org.slf4j.LoggerFactory#fixSubstituteLoggers()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#postInitialization()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getLoggers()
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.helpers.SubstituteLogger#setDelegate(org.slf4j.Logger)
CALLER: static org.slf4j.LoggerFactory#replayEvents()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getEventQueue()
	CALLEE: static org.slf4j.LoggerFactory#replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent)
	CALLEE: static org.slf4j.LoggerFactory#emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int)
CALLER: static org.slf4j.LoggerFactory#failedBinding(java.lang.Throwable)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace()
CALLER: org.slf4j.impl.SimpleLoggerFactory#<init>()
	CALLEE: static org.slf4j.impl.SimpleLogger#init()
CALLER: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: static org.apache.log4j.config.PropertySetter#setProperties(java.lang.Object,java.util.Properties,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByKey(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.PropertyConfigurator#registryGet(java.lang.String)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.PropertyConfigurator#registryPut(org.apache.log4j.Appender)
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#introspect()
CALLER: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#getPropertyDescriptor(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)
CALLER: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#<init>()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#<init>()
CALLER: com.zaxxer.hikari.pool.PoolBase.SynchronousExecutor#<init>(com.zaxxer.hikari.pool.PoolBase.1)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.SynchronousExecutor#<init>()
CALLER: com.zaxxer.hikari.pool.PoolBase#getAndSetNetworkTimeout(java.sql.Connection,long)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: com.zaxxer.hikari.pool.PoolBase#checkDriverSupport(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTestQuery()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#executeSql(java.sql.Connection,java.lang.String,boolean)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: liquibase.resource.ClassLoaderResourceAccessor#getResourcesAsStream(java.lang.String)
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.logging.LogFactory#getInstance()
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
CALLER: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
CALLER: liquibase.servicelocator.WebSpherePackageScanClassResolver#<init>(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#<init>()
CALLER: liquibase.parser.ChangeLogParserFactory#<init>()
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.parser.ChangeLogParserFactory.1#<init>(liquibase.parser.ChangeLogParserFactory)
	CALLEE: liquibase.parser.ChangeLogParserFactory#register(liquibase.parser.ChangeLogParser)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
CALLER: liquibase.changelog.visitor.UpdateVisitor#<init>(liquibase.database.Database)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
CALLER: com.zaxxer.hikari.util.ConcurrentBag#borrow(long,java.util.concurrent.TimeUnit)
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#currentSequence()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#addBagItem()
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#waitUntilSequenceExceeded(long,long)
	CALLEE: com.zaxxer.hikari.util.FastList#remove(int)
	CALLEE: com.zaxxer.hikari.util.FastList#size()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#compareAndSet(int,int)
CALLER: com.zaxxer.hikari.pool.PoolBase#isConnectionAlive(java.sql.Connection)
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTestQuery()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setNetworkTimeout(java.sql.Connection,long)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setQueryTimeout(java.sql.Statement,int)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
CALLER: com.zaxxer.hikari.pool.HikariPool#closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#remove(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: com.zaxxer.hikari.pool.HikariPool.1#<init>(com.zaxxer.hikari.pool.HikariPool,java.sql.Connection,java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#close()
CALLER: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordBorrowStats(com.zaxxer.hikari.pool.PoolEntry,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedNanos(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedNanos(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker#recordConnectionAcquiredNanos(long)
CALLER: com.zaxxer.hikari.pool.ProxyLeakTask#schedule(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#<init>(com.zaxxer.hikari.pool.ProxyLeakTask,com.zaxxer.hikari.pool.PoolEntry)
CALLER: com.zaxxer.hikari.pool.HikariPool#createTimeoutException(long)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#logPoolState(java.lang.String[])
	CALLEE: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordConnectionTimeout()
	CALLEE: com.zaxxer.hikari.pool.PoolBase.NopMetricsTrackerDelegate#recordConnectionTimeout()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#getLastConnectionFailure()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedMillis(long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedMillis(long)
CALLER: org.eclipse.jetty.util.DateCache#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.DateCache#<init>(java.lang.String,java.util.Locale,java.util.TimeZone)
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String,java.util.Properties)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.DateCache#formatNow(long)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#tag(java.lang.StringBuilder,java.lang.String,int,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int,int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int,int,java.util.concurrent.BlockingQueue)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
CALLER: org.eclipse.jetty.http.HttpScheme#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#toBuffer(java.lang.String)
CALLER: org.eclipse.jetty.util.ArrayTrie#<init>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>(int)
CALLER: org.eclipse.jetty.http.HttpVersion#<init>(java.lang.String,int,java.lang.String,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>(java.lang.String,boolean)
CALLER: org.eclipse.jetty.io.ArrayByteBufferPool#<init>()
	CALLEE: org.eclipse.jetty.io.ArrayByteBufferPool#<init>(int,int,int)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.server.AbstractConnector#addConnectionFactory(org.eclipse.jetty.server.ConnectionFactory)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#getProtocol()
CALLER: org.eclipse.jetty.io.SelectorManager#<init>(java.util.concurrent.Executor,org.eclipse.jetty.util.thread.Scheduler,int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#removeEventListener(org.eclipse.jetty.util.component.Container.Listener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#isManaged()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#stop(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.NoContext#<init>()
	CALLEE: org.eclipse.jetty.util.AttributesMap#<init>()
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#setServletHandler(org.eclipse.jetty.servlet.ServletHandler)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#setSecurityHandler(org.eclipse.jetty.security.SecurityHandler)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#relinkHandlers()
CALLER: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int,jersey.repackaged.com.google.common.base.Predicates.1)
CALLER: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int,jersey.repackaged.com.google.common.base.Predicates.1)
CALLER: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.3#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int,jersey.repackaged.com.google.common.base.Predicates.1)
CALLER: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.4#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int,jersey.repackaged.com.google.common.base.Predicates.1)
CALLER: jersey.repackaged.com.google.common.base.Joiner#<init>(java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#<init>(java.lang.String,java.lang.String,java.lang.Object[])
CALLER: static jersey.repackaged.com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpHeader#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpHeader#asString()
CALLER: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.StringBuilder,java.lang.String)
CALLER: static org.eclipse.jetty.util.URIUtil#decodePath(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#parseInt(java.lang.String,int,int,int)
CALLER: org.eclipse.jetty.util.resource.URLResource#<init>(java.net.URL,java.net.URLConnection)
	CALLEE: org.eclipse.jetty.util.resource.Resource#<init>()
CALLER: static org.slf4j.LoggerFactory#replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#getLogger()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNOP()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
	CALLEE: org.slf4j.helpers.SubstituteLogger#log(org.slf4j.event.LoggingEvent)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNull()
CALLER: static org.slf4j.LoggerFactory#emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int)
	CALLEE: static org.slf4j.LoggerFactory#emitReplayWarning(int)
	CALLEE: static org.slf4j.LoggerFactory#emitSubstitutionWarning()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#getLogger()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNOP()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
CALLER: static org.slf4j.impl.SimpleLogger#init()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
	CALLEE: static org.slf4j.impl.SimpleLogger#loadProperties()
	CALLEE: static org.slf4j.impl.SimpleLogger#getStringProperty(java.lang.String,java.lang.String)
	CALLEE: static org.slf4j.impl.SimpleLogger#stringToLevel(java.lang.String)
	CALLEE: static org.slf4j.impl.SimpleLogger#getBooleanProperty(java.lang.String,boolean)
	CALLEE: static org.slf4j.impl.SimpleLogger#computeTargetStream(java.lang.String)
CALLER: org.apache.log4j.PropertyConfigurator#parseErrorHandler(org.apache.log4j.spi.ErrorHandler,java.lang.String,java.util.Properties,org.apache.log4j.spi.LoggerRepository)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toBoolean(java.lang.String,boolean)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: org.apache.log4j.PropertyConfigurator#parseAppender(java.util.Properties,java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
CALLER: org.apache.log4j.PropertyConfigurator#parseAppenderFilters(java.util.Properties,java.lang.String,org.apache.log4j.Appender)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#setProperty(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#activate()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#findAndSubst(java.lang.String,java.util.Properties)
	CALLEE: static org.apache.log4j.PropertyConfigurator#class$(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#<init>(java.lang.Object)
	CALLEE: org.apache.log4j.NameValue#<init>(java.lang.String,java.lang.String)
	CALLEE: org.apache.log4j.SortedKeyEnumeration#<init>(java.util.Hashtable)
	CALLEE: org.apache.log4j.SortedKeyEnumeration#hasMoreElements()
	CALLEE: org.apache.log4j.SortedKeyEnumeration#nextElement()
CALLER: org.apache.log4j.config.PropertySetter#introspect()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: org.apache.log4j.config.PropertySetter#setProperty(java.beans.PropertyDescriptor,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetterException#<init>(java.lang.String)
	CALLEE: org.apache.log4j.config.PropertySetter#convertArg(java.lang.String,java.lang.Class)
	CALLEE: org.apache.log4j.config.PropertySetterException#<init>(java.lang.Throwable)
CALLER: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.logging.core.AbstractLogger#getLogLevel()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
	CALLEE: liquibase.logging.core.AbstractLogger#toLogLevel(java.lang.String)
CALLER: static liquibase.logging.LogLevel#<clinit>()
	CALLEE: liquibase.logging.LogLevel#<init>(java.lang.String,int)
CALLER: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: liquibase.logging.core.AbstractLogger#buildMessage(java.lang.String)
CALLER: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#currentSequence()
	CALLEE: com.zaxxer.hikari.util.Sequence.Java8Sequence#get()
	CALLEE: com.zaxxer.hikari.util.Sequence.DropwizardSequence#get()
CALLER: com.zaxxer.hikari.pool.PoolBase#setQueryTimeout(java.sql.Statement,int)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: com.zaxxer.hikari.util.ConcurrentBag#remove(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#compareAndSet(int,int)
CALLER: com.zaxxer.hikari.pool.HikariPool#logPoolState(java.lang.String[])
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getTotalConnections()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getActiveConnections()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getIdleConnections()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getThreadsAwaitingConnection()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object[])
CALLER: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordConnectionTimeout()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker#recordConnectionTimeout()
CALLER: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String,java.util.Properties)
	CALLEE: org.eclipse.jetty.util.log.AbstractLogger#<init>()
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#condensePackageString(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#getLoggingLevel(java.util.Properties,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#getLoggingProperty(java.util.Properties,java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.util.DateCache#formatNow(long)
	CALLEE: org.eclipse.jetty.util.DateCache#formatTick(long)
CALLER: org.eclipse.jetty.util.log.StdErrLog#tag(java.lang.StringBuilder,java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#condensePackageString(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#escape(java.lang.StringBuilder,java.lang.String)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#<init>(int,int,int,java.util.concurrent.BlockingQueue)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#<init>()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.3#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#setMinThreads(int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#setMaxThreads(int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#setIdleTimeout(int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#<init>(int,int)
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarting()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.server.Server#doStart()
	CALLEE: org.eclipse.jetty.server.ServerConnector#doStart()
	CALLEE: org.eclipse.jetty.servlet.ErrorPageErrorHandler#doStart()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.io.SelectorManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#doStart()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doStart()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#doStart()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#doStart()
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>(java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>(java.lang.String,boolean,java.lang.ClassLoader)
CALLER: org.eclipse.jetty.io.ArrayByteBufferPool#<init>(int,int,int)
	CALLEE: org.eclipse.jetty.io.ArrayByteBufferPool.Bucket#<init>(int)
CALLER: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int,jersey.repackaged.com.google.common.base.Predicates.1)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.util.URIUtil#encodePath(java.lang.StringBuilder,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#toHex(byte,java.lang.Appendable)
CALLER: static org.eclipse.jetty.util.TypeUtil#parseInt(java.lang.String,int,int,int)
	CALLEE: static org.eclipse.jetty.util.TypeUtil#convertHexDigit(int)
CALLER: static org.eclipse.jetty.util.TypeUtil#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.slf4j.LoggerFactory#emitReplayWarning(int)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
CALLER: static org.slf4j.LoggerFactory#emitSubstitutionWarning()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
CALLER: static org.slf4j.impl.SimpleLogger#loadProperties()
	CALLEE: org.slf4j.impl.SimpleLogger.1#<init>()
CALLER: static org.slf4j.impl.SimpleLogger#getStringProperty(java.lang.String,java.lang.String)
	CALLEE: static org.slf4j.impl.SimpleLogger#getStringProperty(java.lang.String)
CALLER: static org.slf4j.impl.SimpleLogger#getBooleanProperty(java.lang.String,boolean)
	CALLEE: static org.slf4j.impl.SimpleLogger#getStringProperty(java.lang.String)
CALLER: static org.slf4j.impl.SimpleLogger#computeTargetStream(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: org.apache.log4j.config.PropertySetter#convertArg(java.lang.String,java.lang.Class)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#toLevel(java.lang.String,org.apache.log4j.Level)
	CALLEE: static org.apache.log4j.config.PropertySetter#class$(java.lang.String)
CALLER: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
	CALLEE: liquibase.configuration.LiquibaseConfiguration#createConfiguration(java.lang.Class)
CALLER: liquibase.logging.core.AbstractLogger#toLogLevel(java.lang.String)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariPool#getTotalConnections()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#size()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#getCount(int)
CALLER: com.zaxxer.hikari.pool.HikariPool#getActiveConnections()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#getCount(int)
CALLER: com.zaxxer.hikari.pool.HikariPool#getIdleConnections()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#getCount(int)
CALLER: com.zaxxer.hikari.pool.HikariPool#getThreadsAwaitingConnection()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#getPendingQueue()
CALLER: static org.eclipse.jetty.util.log.StdErrLog#getLoggingLevel(java.util.Properties,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.StdErrLog#getLevelId(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.util.DateCache#formatTick(long)
	CALLEE: org.eclipse.jetty.util.DateCache.Tick#<init>(long,java.lang.String)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#setMinThreads(int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThreads(int)
CALLER: static org.eclipse.jetty.util.BlockingArrayQueue#<clinit>()
	CALLEE: static org.eclipse.jetty.util.MemoryUtils#getIntegersPerCacheLine()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarting()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#doStart()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThreads(int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStarted()
	CALLEE: static org.eclipse.jetty.util.Uptime#getUptime()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>(java.lang.String,boolean,java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: liquibase.configuration.LiquibaseConfiguration#createConfiguration(java.lang.Class)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String,java.lang.Throwable)
CALLER: com.zaxxer.hikari.util.QueuedSequenceSynchronizer.Synchronizer#tryAcquireShared(long)
	CALLEE: static com.zaxxer.hikari.util.QueuedSequenceSynchronizer#access$100(com.zaxxer.hikari.util.QueuedSequenceSynchronizer)
	CALLEE: com.zaxxer.hikari.util.Sequence.Java8Sequence#get()
	CALLEE: com.zaxxer.hikari.util.Sequence.DropwizardSequence#get()
CALLER: com.zaxxer.hikari.util.ConcurrentBag#getCount(int)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getState()
CALLER: com.zaxxer.hikari.util.ConcurrentBag#getPendingQueue()
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#getQueueLength()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#startThreads(int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#newThread(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#isDaemon()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getThreadsPriority()
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#add(java.lang.Object)
CALLER: static org.eclipse.jetty.util.MemoryUtils#getIntegersPerCacheLine()
	CALLEE: static org.eclipse.jetty.util.MemoryUtils#getCacheLineBytes()
CALLER: static org.eclipse.jetty.util.MemoryUtils#<clinit>()
	CALLEE: org.eclipse.jetty.util.MemoryUtils.1#<init>()
CALLER: liquibase.parser.ChangeLogParserFactory.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: liquibase.parser.ChangeLogParserFactory.1#compare(liquibase.parser.ChangeLogParser,liquibase.parser.ChangeLogParser)
CALLER: com.zaxxer.hikari.metrics.dropwizard.CodahaleMetricsTrackerFactory#create(java.lang.String,com.zaxxer.hikari.metrics.PoolStats)
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker#<init>(java.lang.String,com.zaxxer.hikari.metrics.PoolStats,com.codahale.metrics.MetricRegistry)
CALLER: org.eclipse.jetty.util.resource.URLResource#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.resource.JarResource#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getUseCaches()
CALLER: org.eclipse.jetty.util.resource.JarResource#close()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#close()
CALLER: liquibase.database.DatabaseFactory.DatabaseComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: liquibase.database.DatabaseFactory.DatabaseComparator#compare(liquibase.database.Database,liquibase.database.Database)
CALLER: liquibase.lockservice.LockServiceFactory.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: liquibase.lockservice.LockServiceFactory.1#compare(liquibase.lockservice.LockService,liquibase.lockservice.LockService)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool.3#run()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#remove(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#take()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#poll()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$000(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$100(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$200(org.eclipse.jetty.util.thread.QueuedThreadPool,int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#runJob(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$300(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$400(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$500(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$600(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$700(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$800()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$900(org.eclipse.jetty.util.thread.QueuedThreadPool)
CALLER: jersey.repackaged.com.google.common.base.Joiner#useForNull(java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner.1#<init>(jersey.repackaged.com.google.common.base.Joiner,jersey.repackaged.com.google.common.base.Joiner,java.lang.String)
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int,org.apache.log4j.spi.LoggingEvent)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.util.List,java.lang.Class)
CALLER: org.apache.log4j.Hierarchy#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String)
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getRootLogger()
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.Hierarchy#resetConfiguration()
	CALLEE: org.apache.log4j.spi.RootLogger#setLevel(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#setThreshold(org.apache.log4j.Level)
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.Category#setResourceBundle(java.util.ResourceBundle)
	CALLEE: org.apache.log4j.Hierarchy#shutdown()
	CALLEE: org.apache.log4j.Hierarchy#getCurrentLoggers()
	CALLEE: org.apache.log4j.or.RendererMap#clear()
	CALLEE: org.apache.log4j.Category#setAdditivity(boolean)
	CALLEE: org.apache.log4j.Category#setLevel(org.apache.log4j.Level)
CALLER: org.apache.log4j.Hierarchy#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.Category#setHierarchy(org.apache.log4j.spi.LoggerRepository)
	CALLEE: org.apache.log4j.CategoryKey#<init>(java.lang.String)
	CALLEE: org.apache.log4j.DefaultCategoryFactory#makeNewLoggerInstance(java.lang.String)
	CALLEE: org.apache.log4j.Hierarchy#updateParents(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.Hierarchy#updateChildren(org.apache.log4j.ProvisionNode,org.apache.log4j.Logger)
CALLER: org.apache.log4j.spi.NOPLoggerRepository#getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)
	CALLEE: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
CALLER: org.apache.log4j.Hierarchy#setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
	CALLEE: org.apache.log4j.or.RendererMap#put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)
CALLER: org.traccar.web.WebServer#start()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getVirtualHosts()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getContextPath()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getBaseResource()
CALLER: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#getHost()
	CALLEE: org.eclipse.jetty.server.ServerConnector#getLocalPort()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#getPort()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getState()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMinThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getThreads()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getIdleThreads()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#size()
CALLER: org.traccar.Main.2#run()
	CALLEE: static org.traccar.helper.Log#info(java.lang.String)
	CALLEE: static org.traccar.Context#getServerManager()
	CALLEE: static org.traccar.Context#getWebServer()
	CALLEE: org.traccar.web.WebServer#stop()
	CALLEE: org.traccar.ServerManager#stop()
CALLER: org.glassfish.jersey.model.internal.ComponentBag#register(java.lang.Class,org.glassfish.jersey.process.Inflector)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#registerModel(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
CALLER: liquibase.changelog.ChangeLogIterator#run(liquibase.changelog.visitor.ChangeSetVisitor,liquibase.RuntimeEnvironment)
	CALLEE: liquibase.changelog.filter.LabelChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.DbmsChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#isAccepted()
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.logging.core.AbstractLogger#setChangeLog(liquibase.changelog.DatabaseChangeLog)
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#getDirection()
	CALLEE: liquibase.logging.core.AbstractLogger#setChangeSet(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.ChangeLogIterator#alreadySaw(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.RuntimeEnvironment#getTargetDatabase()
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#visit(liquibase.changelog.ChangeSet,liquibase.changelog.DatabaseChangeLog,liquibase.database.Database,java.util.Set)
	CALLEE: liquibase.changelog.ChangeLogIterator#markSeen(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ContextChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
CALLER: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClassesImpl(java.lang.Class)
	CALLEE: liquibase.exception.ServiceNotFoundException#<init>(java.lang.Throwable)
CALLER: liquibase.servicelocator.ServiceLocator#newInstance(java.lang.Class)
	CALLEE: liquibase.exception.ServiceNotFoundException#<init>(java.lang.Throwable)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClass(java.lang.Class)
CALLER: org.traccar.database.DeviceManager#getAllGroups()
	CALLEE: org.traccar.database.DeviceManager#updateGroupCache(boolean)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setFailed(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopping()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#doStop()
	CALLEE: org.eclipse.jetty.server.Server#doStop()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#doStop()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#doStop()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#doStop()
	CALLEE: org.eclipse.jetty.io.SelectorManager#doStop()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#doStop()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopped()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#doStop()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#doStop()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#doStop()
CALLER: org.traccar.database.GeofenceManager#getCurrentDeviceGeofences(org.traccar.model.Position)
	CALLEE: org.traccar.database.GeofenceManager#getGeofence(long)
	CALLEE: org.traccar.database.GeofenceManager#getAllDeviceGeofences(long)
CALLER: org.eclipse.jetty.util.log.AbstractLogger#getLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.AbstractLogger#isBlank(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#getName()
	CALLEE: static org.eclipse.jetty.util.log.Log#getRootLogger()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLoggers()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#newLogger(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.log.Log#getMutableLoggers()
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: liquibase.changelog.ChangeLogHistoryServiceFactory#resetAll()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#reset()
CALLER: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.servicelocator.ServiceLocator#newInstance(java.lang.Class)
CALLER: liquibase.database.DatabaseFactory#openDatabase(java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.database.DatabaseFactory#openDatabase(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
CALLER: org.apache.log4j.helpers.PatternParser#parse()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#addToList(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#reset()
	CALLEE: org.apache.log4j.helpers.PatternParser#finalizeConverter(char)
CALLER: liquibase.logging.core.DefaultLogger#severe(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: liquibase.logging.core.DefaultLogger#info(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
CALLER: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#getKey()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#getArguments()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#getResourceBundleName()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getOsgiRegistryInstance()
	CALLEE: static org.glassfish.hk2.osgiresourcelocator.ResourceFinder#findEntry(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#getDefaultMessage(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#getResourceBundle(java.lang.String)
CALLER: liquibase.parser.ChangeLogParserFactory#getParser(java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.exception.UnknownChangelogFormatException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.server.Server#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.server.Server#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#isManaged()
CALLER: org.eclipse.jetty.servlet.ServletHandler#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#start(org.eclipse.jetty.util.component.LifeCycle)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#setServer(org.eclipse.jetty.server.Server)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#setServer(org.eclipse.jetty.server.Server)
CALLER: org.traccar.database.DataManager#clearPositionsHistory()
	CALLEE: org.traccar.Config#getInteger(java.lang.String)
	CALLEE: org.traccar.database.DataManager#getQuery(java.lang.String)
	CALLEE: static org.traccar.database.QueryBuilder#create(javax.sql.DataSource,java.lang.String)
	CALLEE: org.traccar.database.QueryBuilder#setDate(java.lang.String,java.util.Date)
	CALLEE: org.traccar.database.QueryBuilder#executeUpdate()
CALLER: org.traccar.ServerManager#start()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: com.zaxxer.hikari.util.ConcurrentBag.1#initialValue()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag.1#initialValue()
CALLER: org.slf4j.helpers.SubstituteLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#<init>(java.lang.String,java.util.Queue,boolean)
CALLER: com.ning.http.client.ProxyServer.Protocol#toString()
	CALLEE: com.ning.http.client.ProxyServer.Protocol#getProtocol()
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStart()
CALLER: org.eclipse.jetty.server.Server#doStart()
	CALLEE: static org.eclipse.jetty.util.Uptime#getUptime()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.Server#isDumpAfterStart()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getAcceptors()
	CALLEE: org.eclipse.jetty.io.SelectorManager#getSelectorCount()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#start()
	CALLEE: org.eclipse.jetty.server.ServerConnector#getSelectorManager()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: org.eclipse.jetty.server.Server#getStopAtShutdown()
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#getInstance()
	CALLEE: static org.eclipse.jetty.server.Server#getVersion()
	CALLEE: static org.eclipse.jetty.http.HttpGenerator#setJettyVersion(java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#size()
CALLER: org.eclipse.jetty.server.ServerConnector#doStart()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#doStart()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getAcceptors()
	CALLEE: org.eclipse.jetty.io.SelectorManager#acceptor(java.nio.channels.ServerSocketChannel)
CALLER: org.eclipse.jetty.servlet.ErrorPageErrorHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#unmanage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.server.Server#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#start(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#start(org.eclipse.jetty.util.component.LifeCycle)
CALLER: org.eclipse.jetty.io.SelectorManager#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.io.SelectorManager#newSelector(int)
	CALLEE: org.eclipse.jetty.util.thread.NonBlockingThread#<init>(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager#execute(java.lang.Runnable)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBean(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#<init>(java.lang.String,boolean)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionHandler()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#getScavengePeriod()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSessions()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#getSavePeriod()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setSavePeriod(int)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.1#<init>(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler)
CALLER: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#getProtocol()
CALLER: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.ArrayUtil#addToArray(java.lang.Object[],java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServlets()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServlets(org.eclipse.jetty.servlet.ServletHolder[])
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#setServletName(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#setPathSpec(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])
CALLER: liquibase.changelog.ChangeLogHistoryServiceFactory.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory.1#compare(liquibase.changelog.ChangeLogHistoryService,liquibase.changelog.ChangeLogHistoryService)
CALLER: org.eclipse.jetty.servlet.ServletHandler#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#<init>()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateNameMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletMapping(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
CALLER: org.eclipse.jetty.server.session.SessionHandler#doStart()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#setSessionManager(org.eclipse.jetty.server.SessionManager)
	CALLEE: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
CALLER: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
CALLER: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#isValid()
	CALLEE: static liquibase.changelog.ChangeLogParameters#access$100(liquibase.changelog.ChangeLogParameters)
	CALLEE: static liquibase.changelog.ChangeLogParameters#access$200(liquibase.changelog.ChangeLogParameters)
	CALLEE: static liquibase.changelog.ChangeLogParameters#access$300(liquibase.changelog.ChangeLogParameters)
	CALLEE: static liquibase.database.DatabaseList#definitionMatches(java.util.Collection,liquibase.database.Database,boolean)
	CALLEE: liquibase.LabelExpression#matches(liquibase.Labels)
CALLER: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#getValue()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
CALLER: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker#<init>(java.lang.String,com.zaxxer.hikari.metrics.PoolStats,com.codahale.metrics.MetricRegistry)
	CALLEE: com.zaxxer.hikari.metrics.MetricsTracker#<init>()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker.1#<init>(com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker,com.zaxxer.hikari.metrics.PoolStats)
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker.2#<init>(com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker,com.zaxxer.hikari.metrics.PoolStats)
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker.3#<init>(com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker,com.zaxxer.hikari.metrics.PoolStats)
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker.4#<init>(com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker,com.zaxxer.hikari.metrics.PoolStats)
CALLER: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$200(org.eclipse.jetty.util.thread.QueuedThreadPool,int)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThreads(int)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#runJob(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.thread.NonBlockingThread#run()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.1#run()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#run()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.1#run()
CALLER: static org.eclipse.jetty.util.thread.QueuedThreadPool#access$700(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#idleJobPoll()
CALLER: jersey.repackaged.com.google.common.base.Joiner.1#<init>(jersey.repackaged.com.google.common.base.Joiner,jersey.repackaged.com.google.common.base.Joiner,java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#<init>(jersey.repackaged.com.google.common.base.Joiner,jersey.repackaged.com.google.common.base.Joiner.1)
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int,org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.util.List,java.lang.Class)
CALLER: org.apache.log4j.spi.NOPLogger#<init>(org.apache.log4j.spi.NOPLoggerRepository,java.lang.String)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
CALLER: org.apache.log4j.Hierarchy#shutdown()
	CALLEE: org.apache.log4j.Hierarchy#getRootLogger()
	CALLEE: org.apache.log4j.Hierarchy#getCurrentLoggers()
	CALLEE: org.apache.log4j.Category#closeNestedAppenders()
	CALLEE: org.apache.log4j.Category#removeAllAppenders()
CALLER: org.apache.log4j.DefaultCategoryFactory#makeNewLoggerInstance(java.lang.String)
	CALLEE: org.apache.log4j.Logger#<init>(java.lang.String)
CALLER: org.apache.log4j.Hierarchy#updateParents(org.apache.log4j.Logger)
	CALLEE: org.apache.log4j.CategoryKey#<init>(java.lang.String)
	CALLEE: org.apache.log4j.ProvisionNode#<init>(org.apache.log4j.Logger)
CALLER: org.eclipse.jetty.server.AbstractConnector#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getDefaultProtocol()
CALLER: org.traccar.web.WebServer#stop()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
CALLER: org.traccar.ServerManager#stop()
	CALLEE: static org.traccar.GlobalChannelFactory#release()
	CALLEE: static org.traccar.GlobalTimer#release()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.model.internal.ComponentBag#registerModel(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.5#<init>(org.glassfish.jersey.model.internal.ComponentBag,java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer)
CALLER: static liquibase.changelog.visitor.ChangeSetVisitor.Direction#<clinit>()
	CALLEE: liquibase.changelog.visitor.ChangeSetVisitor.Direction#<init>(java.lang.String,int)
CALLER: liquibase.changelog.ChangeLogIterator#alreadySaw(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.ChangeLogIterator#createKey(liquibase.changelog.ChangeSet)
CALLER: liquibase.changelog.visitor.UpdateVisitor#visit(liquibase.changelog.ChangeSet,liquibase.changelog.DatabaseChangeLog,liquibase.database.Database,java.util.Set)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#fireWillRun(liquibase.changelog.ChangeSet,liquibase.changelog.DatabaseChangeLog,liquibase.database.Database,liquibase.changelog.ChangeSet.RunStatus)
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#fireRunFailed(liquibase.changelog.ChangeSet,liquibase.changelog.DatabaseChangeLog,liquibase.database.Database,liquibase.exception.MigrationFailedException)
	CALLEE: liquibase.changelog.visitor.UpdateVisitor#fireRan(liquibase.changelog.ChangeSet,liquibase.changelog.DatabaseChangeLog,liquibase.database.Database,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.database.AbstractJdbcDatabase#commit()
	CALLEE: liquibase.database.AbstractJdbcDatabase#markChangeSetExecStatus(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.database.AbstractJdbcDatabase#setObjectQuotingStrategy(liquibase.database.ObjectQuotingStrategy)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getObjectQuotingStrategy()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getRunStatus(liquibase.changelog.ChangeSet)
CALLER: liquibase.changelog.ChangeLogIterator#markSeen(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.ChangeLogIterator#createKey(liquibase.changelog.ChangeSet)
CALLER: liquibase.servicelocator.ServiceLocator#findClassesImpl(java.lang.Class)
	CALLEE: liquibase.resource.ClassLoaderResourceAccessor#toClassLoader()
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#info(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#addClassLoader(java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#findImplementations(java.lang.Class,java.lang.String[])
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String)
CALLER: liquibase.servicelocator.ServiceLocator#findClass(java.lang.Class)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
	CALLEE: liquibase.exception.ServiceNotFoundException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopping()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStop()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#doStop()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doStop()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.2#cancel()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.ScheduledFutureTask#cancel()
CALLER: org.eclipse.jetty.server.Server#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#deregister(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#deregister(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.server.ServerConnector#shutdown()
	CALLEE: org.eclipse.jetty.util.FutureCallback#cancel(boolean)
	CALLEE: org.eclipse.jetty.util.FutureCallback#isDone()
	CALLEE: org.eclipse.jetty.util.FutureCallback#get(long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#shutdown()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getStopTimeout()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: org.eclipse.jetty.server.Server#getStopAtShutdown()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.server.Server#isDumpBeforeStop()
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#doStop()
	CALLEE: org.eclipse.jetty.server.ServerConnector#close()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#doStop()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#doStop()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#clear()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getStopTimeout()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getQueue()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.1#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool)
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#iterator()
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#size()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#stop(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
CALLER: org.eclipse.jetty.server.session.SessionHandler#doStop()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
CALLER: org.eclipse.jetty.io.SelectorManager#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
CALLER: org.eclipse.jetty.servlet.ServletHandler#doStop()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: static org.eclipse.jetty.util.ArrayUtil#asMutableList(java.lang.Object[])
	CALLEE: static org.eclipse.jetty.util.LazyList#toArray(java.lang.Object,java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getSource()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#getServletName()
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#doStop()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStop()
CALLER: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopped()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.traccar.database.GeofenceManager#getAllDeviceGeofences(long)
	CALLEE: org.traccar.database.GeofenceManager#getDeviceGeofences(java.util.Map,long)
CALLER: static org.eclipse.jetty.util.log.Log#getRootLogger()
	CALLEE: static org.eclipse.jetty.util.log.Log#initialized()
CALLER: org.eclipse.jetty.util.log.StdErrLog#newLogger(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#setPrintLongNames(boolean)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isHideStacks()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable)
CALLER: liquibase.database.DatabaseFactory#openDatabase(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.database.DatabaseFactory#openConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.database.DatabaseFactory#findCorrectDatabaseImplementation(liquibase.database.DatabaseConnection)
CALLER: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>()
CALLER: org.apache.log4j.helpers.PatternParser#finalizeConverter(char)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#<init>(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser#addConverter(org.apache.log4j.helpers.PatternConverter)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: static org.apache.log4j.helpers.OptionConverter#instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractPrecisionOption()
	CALLEE: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractOption()
	CALLEE: org.apache.log4j.helpers.ISO8601DateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.DateTimeDateFormat#<init>()
	CALLEE: static org.apache.log4j.helpers.PatternParser#class$(java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternParser.DatePatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.text.DateFormat)
	CALLEE: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.lang.String)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getOsgiRegistryInstance()
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#getInstance()
CALLER: org.glassfish.jersey.internal.l10n.Localizer#getDefaultMessage(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#getKey()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessage#getArguments()
CALLER: liquibase.exception.UnknownChangelogFormatException#<init>(java.lang.String)
	CALLEE: liquibase.exception.LiquibaseException#<init>(java.lang.String)
CALLER: org.traccar.database.QueryBuilder#setDate(java.lang.String,java.util.Date)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.traccar.database.QueryBuilder#indexes(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#close()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#close()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#setTimestamp(int,java.sql.Timestamp)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#setNull(int,int)
CALLER: com.zaxxer.hikari.util.ConcurrentBag.1#initialValue()
	CALLEE: com.zaxxer.hikari.util.FastList#<init>(java.lang.Class,int)
CALLER: static org.slf4j.helpers.NOPLogger#<clinit>()
	CALLEE: org.slf4j.helpers.NOPLogger#<init>()
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#hook()
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#<init>()
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#register(org.eclipse.jetty.util.component.LifeCycle[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#getInstance()
CALLER: static org.eclipse.jetty.http.HttpGenerator#setJettyVersion(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
CALLER: static org.eclipse.jetty.http.HttpGenerator#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpVersion#toString()
	CALLEE: org.eclipse.jetty.http.HttpGenerator.ResponseInfo#<init>(org.eclipse.jetty.http.HttpVersion,org.eclipse.jetty.http.HttpFields,long,int,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.1#<init>()
	CALLEE: static org.eclipse.jetty.http.HttpStatus#getCode(int)
	CALLEE: org.eclipse.jetty.http.HttpVersion#toBuffer()
	CALLEE: org.eclipse.jetty.http.HttpGenerator.PreparedResponse#<init>(org.eclipse.jetty.http.HttpGenerator.1)
	CALLEE: org.eclipse.jetty.http.HttpMethod#asString()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpStdErr()
	CALLEE: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#doStart()
	CALLEE: org.eclipse.jetty.server.ServerConnector#open()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#doStart()
CALLER: org.eclipse.jetty.io.SelectorManager#acceptor(java.nio.channels.ServerSocketChannel)
	CALLEE: org.eclipse.jetty.io.SelectorManager#chooseSelector()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Acceptor#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.ServerSocketChannel)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
CALLER: org.eclipse.jetty.io.SelectorManager#newSelector(int)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#<init>(org.eclipse.jetty.io.SelectorManager,int)
CALLER: org.eclipse.jetty.io.SelectorManager#execute(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#execute(java.lang.Runnable)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#getServer()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStart()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#getSessionHandler()
	CALLEE: org.eclipse.jetty.server.Server#getSessionIdManager()
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.server.Server#setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#setSessionIdPathParameterName(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getInitParameter(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSessions()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#setSavePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager.Saver#<init>(org.eclipse.jetty.server.session.HashSessionManager)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.2#cancel()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.ScheduledFutureTask#cancel()
CALLER: org.eclipse.jetty.servlet.ServletHandler#setServlets(org.eclipse.jetty.servlet.ServletHolder[])
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateNameMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#invalidateChainsCache()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#setServletHandler(org.eclipse.jetty.servlet.ServletHandler)
CALLER: org.eclipse.jetty.servlet.ServletHandler#setServletMappings(org.eclipse.jetty.servlet.ServletMapping[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBeans(java.lang.Object[],java.lang.Object[])
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#invalidateChainsCache()
CALLER: liquibase.changelog.ChangeLogHistoryServiceFactory.1#compare(liquibase.changelog.ChangeLogHistoryService,liquibase.changelog.ChangeLogHistoryService)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#getPriority()
CALLER: org.eclipse.jetty.servlet.ServletHandler#updateNameMappings()
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#setServletHandler(org.eclipse.jetty.servlet.ServletHandler)
CALLER: org.eclipse.jetty.servlet.ServletHandler#updateMappings()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: org.eclipse.jetty.util.MultiMap#<init>()
	CALLEE: org.eclipse.jetty.util.MultiMap#add(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap#<init>()
	CALLEE: org.eclipse.jetty.http.PathMap#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#isEnabled()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#getServletName()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#isDefault()
CALLER: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.Holder#setHeldClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#addServletWithMapping(org.eclipse.jetty.servlet.ServletHolder,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#newServletHolder(org.eclipse.jetty.servlet.BaseHolder.Source)
CALLER: org.eclipse.jetty.servlet.ServletHandler#initialize()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#start()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrow()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBeans(java.lang.Class)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#initialize()
CALLER: org.eclipse.jetty.server.handler.ScopedHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStart()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
CALLER: static liquibase.database.DatabaseList#definitionMatches(java.util.Collection,liquibase.database.Database,boolean)
	CALLEE: static liquibase.database.DatabaseList#definitionMatches(java.util.Collection,java.lang.String,boolean)
	CALLEE: liquibase.database.core.UnsupportedDatabase#getShortName()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#idleJobPoll()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#poll(long,java.util.concurrent.TimeUnit)
CALLER: jersey.repackaged.com.google.common.base.Joiner#<init>(jersey.repackaged.com.google.common.base.Joiner,jersey.repackaged.com.google.common.base.Joiner.1)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#<init>(jersey.repackaged.com.google.common.base.Joiner)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlersByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
CALLER: org.apache.log4j.Category#closeNestedAppenders()
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
	CALLEE: org.apache.log4j.Category#getAllAppenders()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#nextElement()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#hasMoreElements()
CALLER: org.apache.log4j.Category#removeAllAppenders()
	CALLEE: org.apache.log4j.Category#fireRemoveAppenderEvent(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#removeAllAppenders()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#getAllAppenders()
CALLER: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer,boolean)
CALLER: liquibase.changelog.ChangeLogIterator#createKey(liquibase.changelog.ChangeSet)
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
CALLER: static liquibase.changelog.ChangeSet.RunStatus#<clinit>()
	CALLEE: liquibase.changelog.ChangeSet.RunStatus#<init>(java.lang.String,int)
CALLER: static liquibase.changelog.ChangeSet.ExecType#<clinit>()
	CALLEE: liquibase.changelog.ChangeSet.ExecType#<init>(java.lang.String,int,java.lang.String,boolean,boolean)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#addClassLoader(java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getClassLoaders()
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#findImplementations(java.lang.Class,java.lang.String[])
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#<init>(java.lang.Class)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getCompositeFilter(liquibase.servicelocator.PackageScanFilter)
	CALLEE: liquibase.osgi.OSGiPackageScanClassResolver#find(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#find(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
CALLER: liquibase.logging.core.DefaultLogger#warning(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
CALLER: static liquibase.servicelocator.PrioritizedService#<clinit>()
	CALLEE: liquibase.servicelocator.PrioritizedService.1#<init>()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doStop()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#shutdownSessions()
CALLER: static org.eclipse.jetty.util.thread.ShutdownThread#deregister(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.thread.ShutdownThread#unhook()
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#deregister(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#getInstance()
CALLER: org.eclipse.jetty.server.ServerConnector#close()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
CALLER: org.eclipse.jetty.server.AbstractConnector#doStop()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getStopTimeout()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStop()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBeans(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#interruptAcceptors()
CALLER: static org.eclipse.jetty.servlet.FilterHolder#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)
CALLER: liquibase.database.DatabaseFactory#openConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.String)
	CALLEE: liquibase.database.jvm.JdbcConnection#<init>(java.sql.Connection)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: static liquibase.database.DatabaseFactory#getInstance()
	CALLEE: liquibase.database.DatabaseFactory#register(liquibase.database.Database)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: liquibase.resource.FileSystemResourceAccessor#toClassLoader()
	CALLEE: liquibase.database.OfflineConnection#<init>(java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.database.DatabaseFactory#findDefaultDriver(java.lang.String)
	CALLEE: liquibase.database.DatabaseFactory#clearRegistry()
CALLER: liquibase.database.DatabaseFactory#findCorrectDatabaseImplementation(liquibase.database.DatabaseConnection)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.database.DatabaseFactory.DatabaseComparator#<init>(liquibase.database.DatabaseFactory.1)
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String)
	CALLEE: liquibase.database.DatabaseFactory#getImplementedDatabases()
	CALLEE: liquibase.database.core.UnsupportedDatabase#<init>()
	CALLEE: liquibase.database.core.UnsupportedDatabase#setConnection(liquibase.database.DatabaseConnection)
	CALLEE: liquibase.database.OfflineConnection#getDatabaseProductName()
	CALLEE: liquibase.database.jvm.JdbcConnection#getDatabaseProductName()
	CALLEE: liquibase.database.OfflineConnection#isCorrectDatabaseImplementation(liquibase.database.Database)
CALLER: org.apache.log4j.helpers.PatternParser#extractPrecisionOption()
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.helpers.PatternParser#extractOption()
CALLER: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
CALLER: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
CALLER: org.apache.log4j.helpers.ISO8601DateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
CALLER: org.apache.log4j.helpers.DateTimeDateFormat#<init>()
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#<init>()
CALLER: org.apache.log4j.helpers.PatternParser.DatePatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.text.DateFormat)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#<init>(org.apache.log4j.helpers.PatternParser,org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,java.lang.String)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: org.apache.log4j.helpers.PatternParser#addConverter(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.PatternParser#addToList(org.apache.log4j.helpers.PatternConverter)
	CALLEE: org.apache.log4j.helpers.FormattingInfo#reset()
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#getInstance()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getClassLoaderPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#<init>(org.osgi.framework.BundleContext)
CALLER: org.slf4j.helpers.NOPLogger#<init>()
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#<init>()
CALLER: static org.eclipse.jetty.server.ShutdownMonitor.Holder#<clinit>()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#<init>(org.eclipse.jetty.server.ShutdownMonitor.1)
CALLER: static org.eclipse.jetty.http.HttpHeaderValue#<clinit>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>()
	CALLEE: org.eclipse.jetty.http.HttpHeaderValue#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpHeaderValue#values()
CALLER: org.eclipse.jetty.http.HttpGenerator.ResponseInfo#<init>(org.eclipse.jetty.http.HttpVersion,org.eclipse.jetty.http.HttpFields,long,int,java.lang.String,boolean)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.Info#<init>(org.eclipse.jetty.http.HttpVersion,org.eclipse.jetty.http.HttpFields,long,org.eclipse.jetty.http.HttpGenerator.1)
CALLER: static org.eclipse.jetty.http.HttpFields#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>()
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#put(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.http.HttpGenerator.1#<init>()
	CALLEE: org.eclipse.jetty.http.HttpFields#<init>()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpHeader,org.eclipse.jetty.http.HttpHeaderValue)
CALLER: static org.eclipse.jetty.http.HttpMethod#<clinit>()
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>()
	CALLEE: org.eclipse.jetty.http.HttpMethod#<init>(java.lang.String,int)
	CALLEE: static org.eclipse.jetty.http.HttpMethod#values()
CALLER: static org.eclipse.jetty.http.HttpStatus#<clinit>()
	CALLEE: static org.eclipse.jetty.http.HttpStatus.Code#values()
	CALLEE: static org.eclipse.jetty.http.HttpStatus.Code#access$000(org.eclipse.jetty.http.HttpStatus.Code)
CALLER: org.eclipse.jetty.http.HttpGenerator.PreparedResponse#<init>(org.eclipse.jetty.http.HttpGenerator.1)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.PreparedResponse#<init>()
CALLER: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ClassLoaderDump#<init>(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpBeans(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.server.ServerConnector#open()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#getHost()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#getPort()
	CALLEE: org.eclipse.jetty.server.ServerConnector#isInheritChannel()
	CALLEE: org.eclipse.jetty.server.ServerConnector#getReuseAddress()
	CALLEE: org.eclipse.jetty.server.ServerConnector#getAcceptQueueSize()
CALLER: org.eclipse.jetty.server.AbstractConnector#doStart()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getExecutor()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#doStart()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#execute(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getConnectionFactory(java.lang.String)
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#<init>(org.eclipse.jetty.server.AbstractConnector,int,org.eclipse.jetty.server.AbstractConnector.1)
CALLER: org.eclipse.jetty.io.SelectorManager#chooseSelector()
	CALLEE: org.eclipse.jetty.io.SelectorManager#getSelectorCount()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#<init>(org.eclipse.jetty.io.SelectorManager,int)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#setStopTimeout(long)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#<init>()
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#execute(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#startThreads(int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getThreads()
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
CALLER: static org.eclipse.jetty.server.session.AbstractSessionIdManager#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#<init>()
CALLER: org.eclipse.jetty.server.Server#setSessionIdManager(org.eclipse.jetty.server.SessionIdManager)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#manage(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#isDeleteUnrestorableSessions()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#didActivate()
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.2#<init>(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.ScheduledFutureTask#<init>(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler,java.util.concurrent.ScheduledFuture)
CALLER: org.eclipse.jetty.http.PathMap#<init>()
	CALLEE: org.eclipse.jetty.http.PathMap#<init>(int)
CALLER: org.eclipse.jetty.http.PathMap#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#<init>(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#setMapped(java.lang.String)
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(org.eclipse.jetty.util.ArrayTernaryTrie,double)
CALLER: org.eclipse.jetty.servlet.ServletHandler#newServletHolder(org.eclipse.jetty.servlet.BaseHolder.Source)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#<init>(org.eclipse.jetty.servlet.BaseHolder.Source)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#getBeans(java.lang.Class)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlerByClass(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.util.List,java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#getHandlers()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#expandHandler(org.eclipse.jetty.server.Handler,java.util.List,java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#expandChildren(java.util.List,java.lang.Class)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#expandChildren(java.util.List,java.lang.Class)
CALLER: org.apache.log4j.Category#getAllAppenders()
	CALLEE: static org.apache.log4j.helpers.NullEnumeration#getInstance()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#getAllAppenders()
CALLER: org.apache.log4j.Category#fireRemoveAppenderEvent(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.Hierarchy#fireRemoveAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
CALLER: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer,boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(java.util.concurrent.Callable,boolean)
CALLER: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
	CALLEE: liquibase.util.StringUtils.ToStringFormatter#<init>()
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String,liquibase.util.StringUtils.StringUtilsFormatter)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#getClassLoaders()
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#getCompositeFilter(liquibase.servicelocator.PackageScanFilter)
	CALLEE: liquibase.servicelocator.CompositePackageScanFilter#<init>(java.util.Set)
	CALLEE: liquibase.servicelocator.CompositePackageScanFilter#addFilter(liquibase.servicelocator.PackageScanFilter)
CALLER: liquibase.osgi.OSGiPackageScanClassResolver#find(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#matches(java.lang.Class)
	CALLEE: liquibase.servicelocator.CompositePackageScanFilter#matches(java.lang.Class)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#find(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getClassLoaders()
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#findAllClasses(java.lang.String,java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#findInAllClasses(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#shutdownSessions()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#save(boolean)
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#unhook()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.Throwable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
CALLER: liquibase.database.OfflineConnection#<init>(java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String)
	CALLEE: static liquibase.database.OfflineConnection.OutputLiquibaseSql#fromString(java.lang.String)
	CALLEE: static liquibase.parser.SnapshotParserFactory#getInstance()
	CALLEE: liquibase.parser.SnapshotParserFactory#getParser(java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.logging.LogFactory#getInstance()
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
CALLER: liquibase.database.DatabaseFactory#findDefaultDriver(java.lang.String)
	CALLEE: liquibase.database.DatabaseFactory#getImplementedDatabases()
CALLER: liquibase.exception.DatabaseException#<init>(java.lang.String)
	CALLEE: liquibase.exception.LiquibaseException#<init>(java.lang.String)
CALLER: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.exception.LiquibaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.core.UnsupportedDatabase#<init>()
	CALLEE: liquibase.database.AbstractJdbcDatabase#<init>()
CALLER: liquibase.database.core.UnsupportedDatabase#setConnection(liquibase.database.DatabaseConnection)
	CALLEE: liquibase.database.AbstractJdbcDatabase#setConnection(liquibase.database.DatabaseConnection)
	CALLEE: liquibase.database.core.UnsupportedDatabase#findCurrentDateTimeFunction()
CALLER: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo,int)
	CALLEE: org.apache.log4j.helpers.PatternConverter#<init>(org.apache.log4j.helpers.FormattingInfo)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getClassLoaderPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.3#<init>(java.lang.Class)
CALLER: org.slf4j.helpers.MarkerIgnoringBase#<init>()
	CALLEE: org.slf4j.helpers.NamedLoggerBase#<init>()
CALLER: org.eclipse.jetty.server.ShutdownMonitor#<init>(org.eclipse.jetty.server.ShutdownMonitor.1)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#<init>()
CALLER: org.eclipse.jetty.http.HttpHeaderValue#<init>(java.lang.String,int,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#toBuffer(java.lang.String)
CALLER: org.eclipse.jetty.http.HttpGenerator.Info#<init>(org.eclipse.jetty.http.HttpVersion,org.eclipse.jetty.http.HttpFields,long,org.eclipse.jetty.http.HttpGenerator.1)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.Info#<init>(org.eclipse.jetty.http.HttpVersion,org.eclipse.jetty.http.HttpFields,long)
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#<init>()
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(int)
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#isCaseInsensitive()
CALLER: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpHeader,org.eclipse.jetty.http.HttpHeaderValue)
	CALLEE: org.eclipse.jetty.http.HttpHeaderValue#toString()
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpHeader,java.lang.String)
CALLER: org.eclipse.jetty.http.HttpMethod#<init>(java.lang.String,int)
	CALLEE: static org.eclipse.jetty.util.StringUtil#getBytes(java.lang.String)
CALLER: static org.eclipse.jetty.http.HttpStatus.Code#<clinit>()
	CALLEE: org.eclipse.jetty.http.HttpStatus.Code#<init>(java.lang.String,int,int,java.lang.String)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpBeans(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.servlet.Holder#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ClassLoaderDump#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.io.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpThis(java.lang.Appendable)
CALLER: org.eclipse.jetty.server.AbstractConnector.Acceptor#<init>(org.eclipse.jetty.server.AbstractConnector,int,org.eclipse.jetty.server.AbstractConnector.1)
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#<init>(org.eclipse.jetty.server.AbstractConnector,int)
CALLER: static org.eclipse.jetty.io.SelectorManager.State#<clinit>()
	CALLEE: org.eclipse.jetty.io.SelectorManager.State#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.util.ConcurrentArrayQueue#<clinit>()
	CALLEE: static org.eclipse.jetty.util.MemoryUtils#getIntegersPerCacheLine()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.1#<init>()
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#<init>()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#<init>(int)
CALLER: org.eclipse.jetty.util.BlockingArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.BlockingArrayQueue#grow()
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#<init>()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#<init>()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#newSession(long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSessionAttributes(java.io.InputStream,int,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setRequests(int)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#addSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession)
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#increment()
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: org.eclipse.jetty.http.PathMap#<init>(int)
	CALLEE: org.eclipse.jetty.http.PathMap#<init>(int,boolean)
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(org.eclipse.jetty.util.ArrayTernaryTrie,double)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#<init>(boolean)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#isCaseInsensitive()
CALLER: com.zaxxer.hikari.pool.HikariPool.HouseKeeper#run()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#reserve(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#updateLeakDetectionThreshold(long)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#values(int)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.HikariConfig#getLeakDetectionThreshold()
	CALLEE: com.zaxxer.hikari.HikariConfig#getConnectionTimeout()
	CALLEE: com.zaxxer.hikari.HikariConfig#getValidationTimeout()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$700()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$800(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#logPoolState(java.lang.String[])
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#plusMillis(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#plusMillis(long,long)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$900(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.HikariConfig#getIdleTimeout()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$1000(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedDisplayString(long,long)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#softEvictConnections()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$1100(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$600(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.HikariConfig#getMinimumIdle()
CALLER: com.zaxxer.hikari.pool.ProxyLeakTask#run()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static org.apache.log4j.helpers.NullEnumeration#<clinit>()
	CALLEE: org.apache.log4j.helpers.NullEnumeration#<init>()
CALLER: static org.glassfish.jersey.internal.Errors#process(java.util.concurrent.Callable,boolean)
	CALLEE: org.glassfish.jersey.internal.Errors#<init>()
	CALLEE: org.glassfish.jersey.internal.Errors#preProcess()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.5#call()
	CALLEE: org.glassfish.jersey.internal.Errors#postProcess(boolean)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.3#call()
	CALLEE: org.glassfish.jersey.internal.Errors.2#call()
	CALLEE: org.glassfish.jersey.internal.Errors.1#call()
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller.1#call()
CALLER: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String,liquibase.util.StringUtils.StringUtilsFormatter)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: liquibase.util.StringUtils.ToStringFormatter#toString(java.lang.Object)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#findAllClasses(java.lang.String,java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInDirectory(java.lang.String,java.io.File,java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInJar(java.lang.String,java.io.InputStream,java.lang.ClassLoader,java.lang.String,java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: liquibase.servicelocator.WebSpherePackageScanClassResolver#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#customResourceLocator(java.net.URL)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#findInAllClasses(liquibase.servicelocator.PackageScanFilter,java.lang.String,java.util.Set)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getFoundClasses(java.lang.String)
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#matches(java.lang.Class)
	CALLEE: liquibase.servicelocator.CompositePackageScanFilter#matches(java.lang.Class)
CALLER: static liquibase.database.OfflineConnection.OutputLiquibaseSql#<clinit>()
	CALLEE: liquibase.database.OfflineConnection.OutputLiquibaseSql#<init>(java.lang.String,int)
CALLER: static liquibase.database.OfflineConnection.OutputLiquibaseSql#fromString(java.lang.String)
	CALLEE: static liquibase.database.OfflineConnection.OutputLiquibaseSql#valueOf(java.lang.String)
CALLER: static liquibase.parser.SnapshotParserFactory#getInstance()
	CALLEE: liquibase.parser.SnapshotParserFactory#<init>()
CALLER: liquibase.database.AbstractJdbcDatabase#setConnection(liquibase.database.DatabaseConnection)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoCommitMode()
	CALLEE: liquibase.database.OfflineConnection#getAutoCommit()
	CALLEE: liquibase.database.jvm.JdbcConnection#getAutoCommit()
	CALLEE: liquibase.database.OfflineConnection#getURL()
	CALLEE: liquibase.database.jvm.JdbcConnection#getURL()
	CALLEE: liquibase.database.OfflineConnection#getConnectionUserName()
	CALLEE: liquibase.database.jvm.JdbcConnection#getConnectionUserName()
	CALLEE: liquibase.database.OfflineConnection#attached(liquibase.database.Database)
	CALLEE: liquibase.database.jvm.JdbcConnection#attached(liquibase.database.Database)
	CALLEE: liquibase.database.OfflineConnection#setAutoCommit(boolean)
	CALLEE: liquibase.database.jvm.JdbcConnection#setAutoCommit(boolean)
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(int)
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(boolean,int)
CALLER: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.http.HttpHeader)
	CALLEE: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpField)
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getState()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpBeans(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#getMaxThreads()
	CALLEE: org.eclipse.jetty.util.ConcurrentHashSet#iterator()
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#isDetailedDump()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.2#<init>(org.eclipse.jetty.util.thread.QueuedThreadPool,java.lang.Thread,boolean,java.lang.StackTraceElement[])
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.io.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: static org.eclipse.jetty.util.component.AbstractLifeCycle#getState(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#<init>(int)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#newBlock()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#newSession(long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,long,long,java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#restoreSessionAttributes(java.io.InputStream,int,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.util.ClassLoadingObjectInputStream#<init>(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#addSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#getClusterId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
CALLER: org.eclipse.jetty.server.session.HashSessionManager#addSession(org.eclipse.jetty.server.session.AbstractSession)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#increment()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
CALLER: org.eclipse.jetty.http.PathMap#<init>(int,boolean)
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(boolean)
CALLER: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedDisplayString(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedNanos(long,long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedNanos(long,long)
CALLER: com.zaxxer.hikari.pool.HikariPool#softEvictConnections()
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#values()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)
CALLER: static com.zaxxer.hikari.pool.HikariPool#access$1100(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#fillPool()
CALLER: static com.zaxxer.hikari.pool.PoolEntry#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry.1#<init>()
CALLER: org.glassfish.jersey.model.internal.ComponentBag.5#call()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.5#call()
CALLER: org.glassfish.jersey.internal.Errors#postProcess(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#processErrors(boolean)
CALLER: liquibase.util.StringUtils.ToStringFormatter#toString(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
CALLER: liquibase.servicelocator.WebSpherePackageScanClassResolver#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#getResources(java.lang.ClassLoader,java.lang.String)
CALLER: liquibase.logging.core.DefaultLogger#warning(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInDirectory(java.lang.String,java.io.File,java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInDirectory(java.lang.String,java.io.File,java.lang.ClassLoader)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadClass(java.lang.String,java.lang.ClassLoader)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInJar(java.lang.String,java.io.InputStream,java.lang.ClassLoader,java.lang.String,java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadImplementationsInJar(java.lang.String,java.io.InputStream,java.lang.ClassLoader,java.lang.String,java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#loadClass(java.lang.String,java.lang.ClassLoader)
CALLER: liquibase.logging.core.DefaultLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
CALLER: liquibase.parser.SnapshotParserFactory#<init>()
	CALLEE: static liquibase.servicelocator.ServiceLocator#getInstance()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.servicelocator.ServiceLocator#findClasses(java.lang.Class)
	CALLEE: liquibase.parser.SnapshotParserFactory.1#<init>(liquibase.parser.SnapshotParserFactory)
	CALLEE: liquibase.parser.SnapshotParserFactory#register(liquibase.parser.SnapshotParser)
CALLER: liquibase.database.AbstractJdbcDatabase#getAutoCommitMode()
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsDDLInTransaction()
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(boolean,int)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#<init>(boolean)
CALLER: org.eclipse.jetty.http.HttpFields#remove(org.eclipse.jetty.http.HttpHeader)
	CALLEE: org.eclipse.jetty.http.HttpField#getHeader()
CALLER: org.eclipse.jetty.http.HttpFields#put(org.eclipse.jetty.http.HttpField)
	CALLEE: org.eclipse.jetty.http.HttpField#isSame(org.eclipse.jetty.http.HttpField)
CALLER: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.io.SelectorManager#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool.2#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ClassLoaderDump#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.Server#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dumpObject(java.lang.Appendable,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.Holder#dump(java.lang.Appendable,java.lang.String)
CALLER: static org.eclipse.jetty.util.component.AbstractLifeCycle#getState(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#newBlock()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#getBlockSize()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#<init>(int)
CALLER: static org.eclipse.jetty.server.session.HashedSession#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.session.HashedSession#<init>(org.eclipse.jetty.server.session.HashSessionManager,long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.MemSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
	CALLEE: static org.eclipse.jetty.util.Atomics#updateMax(java.util.concurrent.atomic.AtomicLong,long)
CALLER: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(boolean)
	CALLEE: org.eclipse.jetty.util.ArrayTernaryTrie#<init>(boolean,int)
CALLER: com.zaxxer.hikari.pool.HikariPool#softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#reserve(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#markEvicted()
CALLER: com.zaxxer.hikari.pool.HikariPool#fillPool()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMaximumPoolSize()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#addBagItem()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#getIdleConnections()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMinimumIdle()
	CALLEE: com.zaxxer.hikari.pool.HikariPool.3#<init>(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
CALLER: org.glassfish.jersey.model.internal.ComponentBag.5#call()
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#access$000(org.glassfish.jersey.model.internal.ComponentBag)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_TYPE_ALREADY_REGISTERED(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#access$100(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#access$200(org.glassfish.jersey.model.internal.ComponentBag)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.ObjectPredicate.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.7#apply(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.Errors#processErrors(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#logErrors(java.util.Collection)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessagesException#<init>(java.util.List,org.glassfish.jersey.internal.Errors.1)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#loadClass(java.lang.String,java.lang.ClassLoader)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.logging.core.DefaultLogger#severe(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#addFoundClass(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ClassLoaderDump#<init>(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpBeans(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getClassLoader()
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeEntrySet()
CALLER: static org.eclipse.jetty.util.ConcurrentArrayQueue.Block#<clinit>()
	CALLEE: static org.eclipse.jetty.util.MemoryUtils#getIntegersPerCacheLine()
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#<init>(int)
	CALLEE: static org.eclipse.jetty.util.ConcurrentArrayQueue#access$000()
CALLER: org.eclipse.jetty.server.session.MemSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
CALLER: com.zaxxer.hikari.util.ConcurrentBag#reserve(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#compareAndSet(int,int)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_TYPE_ALREADY_REGISTERED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_TYPE_ALREADY_REGISTERED(java.lang.Object)
CALLER: static org.glassfish.jersey.Severity#<clinit>()
	CALLEE: org.glassfish.jersey.Severity#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.internal.Errors#error(java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
CALLER: static org.glassfish.jersey.model.internal.ComponentBag#access$100(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#modelFor(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
CALLER: static org.glassfish.jersey.internal.Errors#logErrors(java.util.Collection)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_MSG(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#WARNING_MSG(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#HINT_MSG(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERRORS_AND_WARNINGS_DETECTED(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#WARNINGS_DETECTED(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#HINTS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getMessage()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getSeverity()
CALLER: org.glassfish.jersey.internal.Errors.ErrorMessagesException#<init>(java.util.List,org.glassfish.jersey.internal.Errors.1)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessagesException#<init>(java.util.List)
CALLER: liquibase.servicelocator.DefaultPackageScanClassResolver#addFoundClass(java.lang.Class)
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
	CALLEE: liquibase.servicelocator.DefaultPackageScanClassResolver#addFoundClass(java.lang.String,java.lang.Class)
CALLER: org.eclipse.jetty.util.AttributesMap#getAttributeEntrySet()
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: org.eclipse.jetty.server.session.AbstractSession#<init>(org.eclipse.jetty.server.session.AbstractSessionManager,long,long,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#getNodeId(java.lang.String,javax.servlet.http.HttpServletRequest)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_TYPE_ALREADY_REGISTERED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#<init>(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity,org.glassfish.jersey.internal.Errors.1)
CALLER: static org.glassfish.jersey.model.internal.ComponentBag#modelFor(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getProviderContracts(java.lang.Class)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#asMap(java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#isSupportedContract(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#CONTRACT_NOT_SUPPORTED(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#CONTRACT_NOT_ASSIGNABLE(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.model.ContractProvider#builder()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#addContracts(java.util.Map)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#defaultPriority(int)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.4#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#scope(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#addNameBinding(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.Errors.3#<clinit>()
	CALLEE: static org.glassfish.jersey.Severity#values()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_MSG(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#WARNING_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNING_MSG(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#HINT_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableHINT_MSG(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERRORS_AND_WARNINGS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERRORS_AND_WARNINGS_DETECTED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#WARNINGS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNINGS_DETECTED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#HINTS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableHINTS_DETECTED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#NO_ERROR_PROCESSING_IN_SCOPE()
CALLER: org.glassfish.jersey.internal.Errors.ErrorMessage#<init>(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity,org.glassfish.jersey.internal.Errors.1)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#<init>(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getProviderContracts(java.lang.Class)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#computeProviderContracts(java.lang.Class,java.util.Set)
CALLER: static org.glassfish.jersey.internal.inject.Providers#<clinit>()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getJaxRsProviderInterfaces()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getExternalProviderInterfaces()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#CONTRACT_NOT_SUPPORTED(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableCONTRACT_NOT_SUPPORTED(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#CONTRACT_NOT_ASSIGNABLE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableCONTRACT_NOT_ASSIGNABLE(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.model.ContractProvider#builder()
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#<init>(org.glassfish.jersey.model.ContractProvider.1)
CALLER: org.glassfish.jersey.server.ResourceConfig.State.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State.1#apply(org.glassfish.jersey.model.ContractProvider.Builder)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNING_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableHINT_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERRORS_AND_WARNINGS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNINGS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableHINTS_DETECTED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#NO_ERROR_PROCESSING_IN_SCOPE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableNO_ERROR_PROCESSING_IN_SCOPE()
CALLER: static org.glassfish.jersey.internal.inject.Providers#computeProviderContracts(java.lang.Class,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#isSupportedContract(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#computeProviderContracts(java.lang.Class,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getImplementedContracts(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableCONTRACT_NOT_SUPPORTED(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableCONTRACT_NOT_ASSIGNABLE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.model.ContractProvider.Builder#<clinit>()
	CALLEE: org.glassfish.jersey.model.ContractProvider#<init>(java.lang.Class,java.util.Map,int,java.util.Set,org.glassfish.jersey.model.ContractProvider.1)
CALLER: org.glassfish.jersey.model.ContractProvider.Builder#<init>(org.glassfish.jersey.model.ContractProvider.1)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig.State.1#apply(org.glassfish.jersey.model.ContractProvider.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource#getPath(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#scope(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#build()
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#getContracts()
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#getScope()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableNO_ERROR_PROCESSING_IN_SCOPE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.inject.Providers.ProviderRuntime#<clinit>()
	CALLEE: org.glassfish.jersey.internal.inject.Providers.ProviderRuntime#<init>(java.lang.String,int,javax.ws.rs.RuntimeType)
CALLER: org.glassfish.jersey.model.ContractProvider#<init>(java.lang.Class,java.util.Map,int,java.util.Set,org.glassfish.jersey.model.ContractProvider.1)
	CALLEE: org.glassfish.jersey.model.ContractProvider#<init>(java.lang.Class,java.util.Map,int,java.util.Set)
CALLER: org.glassfish.jersey.model.ContractProvider.Builder#<init>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newHashMap()
CALLER: static org.glassfish.jersey.server.model.Resource#getPath(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.internal.ModelHelper#getAnnotatedResourceClass(java.lang.Class)
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#dumpThis(java.lang.Appendable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getState()
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStart()
CALLER: org.eclipse.jetty.server.session.HashedSession#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#setScavengePeriod(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#setMaxInactiveInterval(int)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getMaxInactiveInterval()
CALLER: org.eclipse.jetty.server.session.AbstractSession#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#changeAttribute(java.lang.String,java.lang.Object)
CALLER: liquibase.parser.SnapshotParserFactory#getParser(java.lang.String,liquibase.resource.ResourceAccessor)
	CALLEE: liquibase.exception.UnknownFormatException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSession#didActivate()
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.MemSession#getAttributeMap()
CALLER: liquibase.servicelocator.CompositePackageScanFilter#matches(java.lang.Class)
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#matches(java.lang.Class)
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#hook()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
CALLER: liquibase.database.jvm.JdbcConnection#getDatabaseProductName()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#getAutoCommit()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#getURL()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#getConnectionUserName()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.OfflineConnection#attached(liquibase.database.Database)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: liquibase.logging.LogFactory#getLog()
	CALLEE: static liquibase.logging.LogFactory#getInstance()
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#register(liquibase.changelog.ChangeLogHistoryService)
	CALLEE: liquibase.logging.core.DefaultLogger#warning(java.lang.String,java.lang.Throwable)
	CALLEE: static liquibase.util.ObjectUtil#setProperty(java.lang.Object,java.lang.String,java.lang.String)
	CALLEE: liquibase.database.AbstractJdbcDatabase#setCaseSensitive(java.lang.Boolean)
	CALLEE: liquibase.database.OfflineConnection#createChangeLogHistoryService(liquibase.database.Database)
CALLER: liquibase.database.jvm.JdbcConnection#attached(liquibase.database.Database)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.database.jvm.JdbcConnection#getWrappedConnection()
	CALLEE: liquibase.database.AbstractJdbcDatabase#addReservedWords(java.util.Collection)
	CALLEE: liquibase.logging.core.DefaultLogger#info(java.lang.String,java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#setAutoCommit(boolean)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#doStart()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#wakeup()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#getStopTimeout()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Stop#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,org.eclipse.jetty.io.SelectorManager.1)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Stop#await(long)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#start()
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#<init>(org.eclipse.jetty.server.ShutdownMonitor)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#getResourceBundle(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#findEntries(org.osgi.framework.Bundle,java.lang.String,java.lang.String,boolean)
CALLER: com.zaxxer.hikari.pool.PoolEntry.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry.1#compare(com.zaxxer.hikari.pool.PoolEntry,com.zaxxer.hikari.pool.PoolEntry)
CALLER: liquibase.parser.SnapshotParserFactory.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: liquibase.parser.SnapshotParserFactory.1#compare(liquibase.parser.SnapshotParser,liquibase.parser.SnapshotParser)
CALLER: com.zaxxer.hikari.util.ConcurrentBag#values(int)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getState()
CALLER: jersey.repackaged.com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner.MapJoiner#<init>(jersey.repackaged.com.google.common.base.Joiner,java.lang.String,jersey.repackaged.com.google.common.base.Joiner.1)
CALLER: com.zaxxer.hikari.pool.HikariPool.1#run()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#quietlyCloseConnection(java.sql.Connection,java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariPool.3#run()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#logPoolState(java.lang.String[])
CALLER: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#call()
	CALLEE: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#call()
CALLER: liquibase.LabelExpression#matches(liquibase.Labels)
	CALLEE: liquibase.LabelExpression#matches(java.lang.String,liquibase.Labels)
CALLER: org.apache.log4j.Category#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#<init>()
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#addAppender(org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.Hierarchy#fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#fireAddAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)
CALLER: org.slf4j.impl.SimpleLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#<init>(java.lang.String)
CALLER: org.apache.log4j.Category#warn(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: org.apache.log4j.Category#info(java.lang.Object)
	CALLEE: org.apache.log4j.Hierarchy#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#isDisabled(int)
	CALLEE: org.apache.log4j.spi.NOPLogger#getEffectiveLevel()
	CALLEE: org.apache.log4j.Category#getEffectiveLevel()
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
CALLER: liquibase.database.AbstractJdbcDatabase#commit()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getConnection()
	CALLEE: liquibase.database.OfflineConnection#commit()
	CALLEE: liquibase.database.jvm.JdbcConnection#commit()
CALLER: liquibase.database.AbstractJdbcDatabase#markChangeSetExecStatus(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#setExecType(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
CALLER: liquibase.database.AbstractJdbcDatabase#getRunStatus(liquibase.changelog.ChangeSet)
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getRunStatus(liquibase.changelog.ChangeSet)
CALLER: liquibase.database.AbstractJdbcDatabase#getRanChangeSetList()
	CALLEE: static liquibase.changelog.ChangeLogHistoryServiceFactory#getInstance()
	CALLEE: liquibase.changelog.ChangeLogHistoryServiceFactory#getChangeLogService(liquibase.database.Database)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#getRanChangeSets()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseChangeLogTableName()
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
CALLER: liquibase.database.AbstractJdbcDatabase#getLiquibaseSchemaName()
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getDefaultSchemaName()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getProperty(java.lang.Class,java.lang.String)
CALLER: liquibase.database.AbstractJdbcDatabase#getLiquibaseCatalogName()
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getDefaultCatalogName()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getProperty(java.lang.Class,java.lang.String)
CALLER: liquibase.database.AbstractJdbcDatabase#isSafeToRunUpdate()
	CALLEE: liquibase.database.OfflineConnection#getURL()
	CALLEE: liquibase.database.jvm.JdbcConnection#getURL()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getConnection()
CALLER: liquibase.database.AbstractJdbcDatabase#getDefaultSchemaName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsSchemas()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getDefaultCatalogName()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getConnectionSchemaName()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseProductVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.database.OfflineConnection#getDatabaseProductVersion()
	CALLEE: liquibase.database.jvm.JdbcConnection#getDatabaseProductVersion()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseProductName()
	CALLEE: liquibase.database.OfflineConnection#getDatabaseProductName()
	CALLEE: liquibase.database.jvm.JdbcConnection#getDatabaseProductName()
	CALLEE: liquibase.database.core.UnsupportedDatabase#getDefaultDatabaseProductName()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseMinorVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.database.OfflineConnection#getDatabaseMinorVersion()
	CALLEE: liquibase.database.jvm.JdbcConnection#getDatabaseMinorVersion()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseMajorVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.database.OfflineConnection#getDatabaseMajorVersion()
	CALLEE: liquibase.database.jvm.JdbcConnection#getDatabaseMajorVersion()
CALLER: liquibase.database.AbstractJdbcDatabase#getDatabaseChangeLogLockTableName()
	CALLEE: static liquibase.configuration.LiquibaseConfiguration#getInstance()
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
CALLER: liquibase.database.AbstractJdbcDatabase#getAutoIncrementClause(java.math.BigInteger,java.math.BigInteger)
	CALLEE: liquibase.database.AbstractJdbcDatabase#supportsAutoIncrement()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementClause()
	CALLEE: liquibase.database.AbstractJdbcDatabase#generateAutoIncrementStartWith(java.math.BigInteger)
	CALLEE: liquibase.database.AbstractJdbcDatabase#generateAutoIncrementBy(java.math.BigInteger)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementOpening()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementStartWithClause()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementByClause()
	CALLEE: liquibase.database.AbstractJdbcDatabase#getAutoIncrementClosing()
CALLER: org.traccar.database.QueryBuilder#executeUpdate()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#close()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#close()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#getGeneratedKeys()
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#execute()
CALLER: org.traccar.database.QueryBuilder.1#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getBoolean(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.2#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getInt(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.3#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getLong(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.4#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getDouble(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.5#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getString(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.6#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getTimestamp(java.lang.String)
CALLER: org.traccar.database.QueryBuilder.7#process(java.lang.Object,java.sql.ResultSet)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: static org.traccar.model.MiscFormatter#fromJson(javax.json.JsonObject)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#getString(java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariPool#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#toString()
CALLER: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#getValue()
	CALLEE: org.eclipse.jetty.http.HttpField#getName()
CALLER: liquibase.database.AbstractJdbcDatabase#equals(java.lang.Object)
	CALLEE: liquibase.database.jvm.JdbcConnection#equals(java.lang.Object)
CALLER: liquibase.database.AbstractJdbcDatabase#hashCode()
	CALLEE: liquibase.database.jvm.JdbcConnection#hashCode()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#changeSetsMatch(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#<init>(boolean,java.lang.String,java.lang.Class)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#checksumChanged(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
CALLER: liquibase.changelog.filter.ContextChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#<init>(boolean,java.lang.String,java.lang.Class)
	CALLEE: liquibase.Contexts#isEmpty()
	CALLEE: static liquibase.ContextExpression#matchesAll(java.util.Collection,liquibase.Contexts)
	CALLEE: liquibase.Contexts#toString()
CALLER: liquibase.changelog.filter.LabelChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.LabelExpression#matches(liquibase.Labels)
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#<init>(boolean,java.lang.String,java.lang.Class)
	CALLEE: liquibase.LabelExpression#isEmpty()
	CALLEE: liquibase.LabelExpression#toString()
CALLER: liquibase.changelog.filter.DbmsChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: static liquibase.database.DatabaseList#definitionMatches(java.util.Collection,liquibase.database.Database,boolean)
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
	CALLEE: liquibase.database.core.UnsupportedDatabase#getShortName()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#<init>(boolean,java.lang.String,java.lang.Class)
CALLER: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
CALLER: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: static org.apache.log4j.CategoryKey#class$(java.lang.String)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.DumpKeys#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.util.List,org.eclipse.jetty.io.SelectorManager.1)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.DumpKeys#await(long,java.util.concurrent.TimeUnit)
CALLER: org.eclipse.jetty.server.session.HashSessionManager.Scavenger#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#scavenge()
	CALLEE: static org.eclipse.jetty.server.session.HashSessionManager#access$000(org.eclipse.jetty.server.session.HashSessionManager)
	CALLEE: static org.eclipse.jetty.server.session.HashSessionManager#access$102(org.eclipse.jetty.server.session.HashSessionManager,org.eclipse.jetty.util.thread.Scheduler.Task)
CALLER: org.eclipse.jetty.server.session.HashSessionManager.Saver#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: static org.eclipse.jetty.server.session.HashSessionManager#access$000(org.eclipse.jetty.server.session.HashSessionManager)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#saveSessions(boolean)
	CALLEE: static org.eclipse.jetty.server.session.HashSessionManager#access$202(org.eclipse.jetty.server.session.HashSessionManager,org.eclipse.jetty.util.thread.Scheduler.Task)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#doStop()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStop()
CALLER: org.eclipse.jetty.http.HttpField#isSame(org.eclipse.jetty.http.HttpField)
	CALLEE: org.eclipse.jetty.http.HttpField#getHeader()
	CALLEE: org.eclipse.jetty.http.HttpField#getName()
CALLER: org.eclipse.jetty.util.thread.NonBlockingThread#run()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#run()
CALLER: org.eclipse.jetty.server.AbstractConnector.Acceptor#run()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$100(org.eclipse.jetty.server.AbstractConnector)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$200(org.eclipse.jetty.server.AbstractConnector)
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#isAccepting()
	CALLEE: org.eclipse.jetty.server.ServerConnector#accept(int)
	CALLEE: static org.eclipse.jetty.server.AbstractConnector#access$300(org.eclipse.jetty.server.AbstractConnector)
CALLER: org.eclipse.jetty.util.thread.ShutdownThread#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isDebugEnabled()
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.SimpleLogger#isErrorEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isErrorEnabled()
CALLER: org.eclipse.jetty.servlet.ServletHolder#compareTo(java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#compareTo(org.eclipse.jetty.servlet.ServletHolder)
CALLER: org.eclipse.jetty.servlet.ServletHolder#initialize()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#initialize()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#initServlet()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#isStartWithUnavailable()
CALLER: org.eclipse.jetty.servlet.ServletHolder#doStart()
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#getClassNameForJsp(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.Holder#setClassName(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getClassName()
	CALLEE: org.eclipse.jetty.servlet.Holder#setInitParameter(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#doStart()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(javax.servlet.UnavailableException)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#checkServletType()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#checkInitOnStartup()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.Config#<init>(org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#<init>(org.eclipse.jetty.servlet.ServletHolder,org.eclipse.jetty.servlet.ServletHolder.1)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#isStartWithUnavailable()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServlet(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getIdentityService()
	CALLEE: org.eclipse.jetty.servlet.Holder#getInitParameters()
CALLER: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#hashCode()
CALLER: org.eclipse.jetty.servlet.ServletHolder#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#destroyInstance(java.lang.Object)
CALLER: org.eclipse.jetty.servlet.Holder#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#dump(java.lang.Appendable,java.lang.String)
CALLER: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
CALLER: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.1#newThread(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#access$100(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler)
	CALLEE: static org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#access$002(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler,java.lang.Thread)
	CALLEE: static org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#access$200(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler)
	CALLEE: static org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#access$300(org.eclipse.jetty.util.thread.ScheduledExecutorScheduler)
CALLER: org.eclipse.jetty.util.thread.QueuedThreadPool.2#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
CALLER: org.eclipse.jetty.servlet.ServletHolder#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#compareTo(org.eclipse.jetty.servlet.ServletHolder)
CALLER: org.eclipse.jetty.server.ServerConnector#shutdown()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#shutdown()
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#doStart()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#initRandom()
CALLER: org.eclipse.jetty.server.session.AbstractSession#changeAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.MemSession#doPutOrRemove(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#callSessionAttributeListeners(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: liquibase.exception.UnknownFormatException#<init>(java.lang.String)
	CALLEE: liquibase.exception.LiquibaseException#<init>(java.lang.String)
CALLER: static liquibase.util.ObjectUtil#setProperty(java.lang.Object,java.lang.String,java.lang.String)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
	CALLEE: static liquibase.util.ObjectUtil#getWriteMethod(java.lang.Object,java.lang.String)
	CALLEE: liquibase.statement.DatabaseFunction#<init>(java.lang.String)
	CALLEE: liquibase.statement.SequenceNextValueFunction#<init>(java.lang.String)
	CALLEE: liquibase.statement.SequenceCurrentValueFunction#<init>(java.lang.String)
CALLER: liquibase.database.OfflineConnection#createChangeLogHistoryService(liquibase.database.Database)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#<init>(liquibase.database.Database,java.io.File,boolean,boolean)
CALLER: liquibase.logging.core.DefaultLogger#info(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.logging.core.DefaultLogger#getLogLevel()
	CALLEE: liquibase.logging.core.DefaultLogger#print(liquibase.logging.LogLevel,java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#offer(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#newBlock()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#getBlockSize()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#getTailBlock()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#tail()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#peek(int)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#store(int,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#updateTailBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#next()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue.Block#link(org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
CALLER: static org.eclipse.jetty.io.SelectorManager.1#<clinit>()
	CALLEE: static org.eclipse.jetty.io.SelectorManager.State#values()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Stop#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,org.eclipse.jetty.io.SelectorManager.1)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Stop#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#<init>(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#startListenSocket()
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#findEntries(org.osgi.framework.Bundle,java.lang.String,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.2#<init>(org.osgi.framework.Bundle,java.lang.String,java.lang.String,boolean)
CALLER: jersey.repackaged.com.google.common.base.Joiner.MapJoiner#<init>(jersey.repackaged.com.google.common.base.Joiner,java.lang.String,jersey.repackaged.com.google.common.base.Joiner.1)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner.MapJoiner#<init>(jersey.repackaged.com.google.common.base.Joiner,java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariPool.PoolEntryCreator#call()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMaximumPoolSize()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$600(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$300(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$400(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$500(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#add(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: static com.zaxxer.hikari.util.UtilityElf#quietlySleep(long)
CALLER: liquibase.LabelExpression#matches(java.lang.String,liquibase.Labels)
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.String)
	CALLEE: liquibase.LabelExpression#matches(java.lang.String,liquibase.Labels)
CALLER: org.slf4j.impl.SimpleLogger#<init>(java.lang.String)
	CALLEE: static org.slf4j.impl.SimpleLogger#stringToLevel(java.lang.String)
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#<init>()
	CALLEE: org.slf4j.impl.SimpleLogger#recursivelyComputeLevelString()
CALLER: org.apache.log4j.Category#forcedLog(java.lang.String,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.LoggingEvent#<init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.spi.NOPLogger#callAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Category#callAppenders(org.apache.log4j.spi.LoggingEvent)
CALLER: liquibase.configuration.LiquibaseConfiguration#getProperty(java.lang.Class,java.lang.String)
	CALLEE: liquibase.configuration.LiquibaseConfiguration#getConfiguration(java.lang.Class)
CALLER: liquibase.database.AbstractJdbcDatabase#getConnectionSchemaName()
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: liquibase.logging.core.DefaultLogger#info(java.lang.String,java.lang.Throwable)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getConnectionSchemaNameCallStatement()
	CALLEE: liquibase.statement.core.RawCallStatement#<init>(java.lang.String)
CALLER: liquibase.database.jvm.JdbcConnection#getDatabaseProductVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#getDatabaseMinorVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#getDatabaseMajorVersion()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: static javax.json.Json#createReader(java.io.Reader)
	CALLEE: static javax.json.spi.JsonProvider#provider()
CALLER: static org.traccar.model.MiscFormatter#fromJson(javax.json.JsonObject)
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
CALLER: liquibase.database.jvm.JdbcConnection#equals(java.lang.Object)
	CALLEE: liquibase.database.jvm.JdbcConnection#getUnderlyingConnection()
CALLER: liquibase.database.jvm.JdbcConnection#hashCode()
	CALLEE: liquibase.database.jvm.JdbcConnection#getUnderlyingConnection()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#changeSetsMatch(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#idsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#authorsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#pathsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#checksumChanged(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getLastCheckSum()
CALLER: static liquibase.ContextExpression#matchesAll(java.util.Collection,liquibase.Contexts)
	CALLEE: liquibase.Contexts#isEmpty()
CALLER: liquibase.Contexts#toString()
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
CALLER: liquibase.LabelExpression#toString()
	CALLEE: static liquibase.util.StringUtils#join(java.util.Collection,java.lang.String)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector.DumpKeys#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.util.List,org.eclipse.jetty.io.SelectorManager.1)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.DumpKeys#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.util.List)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#scavenge()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,long)
CALLER: org.eclipse.jetty.server.session.HashSessionManager#saveSessions(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopping()
	CALLEE: static org.eclipse.jetty.io.SelectorManager#access$500(org.eclipse.jetty.io.SelectorManager)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#select()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChanges()
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#isAccepting()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#isAccepting()
	CALLEE: org.eclipse.jetty.server.ServerConnector#isOpen()
CALLER: org.eclipse.jetty.server.ServerConnector#accept(int)
	CALLEE: org.eclipse.jetty.server.ServerConnector#accepted(java.nio.channels.SocketChannel)
CALLER: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#setHandlers(org.eclipse.jetty.server.Handler[])
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandlerContainer#getChildHandlers()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
CALLER: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$000(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#access$100(org.eclipse.jetty.util.component.ContainerLifeCycle.Bean)
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
CALLER: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
CALLER: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#getHandler()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#setHandler(org.eclipse.jetty.server.Handler)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStopped()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
CALLER: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: org.eclipse.jetty.util.MultiException#<init>()
	CALLEE: org.eclipse.jetty.util.MultiException#add(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.util.MultiException#ifExceptionThrowRuntime()
CALLER: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.helpers.SubstituteLogger#getEventRecordingLogger()
CALLER: org.eclipse.jetty.servlet.BaseHolder#initialize()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
CALLER: org.eclipse.jetty.servlet.ServletHolder#initServlet()
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(javax.servlet.UnavailableException)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.Config#<init>(org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#newInstance()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#isJspServlet()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#initJspServlet()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#detectJspContainer()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#initMultiPart()
	CALLEE: javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#init(javax.servlet.ServletConfig)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(java.lang.Throwable)
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder#getClassNameForJsp(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#getJspPackagePrefix()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#getPackageOfJspClass(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#getNameOfJspClass(java.lang.String)
CALLER: org.eclipse.jetty.servlet.Holder#setClassName(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#hashCode()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#setClassName(java.lang.String)
CALLER: org.eclipse.jetty.servlet.BaseHolder#doStart()
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: javax.servlet.UnavailableException#<init>(java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
CALLER: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(javax.servlet.UnavailableException)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: javax.servlet.UnavailableException#isPermanent()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#log(java.lang.String,java.lang.Throwable)
	CALLEE: javax.servlet.UnavailableException#getUnavailableSeconds()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#log(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder#checkServletType()
	CALLEE: javax.servlet.UnavailableException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletHolder#checkInitOnStartup()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#setInitOrder(int)
CALLER: org.eclipse.jetty.servlet.ServletHolder.Config#<init>(org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#<init>(org.eclipse.jetty.servlet.Holder)
CALLER: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#<init>(org.eclipse.jetty.servlet.ServletHolder,org.eclipse.jetty.servlet.ServletHolder.1)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#<init>(org.eclipse.jetty.servlet.ServletHolder)
CALLER: org.eclipse.jetty.servlet.ServletHolder#destroyInstance(java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#destroyServlet(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.websocket.servlet.WebSocketServlet#destroy()
	CALLEE: org.glassfish.jersey.servlet.ServletContainer#destroy()
	CALLEE: org.h2.server.web.WebServlet#destroy()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#destroy()
CALLER: org.eclipse.jetty.servlet.BaseHolder#dump(java.lang.Appendable,java.lang.String)
	CALLEE: static org.eclipse.jetty.util.component.AbstractLifeCycle#getState(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
CALLER: org.eclipse.jetty.server.AbstractNetworkConnector#shutdown()
	CALLEE: org.eclipse.jetty.server.ServerConnector#close()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#shutdown()
CALLER: org.eclipse.jetty.server.session.AbstractSessionIdManager#initRandom()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#deIdle()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#checkValid()
CALLER: org.eclipse.jetty.server.session.AbstractSession#callSessionAttributeListeners(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Parameter#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#equals(java.lang.Object)
	CALLEE: liquibase.changelog.RanChangeSet#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.AcceptableMediaType#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#equals(java.lang.Object)
	CALLEE: org.apache.log4j.CategoryKey#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#equals(java.lang.Object)
	CALLEE: org.traccar.database.GroupTree.TreeNode#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#equals(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#bindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: javax.ws.rs.core.MediaType#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#equals(java.lang.Object)
CALLER: static liquibase.util.ObjectUtil#getWriteMethod(java.lang.Object,java.lang.String)
	CALLEE: static liquibase.util.ObjectUtil#getMethods(java.lang.Object)
CALLER: liquibase.statement.SequenceNextValueFunction#<init>(java.lang.String)
	CALLEE: liquibase.statement.DatabaseFunction#<init>(java.lang.String)
CALLER: liquibase.statement.SequenceCurrentValueFunction#<init>(java.lang.String)
	CALLEE: liquibase.statement.DatabaseFunction#<init>(java.lang.String)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#<init>(liquibase.database.Database,java.io.File,boolean,boolean)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#<init>()
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#setDatabase(liquibase.database.Database)
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#updateTailBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#casTailBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#startListenSocket()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$202(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$600(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$1000(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$1100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$102(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$1200(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$1002(org.eclipse.jetty.server.ShutdownMonitor,int)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$200(org.eclipse.jetty.server.ShutdownMonitor)
CALLER: jersey.repackaged.com.google.common.base.Joiner.MapJoiner#<init>(jersey.repackaged.com.google.common.base.Joiner,java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.zaxxer.hikari.pool.HikariPool#access$500(com.zaxxer.hikari.pool.HikariPool)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#createPoolEntry()
CALLER: com.zaxxer.hikari.util.ConcurrentBag#add(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String)
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#signal()
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String)
CALLER: org.slf4j.impl.SimpleLogger#recursivelyComputeLevelString()
	CALLEE: static org.slf4j.impl.SimpleLogger#getStringProperty(java.lang.String,java.lang.String)
CALLER: org.apache.log4j.spi.LoggingEvent#<init>(java.lang.String,org.apache.log4j.Category,org.apache.log4j.Priority,java.lang.Object,java.lang.Throwable)
	CALLEE: org.apache.log4j.Category#getName()
	CALLEE: org.apache.log4j.spi.ThrowableInformation#<init>(java.lang.Throwable,org.apache.log4j.Category)
CALLER: org.apache.log4j.Category#callAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.AppenderAttachableImpl#appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Hierarchy#emitNoAppenderWarning(org.apache.log4j.Category)
	CALLEE: org.apache.log4j.spi.NOPLoggerRepository#emitNoAppenderWarning(org.apache.log4j.Category)
CALLER: liquibase.statement.core.RawCallStatement#<init>(java.lang.String)
	CALLEE: liquibase.statement.core.RawSqlStatement#<init>(java.lang.String)
CALLER: static javax.json.spi.JsonProvider#provider()
	CALLEE: javax.json.JsonException#<init>(java.lang.String,java.lang.Throwable)
CALLER: static org.traccar.model.MiscFormatter.1#<clinit>()
	CALLEE: static javax.json.JsonValue.ValueType#values()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#idsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getId()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#authorsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getAuthor()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#pathsAreEqual(liquibase.changelog.ChangeSet,liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#getPath(liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#getPath(liquibase.changelog.ChangeSet)
CALLER: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,long)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#select()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChanges()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processKey(java.nio.channels.SelectionKey)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChanges()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#poll()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChange(java.lang.Runnable)
CALLER: org.eclipse.jetty.server.AbstractConnector#isAccepting()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
CALLER: org.eclipse.jetty.server.ServerConnector#accepted(java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.server.ServerConnector#configure(java.net.Socket)
	CALLEE: org.eclipse.jetty.io.SelectorManager#accept(java.nio.channels.SocketChannel)
CALLER: org.slf4j.helpers.SubstituteLogger#getEventRecordingLogger()
	CALLEE: org.slf4j.event.EventRecodingLogger#<init>(org.slf4j.helpers.SubstituteLogger,java.util.Queue)
CALLER: org.eclipse.jetty.servlet.ServletHolder#newInstance()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getHeldClass()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler.Context#createServlet(java.lang.Class)
	CALLEE: javax.servlet.ServletException#getRootCause()
CALLER: org.eclipse.jetty.servlet.ServletHolder#isJspServlet()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#isJspServlet(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletHolder#initJspServlet()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getClassLoader()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.Holder#setInitParameter(java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getContextHandler(javax.servlet.ServletContext)
	CALLEE: static org.eclipse.jetty.util.Loader#getClassPath(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.servlet.Holder#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getClassPath()
CALLER: org.eclipse.jetty.servlet.ServletHolder#detectJspContainer()
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.servlet.ServletHolder#initMultiPart()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getContextHandler(javax.servlet.ServletContext)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#getRegistration()
	CALLEE: org.eclipse.jetty.server.Request.MultiPartCleanerListener#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.Registration#getMultipartConfig()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#addEventListener(java.util.EventListener)
CALLER: javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)
	CALLEE: org.eclipse.jetty.websocket.servlet.WebSocketServlet#init()
	CALLEE: org.glassfish.jersey.servlet.ServletContainer#init()
	CALLEE: org.traccar.web.ConsoleServlet#init()
CALLER: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#init(javax.servlet.ServletConfig)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#newInstance()
	CALLEE: javax.servlet.ServletException#<init>(java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#makeUnavailable(javax.servlet.UnavailableException)
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.1#<init>(org.eclipse.jetty.servlet.ServletHolder,java.lang.String,int,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#log(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#log(java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder#getJspPackagePrefix()
	CALLEE: org.eclipse.jetty.servlet.BaseHolder#getServletHandler()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getInitParameter(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletHolder#getPackageOfJspClass(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder#getNameOfJspClass(java.lang.String)
	CALLEE: static org.eclipse.jetty.util.Loader#loadClass(java.lang.Class,java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
CALLER: javax.servlet.UnavailableException#<init>(java.lang.String)
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.servlet.ServletHandler#destroyServlet(javax.servlet.Servlet)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#destroyServlet(javax.servlet.Servlet)
CALLER: org.glassfish.jersey.servlet.ServletContainer#destroy()
	CALLEE: javax.servlet.GenericServlet#destroy()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#onShutdown(org.glassfish.jersey.server.spi.Container)
CALLER: org.h2.server.web.WebServlet#destroy()
	CALLEE: org.h2.server.web.WebServer#stop()
CALLER: org.eclipse.jetty.servlet.ServletHolder.SingleThreadedWrapper#destroy()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.servlet.ServletHolder#access$200()
CALLER: org.eclipse.jetty.server.AbstractConnector#shutdown()
	CALLEE: org.eclipse.jetty.util.FutureCallback#<init>(boolean)
CALLER: org.eclipse.jetty.server.session.HashedSession#deIdle()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#restoreSession(java.io.InputStream,org.eclipse.jetty.server.session.HashedSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#didActivate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#isIdled()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#access(long)
	CALLEE: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#deIdleFailed()
CALLER: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSession#bindValue(java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String,java.lang.Object)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$600(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
CALLER: com.zaxxer.hikari.pool.HikariPool#createPoolEntry()
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#newPoolEntry()
	CALLEE: com.zaxxer.hikari.HikariConfig#getMaxLifetime()
	CALLEE: com.zaxxer.hikari.pool.HikariPool.2#<init>(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#setFutureEol(java.util.concurrent.ScheduledFuture)
CALLER: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#info(java.lang.String)
CALLER: org.apache.log4j.helpers.AppenderAttachableImpl#appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.AppenderSkeleton#doAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.varia.NullAppender#doAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.Hierarchy#emitNoAppenderWarning(org.apache.log4j.Category)
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.Category#getName()
CALLER: liquibase.statement.core.RawSqlStatement#<init>(java.lang.String)
	CALLEE: liquibase.statement.AbstractSqlStatement#<init>()
CALLER: static javax.json.JsonValue.ValueType#<clinit>()
	CALLEE: javax.json.JsonValue.ValueType#<init>(java.lang.String,int)
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#getPath(liquibase.changelog.RanChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#normalizePath(java.lang.String)
	CALLEE: liquibase.changelog.RanChangeSet#getChangeLog()
CALLER: liquibase.changelog.filter.ShouldRunChangeSetFilter#getPath(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ShouldRunChangeSetFilter#normalizePath(java.lang.String)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processKey(java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processConnect(java.nio.channels.SelectionKey,org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processAccept(java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#closeNoExceptions(java.io.Closeable)
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#poll()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#getBlockSize()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#getHeadBlock()
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#updateHeadBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChange(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint.1#run()
CALLER: org.eclipse.jetty.server.ServerConnector#configure(java.net.Socket)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.SelectorManager#accept(java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.io.SelectorManager#accept(java.nio.channels.SocketChannel,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#<init>(org.slf4j.helpers.SubstituteLogger,java.util.Queue)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
CALLER: static org.eclipse.jetty.server.handler.ContextHandler#getContextHandler(javax.servlet.ServletContext)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#getCurrentContext()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getContextHandler()
CALLER: static org.eclipse.jetty.util.Loader#getClassPath(java.lang.ClassLoader)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getFile()
CALLER: static org.eclipse.jetty.servlet.ServletHolder.JspContainer#<clinit>()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.JspContainer#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.servlet.ServletHolder#getRegistration()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.Registration#<init>(org.eclipse.jetty.servlet.ServletHolder)
CALLER: org.eclipse.jetty.websocket.servlet.WebSocketServlet#init()
	CALLEE: javax.servlet.ServletException#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#<init>(org.eclipse.jetty.websocket.api.WebSocketBehavior)
	CALLEE: javax.servlet.GenericServlet#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#setIdleTimeout(long)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#setMaxTextMessageSize(int)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#setMaxBinaryMessageSize(int)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#setInputBufferSize(int)
	CALLEE: static org.eclipse.jetty.websocket.servlet.WebSocketServletFactory.Loader#create(org.eclipse.jetty.websocket.api.WebSocketPolicy)
	CALLEE: org.traccar.api.AsyncSocketServlet#configure(org.eclipse.jetty.websocket.servlet.WebSocketServletFactory)
	CALLEE: javax.servlet.GenericServlet#getServletContext()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.glassfish.jersey.servlet.ServletContainer#init()
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#<init>(org.glassfish.jersey.servlet.ServletContainer)
	CALLEE: org.glassfish.jersey.servlet.ServletContainer#init(org.glassfish.jersey.servlet.WebConfig)
CALLER: org.traccar.web.ConsoleServlet#init()
	CALLEE: org.traccar.Config#getString(java.lang.String)
	CALLEE: static org.traccar.Context#getConfig()
	CALLEE: static org.traccar.helper.Log#warning(java.lang.Throwable)
	CALLEE: org.h2.server.web.WebServlet#init()
	CALLEE: org.h2.server.web.ConnectionInfo#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#format(java.lang.StringBuilder,java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.servlet.ServletHolder.1#<init>(org.eclipse.jetty.servlet.ServletHolder,java.lang.String,int,java.lang.Throwable)
	CALLEE: javax.servlet.UnavailableException#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.util.FutureCallback#<clinit>()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#<init>()
CALLER: org.eclipse.jetty.server.session.AbstractSession#access(long)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#checkExpiry(long)
CALLER: static org.eclipse.jetty.util.IO#close(java.io.InputStream)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: static org.eclipse.jetty.util.IO#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.IO.NullOS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.ClosedIS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#<init>(org.eclipse.jetty.util.IO.1)
CALLER: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#doInvalidate()
CALLER: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: javax.servlet.http.HttpSessionBindingEvent#<init>(javax.servlet.http.HttpSession,java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
	CALLEE: org.glassfish.hk2.api.MultiException#printStackTrace(java.io.PrintStream)
CALLER: com.zaxxer.hikari.pool.PoolBase#newPoolEntry()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#newConnection()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#<init>(java.sql.Connection,com.zaxxer.hikari.pool.PoolBase,boolean,boolean)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processConnect(java.nio.channels.SelectionKey,org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect)
	CALLEE: static org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect#access$600(org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect)
	CALLEE: org.eclipse.jetty.io.SelectorManager#finishConnect(java.nio.channels.SocketChannel)
	CALLEE: static org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect#access$700(org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)
	CALLEE: static org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect#access$800(org.eclipse.jetty.io.SelectorManager.ManagedSelector.Connect,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#processAccept(java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#closeNoExceptions(java.io.Closeable)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#accepted(java.nio.channels.SocketChannel)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#closeNoExceptions(java.io.Closeable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.ConcurrentArrayQueue#updateHeadBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
	CALLEE: org.eclipse.jetty.util.ConcurrentArrayQueue#casHeadBlock(org.eclipse.jetty.util.ConcurrentArrayQueue.Block,org.eclipse.jetty.util.ConcurrentArrayQueue.Block)
CALLER: org.eclipse.jetty.io.SelectorManager#accept(java.nio.channels.SocketChannel,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.SelectorManager#chooseSelector()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Accept#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SocketChannel,java.lang.Object,org.eclipse.jetty.io.SelectorManager.1)
CALLER: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL,boolean)
CALLER: org.eclipse.jetty.servlet.ServletHolder.Registration#<init>(org.eclipse.jetty.servlet.ServletHolder)
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderRegistration#<init>(org.eclipse.jetty.servlet.Holder)
CALLER: static org.eclipse.jetty.websocket.api.WebSocketBehavior#<clinit>()
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketBehavior#<init>(java.lang.String,int)
CALLER: javax.servlet.GenericServlet#getInitParameter(java.lang.String)
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameter(java.lang.String)
CALLER: org.eclipse.jetty.websocket.api.WebSocketPolicy#setIdleTimeout(long)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#assertGreaterThan(java.lang.String,long,long)
CALLER: org.eclipse.jetty.websocket.api.WebSocketPolicy#setMaxTextMessageSize(int)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#assertGreaterThan(java.lang.String,long,long)
CALLER: org.eclipse.jetty.websocket.api.WebSocketPolicy#setMaxBinaryMessageSize(int)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#assertGreaterThan(java.lang.String,long,long)
CALLER: org.eclipse.jetty.websocket.api.WebSocketPolicy#setInputBufferSize(int)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#assertGreaterThan(java.lang.String,long,long)
	CALLEE: org.eclipse.jetty.websocket.api.WebSocketPolicy#assertLessThan(java.lang.String,long,java.lang.String,long)
CALLER: static org.eclipse.jetty.websocket.servlet.WebSocketServletFactory.Loader#create(org.eclipse.jetty.websocket.api.WebSocketPolicy)
	CALLEE: static org.eclipse.jetty.websocket.servlet.WebSocketServletFactory.Loader#load(org.eclipse.jetty.websocket.api.WebSocketPolicy)
CALLER: org.traccar.api.AsyncSocketServlet#configure(org.eclipse.jetty.websocket.servlet.WebSocketServletFactory)
	CALLEE: static org.traccar.Context#getConfig()
	CALLEE: org.traccar.Config#getLong(java.lang.String,long)
	CALLEE: org.traccar.api.AsyncSocketServlet.1#<init>(org.traccar.api.AsyncSocketServlet)
CALLER: javax.servlet.GenericServlet#getServletContext()
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getServletContext()
CALLER: org.glassfish.jersey.servlet.ServletContainer#init(org.glassfish.jersey.servlet.WebConfig)
	CALLEE: org.glassfish.jersey.servlet.WebComponent#<init>(org.glassfish.jersey.servlet.WebConfig,org.glassfish.jersey.server.ResourceConfig)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#onStartup(org.glassfish.jersey.server.spi.Container)
CALLER: org.h2.server.web.WebServlet#init()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
	CALLEE: static org.h2.util.New#arrayList()
	CALLEE: org.h2.server.web.WebServer#<init>()
	CALLEE: org.h2.server.web.WebServer#setAllowChunked(boolean)
	CALLEE: org.h2.server.web.WebServer#init(java.lang.String[])
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameterNames()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameter(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
CALLER: org.h2.server.web.ConnectionInfo#<init>(java.lang.String)
	CALLEE: static org.h2.util.StringUtils#arraySplit(java.lang.String,char,boolean)
	CALLEE: static org.h2.server.web.ConnectionInfo#get(java.lang.String[],int)
CALLER: javax.servlet.UnavailableException#<init>(java.lang.String,int)
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.ConstantThrowable#<init>()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.IO.NullOS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullOS#<init>()
CALLER: org.eclipse.jetty.util.IO.ClosedIS#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.ClosedIS#<init>()
CALLER: org.eclipse.jetty.util.IO.NullWrite#<init>(org.eclipse.jetty.util.IO.1)
	CALLEE: org.eclipse.jetty.util.IO.NullWrite#<init>()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#removeSession(org.eclipse.jetty.server.session.AbstractSession,boolean)
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
	CALLEE: org.eclipse.jetty.server.session.HashSessionManager#removeSession(java.lang.String)
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#decrement()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getCreationTime()
	CALLEE: org.eclipse.jetty.util.statistic.SampleStatistic#set(long)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#removeSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.HashSessionIdManager#invalidateAll(java.lang.String)
CALLER: org.eclipse.jetty.server.session.HashedSession#doInvalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#doInvalidate()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#remove()
CALLER: com.zaxxer.hikari.pool.PoolEntry#<init>(java.sql.Connection,com.zaxxer.hikari.pool.PoolBase,boolean,boolean)
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.FastList#<init>(java.lang.Class,int)
CALLER: com.zaxxer.hikari.util.QueuedSequenceSynchronizer.Synchronizer#tryReleaseShared(long)
	CALLEE: static com.zaxxer.hikari.util.QueuedSequenceSynchronizer#access$100(com.zaxxer.hikari.util.QueuedSequenceSynchronizer)
	CALLEE: com.zaxxer.hikari.util.Sequence.DropwizardSequence#increment()
	CALLEE: com.zaxxer.hikari.util.Sequence.Java7Sequence#increment()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#createEndPoint(java.nio.channels.SocketChannel,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#endPointOpened(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.EndPoint,java.lang.Object)
	CALLEE: org.eclipse.jetty.io.SelectorManager#connectionOpened(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#setConnection(org.eclipse.jetty.io.Connection)
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#accepted(java.nio.channels.SocketChannel)
	CALLEE: static org.eclipse.jetty.server.ServerConnector#access$100(org.eclipse.jetty.server.ServerConnector,java.nio.channels.SocketChannel)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Accept#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SocketChannel,java.lang.Object,org.eclipse.jetty.io.SelectorManager.1)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector.Accept#<init>(org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SocketChannel,java.lang.Object)
CALLER: static org.glassfish.jersey.servlet.WebComponent#<clinit>()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.1#<init>()
	CALLEE: org.glassfish.hk2.api.TypeLiteral#getType()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.2#<init>()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.3#<init>()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.4#<init>()
CALLER: org.glassfish.jersey.servlet.WebComponent#<init>(org.glassfish.jersey.servlet.WebConfig,org.glassfish.jersey.server.ResourceConfig)
	CALLEE: static org.glassfish.jersey.servlet.WebComponent#createResourceConfig(org.glassfish.jersey.servlet.WebConfig)
	CALLEE: static org.glassfish.jersey.servlet.internal.ServletContainerProviderFactory#getAllServletContainerProviders()
	CALLEE: org.glassfish.jersey.servlet.WebComponent#configure(org.glassfish.jersey.server.ResourceConfig,org.glassfish.jersey.servlet.internal.spi.ServletContainerProvider[])
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#<init>(org.glassfish.jersey.servlet.WebComponent,java.util.Map,org.glassfish.jersey.servlet.WebComponent.1)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Object)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getServletContext()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#<init>(javax.ws.rs.core.Application,org.glassfish.hk2.utilities.Binder,org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.servlet.WebComponent#getAsyncExtensionDelegate()
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getConfigType()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#isProperty(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.ServerProperties#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#getServiceLocator()
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
CALLER: org.h2.server.web.WebServer#<init>()
	CALLEE: static org.h2.util.New#hashMap()
	CALLEE: static org.h2.util.New#hashSet()
CALLER: org.h2.server.web.WebServer#init(java.lang.String[])
	CALLEE: org.h2.server.web.WebServer#loadProperties()
	CALLEE: static org.h2.util.SortedProperties#getIntProperty(java.util.Properties,java.lang.String,int)
	CALLEE: static org.h2.util.SortedProperties#getBooleanProperty(java.util.Properties,java.lang.String,boolean)
	CALLEE: static org.h2.util.Tool#isOption(java.lang.String,java.lang.String)
	CALLEE: static org.h2.engine.SysProperties#setBaseDir(java.lang.String)
	CALLEE: org.h2.server.web.WebServer#updateURL()
CALLER: static org.h2.util.StringUtils#arraySplit(java.lang.String,char,boolean)
	CALLEE: static org.h2.util.New#arrayList()
CALLER: static org.h2.engine.SysProperties#<clinit>()
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,java.lang.String)
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,boolean)
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,int)
	CALLEE: static org.h2.engine.SysProperties#getAutoScaledForMemoryProperty(java.lang.String,int)
	CALLEE: static org.h2.util.MathUtils#nextPowerOf2(int)
CALLER: org.eclipse.jetty.util.statistic.CounterStatistic#decrement()
	CALLEE: org.eclipse.jetty.util.statistic.CounterStatistic#add(long)
CALLER: org.eclipse.jetty.server.session.AbstractSession#getCreationTime()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
CALLER: org.eclipse.jetty.util.statistic.SampleStatistic#set(long)
	CALLEE: static org.eclipse.jetty.util.Atomics#updateMax(java.util.concurrent.atomic.AtomicLong,long)
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#removeSession(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionIdManager#getClusterId(java.lang.String)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#remove()
CALLER: org.eclipse.jetty.server.session.HashSessionIdManager#invalidateAll(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#invalidate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isValid()
CALLER: org.eclipse.jetty.server.session.AbstractSession#doInvalidate()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#isValid()
	CALLEE: org.eclipse.jetty.server.session.MemSession#clearAttributes()
CALLER: org.eclipse.jetty.server.session.HashedSession#remove()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#endPointOpened(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.SelectorManager#endPointOpened(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#onEndPointOpened(org.eclipse.jetty.io.EndPoint)
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newConnection(java.nio.channels.SocketChannel,org.eclipse.jetty.io.EndPoint,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getDefaultConnectionFactory()
	CALLEE: org.eclipse.jetty.server.HttpConnectionFactory#newConnection(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
CALLER: org.eclipse.jetty.io.SelectorManager#connectionOpened(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.HttpConnection#onOpen()
CALLER: static org.eclipse.jetty.server.ServerConnector#access$100(org.eclipse.jetty.server.ServerConnector,java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.server.ServerConnector#accepted(java.nio.channels.SocketChannel)
CALLER: org.glassfish.jersey.servlet.WebComponent.1#<init>()
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.hk2.api.TypeLiteral#getType()
	CALLEE: static org.glassfish.hk2.api.TypeLiteral#getTypeLiteralSubclass(java.lang.Class)
	CALLEE: static org.glassfish.hk2.api.TypeLiteral#getTypeParameter(java.lang.Class)
CALLER: org.glassfish.jersey.servlet.WebComponent.2#<init>()
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: static org.glassfish.jersey.servlet.WebComponent#createResourceConfig(org.glassfish.jersey.servlet.WebConfig)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: javax.servlet.ServletException#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getServletContext()
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getName()
	CALLEE: static org.glassfish.jersey.servlet.internal.Utils#retrieve(javax.servlet.ServletContext,java.lang.String)
	CALLEE: static org.glassfish.jersey.servlet.WebComponent#getInitParams(org.glassfish.jersey.servlet.WebConfig)
	CALLEE: static org.glassfish.jersey.servlet.internal.Utils#getContextParams(javax.servlet.ServletContext)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getInitParameter(java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#<init>(javax.servlet.ServletContext)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#forApplicationClass(java.lang.Class)
	CALLEE: static org.glassfish.jersey.servlet.internal.LocalizationMessages#RESOURCE_CONFIG_PARENT_CLASS_INVALID(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.servlet.internal.LocalizationMessages#RESOURCE_CONFIG_UNABLE_TO_LOAD(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerFinder(org.glassfish.jersey.server.ResourceFinder)
CALLER: static org.glassfish.jersey.servlet.internal.ServletContainerProviderFactory#getAllServletContainerProviders()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#toArray()
CALLER: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getProperties()
CALLER: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#<init>(org.glassfish.jersey.servlet.WebComponent,java.util.Map,org.glassfish.jersey.servlet.WebComponent.1)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#<init>(org.glassfish.jersey.servlet.WebComponent,java.util.Map)
CALLER: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#invalidateCache()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#register(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Object)
CALLER: org.glassfish.jersey.servlet.WebServletConfig#getServletContext()
	CALLEE: org.glassfish.jersey.servlet.ServletContainer#getServletContext()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#<clinit>()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.1#<init>()
CALLER: org.glassfish.jersey.server.ApplicationHandler#<init>(javax.ws.rs.core.Application,org.glassfish.hk2.utilities.Binder,org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: org.glassfish.jersey.server.ServerBinder#<init>(java.util.Map)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#<init>(org.glassfish.jersey.server.ApplicationHandler,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#createLocator(org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder[])
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#getLazyInitializedComponentProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getApplicationClass()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#createApplication(java.lang.Class,org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#setApplication(javax.ws.rs.core.Application)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#createRuntimeConfig(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.3#<init>(org.glassfish.jersey.server.ApplicationHandler,org.glassfish.jersey.internal.util.collection.LazyValue)
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(org.glassfish.jersey.internal.util.Producer)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#getApplicationClass()
CALLER: org.glassfish.jersey.servlet.WebComponent#getAsyncExtensionDelegate()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#getServiceLocator()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.5#<init>(org.glassfish.jersey.servlet.WebComponent)
CALLER: static org.glassfish.jersey.servlet.WebConfig.ConfigType#<clinit>()
	CALLEE: org.glassfish.jersey.servlet.WebConfig.ConfigType#<init>(java.lang.String,int)
CALLER: org.glassfish.jersey.server.ResourceConfig#isProperty(java.lang.String)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#isProperty(java.lang.String)
CALLER: static org.glassfish.jersey.server.ServerProperties#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)
CALLER: static org.glassfish.jersey.server.BackgroundSchedulerLiteral#<clinit>()
	CALLEE: org.glassfish.jersey.server.BackgroundSchedulerLiteral#<init>()
CALLER: org.h2.server.web.WebServer#loadProperties()
	CALLEE: static org.h2.util.SortedProperties#loadProperties(java.lang.String)
	CALLEE: static org.h2.message.DbException#traceThrowable(java.lang.Throwable)
CALLER: static org.h2.util.Tool#isOption(java.lang.String,java.lang.String)
	CALLEE: static org.h2.message.DbException#getUnsupportedException(java.lang.String)
CALLER: org.h2.server.web.WebServer#updateURL()
	CALLEE: static org.h2.util.NetUtils#getLocalAddress()
CALLER: static org.h2.util.Utils#<clinit>()
	CALLEE: static org.h2.util.New#hashMap()
CALLER: static org.h2.util.Utils#getProperty(java.lang.String,boolean)
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,java.lang.String)
CALLER: static org.h2.util.Utils#getProperty(java.lang.String,int)
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,java.lang.String)
CALLER: static org.h2.engine.SysProperties#getAutoScaledForMemoryProperty(java.lang.String,int)
	CALLEE: static org.h2.util.Utils#getProperty(java.lang.String,java.lang.String)
	CALLEE: static org.h2.util.Utils#scaleForAvailableMemory(int)
CALLER: org.eclipse.jetty.server.session.MemSession#clearAttributes()
	CALLEE: org.eclipse.jetty.server.session.MemSession#doPutOrRemove(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#unbindValue(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#doSessionAttributeListeners(org.eclipse.jetty.server.session.AbstractSession,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getSessionManager()
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.ServerConnector#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
CALLER: org.eclipse.jetty.io.SelectorManager#endPointOpened(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#onOpen()
CALLER: org.eclipse.jetty.server.AbstractConnector#getDefaultConnectionFactory()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getConnectionFactory(java.lang.String)
CALLER: static org.glassfish.hk2.api.TypeLiteral#getTypeLiteralSubclass(java.lang.Class)
	CALLEE: static org.glassfish.hk2.api.TypeLiteral#getTypeLiteralSubclass(java.lang.Class)
CALLER: org.glassfish.jersey.servlet.WebServletConfig#getName()
	CALLEE: javax.servlet.GenericServlet#getServletName()
CALLER: static org.glassfish.jersey.servlet.internal.Utils#retrieve(javax.servlet.ServletContext,java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
CALLER: static org.glassfish.jersey.servlet.WebComponent#getInitParams(org.glassfish.jersey.servlet.WebConfig)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getInitParameter(java.lang.String)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getInitParameterNames()
CALLER: static org.glassfish.jersey.servlet.internal.Utils#getContextParams(javax.servlet.ServletContext)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
CALLER: org.glassfish.jersey.servlet.WebServletConfig#getInitParameter(java.lang.String)
	CALLEE: javax.servlet.GenericServlet#getInitParameter(java.lang.String)
CALLER: org.glassfish.jersey.server.ResourceConfig#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#addProperties(java.util.Map)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#<init>(javax.servlet.ServletContext)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#processPaths(java.lang.String[])
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoader()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
CALLER: static org.glassfish.jersey.server.ResourceConfig#forApplicationClass(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#<init>(javax.ws.rs.core.Application,java.lang.Class,java.util.Set)
CALLER: static org.glassfish.jersey.servlet.internal.LocalizationMessages#RESOURCE_CONFIG_PARENT_CLASS_INVALID(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.servlet.internal.LocalizationMessages#localizableRESOURCE_CONFIG_PARENT_CLASS_INVALID(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.servlet.internal.LocalizationMessages#<clinit>()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#<init>()
CALLER: static org.glassfish.jersey.servlet.internal.LocalizationMessages#RESOURCE_CONFIG_UNABLE_TO_LOAD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.servlet.internal.LocalizationMessages#localizableRESOURCE_CONFIG_UNABLE_TO_LOAD(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#_getContextClassLoader()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,java.lang.ClassLoader,boolean)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#<clinit>()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getOsgiRegistryInstance()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#hookUp()
CALLER: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#<init>(org.glassfish.jersey.servlet.WebComponent,java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#register(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getModelEnhancer(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#processFeatureRegistration(java.lang.Object,java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#checkProviderNotNull(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#register(java.lang.Object,org.glassfish.jersey.process.Inflector)
CALLER: org.glassfish.jersey.servlet.ServletContainer#getServletContext()
	CALLEE: javax.servlet.GenericServlet#getServletContext()
CALLER: org.glassfish.jersey.server.ServerBinder#<init>(java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#<init>(org.glassfish.jersey.server.ApplicationHandler,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#<init>(org.glassfish.jersey.server.ApplicationHandler)
CALLER: static org.glassfish.jersey.internal.inject.Injections#createLocator(org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder[])
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#_createLocator(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder[])
CALLER: static org.glassfish.jersey.internal.inject.Injections#<clinit>()
	CALLEE: static org.glassfish.hk2.api.ServiceLocatorFactory#getInstance()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#getLazyInitializedComponentProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.4#<init>(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#lazy(org.glassfish.jersey.internal.util.collection.Value)
CALLER: org.glassfish.jersey.server.ApplicationHandler#createApplication(java.lang.Class,org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: javax.ws.rs.core.Application#<init>()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#createApplication(java.lang.Class,org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#get()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.ResourceConfig#setApplication(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#_setApplication(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_setApplication(javax.ws.rs.core.Application)
CALLER: static org.glassfish.jersey.server.ResourceConfig#createRuntimeConfig(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(org.glassfish.jersey.server.ResourceConfig,org.glassfish.jersey.server.ResourceConfig.1)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(javax.ws.rs.core.Application,org.glassfish.jersey.server.ResourceConfig.1)
CALLER: static org.glassfish.jersey.internal.Errors#processWithException(org.glassfish.jersey.internal.util.Producer)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer,boolean)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.util.Comparator)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#isProperty(java.lang.String)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getProperty(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#isProperty(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)
CALLER: org.glassfish.jersey.server.BackgroundSchedulerLiteral#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: static org.h2.util.SortedProperties#loadProperties(java.lang.String)
	CALLEE: org.h2.util.SortedProperties#<init>()
	CALLEE: static org.h2.store.fs.FileUtils#exists(java.lang.String)
	CALLEE: static org.h2.store.fs.FileUtils#newInputStream(java.lang.String)
CALLER: static org.h2.message.DbException#traceThrowable(java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintWriter)
CALLER: static org.h2.message.DbException#<clinit>()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getValue()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#getKey()
	CALLEE: static org.h2.message.DbException#traceThrowable(java.lang.Throwable)
	CALLEE: static org.h2.util.Utils#getResource(java.lang.String)
	CALLEE: static org.h2.util.SortedProperties#fromLines(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static org.h2.message.DbException#getUnsupportedException(java.lang.String)
	CALLEE: static org.h2.message.DbException#get(int,java.lang.String)
CALLER: static org.h2.util.NetUtils#getLocalAddress()
	CALLEE: static org.h2.util.NetUtils#getBindAddress()
	CALLEE: static org.h2.message.DbException#convert(java.lang.Throwable)
	CALLEE: static org.h2.util.NetUtils#getHostAddress(java.net.InetAddress)
CALLER: org.eclipse.jetty.server.ServerConnector#newEndPoint(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getScheduler()
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getIdleTimeout()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#<init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey,org.eclipse.jetty.util.thread.Scheduler,long)
CALLER: javax.servlet.GenericServlet#getServletName()
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder.Config#getServletName()
CALLER: org.glassfish.jersey.servlet.WebServletConfig#getInitParameterNames()
	CALLEE: javax.servlet.GenericServlet#getInitParameterNames()
CALLER: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#processPaths(java.lang.String[])
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#<init>(org.glassfish.jersey.servlet.WebAppResourcesScanner,java.util.Set)
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#push(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getResourcePaths(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#getResourcePaths(java.lang.String)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoader()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoaderPA()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.7#<init>(java.lang.ClassLoader,java.lang.String)
CALLER: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#<init>(javax.ws.rs.core.Application,java.lang.Class,java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONFIG_ERROR_NULL_APPLICATIONCLASS()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#mergeApplications(javax.ws.rs.core.Application)
CALLER: static org.glassfish.jersey.servlet.internal.LocalizationMessages#localizableRESOURCE_CONFIG_PARENT_CLASS_INVALID(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.servlet.internal.LocalizationMessages#localizableRESOURCE_CONFIG_UNABLE_TO_LOAD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.ServiceFinder#_getContextClassLoader()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoaderPA()
CALLER: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#<init>(java.lang.Class,java.lang.ClassLoader,boolean)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#hookUp()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#setOSGiServiceFinderIteratorProvider()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#registerExistingBundles()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#checkProviderNotNull(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_CANNOT_BE_NULL()
CALLER: org.glassfish.jersey.model.internal.ComponentBag#register(java.lang.Object,org.glassfish.jersey.process.Inflector)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#registerModel(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
CALLER: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#<init>(org.glassfish.jersey.server.ApplicationHandler)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: static org.glassfish.jersey.internal.inject.Injections#_createLocator(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder[])
	CALLEE: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#enablePerThreadScope(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#bind(org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#create(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.extension.ServiceLocatorGenerator,org.glassfish.hk2.api.ServiceLocatorFactory.CreatePolicy)
CALLER: static org.glassfish.hk2.api.ServiceLocatorFactory#<clinit>()
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#<init>()
CALLER: static org.glassfish.jersey.internal.util.collection.Values#lazy(org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#<init>(org.glassfish.jersey.internal.util.collection.Value)
CALLER: static org.glassfish.jersey.internal.util.collection.Values#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#<init>()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.2#<init>()
CALLER: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newBinder(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(org.glassfish.jersey.server.ResourceConfig,org.glassfish.jersey.server.ResourceConfig.1)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(org.glassfish.jersey.server.ResourceConfig)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(javax.ws.rs.core.Application,org.glassfish.jersey.server.ResourceConfig.1)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(javax.ws.rs.core.Application)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.util.Comparator)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getClasses(java.util.Collection)
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#isProperty(java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Class,java.util.Map)
CALLER: static org.h2.store.fs.FileUtils#exists(java.lang.String)
	CALLEE: static org.h2.store.fs.FilePath#get(java.lang.String)
CALLER: static org.h2.store.fs.FileUtils#newInputStream(java.lang.String)
	CALLEE: static org.h2.store.fs.FilePath#get(java.lang.String)
CALLER: static org.h2.util.Utils#getResource(java.lang.String)
	CALLEE: static org.h2.util.Utils#loadResource(java.lang.String)
CALLER: static org.h2.util.SortedProperties#fromLines(java.lang.String)
	CALLEE: static org.h2.util.StringUtils#arraySplit(java.lang.String,char,boolean)
	CALLEE: org.h2.util.SortedProperties#<init>()
CALLER: static org.h2.message.DbException#get(int,java.lang.String)
	CALLEE: static org.h2.message.DbException#get(int,java.lang.String[])
CALLER: static org.h2.message.DbException#convert(java.lang.Throwable)
	CALLEE: org.h2.message.DbException#<init>(java.sql.SQLException)
	CALLEE: static org.h2.message.DbException#convertInvocation(java.lang.reflect.InvocationTargetException,java.lang.String)
	CALLEE: static org.h2.message.DbException#get(int,java.lang.Throwable,java.lang.String[])
CALLER: static org.eclipse.jetty.io.SelectChannelEndPoint#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.io.ChannelEndPoint#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.io.AbstractEndPoint#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.io.IdleTimeout#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#<init>(java.nio.channels.SocketChannel,org.eclipse.jetty.io.SelectorManager.ManagedSelector,java.nio.channels.SelectionKey,org.eclipse.jetty.util.thread.Scheduler,long)
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#<init>(org.eclipse.jetty.util.thread.Scheduler,java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint.1#<init>(org.eclipse.jetty.io.SelectChannelEndPoint)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#setIdleTimeout(long)
CALLER: org.eclipse.jetty.servlet.ServletHolder.Config#getServletName()
	CALLEE: org.eclipse.jetty.servlet.Holder#getName()
CALLER: javax.servlet.GenericServlet#getInitParameterNames()
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameterNames()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#<init>(org.glassfish.jersey.servlet.WebAppResourcesScanner,java.util.Set)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1.1#<init>(org.glassfish.jersey.servlet.WebAppResourcesScanner.1)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONFIG_ERROR_NULL_APPLICATIONCLASS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONFIG_ERROR_NULL_APPLICATIONCLASS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#<clinit>()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#mergeApplications(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#invalidateCache()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerResources(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#setApplicationName(java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#lock()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getResources()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getApplicationName()
	CALLEE: javax.ws.rs.core.Application#getProperties()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getClassLoader()
CALLER: org.glassfish.jersey.internal.ServiceFinder#<init>(java.lang.Class,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#setOSGiServiceFinderIteratorProvider()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#<init>(org.glassfish.jersey.internal.OsgiRegistry,org.glassfish.jersey.internal.OsgiRegistry.1)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#setIteratorProvider(org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#registerExistingBundles()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#register(org.osgi.framework.Bundle)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#COMPONENT_CANNOT_BE_NULL()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_CANNOT_BE_NULL()
CALLER: static org.glassfish.hk2.api.ServiceLocatorFactory.CreatePolicy#<clinit>()
	CALLEE: org.glassfish.hk2.api.ServiceLocatorFactory.CreatePolicy#<init>(java.lang.String,int)
CALLER: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#enablePerThreadScope(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#addClasses(org.glassfish.hk2.api.ServiceLocator,boolean,java.lang.Class[])
	CALLEE: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#isDupException(org.glassfish.hk2.api.MultiException)
CALLER: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#<clinit>()
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.SingletonImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerLookupImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerThreadImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.InheritableThreadImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.ImmediateImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
CALLER: static org.glassfish.jersey.internal.inject.Injections#bind(org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.utilities.Binder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.DynamicConfiguration)
CALLER: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#<clinit>()
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.1#<init>()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#<init>()
	CALLEE: org.glassfish.hk2.api.ServiceLocatorFactory#<init>()
CALLER: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newBinder(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Class,boolean)
CALLER: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.util.Set)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#access$600(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#registerComponentsOf(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getRegisteredClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.1#<init>(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerInstances(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#<init>(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#<init>(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#<init>()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#registerComponentsOf(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getRegisteredClasses()
CALLER: static org.glassfish.jersey.internal.inject.Providers#getAllServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.lang.annotation.Annotation[])
CALLER: static org.glassfish.jersey.internal.inject.Providers#getClasses(java.util.Collection)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet()
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#<init>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet(java.lang.Iterable)
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Class,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getPropertyNameForRuntime(java.lang.String,javax.ws.rs.RuntimeType)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getLegacyFallbackValue(java.util.Map,java.util.Map,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#convertValue(java.lang.Object,java.lang.Class)
CALLER: static org.h2.store.fs.FilePath#get(java.lang.String)
	CALLEE: static org.h2.store.fs.FilePath#registerDefaultProviders()
CALLER: static org.h2.util.Utils#loadResource(java.lang.String)
	CALLEE: static org.h2.util.IOUtils#readBytesAndClose(java.io.InputStream,int)
	CALLEE: static org.h2.util.IOUtils#copy(java.io.InputStream,java.io.OutputStream)
CALLER: static org.h2.message.DbException#get(int,java.lang.String[])
	CALLEE: org.h2.message.DbException#<init>(java.sql.SQLException)
	CALLEE: static org.h2.message.DbException#getJdbcSQLException(int,java.lang.Throwable,java.lang.String[])
CALLER: org.h2.message.DbException#<init>(java.sql.SQLException)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
CALLER: static org.h2.message.DbException#convertInvocation(java.lang.reflect.InvocationTargetException,java.lang.String)
	CALLEE: static org.h2.message.DbException#convert(java.lang.Throwable)
	CALLEE: static org.h2.message.DbException#get(int,java.lang.Throwable,java.lang.String[])
CALLER: static org.h2.message.DbException#get(int,java.lang.Throwable,java.lang.String[])
	CALLEE: org.h2.message.DbException#<init>(java.sql.SQLException)
	CALLEE: static org.h2.message.DbException#getJdbcSQLException(int,java.lang.Throwable,java.lang.String[])
CALLER: org.eclipse.jetty.io.ChannelEndPoint#<init>(org.eclipse.jetty.util.thread.Scheduler,java.nio.channels.SocketChannel)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#<init>(org.eclipse.jetty.util.thread.Scheduler,java.net.InetSocketAddress,java.net.InetSocketAddress)
CALLER: org.eclipse.jetty.io.IdleTimeout#setIdleTimeout(long)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#deactivate()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#activate()
CALLER: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameterNames()
	CALLEE: org.eclipse.jetty.servlet.Holder#getInitParameterNames()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONFIG_ERROR_NULL_APPLICATIONCLASS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.ResourceConfig#registerResources(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#registerResources(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#registerResources(java.util.Set)
CALLER: org.glassfish.jersey.server.ResourceConfig#setApplicationName(java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#setApplicationName(java.lang.String)
CALLER: org.glassfish.jersey.server.ResourceConfig#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#setClassLoader(java.lang.ClassLoader)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#<init>(org.glassfish.jersey.internal.OsgiRegistry,org.glassfish.jersey.internal.OsgiRegistry.1)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#<init>(org.glassfish.jersey.internal.OsgiRegistry)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#setIteratorProvider(org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#access$000(org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#register(org.osgi.framework.Bundle)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#findEntries(org.osgi.framework.Bundle,java.lang.String,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#<init>(java.lang.String,java.net.URL,org.osgi.framework.Bundle)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableCOMPONENT_CANNOT_BE_NULL()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.hk2.internal.PerThreadContext#<clinit>()
	CALLEE: org.glassfish.hk2.internal.PerThreadContext.1#<init>()
CALLER: static org.glassfish.hk2.utilities.ServiceLocatorUtilities#addClasses(org.glassfish.hk2.api.ServiceLocator,boolean,java.lang.Class[])
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#createDescriptorFilter(org.glassfish.hk2.api.Descriptor,boolean)
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.SingletonImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.SingletonImpl#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerLookupImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerLookupImpl#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerThreadImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerThreadImpl#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.InheritableThreadImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.InheritableThreadImpl#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.ImmediateImpl#<init>(org.glassfish.hk2.utilities.ServiceLocatorUtilities.1)
	CALLEE: org.glassfish.hk2.utilities.ServiceLocatorUtilities.ImmediateImpl#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.jersey.server.internal.JerseyResourceContext.Binder#configure()
	CALLEE: org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.Binder#configure()
	CALLEE: org.glassfish.jersey.server.internal.monitoring.MonitoringContainerListener.Binder#configure()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#configure()
	CALLEE: org.glassfish.jersey.server.ServerBinder#configure()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#complete()
	CALLEE: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder#configure()
	CALLEE: org.glassfish.jersey.internal.ServiceFinderBinder#configure()
	CALLEE: org.glassfish.jersey.process.internal.RequestScope.Binder#configure()
	CALLEE: org.glassfish.jersey.internal.JerseyErrorService.Binder#configure()
	CALLEE: org.glassfish.jersey.server.internal.process.ServerProcessingBinder#configure()
	CALLEE: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder#configure()
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder#configure()
	CALLEE: org.glassfish.jersey.internal.inject.JerseyClassAnalyzer.Binder#configure()
	CALLEE: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#configure()
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.Binder#configure()
	CALLEE: org.glassfish.jersey.internal.ExceptionMapperFactory.Binder#configure()
	CALLEE: org.glassfish.jersey.internal.ContextResolverFactory.Binder#configure()
	CALLEE: org.glassfish.jersey.internal.JaxrsProviders.Binder#configure()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders.Binder#configure()
	CALLEE: org.glassfish.jersey.server.model.internal.ResourceModelBinder#configure()
CALLER: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Class,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#<init>(java.lang.Class,java.lang.reflect.Type)
CALLER: org.glassfish.jersey.server.ResourceConfig#<init>(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: javax.ws.rs.core.Application#<init>()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#<init>(org.glassfish.jersey.server.ResourceConfig.State)
CALLER: static org.glassfish.jersey.server.ResourceConfig#access$600(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#unwrapCustomRootApplication(org.glassfish.jersey.server.ResourceConfig)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#registerComponentsOf(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3#<init>(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig,javax.ws.rs.core.Application)
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(java.lang.Runnable)
CALLER: org.glassfish.jersey.server.ResourceConfig#getRegisteredClasses()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getComponentBag()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getRegistrations()
CALLER: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#_getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#_getSingletons()
CALLER: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#and(jersey.repackaged.com.google.common.base.Predicate,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Sets.FilteredSet#<init>(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.glassfish.jersey.server.ResourceConfig#registerInstances(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#register(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
CALLER: org.glassfish.jersey.server.ResourceConfig#getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#_getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#_getClasses()
CALLER: static org.glassfish.jersey.internal.inject.CustomAnnotationLiteral#<clinit>()
	CALLEE: org.glassfish.jersey.internal.inject.CustomAnnotationLiteral#<init>()
CALLER: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#<init>(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterables#addAll(java.util.Collection,java.lang.Iterable)
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getPropertyNameForRuntime(java.lang.String,javax.ws.rs.RuntimeType)
	CALLEE: static javax.ws.rs.RuntimeType#values()
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getLegacyFallbackValue(java.util.Map,java.util.Map,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROPERTIES_HELPER_DEPRECATED_PROPERTY_NAME(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#convertValue(java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getStringConstructorPA(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getValueOfStringMethodPA(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROPERTIES_HELPER_GET_VALUE_NO_TRANSFORM(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.h2.store.fs.FilePath#registerDefaultProviders()
	CALLEE: static org.h2.util.New#hashMap()
CALLER: static org.h2.util.IOUtils#readBytesAndClose(java.io.InputStream,int)
	CALLEE: static org.h2.util.IOUtils#copy(java.io.InputStream,java.io.OutputStream,long)
	CALLEE: static org.h2.message.DbException#convertToIOException(java.lang.Throwable)
CALLER: static org.h2.util.IOUtils#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static org.h2.util.IOUtils#copy(java.io.InputStream,java.io.OutputStream,long)
CALLER: static org.h2.message.DbException#getJdbcSQLException(int,java.lang.Throwable,java.lang.String[])
	CALLEE: static org.h2.api.ErrorCode#getState(int)
	CALLEE: static org.h2.message.DbException#translate(java.lang.String,java.lang.String[])
	CALLEE: org.h2.jdbc.JdbcSQLException#<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Throwable,java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractEndPoint#<init>(org.eclipse.jetty.util.thread.Scheduler,java.net.InetSocketAddress,java.net.InetSocketAddress)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#<init>(org.eclipse.jetty.util.thread.Scheduler)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint.1#<init>(org.eclipse.jetty.io.AbstractEndPoint)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint.2#<init>(org.eclipse.jetty.io.AbstractEndPoint,org.eclipse.jetty.io.EndPoint)
CALLER: org.eclipse.jetty.io.IdleTimeout#activate()
	CALLEE: org.eclipse.jetty.io.IdleTimeout.1#run()
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#<init>(org.glassfish.jersey.internal.OsgiRegistry)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#<init>()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#<init>()
CALLER: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#access$000(org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#setInstance(org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider)
CALLER: static org.glassfish.hk2.utilities.BuilderHelper#createDescriptorFilter(org.glassfish.hk2.api.Descriptor,boolean)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#<init>(org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.BuilderHelper.2#<init>(org.glassfish.hk2.api.Descriptor)
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.SingletonImpl#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerLookupImpl#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.PerThreadImpl#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.InheritableThreadImpl#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.ServiceLocatorUtilities.ImmediateImpl#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getConfigType()
	CALLEE: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameterNames()
	CALLEE: static org.glassfish.jersey.servlet.WebComponent#access$300(org.glassfish.jersey.servlet.WebComponent)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.ReferencingFactory#referenceFactory()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.1#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.2#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.3#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.jersey.servlet.WebServletConfig#getServletConfig()
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.4#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder,javax.servlet.ServletConfig)
	CALLEE: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#install(org.glassfish.hk2.utilities.Binder[])
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.5#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.6#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.jersey.internal.ServiceFinderBinder#<init>(java.lang.Class,java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.jersey.server.ServerBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#install(org.glassfish.hk2.utilities.Binder[])
	CALLEE: org.glassfish.jersey.internal.ServiceFinderBinder#<init>(java.lang.Class,java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.jersey.process.internal.RequestScope.Binder#<init>()
	CALLEE: org.glassfish.jersey.internal.JerseyErrorService.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.process.ServerProcessingBinder#<init>()
	CALLEE: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder#<init>()
	CALLEE: org.glassfish.jersey.internal.inject.JerseyClassAnalyzer.Binder#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#<init>(java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.Binder#<init>()
	CALLEE: org.glassfish.jersey.internal.ExceptionMapperFactory.Binder#<init>()
	CALLEE: org.glassfish.jersey.internal.ContextResolverFactory.Binder#<init>()
	CALLEE: org.glassfish.jersey.internal.JaxrsProviders.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.model.internal.ResourceModelBinder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.JerseyResourceContext.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.Binder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.monitoring.MonitoringContainerListener.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.RuntimeConfigProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.JaxrsApplicationProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#complete()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#<init>(java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig.State#<init>(org.glassfish.jersey.server.ResourceConfig.State)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#<init>(org.glassfish.jersey.model.internal.CommonConfig)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Iterable)
CALLER: static org.glassfish.jersey.server.ResourceConfig#unwrapCustomRootApplication(org.glassfish.jersey.server.ResourceConfig)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getApplication()
CALLER: static org.glassfish.jersey.internal.Errors#processWithException(java.lang.Runnable)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer,boolean)
	CALLEE: org.glassfish.jersey.internal.Errors.2#<init>(java.lang.Runnable)
CALLER: org.glassfish.jersey.server.ResourceConfig#_getSingletons()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getInstances()
CALLER: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Platform#setsFilterSortedSet(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static jersey.repackaged.com.google.common.base.Predicates#and(jersey.repackaged.com.google.common.base.Predicate,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#asList(jersey.repackaged.com.google.common.base.Predicate,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#<init>(java.util.List,jersey.repackaged.com.google.common.base.Predicates.1)
CALLER: jersey.repackaged.com.google.common.collect.Sets.FilteredSet#<init>(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#<init>(java.util.Collection,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.glassfish.jersey.server.ResourceConfig#_getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#scanClasses()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getClasses()
CALLER: org.glassfish.jersey.internal.inject.CustomAnnotationLiteral#<init>()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#<init>(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static jersey.repackaged.com.google.common.collect.Iterables#addAll(java.util.Collection,java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#PROPERTIES_HELPER_DEPRECATED_PROPERTY_NAME(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROPERTIES_HELPER_DEPRECATED_PROPERTY_NAME(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getStringConstructorPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.15#<init>(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getValueOfStringMethodPA(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getStringToObjectMethodPA(java.lang.Class,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#PROPERTIES_HELPER_GET_VALUE_NO_TRANSFORM(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROPERTIES_HELPER_GET_VALUE_NO_TRANSFORM(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.h2.util.IOUtils#copy(java.io.InputStream,java.io.OutputStream,long)
	CALLEE: static org.h2.message.DbException#convertToIOException(java.lang.Throwable)
CALLER: static org.h2.message.DbException#convertToIOException(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#getOriginalCause()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
CALLER: static org.h2.message.DbException#translate(java.lang.String,java.lang.String[])
	CALLEE: static org.h2.util.StringUtils#quoteIdentifier(java.lang.String)
CALLER: org.h2.jdbc.JdbcSQLException#<init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Throwable,java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#setSQL(java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#buildMessage()
CALLER: org.eclipse.jetty.io.IdleTimeout#<init>(org.eclipse.jetty.util.thread.Scheduler)
	CALLEE: org.eclipse.jetty.io.IdleTimeout.1#<init>(org.eclipse.jetty.io.IdleTimeout)
CALLER: static org.eclipse.jetty.io.FillInterest#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.io.AbstractEndPoint.1#<init>(org.eclipse.jetty.io.AbstractEndPoint)
	CALLEE: org.eclipse.jetty.io.FillInterest#<init>()
CALLER: static org.eclipse.jetty.io.WriteFlusher#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.IdleState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.WritingState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.CompletingState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.eclipse.jetty.io.AbstractEndPoint.2#<init>(org.eclipse.jetty.io.AbstractEndPoint,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.WriteFlusher#<init>(org.eclipse.jetty.io.EndPoint)
CALLER: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#<init>()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#<init>()
CALLER: org.glassfish.hk2.utilities.DescriptorImpl#<init>(org.glassfish.hk2.api.Descriptor)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#deepCopyMetadata(java.util.Map)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#createFactoryBinder(java.lang.Class,java.lang.Class)
CALLER: static org.glassfish.jersey.internal.inject.ReferencingFactory#referenceFactory()
	CALLEE: org.glassfish.jersey.internal.inject.ReferencingFactory.EmptyReferenceFactory#<init>(org.glassfish.jersey.internal.inject.ReferencingFactory.1)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#createFactoryBinder(org.glassfish.hk2.api.Factory)
CALLER: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.1#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.servlet.WebComponent.WebComponentBinder.2#<init>(org.glassfish.jersey.servlet.WebComponent.WebComponentBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.servlet.WebServletConfig#getServletConfig()
	CALLEE: javax.servlet.GenericServlet#getServletConfig()
CALLER: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#install(org.glassfish.hk2.utilities.Binder[])
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.DynamicConfiguration)
CALLER: org.glassfish.jersey.internal.ServiceFinderBinder#<init>(java.lang.Class,java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.process.internal.RequestScope.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.JerseyErrorService.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.process.ServerProcessingBinder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.inject.JerseyClassAnalyzer.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#<init>(java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.message.internal.MessageBodyFactory.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.ExceptionMapperFactory.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.ContextResolverFactory.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.internal.JaxrsProviders.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.ProcessingProviders.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.model.internal.ResourceModelBinder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.JerseyResourceContext.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.jersey.server.internal.monitoring.MonitoringContainerListener.Binder#<init>()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Class,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
CALLER: static org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor#<clinit>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
CALLER: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.RuntimeConfigProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.RuntimeConfigProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder)
CALLER: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.JaxrsApplicationProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder,org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder.JaxrsApplicationProvider#<init>(org.glassfish.jersey.server.ApplicationHandler.ApplicationBinder)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Object)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#configuration()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#getDefaultBinderLoader()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#<init>()
	CALLEE: org.jvnet.hk2.component.MultiMap#<init>()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#<init>(org.glassfish.jersey.model.internal.CommonConfig)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#copy()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newLinkedList()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#copy(org.glassfish.jersey.model.internal.CommonConfig,boolean)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.util.Iterator)
CALLER: org.glassfish.jersey.server.ResourceConfig#getApplication()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#_getApplication()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_getApplication()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#_getApplication()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#getInstances()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getInstances()
CALLER: static jersey.repackaged.com.google.common.collect.Platform#setsFilterSortedSet(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.NavigableSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filterSortedIgnoreNavigable(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
CALLER: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#<init>(java.util.List,jersey.repackaged.com.google.common.base.Predicates.1)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#<init>(java.util.List)
CALLER: org.glassfish.jersey.server.ResourceConfig#scanClasses()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#hasNext()
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#close()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#isProperty(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Iterable)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getResourceFinders()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#parsePropertyValue(java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getClassLoader()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#UNABLE_TO_LOAD_CLASS(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperty(java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#<init>(java.lang.String[],boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#<init>(java.lang.String[],boolean)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#newJaxrsResourceAndProviderListener(java.lang.ClassLoader)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONFIG_UNABLE_TO_PROCESS(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#getAnnotatedClasses()
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#process(java.lang.String,java.io.InputStream)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#accept(java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#open()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#open()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#open()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#getClasses()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getClasses()
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.1#<init>()
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.2#<init>()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROPERTIES_HELPER_DEPRECATED_PROPERTY_NAME(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getStringToObjectMethodPA(java.lang.Class,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.14#<init>(java.lang.Class,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROPERTIES_HELPER_GET_VALUE_NO_TRANSFORM(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.h2.jdbc.JdbcSQLException#setSQL(java.lang.String)
	CALLEE: org.h2.jdbc.JdbcSQLException#buildMessage()
CALLER: static org.eclipse.jetty.io.WriteFlusher.StateType#<clinit>()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.StateType#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.io.WriteFlusher.IdleState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.IdleState#<init>()
CALLER: org.eclipse.jetty.io.WriteFlusher.WritingState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.WritingState#<init>()
CALLER: org.eclipse.jetty.io.WriteFlusher.CompletingState#<init>(org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.CompletingState#<init>()
CALLER: static org.glassfish.hk2.api.DescriptorType#<clinit>()
	CALLEE: org.glassfish.hk2.api.DescriptorType#<init>(java.lang.String,int)
CALLER: static org.glassfish.hk2.api.DescriptorVisibility#<clinit>()
	CALLEE: org.glassfish.hk2.api.DescriptorVisibility#<init>(java.lang.String,int)
CALLER: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#createFactoryBinder(java.lang.Class,java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#<init>(java.lang.Class,java.lang.Class)
CALLER: org.glassfish.jersey.internal.inject.ReferencingFactory.EmptyReferenceFactory#<init>(org.glassfish.jersey.internal.inject.ReferencingFactory.1)
	CALLEE: org.glassfish.jersey.internal.inject.ReferencingFactory.EmptyReferenceFactory#<init>()
CALLER: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#createFactoryBinder(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#<init>(org.glassfish.hk2.api.Factory)
CALLER: static jersey.repackaged.com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#capacity(int)
CALLER: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#<init>(java.lang.Object)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#getDefaultBinderLoader()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder.1#<init>(org.glassfish.hk2.utilities.binding.AbstractBinder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder.2#<init>(org.glassfish.hk2.utilities.binding.AbstractBinder,java.lang.ClassLoader)
CALLER: static org.jvnet.hk2.component.MultiMap#<clinit>()
	CALLEE: org.jvnet.hk2.component.MultiMap.1#<init>()
CALLER: org.glassfish.jersey.model.internal.ComponentBag#copy()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet(java.lang.Iterable)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#<init>(jersey.repackaged.com.google.common.base.Predicate,java.util.Set,java.util.Set,java.util.Map)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#copy(org.glassfish.jersey.model.internal.CommonConfig,boolean)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#loadFrom(org.glassfish.jersey.model.internal.ComponentBag)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.NavigableSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#and(jersey.repackaged.com.google.common.base.Predicate,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Sets.FilteredNavigableSet#<init>(java.util.NavigableSet,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static jersey.repackaged.com.google.common.collect.Sets#filterSortedIgnoreNavigable(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#and(jersey.repackaged.com.google.common.base.Predicate,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Sets.FilteredSortedSet#<init>(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.glassfish.jersey.server.ResourceConfig#parsePropertyValue(java.lang.String)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getProperties()
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#UNABLE_TO_LOAD_CLASS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableUNABLE_TO_LOAD_CLASS(java.lang.Object)
CALLER: org.glassfish.jersey.server.ResourceConfig#getProperty(java.lang.String)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getProperty(java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#<init>(java.lang.String[],boolean)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getContextClassLoaderPA()
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[],java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#<init>(java.lang.ClassLoader,java.lang.String[],boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#<init>(java.lang.String[],boolean)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[],java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#init()
CALLER: static org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#newJaxrsResourceAndProviderListener(java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#<init>(java.lang.ClassLoader,java.lang.Class[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONFIG_UNABLE_TO_PROCESS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONFIG_UNABLE_TO_PROCESS(java.lang.Object)
CALLER: jersey.repackaged.com.google.common.collect.Iterators.1#<init>()
	CALLEE: jersey.repackaged.com.google.common.collect.UnmodifiableListIterator#<init>()
CALLER: org.eclipse.jetty.io.WriteFlusher.IdleState#<init>()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType,org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.eclipse.jetty.io.WriteFlusher.WritingState#<init>()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType,org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.eclipse.jetty.io.WriteFlusher.CompletingState#<init>()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType,org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#<init>(java.lang.Class,java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#<init>(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#<init>(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#<init>()
CALLER: jersey.repackaged.com.google.common.collect.Sets.FilteredNavigableSet#<init>(java.util.NavigableSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Sets.FilteredSortedSet#<init>(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
CALLER: jersey.repackaged.com.google.common.collect.Sets.FilteredSortedSet#<init>(java.util.SortedSet,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Sets.FilteredSet#<init>(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[])
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[],java.lang.String)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableUNABLE_TO_LOAD_CLASS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String[],java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String,java.lang.String,java.util.Collection)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#<init>(java.lang.ClassLoader,java.lang.String[],boolean)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getOsgiRegistryInstance()
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#add(org.glassfish.jersey.server.internal.scanning.UriSchemeResourceFinderFactory)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner,org.glassfish.jersey.internal.OsgiRegistry,boolean)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#setResourcesProvider(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#init()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#init()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#processFile(java.io.File)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#<init>(java.lang.ClassLoader,java.lang.Class[])
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#getAnnotationSet(java.lang.Class[])
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#<init>(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener,org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.1)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONFIG_UNABLE_TO_PROCESS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: jersey.repackaged.com.google.common.collect.UnmodifiableListIterator#<init>()
	CALLEE: jersey.repackaged.com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType,org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType)
CALLER: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String,java.lang.String,java.util.Collection)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#add(org.glassfish.jersey.server.internal.scanning.UriSchemeResourceFinderFactory)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#getSchemes()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#getSchemes()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory#getSchemes()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#getSchemes()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner,org.glassfish.jersey.internal.OsgiRegistry,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#<init>()
CALLER: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#setResourcesProvider(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#access$100(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#init()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#access$000()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#toURI(java.net.URL)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#addResourceFinder(java.net.URI)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.1#getResources(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider.1#getResources(java.lang.String,java.lang.ClassLoader)
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#processFile(java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#push(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#<init>(java.io.InputStream,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.FilesScanner,java.io.File)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#<init>(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener,org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.1)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#<init>(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener)
CALLER: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#access$100(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#setInstance(org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider)
CALLER: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#access$000()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#getInstance()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#toURI(java.net.URL)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#toExternalForm(java.net.URL)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#addResourceFinder(java.net.URI)
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#push(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#create(java.net.URI,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#<init>(java.io.InputStream,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.FilesScanner,java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1.1#<init>(org.glassfish.jersey.server.internal.scanning.FilesScanner.1)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#<init>(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: static org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#getInstance()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider.1#<init>()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#toExternalForm(java.net.URL)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#contextualEncode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type)
CALLER: jersey.repackaged.org.objectweb.asm.ClassVisitor#<init>(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassVisitor#<init>(int,jersey.repackaged.org.objectweb.asm.ClassVisitor)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider.1#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.ResourcesProvider#<init>()
CALLER: static org.glassfish.jersey.uri.UriComponent.Type#<clinit>()
	CALLEE: org.glassfish.jersey.uri.UriComponent.Type#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.uri.UriComponent#contextualEncode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#_encode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type,boolean,boolean)
CALLER: static org.glassfish.jersey.uri.UriComponent#<clinit>()
	CALLEE: static org.glassfish.jersey.uri.UriComponent#initEncodingTables()
	CALLEE: static org.glassfish.jersey.uri.UriComponent#initHexTable()
CALLER: static org.glassfish.jersey.uri.UriComponent#_encode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type,boolean,boolean)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#isHexCharacter(char)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#appendPercentEncodedOctet(java.lang.StringBuilder,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#appendUTF8EncodedCharacter(java.lang.StringBuilder,int)
CALLER: static org.glassfish.jersey.uri.UriComponent#initEncodingTables()
	CALLEE: static org.glassfish.jersey.uri.UriComponent.Type#values()
	CALLEE: static org.glassfish.jersey.uri.UriComponent#initEncodingTable(java.util.List)
CALLER: static org.glassfish.jersey.uri.UriComponent#appendUTF8EncodedCharacter(java.lang.StringBuilder,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#appendPercentEncodedOctet(java.lang.StringBuilder,int)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#doStop()
CALLER: org.eclipse.jetty.webapp.WebAppContext#doStop()
	CALLEE: org.eclipse.jetty.webapp.MetaData#<init>()
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#doStop()
	CALLEE: org.eclipse.jetty.webapp.MetaData#clear()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setAvailable(boolean)
CALLER: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder.1#<init>(org.glassfish.jersey.servlet.internal.PersistenceUnitBinder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.ServiceFinderBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: static org.glassfish.jersey.CommonProperties#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#toClassArray()
CALLER: org.glassfish.jersey.process.internal.RequestScope.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.jersey.process.internal.RequestScope#<init>()
CALLER: org.glassfish.jersey.internal.JerseyErrorService.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.process.ServerProcessingBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.ReferencingFactory#referenceFactory()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.jersey.server.internal.process.ServerProcessingBinder.1#<init>(org.glassfish.jersey.server.internal.process.ServerProcessingBinder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder.1#<init>(org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.1#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.2#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.3#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.4#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.5#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.6#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.7#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.8#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.9#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.inject.JerseyClassAnalyzer.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#install(org.glassfish.hk2.utilities.Binder[])
	CALLEE: org.glassfish.jersey.internal.ServiceFinderBinder#<init>(java.lang.Class,java.util.Map,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#bindSingletonWorker(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.message.internal.MessageBodyFactory.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.ExceptionMapperFactory.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.ContextResolverFactory.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.internal.JaxrsProviders.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.ProcessingProviders.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.ReferencingFactory#referenceFactory()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindFactory(org.glassfish.hk2.api.Factory)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders.Binder.1#<init>(org.glassfish.jersey.server.internal.ProcessingProviders.Binder)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.internal.ResourceModelBinder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.JerseyResourceContext.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.monitoring.MonitoringContainerListener.Binder#configure()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.ApplicationHandler.3#call()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.3#call()
CALLER: org.glassfish.jersey.internal.Errors.2#call()
	CALLEE: org.glassfish.jersey.internal.Errors.2#call()
CALLER: com.zaxxer.hikari.pool.HikariPool.2#run()
	CALLEE: static com.zaxxer.hikari.pool.HikariPool#access$200(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#run()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$200(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$600(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$400(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.util.thread.ShutdownThread#isRegistered(org.eclipse.jetty.util.component.LifeCycle)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$500(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopInput(java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#informClient(java.io.OutputStream,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopOutput(java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopLifeCycles(boolean)
CALLER: org.h2.jdbc.JdbcSQLException#printStackTrace()
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
CALLER: org.slf4j.helpers.MarkerIgnoringBase#getName()
	CALLEE: org.slf4j.helpers.NamedLoggerBase#getName()
CALLER: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object[])
CALLER: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#isLevelEnabled(int)
CALLER: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object[])
CALLER: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object[])
CALLER: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#debug(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.impl.SimpleLogger#isErrorEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#isLevelEnabled(int)
CALLER: liquibase.database.jvm.JdbcConnection#commit()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
CALLER: org.slf4j.impl.SimpleLogger#info(java.lang.String)
	CALLEE: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.IdleTimeout.1#run()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#checkIdleTimeout()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleTimeout()
	CALLEE: static org.eclipse.jetty.io.IdleTimeout#access$000(org.eclipse.jetty.io.IdleTimeout,long)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxy(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#has(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#to(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#ofRank(int)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#build()
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#in(java.lang.annotation.Annotation)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#activeLink(java.lang.Class)
	CALLEE: org.jvnet.hk2.component.MultiMap#keySet()
	CALLEE: org.jvnet.hk2.component.MultiMap#get(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.Descriptor,boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#named(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#andLoadWith(org.glassfish.hk2.api.HK2Loader)
CALLER: org.glassfish.jersey.model.internal.ComponentBag#loadFrom(org.glassfish.jersey.model.internal.ComponentBag)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#clear()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#create(java.net.URI,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#create(java.net.URI,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#<init>(java.net.URI,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#create(java.net.URI,boolean)
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#info(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#buildProvideMethod()
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxy(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#has(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#to(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#ofRank(int)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#build()
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#activeLink(java.lang.Class)
	CALLEE: org.jvnet.hk2.component.MultiMap#keySet()
	CALLEE: org.jvnet.hk2.component.MultiMap#get(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: org.glassfish.hk2.utilities.FactoryDescriptorsImpl#<init>(org.glassfish.hk2.api.Descriptor,org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#named(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#andLoadWith(org.glassfish.hk2.api.HK2Loader)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addMetadata(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addQualifierAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addContractType(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setLoader(org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#andLoadWith(org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#buildProvideMethod()
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#proxy(boolean)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#has(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#to(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#ofRank(int)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#in(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#activeLink(java.lang.Class)
	CALLEE: org.jvnet.hk2.component.MultiMap#keySet()
	CALLEE: org.jvnet.hk2.component.MultiMap#get(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: org.glassfish.hk2.utilities.FactoryDescriptorsImpl#<init>(org.glassfish.hk2.api.Descriptor,org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#createConstantDescriptor(java.lang.Object)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#complete(org.glassfish.hk2.api.DynamicConfiguration,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setRanking(int)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setName(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setScope(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setClassAnalysisName(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addMetadata(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setLoader(org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.jvnet.hk2.component.MultiMap#keySet()
	CALLEE: org.jvnet.hk2.component.MultiMap#get(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.Descriptor,boolean)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#createConstantDescriptor(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setProxiable(java.lang.Boolean)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setProxyForSameScope(java.lang.Boolean)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addQualifierAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addContractType(java.lang.reflect.Type)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#process(java.lang.String,java.io.InputStream)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(java.io.InputStream)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#accept(jersey.repackaged.org.objectweb.asm.ClassVisitor,int)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.apache.log4j.helpers.AppenderAttachableImpl#removeAllAppenders()
	CALLEE: org.apache.log4j.WriterAppender#close()
	CALLEE: org.apache.log4j.varia.NullAppender#close()
CALLER: org.eclipse.jetty.server.HttpConnectionFactory#newConnection(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.HttpConnection#<init>(org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#configure(org.eclipse.jetty.io.AbstractConnection,org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
CALLER: org.glassfish.jersey.server.ResourceConfig#registerFinder(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#invalidateCache()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#registerFinder(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#registerFinder(org.glassfish.jersey.server.ResourceFinder)
CALLER: org.glassfish.jersey.internal.ServiceFinder#toArray()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#iterator()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#next()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#next()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#hasNext()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#hasNext()
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.reflect.Type)
CALLER: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#filter(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#get()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.4#get()
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#of(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel.1#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.InstanceValue#get()
	CALLEE: org.glassfish.jersey.server.model.Resource.2#get()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.1#get()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#create(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.extension.ServiceLocatorGenerator,org.glassfish.hk2.api.ServiceLocatorFactory.CreatePolicy)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#getLogger()
	CALLEE: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#getGeneratedName()
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#internalCreate(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.extension.ServiceLocatorGenerator)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#callListenerAdded(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#onOpen()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#onOpen()
CALLER: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#size()
CALLER: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#transform(java.util.Iterator,jersey.repackaged.com.google.common.base.Function)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#init()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#close()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#init()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#close()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#open()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#open()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner.1#getResources(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#getPackageResources(java.lang.String,java.lang.ClassLoader,boolean)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#toString()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.NoContext#log(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$100()
CALLER: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#supports(liquibase.database.Database)
	CALLEE: liquibase.database.AbstractJdbcDatabase#getConnection()
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.jersey.server.ApplicationHandler#onShutdown(org.glassfish.jersey.server.spi.Container)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#onShutdown(org.glassfish.jersey.server.spi.Container)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#unwrapApplication(javax.ws.rs.core.Application)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#shutdownLocator(org.glassfish.hk2.api.ServiceLocator)
CALLER: org.glassfish.jersey.server.ApplicationHandler#onStartup(org.glassfish.jersey.server.spi.Container)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#onStartup(org.glassfish.jersey.server.spi.Container)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_setApplication(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#mergeApplications(javax.ws.rs.core.Application)
CALLER: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: javax.ws.rs.core.Application#getSingletons()
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#_getSingletons()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getInstances()
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#access$000(org.glassfish.jersey.server.ResourceConfig)
CALLER: org.glassfish.jersey.server.ResourceConfig.WrappingResourceConfig#_getClasses()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#_getClasses()
	CALLEE: javax.ws.rs.core.Application#getClasses()
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#_getClasses()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getClasses()
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#access$000(org.glassfish.jersey.server.ResourceConfig)
CALLER: org.eclipse.jetty.servlet.Holder.HolderConfig#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.servlet.Holder#getInitParameter(java.lang.String)
CALLER: org.apache.log4j.AppenderSkeleton#doAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLevel()
	CALLEE: org.apache.log4j.AppenderSkeleton#isAsSevereAsThreshold(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.WriterAppender#append(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.varia.NullAppender#append(org.apache.log4j.spi.LoggingEvent)
CALLER: org.eclipse.jetty.server.ClassLoaderDump#dump(java.lang.Appendable,java.lang.String)
	CALLEE: org.eclipse.jetty.server.ClassLoaderDump#<init>(java.lang.ClassLoader)
	CALLEE: static org.eclipse.jetty.util.component.ContainerLifeCycle#dump(java.lang.Appendable,java.lang.String,java.util.Collection[])
	CALLEE: static org.eclipse.jetty.util.TypeUtil#asList(java.lang.Object[])
CALLER: org.eclipse.jetty.servlet.Holder.HolderConfig#getServletContext()
	CALLEE: org.eclipse.jetty.servlet.ServletHandler#getServletContext()
CALLER: org.h2.server.web.WebServer#stop()
	CALLEE: static org.h2.message.DbException#traceThrowable(java.lang.Throwable)
	CALLEE: org.h2.server.web.WebServer#traceError(java.lang.Throwable)
	CALLEE: static org.h2.util.New#arrayList(java.util.Collection)
CALLER: org.eclipse.jetty.util.resource.URLResource#getFile()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: com.zaxxer.hikari.pool.PoolEntry#createProxyConnection(com.zaxxer.hikari.pool.ProxyLeakTask,long)
	CALLEE: static com.zaxxer.hikari.pool.ProxyFactory#getProxyConnection(com.zaxxer.hikari.pool.PoolEntry,java.sql.Connection,com.zaxxer.hikari.util.FastList,com.zaxxer.hikari.pool.ProxyLeakTask,long,boolean,boolean)
CALLER: com.zaxxer.hikari.pool.PoolEntry#close()
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getPoolName()
CALLER: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedDisplayString(long,long)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#stateToString()
CALLER: org.eclipse.jetty.util.FutureCallback#get(long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.util.FutureCallback#get(long,java.util.concurrent.TimeUnit)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#open()
	CALLEE: static org.glassfish.jersey.servlet.WebAppResourcesScanner#access$100(org.glassfish.jersey.servlet.WebAppResourcesScanner)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getResourceAsStream(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#getResourceAsStream(java.lang.String)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#push(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#<init>(java.io.InputStream,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
	CALLEE: static org.glassfish.jersey.servlet.WebAppResourcesScanner#access$100(org.glassfish.jersey.servlet.WebAppResourcesScanner)
	CALLEE: static org.glassfish.jersey.servlet.WebAppResourcesScanner#access$000(org.glassfish.jersey.servlet.WebAppResourcesScanner,java.lang.String[])
	CALLEE: static org.glassfish.jersey.servlet.WebAppResourcesScanner#access$200(org.glassfish.jersey.servlet.WebAppResourcesScanner)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getResourceAsStream(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.NoContext#getResourceAsStream(java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.JarFileScanner)
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#JAR_SCANNER_UNABLE_TO_READ_ENTRY()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#close()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#hasNext()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.FilesScanner#access$000(org.glassfish.jersey.server.internal.scanning.FilesScanner)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.FilesScanner#access$100(org.glassfish.jersey.server.internal.scanning.FilesScanner,java.io.File)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#doStop()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#info(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.util.AttributesMap#clearAttributes()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#doStop()
	CALLEE: javax.servlet.ServletContextEvent#<init>(javax.servlet.ServletContext)
	CALLEE: org.eclipse.jetty.servlet.ServletContextHandler#callContextDestroyed(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.webapp.WebAppContext#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setClassLoader(java.lang.ClassLoader)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getDisplayName()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setAvailable(boolean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
CALLER: org.glassfish.jersey.servlet.internal.PersistenceUnitBinder.1#<init>(org.glassfish.jersey.servlet.internal.PersistenceUnitBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: static org.glassfish.jersey.CommonProperties#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class,java.util.Map)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,boolean)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#_getContextClassLoader()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,java.lang.ClassLoader,boolean)
CALLER: static org.glassfish.jersey.process.internal.RequestScope#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#<init>(java.util.logging.Logger,java.util.logging.Level)
CALLER: org.glassfish.jersey.server.internal.process.ServerProcessingBinder.1#<init>(org.glassfish.jersey.server.internal.process.ServerProcessingBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: static org.glassfish.jersey.server.ContainerRequest#<clinit>()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_SET_ENTITY_STREAM_IN_RESPONSE_PHASE()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_SET_SECURITY_CONTEXT_IN_RESPONSE_PHASE()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_ABORT_IN_RESPONSE_PHASE()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_PARAMETER_CANNOT_BE_NULL_OR_EMPTY(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_PARAMETER_CANNOT_BE_NULL(java.lang.Object)
CALLER: static org.glassfish.jersey.message.internal.InboundMessageContext#<clinit>()
	CALLEE: org.glassfish.jersey.message.internal.InboundMessageContext.1#<init>()
CALLER: static org.glassfish.jersey.spi.AbstractThreadPoolProvider#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#<init>(java.util.logging.Logger,java.util.logging.Level)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bindAsContract(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Class,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#resetBuilder(org.glassfish.hk2.utilities.binding.AbstractBindingBuilder)
CALLER: org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder.1#<init>(org.glassfish.jersey.internal.inject.ContextInjectionResolver.Binder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: static org.glassfish.jersey.server.internal.inject.DelegatedInjectionValueFactoryProvider#<clinit>()
	CALLEE: org.glassfish.jersey.server.internal.inject.DelegatedInjectionValueFactoryProvider.2#<init>()
	CALLEE: org.glassfish.hk2.utilities.cache.Cache#<init>(org.glassfish.hk2.utilities.cache.Computable)
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.1#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.2#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.3#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.4#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.5#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.6#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.7#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.8#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder.9#<init>(org.glassfish.jersey.server.internal.inject.ParameterInjectionBinder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#analyzeWith(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#analyzeWith(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#analyzeWith(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#analyzeWith(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#analyzeWith(java.lang.String)
CALLER: org.glassfish.jersey.message.internal.MessagingBinders.MessageBodyProviders#bindSingletonWorker(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: static org.glassfish.jersey.message.internal.RenderedImageProvider#<clinit>()
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.message.internal.MessageBodyFactory#<clinit>()
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.1#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.2#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.3#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MessageBodyFactory.4#<init>()
CALLER: static org.glassfish.jersey.internal.ContextResolverFactory#<clinit>()
	CALLEE: org.glassfish.jersey.internal.ContextResolverFactory.NullContextResolverAdapter#<init>(org.glassfish.jersey.internal.ContextResolverFactory.1)
CALLER: org.glassfish.jersey.server.internal.ProcessingProviders.Binder.1#<init>(org.glassfish.jersey.server.internal.ProcessingProviders.Binder)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#<init>()
CALLER: static org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory#<clinit>()
	CALLEE: org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.1#<init>()
CALLER: org.glassfish.jersey.server.ApplicationHandler.3#call()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#get()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#access$500(org.glassfish.jersey.server.ApplicationHandler,java.lang.Iterable)
CALLER: org.glassfish.jersey.internal.Errors.2#call()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3#run()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder.1#run()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator.1#run()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder.3#run()
CALLER: static com.zaxxer.hikari.pool.HikariPool#access$200(com.zaxxer.hikari.pool.HikariPool,com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#softEvictConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String,boolean)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.Socket)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopInput(java.net.Socket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$102(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$100(org.eclipse.jetty.server.ShutdownMonitor)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$800(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$900(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopOutput(java.net.Socket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$102(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$300(org.eclipse.jetty.server.ShutdownMonitor,java.lang.String,java.lang.Object[])
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$700(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
CALLER: org.eclipse.jetty.server.ShutdownMonitor.ShutdownMonitorRunnable#stopLifeCycles(boolean)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#stop()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#destroy()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#destroy()
	CALLEE: org.eclipse.jetty.server.handler.AbstractHandler#destroy()
	CALLEE: org.eclipse.jetty.server.handler.HandlerWrapper#destroy()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#destroy()
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$600(org.eclipse.jetty.server.ShutdownMonitor,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.ShutdownMonitor#access$400(org.eclipse.jetty.server.ShutdownMonitor)
CALLER: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#isLevelEnabled(int)
	CALLEE: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
CALLER: org.slf4j.impl.SimpleLogger#formatAndLog(int,java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#isLevelEnabled(int)
	CALLEE: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
CALLER: org.slf4j.impl.SimpleLogger#log(int,java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.SimpleLogger#isLevelEnabled(int)
	CALLEE: org.slf4j.impl.SimpleLogger#getFormattedDate()
	CALLEE: org.slf4j.impl.SimpleLogger#computeShortName()
	CALLEE: org.slf4j.impl.SimpleLogger#write(java.lang.StringBuilder,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.IdleTimeout#checkIdleTimeout()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleTimeout()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleTimestamp()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#onIdleExpired(java.util.concurrent.TimeoutException)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#notIdle()
CALLER: static org.eclipse.jetty.io.IdleTimeout#access$000(org.eclipse.jetty.io.IdleTimeout,long)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#scheduleIdleTimeout(long)
CALLER: static org.glassfish.hk2.utilities.BuilderHelper#activeLink(java.lang.Class)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#<init>(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.Descriptor,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#configuration()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.Descriptor,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#setLoader(org.glassfish.hk2.api.Descriptor)
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#getInputStream(java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory,java.io.InputStream,java.lang.String,boolean,org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.1)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory,java.net.URI,boolean,org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.1)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#<init>(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindDirectory(java.net.URI)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindMethod(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#getChildren(java.lang.Object,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory#create(java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory,java.net.URI,org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.1)
CALLER: static org.slf4j.event.Level#<clinit>()
	CALLEE: org.slf4j.event.Level#<init>(java.lang.String,int,int,java.lang.String)
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.glassfish.hk2.utilities.FactoryDescriptorsImpl#<init>(org.glassfish.hk2.api.Descriptor,org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#getAdvertisedContracts()
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#getDescriptorType()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors,boolean)
CALLER: static org.glassfish.hk2.utilities.BuilderHelper#createConstantDescriptor(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAdvertisedTypesFromObject(java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getName(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#createConstantDescriptor(java.lang.Object,java.lang.String,java.lang.reflect.Type[])
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(java.io.InputStream)
	CALLEE: static jersey.repackaged.org.objectweb.asm.ClassReader#readClass(java.io.InputStream,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(byte[])
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#accept(jersey.repackaged.org.objectweb.asm.ClassVisitor,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#accept(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Attribute[],int)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(org.glassfish.hk2.api.TypeLiteral)
	CALLEE: org.glassfish.hk2.api.TypeLiteral#getType()
CALLER: static org.eclipse.jetty.server.HttpConnection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.io.AbstractConnection#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.IdleState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillingState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.RefillingState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillingFillInterestedState#<init>(java.lang.String,org.eclipse.jetty.io.AbstractConnection.1)
CALLER: org.eclipse.jetty.server.HttpConnection#<init>(org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getExecutor()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#<init>(org.eclipse.jetty.io.EndPoint,java.util.concurrent.Executor,boolean)
	CALLEE: org.eclipse.jetty.server.HttpConnection.SendCallback#<init>(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.server.HttpConnection.1)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#getByteBufferPool()
	CALLEE: org.eclipse.jetty.server.HttpConnection#newHttpGenerator()
	CALLEE: org.eclipse.jetty.server.HttpConnection#newHttpInput()
	CALLEE: org.eclipse.jetty.server.HttpConnection#newHttpChannel(org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.server.HttpConnection#newHttpParser()
CALLER: org.eclipse.jetty.server.AbstractConnectionFactory#configure(org.eclipse.jetty.io.AbstractConnection,org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBeans(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#getInputBufferSize()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#setInputBufferSize(int)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#addListener(org.eclipse.jetty.io.Connection.Listener)
CALLER: org.glassfish.jersey.internal.ServiceFinder#iterator()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#access$100()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#createIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#filter(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.7#<init>(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.glassfish.jersey.server.ApplicationHandler.4#get()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.4#get()
CALLER: static org.glassfish.jersey.internal.util.collection.Values#of(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#empty()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.InstanceValue#<init>(java.lang.Object)
CALLER: static org.glassfish.hk2.utilities.reflection.Logger#<clinit>()
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#<init>()
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger.1#<init>()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#internalCreate(java.lang.String,org.glassfish.hk2.api.ServiceLocator,org.glassfish.hk2.extension.ServiceLocatorGenerator)
	CALLEE: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.DefaultGeneratorInitializer#access$200()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#callListenerAdded(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#getLogger()
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(java.lang.String,org.glassfish.hk2.api.ServiceLocator)
CALLER: org.eclipse.jetty.io.AbstractEndPoint#onOpen()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#onOpen()
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#transform(java.util.Iterator,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.8#<init>(java.util.Iterator,jersey.repackaged.com.google.common.base.Function)
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#close()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#close()
CALLER: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#open()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#open()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#open()
CALLER: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#next()
CALLER: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#hasNext()
CALLER: org.glassfish.jersey.internal.OsgiRegistry#getPackageResources(java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#findEntries(org.osgi.framework.Bundle,java.lang.String,java.lang.String,boolean)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#bundleEntryPathToClassName(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#OSGI_REGISTRY_ERROR_OPENING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#OSGI_REGISTRY_ERROR_PROCESSING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#normalizedPackagePath(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#isPackageLevelEntry(java.lang.String,java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractEndPoint#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleTimeout()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#getRemoteAddress()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#getLocalAddress()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.FillInterest#isInterested()
	CALLEE: org.eclipse.jetty.io.WriteFlusher#isInProgress()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleFor()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#getConnection()
CALLER: static org.glassfish.jersey.server.ResourceConfig#unwrapApplication(javax.ws.rs.core.Application)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getApplication()
CALLER: static org.glassfish.jersey.internal.inject.Injections#shutdownLocator(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#find(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(java.lang.String)
CALLER: org.apache.log4j.AppenderSkeleton#isAsSevereAsThreshold(org.apache.log4j.Priority)
	CALLEE: org.apache.log4j.Priority#isGreaterOrEqual(org.apache.log4j.Priority)
CALLER: org.apache.log4j.WriterAppender#append(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.WriterAppender#checkEntryConditions()
	CALLEE: org.apache.log4j.DailyRollingFileAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: org.eclipse.jetty.util.resource.JarResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#newConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#newConnection()
CALLER: static com.zaxxer.hikari.pool.ProxyFactory#getProxyConnection(com.zaxxer.hikari.pool.PoolEntry,java.sql.Connection,com.zaxxer.hikari.util.FastList,com.zaxxer.hikari.pool.ProxyLeakTask,long,boolean,boolean)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyConnection#<init>(com.zaxxer.hikari.pool.PoolEntry,java.sql.Connection,com.zaxxer.hikari.util.FastList,com.zaxxer.hikari.pool.ProxyLeakTask,long,boolean,boolean)
CALLER: com.zaxxer.hikari.pool.PoolEntry#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.HikariPool#toString()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#hasNext()
CALLER: static org.glassfish.jersey.servlet.WebAppResourcesScanner#access$000(org.glassfish.jersey.servlet.WebAppResourcesScanner,java.lang.String[])
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#processPaths(java.lang.String[])
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#hasNext()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#JAR_SCANNER_UNABLE_TO_READ_ENTRY()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableJAR_SCANNER_UNABLE_TO_READ_ENTRY()
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner#close()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#JAR_SCANNER_UNABLE_TO_CLOSE_FILE()
CALLER: static org.glassfish.jersey.server.internal.scanning.FilesScanner#access$100(org.glassfish.jersey.server.internal.scanning.FilesScanner,java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#processFile(java.io.File)
CALLER: static org.eclipse.jetty.server.handler.ContextHandler.Availability#<clinit>()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Availability#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler#callContextDestroyed(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#callContextDestroyed(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#addEventListener(java.util.EventListener)
CALLER: org.eclipse.jetty.webapp.WebAppContext#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setEventListeners(java.util.EventListener[])
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#clearEventListeners()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttributeNames()
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeNames()
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$300(org.eclipse.jetty.server.handler.ContextHandler)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#setManagedAttribute(java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.webapp.WebAppContext#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#removeEventListener(java.util.EventListener)
CALLER: org.eclipse.jetty.util.AttributesMap#clearAttributes()
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_SET_ENTITY_STREAM_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_SET_ENTITY_STREAM_IN_RESPONSE_PHASE()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_SET_SECURITY_CONTEXT_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_SET_SECURITY_CONTEXT_IN_RESPONSE_PHASE()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_REQUEST_ABORT_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_ABORT_IN_RESPONSE_PHASE()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_PARAMETER_CANNOT_BE_NULL_OR_EMPTY(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_PARAMETER_CANNOT_BE_NULL_OR_EMPTY(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_PARAMETER_CANNOT_BE_NULL(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_PARAMETER_CANNOT_BE_NULL(java.lang.Object)
CALLER: static org.glassfish.jersey.message.internal.MediaTypes#<clinit>()
	CALLEE: static javax.ws.rs.core.MediaType#valueOf(java.lang.String)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.1#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.2#<init>()
	CALLEE: org.glassfish.jersey.message.internal.AcceptableMediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.3#<init>()
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.4#<init>()
CALLER: static org.glassfish.hk2.utilities.cache.Cache#<clinit>()
	CALLEE: org.glassfish.hk2.utilities.cache.Cache.1#<init>()
CALLER: org.glassfish.hk2.utilities.cache.Cache#<init>(org.glassfish.hk2.utilities.cache.Computable)
	CALLEE: org.glassfish.hk2.utilities.cache.Cache#<init>(org.glassfish.hk2.utilities.cache.Computable,org.glassfish.hk2.utilities.cache.Cache.CycleHandler)
CALLER: static org.glassfish.jersey.message.internal.ReaderWriter#<clinit>()
	CALLEE: static org.glassfish.jersey.message.internal.ReaderWriter#getBufferSize()
CALLER: static javax.ws.rs.core.MediaType#<clinit>()
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.ws.rs.core.MediaType#<init>()
CALLER: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map)
CALLER: org.glassfish.jersey.internal.ContextResolverFactory.NullContextResolverAdapter#<init>(org.glassfish.jersey.internal.ContextResolverFactory.1)
	CALLEE: org.glassfish.jersey.internal.ContextResolverFactory.NullContextResolverAdapter#<init>()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#access$500(org.glassfish.jersey.server.ApplicationHandler,java.lang.Iterable)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#initialize(java.lang.Iterable)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3#run()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerClasses(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#registerInstances(java.util.Set)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getClasses()
	CALLEE: javax.ws.rs.core.Application#getSingletons()
	CALLEE: javax.ws.rs.core.Application#getClasses()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.1#<init>(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#<init>(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$800(org.eclipse.jetty.server.ShutdownMonitor,java.net.ServerSocket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.ServerSocket)
CALLER: static org.eclipse.jetty.server.ShutdownMonitor#access$900(org.eclipse.jetty.server.ShutdownMonitor,java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#shutdownInput(java.net.Socket)
CALLER: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#getThrowableCandidate(java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#trimmedCopy(java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.impl.SimpleLogger#write(java.lang.StringBuilder,java.lang.Throwable)
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
	CALLEE: org.glassfish.hk2.api.MultiException#printStackTrace(java.io.PrintStream)
CALLER: org.eclipse.jetty.io.AbstractEndPoint#onIdleExpired(java.util.concurrent.TimeoutException)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#isOpen()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.FillInterest#onFail(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.WriteFlusher#onFail(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#close()
CALLER: org.eclipse.jetty.io.IdleTimeout#scheduleIdleTimeout(long)
	CALLEE: org.eclipse.jetty.util.thread.ScheduledExecutorScheduler#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#isOpen()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#setLoader(org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#getDefaultBinderLoader()
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setLoader(org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#getLoader()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory#getInputStream(java.lang.String)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type)
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory,java.io.InputStream,java.lang.String,boolean,org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.1)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory,java.io.InputStream,java.lang.String,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory,java.net.URI,boolean,org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.1)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory,java.net.URI,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindDirectory(java.net.URI)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindMethod(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder.1#<init>(org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder,java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindMethod0(java.lang.Object,java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#getChildren(java.lang.Object,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindMethod(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory,java.net.URI,org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.1)
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory,java.net.URI)
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#<init>()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setTimeStamp(long)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLevel(org.slf4j.event.Level)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLogger(org.slf4j.helpers.SubstituteLogger)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLoggerName(java.lang.String)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setMessage(java.lang.String)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setArgumentArray(java.lang.Object[])
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setThrowable(java.lang.Throwable)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setThreadName(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors,boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#configuration()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#setLoader(org.glassfish.hk2.api.Descriptor)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.FactoryDescriptors,boolean)
	CALLEE: org.glassfish.hk2.utilities.FactoryDescriptorsImpl#getFactoryAsAService()
	CALLEE: org.glassfish.hk2.utilities.FactoryDescriptorsImpl#getFactoryAsAFactory()
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAdvertisedTypesFromObject(java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAdvertisedTypesFromClass(java.lang.reflect.Type,java.lang.Class)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getName(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getNamedName(javax.inject.Named,java.lang.Class)
CALLER: static org.glassfish.hk2.utilities.BuilderHelper#createConstantDescriptor(java.lang.Object,java.lang.String,java.lang.reflect.Type[])
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAdvertisedTypesFromObject(java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getScopeAnnotationFromObject(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getQualifiersFromObject(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#getMetadataValues(java.lang.annotation.Annotation,java.util.Map)
	CALLEE: static org.glassfish.hk2.utilities.BuilderHelper#getRank(java.lang.Class)
	CALLEE: org.glassfish.hk2.internal.ConstantActiveDescriptor#<init>(java.lang.Object,java.util.Set,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorVisibility,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,int)
CALLER: static jersey.repackaged.org.objectweb.asm.ClassReader#readClass(java.io.InputStream,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#read()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#read(byte[],int,int)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#available()
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#close()
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(byte[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(byte[],int,int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#accept(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Attribute[],int)
	CALLEE: jersey.repackaged.org.objectweb.asm.Context#<init>()
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#getAttributes()
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF(int,int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAttribute(jersey.repackaged.org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationTarget(jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassVisitor#visitTypeAnnotation(int,jersey.repackaged.org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitAttribute(jersey.repackaged.org.objectweb.asm.Attribute)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readField(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readMethod(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitEnd()
CALLER: org.eclipse.jetty.io.AbstractConnection.IdleState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.IdleState#<init>()
CALLER: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#<init>()
CALLER: org.eclipse.jetty.io.AbstractConnection.FillingState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillingState#<init>()
CALLER: org.eclipse.jetty.io.AbstractConnection.RefillingState#<init>(org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.RefillingState#<init>()
CALLER: org.eclipse.jetty.io.AbstractConnection.FillingFillInterestedState#<init>(java.lang.String,org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillingFillInterestedState#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection#<init>(org.eclipse.jetty.io.EndPoint,java.util.concurrent.Executor,boolean)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.2#<init>(org.eclipse.jetty.io.AbstractConnection)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.ReadCallback#<init>(org.eclipse.jetty.io.AbstractConnection,org.eclipse.jetty.io.AbstractConnection.1)
CALLER: org.eclipse.jetty.server.HttpConnection.SendCallback#<init>(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.server.HttpConnection.1)
	CALLEE: org.eclipse.jetty.server.HttpConnection.SendCallback#<init>(org.eclipse.jetty.server.HttpConnection)
CALLER: org.eclipse.jetty.server.HttpConnection#newHttpGenerator()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#getSendServerVersion()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#getSendXPoweredBy()
	CALLEE: org.eclipse.jetty.http.HttpGenerator#<init>(boolean,boolean)
CALLER: org.eclipse.jetty.server.HttpConnection#newHttpInput()
	CALLEE: org.eclipse.jetty.server.HttpInputOverHTTP#<init>(org.eclipse.jetty.server.HttpConnection)
CALLER: org.eclipse.jetty.server.HttpConnection#newHttpChannel(org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.server.HttpConnection.HttpChannelOverHttp#<init>(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.server.Connector,org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.HttpTransport,org.eclipse.jetty.server.HttpInput)
CALLER: org.eclipse.jetty.server.HttpConnection#newHttpParser()
	CALLEE: org.eclipse.jetty.server.HttpConnection#newRequestHandler()
	CALLEE: org.eclipse.jetty.server.HttpConnection#getHttpConfiguration()
	CALLEE: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.http.HttpParser.RequestHandler,int)
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#getRequestHeaderSize()
CALLER: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#access$100()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#getInstance()
CALLER: jersey.repackaged.com.google.common.collect.Iterators.7#<init>(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#<init>()
CALLER: org.glassfish.jersey.server.ApplicationHandler.4#get()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#access$600()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#getProvider()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.DefaultGeneratorInitializer#<clinit>()
	CALLEE: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#access$000()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(java.lang.String,org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#getLogger()
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.IdleTimeout#onOpen()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#activate()
CALLER: jersey.repackaged.com.google.common.collect.Iterators.8#<init>(java.util.Iterator,jersey.repackaged.com.google.common.base.Function)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#close()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#close()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_CLOSING_FINDER(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#close()
CALLER: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#bundleEntryPathToClassName(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#normalizedPackagePath(java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#OSGI_REGISTRY_ERROR_OPENING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableOSGI_REGISTRY_ERROR_OPENING_RESOURCE_STREAM(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#OSGI_REGISTRY_ERROR_PROCESSING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableOSGI_REGISTRY_ERROR_PROCESSING_RESOURCE_STREAM(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#isPackageLevelEntry(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#normalizedPackagePath(java.lang.String)
CALLER: org.eclipse.jetty.io.WriteFlusher#isInProgress()
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#getType()
CALLER: org.eclipse.jetty.io.IdleTimeout#getIdleFor()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#getIdleTimestamp()
CALLER: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#destroy(java.lang.String,org.glassfish.hk2.api.ServiceLocator)
CALLER: org.apache.log4j.WriterAppender#checkEntryConditions()
	CALLEE: static org.apache.log4j.helpers.LogLog#warn(java.lang.String)
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.apache.log4j.RollingCalendar#getNextCheckMillis(java.util.Date)
	CALLEE: org.apache.log4j.DailyRollingFileAppender#rollOver()
	CALLEE: org.apache.log4j.WriterAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
CALLER: org.eclipse.jetty.util.resource.JarFileResource#newConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#newConnection()
CALLER: static com.zaxxer.hikari.pool.ProxyConnection#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: com.zaxxer.hikari.pool.HikariProxyConnection#<init>(com.zaxxer.hikari.pool.PoolEntry,java.sql.Connection,com.zaxxer.hikari.util.FastList,com.zaxxer.hikari.pool.ProxyLeakTask,long,boolean,boolean)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#<init>(com.zaxxer.hikari.pool.PoolEntry,java.sql.Connection,com.zaxxer.hikari.util.FastList,com.zaxxer.hikari.pool.ProxyLeakTask,long,boolean,boolean)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableJAR_SCANNER_UNABLE_TO_READ_ENTRY()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#JAR_SCANNER_UNABLE_TO_CLOSE_FILE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableJAR_SCANNER_UNABLE_TO_CLOSE_FILE()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#callContextDestroyed(javax.servlet.ServletContextListener,javax.servlet.ServletContextEvent)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarted()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isStarting()
CALLER: org.eclipse.jetty.webapp.WebAppContext#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.session.SessionHandler#addEventListener(java.util.EventListener)
CALLER: org.eclipse.jetty.server.session.SessionHandler#clearEventListeners()
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#clearEventListeners()
CALLER: org.eclipse.jetty.util.AttributesMap#getAttributeNames()
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttributeNameSet()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#updateBean(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.session.SessionHandler#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#removeEventListener(java.util.EventListener)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_SET_ENTITY_STREAM_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_SET_SECURITY_CONTEXT_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_REQUEST_ABORT_IN_RESPONSE_PHASE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_PARAMETER_CANNOT_BE_NULL_OR_EMPTY(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_PARAMETER_CANNOT_BE_NULL(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static javax.ws.rs.core.MediaType#valueOf(java.lang.String)
	CALLEE: static javax.ws.rs.ext.RuntimeDelegate#getInstance()
CALLER: static org.glassfish.jersey.message.internal.AcceptableMediaType#<clinit>()
	CALLEE: org.glassfish.jersey.message.internal.AcceptableMediaType.1#<init>()
CALLER: org.glassfish.jersey.message.internal.AcceptableMediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.message.internal.QualitySourceMediaType#<clinit>()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType.1#<init>()
CALLER: org.glassfish.jersey.message.internal.QualitySourceMediaType#<init>(java.lang.String,java.lang.String)
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
CALLER: org.glassfish.jersey.message.internal.MediaTypes.3#<init>()
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.message.internal.ReaderWriter#getBufferSize()
	CALLEE: static org.glassfish.jersey.internal.util.PropertiesHelper#getSystemProperty(java.lang.String)
CALLER: javax.ws.rs.core.MediaType#<init>()
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map)
CALLER: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map)
	CALLEE: javax.ws.rs.core.MediaType.2#<init>(javax.ws.rs.core.MediaType)
CALLER: org.glassfish.jersey.server.ApplicationHandler#initialize(java.lang.Iterable)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#configuration(javax.ws.rs.core.Configuration)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#entityProviders(org.glassfish.jersey.message.MessageBodyWorkers)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#processingProviders(org.glassfish.jersey.server.internal.ProcessingProviders)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#buildStage()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: static org.glassfish.jersey.server.ServerProperties#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getSingletons()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getClasses()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getRegistrations()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: static org.glassfish.jersey.CommonProperties#getValue(java.util.Map,javax.ws.rs.RuntimeType,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,boolean)
	CALLEE: static org.glassfish.jersey.internal.Version#getBuildId()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#INIT_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#lock()
	CALLEE: static org.glassfish.jersey.internal.Errors#mark()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#configureForcedAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#<init>()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getResources()
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerProgrammaticResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: static org.glassfish.jersey.server.model.Resource#from(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerResource(java.lang.Class,org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerResource(java.lang.Object,org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#build()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getComponentBag()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#toClassArray()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.5#<init>(org.glassfish.jersey.server.ApplicationHandler)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#WARNING_TOO_MANY_EXTERNAL_REQ_SCOPES(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#bindProvidersAndResources(java.lang.Iterable,org.glassfish.jersey.model.internal.ComponentBag,java.util.Collection,java.util.Collection)
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#<init>()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,org.glassfish.jersey.model.internal.RankedComparator)
	CALLEE: org.glassfish.jersey.server.internal.monitoring.CompositeApplicationEventListener#<init>(java.lang.Iterable)
	CALLEE: org.glassfish.jersey.server.internal.monitoring.ApplicationEventImpl#<init>(org.glassfish.jersey.server.monitoring.ApplicationEvent.Type,org.glassfish.jersey.server.ResourceConfig,java.util.Set,java.util.Set,java.util.Set,org.glassfish.jersey.server.model.ResourceModel)
	CALLEE: org.glassfish.jersey.server.internal.monitoring.CompositeApplicationEventListener#onEvent(org.glassfish.jersey.server.monitoring.ApplicationEvent)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#getProcessingProviders(org.glassfish.jersey.model.internal.ComponentBag)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.6#<init>(org.glassfish.jersey.server.ApplicationHandler)
	CALLEE: javax.ws.rs.core.GenericType#getType()
	CALLEE: org.glassfish.jersey.server.model.ResourceModel.Builder#<init>(java.util.List,boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel.Builder#build()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#processResourceModel(org.glassfish.jersey.server.model.ResourceModel)
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator#<init>(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator#validate(org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatalIssuesFound()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MODEL_VALIDATION_FAILED_AT_INIT()
	CALLEE: static org.glassfish.jersey.server.model.internal.ModelErrors#getErrorsAsResourceModelIssues(boolean)
	CALLEE: org.glassfish.jersey.server.model.ModelValidationException#<init>(java.lang.String,java.util.List)
	CALLEE: static org.glassfish.jersey.internal.Errors#logErrors(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#reset()
	CALLEE: static org.glassfish.jersey.internal.Errors#unmark()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#bindEnhancingResourceClasses(org.glassfish.jersey.server.model.ResourceModel,org.glassfish.jersey.server.ResourceBag,java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.process.internal.ExecutorProviders#createInjectionBindings(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ContainerFilteringStage#<init>(java.lang.Iterable,java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.server.internal.routing.Routing#forModel(org.glassfish.jersey.server.model.RuntimeResourceModel)
	CALLEE: static org.glassfish.jersey.process.internal.Stages#chain(jersey.repackaged.com.google.common.base.Function)
	CALLEE: static org.glassfish.jersey.server.internal.routing.Routing#matchedEndpointExtractor()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#CLEARING_HK_2_CACHE(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#logApplicationInitConfiguration(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.ResourceBag,org.glassfish.jersey.server.internal.ProcessingProviders)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getInstances(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.ResourceBag#getRootResources()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalRequestFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalResponseFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getPreMatchFilters()
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#locator(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#to(org.glassfish.jersey.process.internal.ChainableStage)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#getRuntimeResourceModel()
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#build(org.glassfish.jersey.process.internal.Stage)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#resourceContext(org.glassfish.jersey.server.internal.JerseyResourceContext)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#close(java.net.ServerSocket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
CALLER: org.eclipse.jetty.server.ShutdownMonitor#shutdownInput(java.net.Socket)
	CALLEE: org.eclipse.jetty.server.ShutdownMonitor#debug(java.lang.Throwable)
CALLER: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
	CALLEE: static org.slf4j.helpers.MessageFormatter#isEscapedDelimeter(java.lang.String,int)
	CALLEE: static org.slf4j.helpers.MessageFormatter#isDoubleEscaped(java.lang.String,int)
	CALLEE: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
CALLER: org.eclipse.jetty.io.WriteFlusher#onFail(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#getType()
	CALLEE: org.eclipse.jetty.io.WriteFlusher#updateState(org.eclipse.jetty.io.WriteFlusher.State,org.eclipse.jetty.io.WriteFlusher.State)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.FailedState#<init>(java.lang.Throwable,org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#destroyEndPoint(org.eclipse.jetty.io.EndPoint)
CALLER: static org.glassfish.jersey.uri.UriComponent#decode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#URI_COMPONENT_ENCODED_OCTET_MALFORMED(java.lang.Object)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decode(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeHost(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeQueryParam(java.lang.String,int)
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory,java.io.InputStream,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#<init>(java.io.InputStream,java.lang.String,boolean)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory,java.net.URI,boolean)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#processFile(java.io.File)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#bindMethod0(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.String)
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#<init>(org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory,java.net.URI)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAdvertisedTypesFromClass(java.lang.reflect.Type,java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAllContractsFromInterfaces(java.lang.Class,java.lang.Class,java.util.Set,java.util.Set)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getNamedName(javax.inject.Named,java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#value()
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getScopeAnnotationFromObject(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getScopeAnnotationFromClass(java.lang.Class)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getQualifiersFromObject(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getQualifierAnnotations(java.lang.reflect.AnnotatedElement)
CALLER: static org.glassfish.hk2.utilities.BuilderHelper#getMetadataValues(java.lang.annotation.Annotation,java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.BuilderHelper.3#<init>(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],boolean)
	CALLEE: org.glassfish.hk2.api.MultiException#<init>(java.lang.Throwable)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#addMetadata(java.util.Map,java.lang.String,java.lang.String)
CALLER: org.glassfish.hk2.internal.ConstantActiveDescriptor#<init>(java.lang.Object,java.util.Set,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorVisibility,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,int)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#<init>(java.util.Set,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#<init>(byte[],int,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readShort(int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#getAttributes()
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF(int,int,char[])
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readAttribute(jersey.repackaged.org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.Attribute#<init>(java.lang.String)
	CALLEE: jersey.repackaged.org.objectweb.asm.Attribute#read(jersey.repackaged.org.objectweb.asm.ClassReader,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#access$100(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValue(int,char[],java.lang.String,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationTarget(jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.TypePath#<init>(byte[],int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readField(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAttribute(jersey.repackaged.org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationTarget(jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readMethod(jersey.repackaged.org.objectweb.asm.ClassVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAttribute(jersey.repackaged.org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationTarget(jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValue(int,char[],java.lang.String,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readParameterAnnotations(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readCode(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#visitEnd()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#access$200(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener)
	CALLEE: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#getClassForName(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.IdleState#<init>()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.State#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#<init>()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.State#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.FillingState#<init>()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.State#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.RefillingState#<init>()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.State#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.FillingFillInterestedState#<init>(java.lang.String)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.State#<init>(java.lang.String)
CALLER: org.eclipse.jetty.io.AbstractConnection.ReadCallback#<init>(org.eclipse.jetty.io.AbstractConnection,org.eclipse.jetty.io.AbstractConnection.1)
	CALLEE: org.eclipse.jetty.io.AbstractConnection.ReadCallback#<init>(org.eclipse.jetty.io.AbstractConnection)
CALLER: org.eclipse.jetty.server.HttpConnection.SendCallback#<init>(org.eclipse.jetty.server.HttpConnection)
	CALLEE: org.eclipse.jetty.util.IteratingCallback#<init>(boolean)
CALLER: static org.eclipse.jetty.server.HttpInputOverHTTP#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: static org.eclipse.jetty.server.HttpInput#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.server.HttpInput.1#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.2#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.3#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.4#<init>()
CALLER: org.eclipse.jetty.server.HttpInputOverHTTP#<init>(org.eclipse.jetty.server.HttpConnection)
	CALLEE: org.eclipse.jetty.server.HttpInput#<init>()
	CALLEE: org.eclipse.jetty.util.SharedBlockingCallback#<init>()
CALLER: static org.eclipse.jetty.server.HttpChannel#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.HttpConnection.HttpChannelOverHttp#<init>(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.server.Connector,org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.HttpTransport,org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.server.HttpChannel#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.HttpTransport,org.eclipse.jetty.server.HttpInput)
CALLER: static org.eclipse.jetty.http.HttpParser#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#<init>(int)
	CALLEE: org.eclipse.jetty.http.HttpGenerator.CachedHttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: static org.eclipse.jetty.http.HttpHeader#values()
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,org.eclipse.jetty.http.HttpHeaderValue)
	CALLEE: org.eclipse.jetty.util.AbstractTrie#put(java.lang.Object)
CALLER: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.http.HttpParser.RequestHandler,int)
	CALLEE: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.http.HttpParser.RequestHandler,int,boolean)
CALLER: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#getInstance()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#<init>()
CALLER: jersey.repackaged.com.google.common.collect.AbstractIterator#<init>()
	CALLEE: jersey.repackaged.com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#access$600()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#getRankedComponentProviders()
CALLER: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#access$000()
	CALLEE: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#getGeneratorSecure()
CALLER: jersey.repackaged.com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_CLOSING_FINDER(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_CLOSING_FINDER(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableOSGI_REGISTRY_ERROR_OPENING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableOSGI_REGISTRY_ERROR_PROCESSING_RESOURCE_STREAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.io.WriteFlusher.1#<clinit>()
	CALLEE: static org.eclipse.jetty.io.WriteFlusher.StateType#values()
CALLER: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
CALLER: org.apache.log4j.DailyRollingFileAppender#rollOver()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#setFile(java.lang.String,boolean,boolean,int)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String)
	CALLEE: org.apache.log4j.FileAppender#closeFile()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String)
CALLER: org.apache.log4j.WriterAppender#subAppend(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.QuietWriter#write(java.lang.String)
	CALLEE: org.apache.log4j.PatternLayout#format(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.PatternLayout#ignoresThrowable()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getThrowableStrRep()
	CALLEE: org.apache.log4j.WriterAppender#shouldFlush(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.QuietWriter#flush()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableJAR_SCANNER_UNABLE_TO_CLOSE_FILE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.server.session.SessionHandler#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.server.session.AbstractSessionManager#addEventListener(java.util.EventListener)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#clearEventListeners()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#getBeans(java.lang.Class)
CALLER: org.eclipse.jetty.util.AttributesMap#getAttributeNameSet()
	CALLEE: org.eclipse.jetty.util.AttributesMap#keySet()
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#removeEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#removeBean(java.lang.Object)
CALLER: static javax.ws.rs.ext.RuntimeDelegate#getInstance()
	CALLEE: static javax.ws.rs.ext.RuntimeDelegate#findDelegate()
CALLER: static org.glassfish.jersey.internal.util.PropertiesHelper#getSystemProperty(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.util.PropertiesHelper.2#<init>(java.lang.String)
CALLER: static org.glassfish.jersey.internal.Version#<clinit>()
	CALLEE: static org.glassfish.jersey.internal.Version#_initiateProperties()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#INIT_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableINIT_MSG(java.lang.Object)
CALLER: org.glassfish.jersey.server.ResourceConfig#lock()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#setupApplicationName()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#<init>(org.glassfish.jersey.server.ResourceConfig.State,org.glassfish.jersey.server.ResourceConfig.1)
CALLER: static org.glassfish.jersey.internal.Errors#mark()
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors#_mark()
CALLER: org.glassfish.jersey.server.ResourceConfig#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
CALLER: org.glassfish.jersey.server.ResourceConfig#configureForcedAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
CALLER: org.glassfish.jersey.server.ResourceConfig#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#<init>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
CALLER: org.glassfish.jersey.server.ResourceConfig#getResources()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getResources()
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#registerProgrammaticResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerModel(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource#getHandlerClasses()
	CALLEE: org.glassfish.jersey.server.model.Resource#getHandlerInstances()
CALLER: static org.glassfish.jersey.server.model.Resource#from(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#<init>(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#createResourceBuilder()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$1800(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#build()
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#registerResource(java.lang.Class,org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerModel(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#registerResource(java.lang.Object,org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.ResourceBag.Builder#registerModel(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#build()
	CALLEE: org.glassfish.jersey.server.ResourceBag#<init>(java.util.Set,java.util.Set,java.util.List,org.glassfish.jersey.server.ResourceBag.1)
CALLER: org.glassfish.jersey.server.ResourceConfig#getComponentBag()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getComponentBag()
CALLER: org.glassfish.jersey.internal.ServiceFinder#toClassArray()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder.ServiceIteratorProvider#access$100()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#createClassIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createClassIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#next()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#next()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#hasNext()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#hasNext()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#WARNING_TOO_MANY_EXTERNAL_REQ_SCOPES(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableWARNING_TOO_MANY_EXTERNAL_REQ_SCOPES(java.lang.Object)
CALLER: static org.glassfish.jersey.server.ServerRuntime#<clinit>()
	CALLEE: org.glassfish.jersey.server.ServerRuntime.1#<init>()
CALLER: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newBinder(java.lang.Object)
CALLER: org.glassfish.jersey.server.ApplicationHandler#bindProvidersAndResources(java.lang.Iterable,org.glassfish.jersey.model.internal.ComponentBag,java.util.Collection,java.util.Collection)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.ProviderBinder#bindProvider(java.lang.Object,org.glassfish.jersey.model.ContractProvider,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getInstances(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getClasses(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#getRegisteredClasses()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.8#<init>(org.glassfish.jersey.server.ApplicationHandler,org.glassfish.jersey.model.internal.ComponentBag,java.util.Set,java.util.Collection)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#bindWithComponentProvider(java.lang.Class,org.glassfish.jersey.model.ContractProvider,java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.server.model.Resource#isAcceptable(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_INSTANTIABLE_COMPONENT(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#checkProviderRuntime(java.lang.Class,org.glassfish.jersey.model.ContractProvider,javax.ws.rs.RuntimeType,boolean,boolean)
	CALLEE: static org.glassfish.jersey.internal.inject.ProviderBinder#bindProvider(java.lang.Class,org.glassfish.jersey.model.ContractProvider,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.9#<init>(org.glassfish.jersey.server.ApplicationHandler,org.glassfish.jersey.model.internal.ComponentBag,java.util.Set,java.util.Collection)
CALLER: org.glassfish.jersey.model.internal.RankedComparator#<init>()
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#<init>(org.glassfish.jersey.model.internal.RankedComparator.Order)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,org.glassfish.jersey.model.internal.RankedComparator)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllRankedProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#sortRankedProviders(org.glassfish.jersey.model.internal.RankedComparator,java.lang.Iterable)
CALLER: static org.glassfish.jersey.server.monitoring.ApplicationEvent.Type#<clinit>()
	CALLEE: org.glassfish.jersey.server.monitoring.ApplicationEvent.Type#<init>(java.lang.String,int)
CALLER: org.glassfish.jersey.server.internal.monitoring.CompositeApplicationEventListener#onEvent(org.glassfish.jersey.server.monitoring.ApplicationEvent)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.server.ApplicationHandler#getProcessingProviders(org.glassfish.jersey.model.internal.ComponentBag)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig#unwrapApplication(javax.ws.rs.core.Application)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllRankedProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getAnnotationTypes(java.lang.reflect.AnnotatedElement,java.lang.Class)
	CALLEE: javax.ws.rs.core.MultivaluedHashMap#<init>()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#filterNameBound(java.lang.Iterable,java.util.Collection,org.glassfish.jersey.model.internal.ComponentBag,java.util.Collection,javax.ws.rs.core.MultivaluedMap)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#<init>(javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,java.lang.Iterable,java.util.List,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)
CALLER: org.glassfish.jersey.server.ApplicationHandler.6#<init>(org.glassfish.jersey.server.ApplicationHandler)
	CALLEE: javax.ws.rs.core.GenericType#<init>()
CALLER: org.glassfish.jersey.server.model.ResourceModel.Builder#build()
	CALLEE: org.glassfish.jersey.server.model.Resource#getPath()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newLinkedHashMap()
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.ResourceModel.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#build()
CALLER: org.glassfish.jersey.server.ApplicationHandler#processResourceModel(org.glassfish.jersey.server.model.ResourceModel)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#<init>()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllRankedProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#sortRankedProviders(org.glassfish.jersey.model.internal.RankedComparator,java.lang.Iterable)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#getConfiguration()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.server.model.ComponentModelValidator#<init>(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newLinkedList()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: org.glassfish.jersey.server.model.ResourceValidator#<init>()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#<init>(org.glassfish.jersey.message.MessageBodyWorkers)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#<init>(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.model.InvocableValidator#<init>()
CALLER: org.glassfish.jersey.server.model.ComponentModelValidator#validate(org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator.1#<init>(org.glassfish.jersey.server.model.ComponentModelValidator,org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(java.lang.Runnable)
CALLER: static org.glassfish.jersey.internal.Errors#fatalIssuesFound()
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getSeverity()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MODEL_VALIDATION_FAILED_AT_INIT()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MODEL_VALIDATION_FAILED_AT_INIT()
CALLER: static org.glassfish.jersey.server.model.internal.ModelErrors#getErrorsAsResourceModelIssues(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#getErrorMessages(boolean)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#<init>()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#transform(java.util.List,jersey.repackaged.com.google.common.base.Function)
CALLER: static org.glassfish.jersey.internal.Errors#logErrors(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#logErrors(java.util.Collection)
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors#_getErrorMessages(boolean)
CALLER: static org.glassfish.jersey.internal.Errors#reset()
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors#_reset()
CALLER: static org.glassfish.jersey.internal.Errors#unmark()
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors#_unmark()
CALLER: org.glassfish.jersey.server.ApplicationHandler#bindEnhancingResourceClasses(org.glassfish.jersey.server.model.ResourceModel,org.glassfish.jersey.server.ResourceBag,java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#newInstance(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler#bindProvidersAndResources(java.lang.Iterable,org.glassfish.jersey.model.internal.ComponentBag,java.util.Collection,java.util.Collection)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.7#<init>(org.glassfish.jersey.server.ApplicationHandler)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#getRootResources()
	CALLEE: org.glassfish.jersey.server.model.Resource#getHandlerClasses()
	CALLEE: org.glassfish.jersey.server.model.Resource#getHandlerInstances()
CALLER: static org.glassfish.jersey.process.internal.ExecutorProviders#createInjectionBindings(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: static org.glassfish.jersey.process.internal.ExecutorProviders#getQualifierToProviderMap(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#USING_EXECUTOR_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#IGNORED_EXECUTOR_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.process.internal.ExecutorProviders.ExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ExecutorServiceProvider,org.glassfish.jersey.process.internal.ExecutorProviders.1)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newFactoryBinder(org.glassfish.hk2.api.Factory)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#USING_SCHEDULER_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#IGNORED_SCHEDULER_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.process.internal.ExecutorProviders.ScheduledExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ScheduledExecutorServiceProvider,org.glassfish.jersey.process.internal.ExecutorProviders.1)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#isLoggable(java.util.logging.Level)
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#config(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#named(java.lang.String)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#named(java.lang.String)
CALLER: static org.glassfish.jersey.process.internal.ExecutorProviders#<clinit>()
	CALLEE: org.glassfish.jersey.internal.util.ExtendedLogger#<init>(java.util.logging.Logger,java.util.logging.Level)
CALLER: org.glassfish.jersey.server.ContainerFilteringStage#<init>(java.lang.Iterable,java.lang.Iterable)
	CALLEE: org.glassfish.jersey.process.internal.AbstractChainableStage#<init>()
CALLER: static org.glassfish.jersey.server.internal.routing.Routing#forModel(org.glassfish.jersey.server.model.RuntimeResourceModel)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#<init>(org.glassfish.jersey.server.model.RuntimeResourceModel,org.glassfish.jersey.server.internal.routing.Routing.1)
CALLER: static org.glassfish.jersey.process.internal.Stages#chain(jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#<init>(jersey.repackaged.com.google.common.base.Function,org.glassfish.jersey.process.internal.Stages.1)
CALLER: static org.glassfish.jersey.process.internal.Stages#<clinit>()
	CALLEE: org.glassfish.jersey.process.internal.Stages.1#<init>()
CALLER: static org.glassfish.jersey.server.internal.routing.Routing#matchedEndpointExtractor()
	CALLEE: org.glassfish.jersey.server.internal.routing.MatchedEndpointExtractorStage#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#CLEARING_HK_2_CACHE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableCLEARING_HK_2_CACHE(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.ApplicationHandler#logApplicationInitConfiguration(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.ResourceBag,org.glassfish.jersey.server.internal.ProcessingProviders)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getAllProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_APPLICATION_INITIALIZED()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_ROOT_RESOURCE_CLASSES()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getCustomProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_PRE_MATCH_FILTERS()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#printProviders(java.lang.String,java.lang.Iterable,java.lang.StringBuilder)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_REQUEST_FILTERS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_RESPONSE_FILTERS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_READER_INTERCEPTORS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_WRITER_INTERCEPTORS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_REQUEST_FILTERS()
	CALLEE: static org.glassfish.jersey.server.ApplicationHandler#printNameBoundProviders(java.lang.String,java.util.Map,java.lang.StringBuilder)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_RESPONSE_FILTERS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_READER_INTERCEPTORS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_WRITER_INTERCEPTORS()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_DYNAMIC_FEATURES()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_MESSAGE_BODY_READERS()
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#<init>(org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_MESSAGE_BODY_WRITERS()
	CALLEE: org.glassfish.jersey.server.ResourceBag#getRootResources()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalRequestFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalResponseFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getPreMatchFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getDynamicFeatures()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getNameBoundWriterInterceptors()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getNameBoundReaderInterceptors()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getNameBoundResponseFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getNameBoundRequestFilters()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalWriterInterceptors()
	CALLEE: org.glassfish.jersey.server.internal.ProcessingProviders#getGlobalReaderInterceptors()
	CALLEE: org.glassfish.jersey.server.model.Resource#getHandlerClasses()
CALLER: static org.slf4j.helpers.FormattingTuple#<clinit>()
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
CALLER: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
	CALLEE: static org.slf4j.helpers.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#booleanArrayAppend(java.lang.StringBuilder,boolean[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#byteArrayAppend(java.lang.StringBuilder,byte[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#charArrayAppend(java.lang.StringBuilder,char[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#shortArrayAppend(java.lang.StringBuilder,short[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#intArrayAppend(java.lang.StringBuilder,int[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#longArrayAppend(java.lang.StringBuilder,long[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#floatArrayAppend(java.lang.StringBuilder,float[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#doubleArrayAppend(java.lang.StringBuilder,double[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)
CALLER: org.eclipse.jetty.io.WriteFlusher#updateState(org.eclipse.jetty.io.WriteFlusher.State,org.eclipse.jetty.io.WriteFlusher.State)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.WriteFlusher#isTransitionAllowed(org.eclipse.jetty.io.WriteFlusher.State,org.eclipse.jetty.io.WriteFlusher.State)
CALLER: org.eclipse.jetty.io.WriteFlusher.FailedState#<init>(java.lang.Throwable,org.eclipse.jetty.io.WriteFlusher.1)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.FailedState#<init>(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.ChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#close()
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#destroyEndPoint(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#getConnection()
	CALLEE: org.eclipse.jetty.io.SelectorManager#connectionClosed(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#endPointClosed(org.eclipse.jetty.io.EndPoint)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#URI_COMPONENT_ENCODED_OCTET_MALFORMED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableURI_COMPONENT_ENCODED_OCTET_MALFORMED(java.lang.Object)
CALLER: static org.glassfish.jersey.uri.UriComponent#decode(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodePercentEncodedOctets(java.lang.String,int,java.nio.ByteBuffer)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeOctets(int,java.nio.ByteBuffer,java.lang.StringBuilder)
CALLER: static org.glassfish.jersey.uri.UriComponent.1#<clinit>()
	CALLEE: static org.glassfish.jersey.uri.UriComponent.Type#values()
CALLER: static org.glassfish.jersey.uri.UriComponent#decodeHost(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodePercentEncodedOctets(java.lang.String,int,java.nio.ByteBuffer)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeOctets(int,java.nio.ByteBuffer,java.lang.StringBuilder)
CALLER: static org.glassfish.jersey.uri.UriComponent#decodeQueryParam(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodePercentEncodedOctets(java.lang.String,int,java.nio.ByteBuffer)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeOctets(int,java.nio.ByteBuffer,java.lang.StringBuilder)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#processFile(java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#push(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner,java.io.File)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getRawType()
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAllContractsFromInterfaces(java.lang.Class,java.lang.Class,java.util.Set,java.util.Set)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getAllContractsFromInterfaces(java.lang.Class,java.lang.Class,java.util.Set,java.util.Set)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getQualifierAnnotations(java.lang.reflect.AnnotatedElement)
	CALLEE: org.glassfish.hk2.utilities.reflection.ReflectionHelper.1#<init>(java.lang.reflect.AnnotatedElement)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],boolean)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#getLogger()
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#isStatic(java.lang.reflect.Member)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#setAccessible(java.lang.reflect.AccessibleObject)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getCurrentContextClassLoader()
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#setContextClassLoader(java.lang.Thread,java.lang.ClassLoader)
	CALLEE: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.glassfish.hk2.api.MultiException#<init>(java.lang.Throwable)
	CALLEE: org.glassfish.hk2.api.MultiException#<init>(java.lang.Throwable,boolean)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#<init>(java.util.Set,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addMetadata(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#<init>()
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setRanking(int)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setDescriptorType(org.glassfish.hk2.api.DescriptorType)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setDescriptorVisibility(org.glassfish.hk2.api.DescriptorVisibility)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setName(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setProxiable(java.lang.Boolean)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setProxyForSameScope(java.lang.Boolean)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setScope(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addAdvertisedContract(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addQualifier(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setClassAnalysisName(java.lang.String)
CALLER: jersey.repackaged.org.objectweb.asm.Attribute#read(jersey.repackaged.org.objectweb.asm.ClassReader,int,int,char[],int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.Attribute#<init>(java.lang.String)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValue(int,char[],java.lang.String,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLong(int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.Label#<init>()
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLong(int)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getMethodType(java.lang.String)
	CALLEE: jersey.repackaged.org.objectweb.asm.Handle#<init>(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readParameterAnnotations(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readCode(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationTarget(jersey.repackaged.org.objectweb.asm.Context,int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.Label#<init>()
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readTypeAnnotations(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#getImplicitFrame(jersey.repackaged.org.objectweb.asm.Context)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readFrame(int,boolean,boolean,jersey.repackaged.org.objectweb.asm.Context)
CALLER: org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener.AnnotatedClassVisitor#getClassForName(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getOsgiRegistryInstance()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#classForNameWithException(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener#access$300(org.glassfish.jersey.server.internal.scanning.AnnotationAcceptingListener)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_SCANNING_CLASS_NOT_FOUND(java.lang.Object)
CALLER: static org.eclipse.jetty.http.HttpGenerator.State#<clinit>()
	CALLEE: org.eclipse.jetty.http.HttpGenerator.State#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.http.HttpTokens.EndOfContent#<clinit>()
	CALLEE: org.eclipse.jetty.http.HttpTokens.EndOfContent#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.server.HttpInput.1#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.State#<init>()
CALLER: org.eclipse.jetty.server.HttpInput.2#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.State#<init>()
CALLER: org.eclipse.jetty.server.HttpInput.3#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.State#<init>()
CALLER: org.eclipse.jetty.server.HttpInput.4#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput.State#<init>()
CALLER: org.eclipse.jetty.server.HttpInput#<init>()
	CALLEE: org.eclipse.jetty.server.HttpInput#<init>(java.lang.Object)
CALLER: static org.eclipse.jetty.util.SharedBlockingCallback#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#<init>(java.lang.String)
CALLER: org.eclipse.jetty.util.SharedBlockingCallback#<init>()
	CALLEE: org.eclipse.jetty.util.SharedBlockingCallback.Blocker#<init>(org.eclipse.jetty.util.SharedBlockingCallback)
CALLER: org.eclipse.jetty.server.HttpChannel#<init>(org.eclipse.jetty.server.Connector,org.eclipse.jetty.server.HttpConfiguration,org.eclipse.jetty.io.EndPoint,org.eclipse.jetty.server.HttpTransport,org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#getConnection()
	CALLEE: org.eclipse.jetty.http.HttpURI#<init>(java.nio.charset.Charset)
	CALLEE: org.eclipse.jetty.server.HttpChannelState#<init>(org.eclipse.jetty.server.HttpChannel)
	CALLEE: org.eclipse.jetty.server.Request#<init>(org.eclipse.jetty.server.HttpChannel,org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.server.HttpOutput#<init>(org.eclipse.jetty.server.HttpChannel)
	CALLEE: org.eclipse.jetty.server.Response#<init>(org.eclipse.jetty.server.HttpChannel,org.eclipse.jetty.server.HttpOutput)
	CALLEE: org.eclipse.jetty.server.HttpInput#init(org.eclipse.jetty.server.HttpChannelState)
CALLER: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,org.eclipse.jetty.http.HttpHeaderValue)
	CALLEE: org.eclipse.jetty.http.HttpField#<init>(org.eclipse.jetty.http.HttpHeader,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.jetty.http.HttpHeader#asString()
	CALLEE: org.eclipse.jetty.http.HttpHeaderValue#asString()
CALLER: org.eclipse.jetty.util.AbstractTrie#put(java.lang.Object)
	CALLEE: org.eclipse.jetty.util.ArrayTrie#put(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
CALLER: org.eclipse.jetty.http.HttpParser#<init>(org.eclipse.jetty.http.HttpParser.RequestHandler,int,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: static jersey.repackaged.com.google.common.collect.AbstractIterator.State#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator.State#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.server.ApplicationHandler#getRankedComponentProviders()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#iterator()
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#<init>(org.glassfish.jersey.model.internal.RankedComparator.Order)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#next()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#next()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#hasNext()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#hasNext()
CALLER: static org.glassfish.hk2.internal.ServiceLocatorFactoryImpl#getGeneratorSecure()
	CALLEE: org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.2#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_CLOSING_FINDER(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.apache.log4j.PatternLayout#format(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.spi.LoggingEvent#getThrowableStrRep()
	CALLEE: org.apache.log4j.spi.ThrowableInformation#getThrowableStrRep()
CALLER: org.apache.log4j.helpers.QuietWriter#flush()
	CALLEE: org.apache.log4j.helpers.OnlyOnceErrorHandler#error(java.lang.String,java.lang.Exception,int)
CALLER: org.eclipse.jetty.server.session.AbstractSessionManager#addEventListener(java.util.EventListener)
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle#addBean(java.lang.Object,boolean)
CALLER: org.eclipse.jetty.util.AttributesMap#keySet()
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: static javax.ws.rs.ext.RuntimeDelegate#findDelegate()
	CALLEE: static javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.internal.Version#_initiateProperties()
	CALLEE: static org.glassfish.jersey.internal.Version#getIntputStream()
	CALLEE: static org.glassfish.jersey.internal.Version#close(java.io.InputStream)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableINIT_MSG(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.ResourceConfig#setupApplicationName()
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: static org.glassfish.jersey.server.ServerProperties#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#setApplicationName(java.lang.String)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getApplicationName()
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#<init>(org.glassfish.jersey.server.ResourceConfig.State,org.glassfish.jersey.server.ResourceConfig.1)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#<init>(org.glassfish.jersey.server.ResourceConfig.State)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#find(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder#toClassArray()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.2#<init>(org.glassfish.jersey.model.internal.CommonConfig)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#AUTODISCOVERABLE_CONFIGURATION_FAILED(java.lang.Object)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#configureAutoDiscoverableProviders(org.glassfish.hk2.api.ServiceLocator,boolean)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureBinders(org.glassfish.hk2.api.ServiceLocator,java.util.Set)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#registerManagedObjectsFinalizer(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#resetRegistrations()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureFeatures(org.glassfish.hk2.api.ServiceLocator,java.util.Set,java.util.List)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#configureMetaProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.server.ResourceBag.Builder#registerModel(org.glassfish.jersey.server.model.Resource)
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#build()
	CALLEE: org.glassfish.jersey.server.model.Resource#getPath()
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#createResourceBuilder()
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(org.glassfish.jersey.internal.util.Producer)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller.1#<init>(org.glassfish.jersey.server.model.IntrospectionModeller)
CALLER: static org.glassfish.jersey.server.model.Resource.Builder#access$1800(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#isEmpty()
CALLER: org.glassfish.jersey.server.ResourceBag#<init>(java.util.Set,java.util.Set,java.util.List,org.glassfish.jersey.server.ResourceBag.1)
	CALLEE: org.glassfish.jersey.server.ResourceBag#<init>(java.util.Set,java.util.Set,java.util.List)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableWARNING_TOO_MANY_EXTERNAL_REQ_SCOPES(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newBinder(java.lang.Object)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#create(java.lang.Object)
CALLER: org.glassfish.jersey.server.ApplicationHandler#bindWithComponentProvider(java.lang.Class,org.glassfish.jersey.model.ContractProvider,java.lang.Iterable)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_INSTANTIABLE_COMPONENT(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_INSTANTIABLE_COMPONENT(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.inject.Providers#checkProviderRuntime(java.lang.Class,org.glassfish.jersey.model.ContractProvider,javax.ws.rs.RuntimeType,boolean,boolean)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getContractConstraint(java.lang.Class,javax.ws.rs.RuntimeType)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#WARNING_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#logProviderSkipped(java.lang.StringBuilder,java.lang.Class,boolean)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_WRONG_RUNTIME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_REGISTERED_WRONG_RUNTIME(java.lang.Object,java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
CALLER: static org.glassfish.jersey.internal.inject.ProviderBinder#bindProvider(java.lang.Class,org.glassfish.jersey.model.ContractProvider,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#ranked(int)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getPriority(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getScope()
CALLER: static org.glassfish.jersey.internal.inject.ProviderBinder#bindProvider(java.lang.Object,org.glassfish.jersey.model.ContractProvider,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#ranked(int)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getPriority(java.lang.Class)
CALLER: static org.glassfish.jersey.model.internal.RankedComparator.Order#<clinit>()
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator.Order#<init>(java.lang.String,int,int)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getAllRankedProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.lang.annotation.Annotation[])
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object,int,java.util.Set)
CALLER: static org.glassfish.jersey.internal.inject.Providers#sortRankedProviders(org.glassfish.jersey.model.internal.RankedComparator,java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#<init>()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getAnnotationTypes(java.lang.reflect.AnnotatedElement,java.lang.Class)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
CALLER: javax.ws.rs.core.MultivaluedHashMap#<init>()
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#<init>(java.util.Map)
CALLER: static org.glassfish.jersey.server.ApplicationHandler#filterNameBound(java.lang.Iterable,java.util.Collection,org.glassfish.jersey.model.internal.ComponentBag,java.util.Collection,javax.ws.rs.core.MultivaluedMap)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: javax.ws.rs.core.MultivaluedHashMap#<init>()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#theMostSpecificTypeOf(java.util.Set)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#modelFor(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object,int)
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#add(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#PREMATCHING_ALSO_NAME_BOUND(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#getProvider()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#getContractTypes()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getNameBindings()
	CALLEE: org.glassfish.jersey.model.ContractProvider#isNameBound()
	CALLEE: org.glassfish.jersey.model.ContractProvider#getPriority(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.ProcessingProviders#<init>(javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.MultivaluedMap,java.lang.Iterable,java.util.List,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#<init>()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#sortRankedProviders(org.glassfish.jersey.model.internal.RankedComparator,java.lang.Iterable)
CALLER: javax.ws.rs.core.GenericType#<init>()
	CALLEE: static javax.ws.rs.core.GenericType#getTypeArgument(java.lang.Class,java.lang.Class)
	CALLEE: static javax.ws.rs.core.GenericType#getClass(java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource)
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.ResourceModel#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.ResourceModel.1)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#<init>(java.util.List,java.util.List)
CALLER: org.glassfish.jersey.server.model.ResourceValidator#<init>()
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#<init>()
CALLER: static org.glassfish.jersey.server.model.RuntimeResourceModelValidator#<clinit>()
	CALLEE: javax.ws.rs.core.MediaType#<init>(java.lang.String,java.lang.String)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#<init>(org.glassfish.jersey.message.MessageBodyWorkers)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#<init>()
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#createParamAnnotationSet()
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#<init>(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#<init>()
CALLER: static org.glassfish.jersey.server.model.InvocableValidator#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.InvocableValidator#getScopeAnnotations()
CALLER: org.glassfish.jersey.server.model.InvocableValidator#<init>()
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#<init>()
CALLER: static org.glassfish.jersey.internal.Errors#process(java.lang.Runnable)
	CALLEE: static org.glassfish.jersey.internal.Errors#process(org.glassfish.jersey.internal.util.Producer,boolean)
	CALLEE: org.glassfish.jersey.internal.Errors.1#<init>(java.lang.Runnable)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MODEL_VALIDATION_FAILED_AT_INIT()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.Errors#getErrorMessages(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors#_getErrorMessages(boolean)
CALLER: static jersey.repackaged.com.google.common.collect.Lists#transform(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#<init>(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#<init>(java.util.List,jersey.repackaged.com.google.common.base.Function)
CALLER: static org.glassfish.jersey.process.internal.ExecutorProviders#getQualifierToProviderMap(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getAnnotationTypes(java.lang.reflect.AnnotatedElement,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getCustomProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#USING_EXECUTOR_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableUSING_EXECUTOR_PROVIDER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#IGNORED_EXECUTOR_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableIGNORED_EXECUTOR_PROVIDERS(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.process.internal.ExecutorProviders.ExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ExecutorServiceProvider,org.glassfish.jersey.process.internal.ExecutorProviders.1)
	CALLEE: org.glassfish.jersey.process.internal.ExecutorProviders.ExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ExecutorServiceProvider)
CALLER: static org.glassfish.jersey.internal.inject.Injections#newFactoryBinder(org.glassfish.hk2.api.Factory)
	CALLEE: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newFactoryBinder(org.glassfish.hk2.api.Factory)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#USING_SCHEDULER_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableUSING_SCHEDULER_PROVIDER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#IGNORED_SCHEDULER_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableIGNORED_SCHEDULER_PROVIDERS(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.process.internal.ExecutorProviders.ScheduledExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ScheduledExecutorServiceProvider,org.glassfish.jersey.process.internal.ExecutorProviders.1)
	CALLEE: org.glassfish.jersey.process.internal.ExecutorProviders.ScheduledExecutorServiceFactory#<init>(org.glassfish.jersey.spi.ScheduledExecutorServiceProvider)
CALLER: org.glassfish.jersey.process.internal.AbstractChainableStage#<init>()
	CALLEE: org.glassfish.jersey.process.internal.AbstractChainableStage#<init>(org.glassfish.jersey.process.internal.Stage)
CALLER: org.glassfish.jersey.server.internal.routing.Routing.Builder#<init>(org.glassfish.jersey.server.model.RuntimeResourceModel,org.glassfish.jersey.server.internal.routing.Routing.1)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routing.Builder#<init>(org.glassfish.jersey.server.model.RuntimeResourceModel)
CALLER: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#<init>(jersey.repackaged.com.google.common.base.Function,org.glassfish.jersey.process.internal.Stages.1)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#<init>(jersey.repackaged.com.google.common.base.Function)
CALLER: org.glassfish.jersey.process.internal.Stages.1#<init>()
	CALLEE: org.glassfish.jersey.process.internal.AbstractChainableStage#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableCLEARING_HK_2_CACHE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_APPLICATION_INITIALIZED()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_APPLICATION_INITIALIZED()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_ROOT_RESOURCE_CLASSES()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_ROOT_RESOURCE_CLASSES()
CALLER: static org.glassfish.jersey.internal.inject.Providers#getCustomProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getClasses(java.util.Collection)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.lang.annotation.Annotation[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_PRE_MATCH_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_PRE_MATCH_FILTERS()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#printProviders(java.lang.String,java.lang.Iterable,java.lang.StringBuilder)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_REQUEST_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_REQUEST_FILTERS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_RESPONSE_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_RESPONSE_FILTERS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_READER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_READER_INTERCEPTORS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_GLOBAL_WRITER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_WRITER_INTERCEPTORS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_REQUEST_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_REQUEST_FILTERS()
CALLER: static org.glassfish.jersey.server.ApplicationHandler#printNameBoundProviders(java.lang.String,java.util.Map,java.lang.StringBuilder)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_PROVIDER_BOUND(java.lang.Object,java.lang.Object)
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#entrySet()
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#isEmpty()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_RESPONSE_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_RESPONSE_FILTERS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_READER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_READER_INTERCEPTORS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_NAME_BOUND_WRITER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_WRITER_INTERCEPTORS()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_DYNAMIC_FEATURES()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_DYNAMIC_FEATURES()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_MESSAGE_BODY_READERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_MESSAGE_BODY_READERS()
CALLER: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#<init>(org.glassfish.jersey.server.ApplicationHandler.1)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_MESSAGE_BODY_WRITERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_MESSAGE_BODY_WRITERS()
CALLER: static org.slf4j.helpers.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
CALLER: static org.slf4j.helpers.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)
	CALLEE: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
CALLER: org.eclipse.jetty.io.WriteFlusher#isTransitionAllowed(org.eclipse.jetty.io.WriteFlusher.State,org.eclipse.jetty.io.WriteFlusher.State)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#getType()
CALLER: org.eclipse.jetty.io.WriteFlusher.FailedState#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.WriteFlusher.State#<init>(org.eclipse.jetty.io.WriteFlusher.StateType,org.eclipse.jetty.io.WriteFlusher.1)
CALLER: org.eclipse.jetty.io.AbstractEndPoint#close()
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#onClose()
CALLER: org.eclipse.jetty.io.SelectorManager#connectionClosed(org.eclipse.jetty.io.Connection)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.HttpConnection#onClose()
CALLER: org.eclipse.jetty.server.ServerConnector.ServerConnectorManager#endPointClosed(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.server.AbstractConnector#onEndPointClosed(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.SelectorManager#endPointClosed(org.eclipse.jetty.io.EndPoint)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableURI_COMPONENT_ENCODED_OCTET_MALFORMED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.uri.UriComponent#decodePercentEncodedOctets(java.lang.String,int,java.nio.ByteBuffer)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeHex(java.lang.String,int)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner,java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1.1#<init>(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#setAccessible(java.lang.reflect.AccessibleObject)
	CALLEE: org.glassfish.hk2.utilities.reflection.ReflectionHelper.3#<init>(java.lang.reflect.AccessibleObject)
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getCurrentContextClassLoader()
	CALLEE: org.glassfish.hk2.utilities.reflection.ReflectionHelper.4#<init>()
CALLER: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#setContextClassLoader(java.lang.Thread,java.lang.ClassLoader)
	CALLEE: org.glassfish.hk2.utilities.reflection.ReflectionHelper.2#<init>(java.lang.Thread,java.lang.ClassLoader)
CALLER: org.glassfish.hk2.api.MultiException#<init>(java.lang.Throwable,boolean)
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: org.glassfish.hk2.api.HK2RuntimeException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setName(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setName(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#removeNamedQualifier()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#<init>(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addQualifierAnnotation(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.DescriptorImpl#addMetadata(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#addMetadata(java.util.Map,java.lang.String,java.lang.String)
CALLER: static jersey.repackaged.org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getType(char[],int)
CALLER: static jersey.repackaged.org.objectweb.asm.Type#<clinit>()
	CALLEE: jersey.repackaged.org.objectweb.asm.Type#<init>(int,char[],int,int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readLong(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
CALLER: static jersey.repackaged.org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: jersey.repackaged.org.objectweb.asm.Type#<init>(int,char[],int,int)
CALLER: static jersey.repackaged.org.objectweb.asm.Type#getMethodType(java.lang.String)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getType(char[],int)
CALLER: static jersey.repackaged.org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: static jersey.repackaged.org.objectweb.asm.Type#getType(char[],int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readTypeAnnotations(jersey.repackaged.org.objectweb.asm.MethodVisitor,jersey.repackaged.org.objectweb.asm.Context,int,boolean)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readAnnotationValues(int,char[],boolean,jersey.repackaged.org.objectweb.asm.AnnotationVisitor)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.TypePath#<init>(byte[],int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#getImplicitFrame(jersey.repackaged.org.objectweb.asm.Context)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readFrame(int,boolean,boolean,jersey.repackaged.org.objectweb.asm.Context)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readFrameType(java.lang.Object[],int,int,char[],jersey.repackaged.org.objectweb.asm.Label[])
CALLER: org.glassfish.jersey.internal.OsgiRegistry#classForNameWithException(java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#loadClass(org.osgi.framework.Bundle,java.lang.String)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_SCANNING_CLASS_NOT_FOUND(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_SCANNING_CLASS_NOT_FOUND(java.lang.Object)
CALLER: static org.eclipse.jetty.util.IteratingCallback.State#<clinit>()
	CALLEE: org.eclipse.jetty.util.IteratingCallback.State#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.server.HttpInput#<init>(java.lang.Object)
	CALLEE: javax.servlet.ServletInputStream#<init>()
CALLER: org.eclipse.jetty.util.SharedBlockingCallback.Blocker#<init>(org.eclipse.jetty.util.SharedBlockingCallback)
	CALLEE: static org.eclipse.jetty.util.SharedBlockingCallback#access$000()
CALLER: static org.eclipse.jetty.server.HttpChannelState#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.HttpChannelState#<init>(org.eclipse.jetty.server.HttpChannel)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: static org.eclipse.jetty.server.Request#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.Request#<init>(org.eclipse.jetty.server.HttpChannel,org.eclipse.jetty.server.HttpInput)
	CALLEE: org.eclipse.jetty.http.HttpFields#<init>()
CALLER: static org.eclipse.jetty.server.Response#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
	CALLEE: static org.eclipse.jetty.http.DateGenerator#formatCookieDate(long)
	CALLEE: org.eclipse.jetty.server.Response.1#<init>()
CALLER: static org.eclipse.jetty.server.HttpOutput#<clinit>()
	CALLEE: static org.eclipse.jetty.util.log.Log#getLogger(java.lang.Class)
CALLER: org.eclipse.jetty.server.HttpOutput#<init>(org.eclipse.jetty.server.HttpChannel)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: javax.servlet.ServletOutputStream#<init>()
	CALLEE: org.eclipse.jetty.server.HttpOutput.1#<init>(org.eclipse.jetty.server.HttpOutput)
	CALLEE: org.eclipse.jetty.server.HttpChannel#getHttpConfiguration()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#getOutputAggregationSize()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#getOutputBufferSize()
CALLER: org.eclipse.jetty.server.Response#<init>(org.eclipse.jetty.server.HttpChannel,org.eclipse.jetty.server.HttpOutput)
	CALLEE: org.eclipse.jetty.http.HttpFields#<init>()
CALLER: static org.eclipse.jetty.http.HttpParser.State#<clinit>()
	CALLEE: org.eclipse.jetty.http.HttpParser.State#<init>(java.lang.String,int)
CALLER: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#computeRank(java.lang.Object,int)
CALLER: org.apache.log4j.helpers.PatternConverter#format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LiteralPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.DatePatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternConverter#spacePad(java.lang.StringBuffer,int)
CALLER: org.apache.log4j.spi.ThrowableInformation#getThrowableStrRep()
	CALLEE: org.apache.log4j.Category#getLoggerRepository()
	CALLEE: static org.apache.log4j.DefaultThrowableRenderer#render(java.lang.Throwable)
	CALLEE: org.apache.log4j.Hierarchy#getThrowableRenderer()
CALLER: static javax.ws.rs.ext.FactoryFinder#find(java.lang.String,java.lang.String)
	CALLEE: static javax.ws.rs.ext.FactoryFinder#getContextClassLoader()
	CALLEE: static javax.ws.rs.ext.FactoryFinder#newInstance(java.lang.String,java.lang.ClassLoader)
CALLER: org.glassfish.jersey.server.ResourceConfig#getApplicationName()
	CALLEE: static org.glassfish.jersey.server.ResourceConfig.State#access$300(org.glassfish.jersey.server.ResourceConfig.State)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#<init>(org.glassfish.jersey.server.ResourceConfig.State)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#<init>(org.glassfish.jersey.server.ResourceConfig.State)
CALLER: static org.glassfish.jersey.internal.inject.Providers#getProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getClasses(java.util.Collection)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getServiceHandles(org.glassfish.hk2.api.ServiceLocator,java.lang.Class,java.lang.annotation.Annotation[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#AUTODISCOVERABLE_CONFIGURATION_FAILED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableAUTODISCOVERABLE_CONFIGURATION_FAILED(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#configureBinders(org.glassfish.hk2.api.ServiceLocator,java.util.Set)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBinder#bind(org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#getBinders(java.util.Set)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#isEmpty()
CALLER: org.glassfish.jersey.model.internal.CommonConfig#registerManagedObjectsFinalizer(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#getConfiguration(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#newBinder(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Injections#addBinding(org.glassfish.hk2.utilities.binding.BindingBuilder,org.glassfish.hk2.api.DynamicConfiguration)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.model.internal.CommonConfig#configureFeatures(org.glassfish.hk2.api.ServiceLocator,java.util.Set,java.util.List)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#resetRegistrations()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig#configureFeatures(org.glassfish.hk2.api.ServiceLocator,java.util.Set,java.util.List)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#FEATURE_HAS_ALREADY_BEEN_PROCESSED(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.FeatureContextWrapper#<init>(javax.ws.rs.core.FeatureContext,org.glassfish.hk2.api.ServiceLocator)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#getFeatureClass()
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.FeatureRegistration#getFeature()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_INSTANTIABLE_COMPONENT(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.inject.Providers#getContractConstraint(java.lang.Class,javax.ws.rs.RuntimeType)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.ProviderRuntime#getRuntime()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#WARNING_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNING_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.inject.Providers#logProviderSkipped(java.lang.StringBuilder,java.lang.Class,boolean)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_AND_RESOURCE_CONSTRAINED_TO_IGNORED(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_IGNORED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_WRONG_RUNTIME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_WRONG_RUNTIME(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_REGISTERED_WRONG_RUNTIME(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_REGISTERED_WRONG_RUNTIME(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object,int,java.util.Set)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#computeRank(java.lang.Object,int)
CALLER: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#cast(java.lang.Iterable)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.util.Iterator)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: static org.glassfish.jersey.model.internal.ComponentBag#modelFor(java.lang.Class)
	CALLEE: static org.glassfish.jersey.model.internal.ComponentBag#modelFor(java.lang.Class,int,java.util.Map,org.glassfish.jersey.process.Inflector)
CALLER: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object,int)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#<init>(java.lang.Object,int,java.util.Set)
CALLER: javax.ws.rs.core.AbstractMultivaluedMap#add(java.lang.Object,java.lang.Object)
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#getValues(java.lang.Object)
	CALLEE: javax.ws.rs.core.AbstractMultivaluedMap#addNull(java.util.List)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#PREMATCHING_ALSO_NAME_BOUND(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizablePREMATCHING_ALSO_NAME_BOUND(java.lang.Object)
CALLER: static javax.ws.rs.core.GenericType#getTypeArgument(java.lang.Class,java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getRawType()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getActualTypeArguments()
CALLER: static javax.ws.rs.core.GenericType#getClass(java.lang.reflect.Type)
	CALLEE: static javax.ws.rs.core.GenericType#getClass(java.lang.reflect.Type)
	CALLEE: static javax.ws.rs.core.GenericType#getArrayClass(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getRawType()
CALLER: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$1000(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String,org.glassfish.jersey.server.model.Resource.1)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$1900(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$300(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$2000(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$400(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$500(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$2102(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.ResourceMethod.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$2200(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$700(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$2300(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$800(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$2400(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$900(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.ResourceModel#<init>(java.util.List,java.util.List)
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#lazy(org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel.1#<init>(org.glassfish.jersey.server.model.ResourceModel)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#<init>(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#<init>(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableUSING_EXECUTOR_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableIGNORED_EXECUTOR_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.hk2.utilities.binding.BindingBuilderFactory#newFactoryBinder(org.glassfish.hk2.api.Factory)
	CALLEE: static org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#createFactoryBinder(org.glassfish.hk2.api.Factory)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableUSING_SCHEDULER_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableIGNORED_SCHEDULER_PROVIDERS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_APPLICATION_INITIALIZED()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_ROOT_RESOURCE_CLASSES()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_PRE_MATCH_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_REQUEST_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_RESPONSE_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_READER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_GLOBAL_WRITER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_REQUEST_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#LOGGING_PROVIDER_BOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_PROVIDER_BOUND(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_RESPONSE_FILTERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_READER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_NAME_BOUND_WRITER_INTERCEPTORS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_DYNAMIC_FEATURES()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_MESSAGE_BODY_READERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_MESSAGE_BODY_WRITERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.AbstractEndPoint#onClose()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#onClose()
	CALLEE: org.eclipse.jetty.io.WriteFlusher#onClose()
	CALLEE: org.eclipse.jetty.io.FillInterest#onClose()
CALLER: org.eclipse.jetty.io.SelectorManager#endPointClosed(org.eclipse.jetty.io.EndPoint)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#onClose()
CALLER: static org.glassfish.jersey.uri.UriComponent#decodeHex(java.lang.String,int)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#decodeHex(char)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#URI_COMPONENT_ENCODED_OCTET_INVALID_DIGIT(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#removeNamedQualifier()
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#removeQualifierAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.glassfish.hk2.utilities.NamedImpl#<init>(java.lang.String)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#<init>()
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addQualifierAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addQualifier(java.lang.String)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: static jersey.repackaged.org.objectweb.asm.Type#getType(char[],int)
	CALLEE: jersey.repackaged.org.objectweb.asm.Type#<init>(int,char[],int,int)
CALLER: jersey.repackaged.org.objectweb.asm.ClassReader#readFrameType(java.lang.Object[],int,int,char[],jersey.repackaged.org.objectweb.asm.Label[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: jersey.repackaged.org.objectweb.asm.ClassReader#readLabel(int,jersey.repackaged.org.objectweb.asm.Label[])
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#loadClass(org.osgi.framework.Bundle,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.1#<init>(org.osgi.framework.Bundle,java.lang.String)
	CALLEE: javax.ws.rs.ProcessingException#<init>(java.lang.Throwable)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_SCANNING_CLASS_NOT_FOUND(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.eclipse.jetty.server.HttpChannelState.State#<clinit>()
	CALLEE: org.eclipse.jetty.server.HttpChannelState.State#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.http.DateGenerator#formatCookieDate(long)
	CALLEE: static org.eclipse.jetty.http.DateGenerator#formatCookieDate(java.lang.StringBuilder,long)
CALLER: static org.eclipse.jetty.http.DateGenerator#<clinit>()
	CALLEE: org.eclipse.jetty.http.DateGenerator.1#<init>()
	CALLEE: static org.eclipse.jetty.http.DateGenerator#formatDate(long)
CALLER: org.eclipse.jetty.server.HttpOutput.1#<init>(org.eclipse.jetty.server.HttpOutput)
	CALLEE: org.eclipse.jetty.util.SharedBlockingCallback#<init>()
CALLER: static org.eclipse.jetty.server.HttpOutput.OutputState#<clinit>()
	CALLEE: org.eclipse.jetty.server.HttpOutput.OutputState#<init>(java.lang.String,int)
CALLER: static org.eclipse.jetty.server.Response.OutputType#<clinit>()
	CALLEE: org.eclipse.jetty.server.Response.OutputType#<init>(java.lang.String,int)
CALLER: org.apache.log4j.helpers.PatternParser.NamedPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
CALLER: org.apache.log4j.helpers.PatternParser.DatePatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: static org.apache.log4j.helpers.LogLog#error(java.lang.String,java.lang.Throwable)
CALLER: org.apache.log4j.helpers.PatternParser.LocationPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#getFileName()
	CALLEE: org.apache.log4j.spi.LocationInfo#getLineNumber()
	CALLEE: org.apache.log4j.spi.LocationInfo#getMethodName()
CALLER: org.apache.log4j.helpers.PatternParser.BasicPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.Priority#toString()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLevel()
	CALLEE: static org.apache.log4j.spi.LoggingEvent#getStartTime()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getThreadName()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getNDC()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getRenderedMessage()
CALLER: org.apache.log4j.helpers.PatternParser.MDCPatternConverter#convert(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getProperties()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getMDC(java.lang.String)
CALLER: static javax.ws.rs.ext.FactoryFinder#getContextClassLoader()
	CALLEE: javax.ws.rs.ext.FactoryFinder.1#<init>()
CALLER: static org.glassfish.jersey.server.ResourceConfig.State#access$300(org.glassfish.jersey.server.ResourceConfig.State)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getApplicationName()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableAUTODISCOVERABLE_CONFIGURATION_FAILED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRC_NOT_MODIFIABLE()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.model.internal.CommonConfig#getBinders(java.util.Set)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getInstances(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.3#<init>(org.glassfish.jersey.model.internal.CommonConfig,java.util.Set)
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#filter(java.util.Collection,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#FEATURE_HAS_ALREADY_BEEN_PROCESSED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableFEATURE_HAS_ALREADY_BEEN_PROCESSED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableWARNING_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_WRONG_PACKAGE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_AND_RESOURCE_CONSTRAINED_TO_IGNORED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_AND_RESOURCE_CONSTRAINED_TO_IGNORED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_PROVIDER_CONSTRAINED_TO_IGNORED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_IGNORED(java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_WRONG_RUNTIME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_REGISTERED_WRONG_RUNTIME(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#addAll(java.util.Collection,java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizablePREMATCHING_ALSO_NAME_BOUND(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String,org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableLOGGING_PROVIDER_BOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.IdleTimeout#onClose()
	CALLEE: org.eclipse.jetty.io.IdleTimeout#deactivate()
CALLER: org.eclipse.jetty.io.WriteFlusher#onClose()
	CALLEE: org.eclipse.jetty.io.WriteFlusher#onFail(java.lang.Throwable)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#URI_COMPONENT_ENCODED_OCTET_INVALID_DIGIT(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableURI_COMPONENT_ENCODED_OCTET_INVALID_DIGIT(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#removeQualifierAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#removeQualifier(java.lang.String)
CALLER: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#getAnnotationLiteralSubclass(java.lang.Class)
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#getTypeParameter(java.lang.Class)
CALLER: static org.eclipse.jetty.http.DateGenerator#formatCookieDate(java.lang.StringBuilder,long)
	CALLEE: org.eclipse.jetty.http.DateGenerator#doFormatCookieDate(java.lang.StringBuilder,long)
CALLER: static org.eclipse.jetty.http.DateGenerator#formatDate(long)
	CALLEE: org.eclipse.jetty.http.DateGenerator#doFormatDate(long)
CALLER: org.apache.log4j.helpers.PatternParser.CategoryPatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLoggerName()
CALLER: org.apache.log4j.helpers.PatternParser.ClassNamePatternConverter#getFullyQualifiedName(org.apache.log4j.spi.LoggingEvent)
	CALLEE: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#getClassName()
CALLER: org.apache.log4j.spi.LoggingEvent#getLocationInformation()
	CALLEE: org.apache.log4j.spi.LocationInfo#<init>(java.lang.Throwable,java.lang.String)
CALLER: org.apache.log4j.spi.LoggingEvent#getNDC()
	CALLEE: static org.apache.log4j.NDC#get()
CALLER: org.apache.log4j.spi.LoggingEvent#getRenderedMessage()
	CALLEE: org.apache.log4j.Category#getLoggerRepository()
	CALLEE: org.apache.log4j.Hierarchy#getRendererMap()
	CALLEE: org.apache.log4j.or.RendererMap#findAndRender(java.lang.Object)
CALLER: org.apache.log4j.spi.LoggingEvent#getProperties()
	CALLEE: org.apache.log4j.spi.LoggingEvent#getMDCCopy()
CALLER: org.apache.log4j.spi.LoggingEvent#getMDC(java.lang.String)
	CALLEE: static org.apache.log4j.MDC#get(java.lang.String)
CALLER: org.glassfish.jersey.model.internal.ComponentBag#getInstances(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.7#<init>(org.glassfish.jersey.model.internal.ComponentBag,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static jersey.repackaged.com.google.common.collect.Collections2#filter(java.util.Collection,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#<init>(java.util.Collection,jersey.repackaged.com.google.common.base.Predicate)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableFEATURE_HAS_ALREADY_BEEN_PROCESSED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_AND_RESOURCE_CONSTRAINED_TO_IGNORED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_PROVIDER_CONSTRAINED_TO_IGNORED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#path(java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableURI_COMPONENT_ENCODED_OCTET_INVALID_DIGIT(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.hk2.api.AnnotationLiteral#getAnnotationLiteralSubclass(java.lang.Class)
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#getAnnotationLiteralSubclass(java.lang.Class)
CALLER: static org.apache.log4j.spi.LocationInfo#<clinit>()
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String)
	CALLEE: org.apache.log4j.spi.LocationInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.spi.LocationInfo#class$(java.lang.String)
CALLER: org.apache.log4j.spi.LocationInfo#<init>(java.lang.Throwable,java.lang.String)
	CALLEE: static org.apache.log4j.helpers.LogLog#debug(java.lang.String,java.lang.Throwable)
CALLER: static org.apache.log4j.NDC#get()
	CALLEE: static org.apache.log4j.NDC#getCurrentStack()
CALLER: org.apache.log4j.spi.LoggingEvent#getMDCCopy()
	CALLEE: static org.apache.log4j.MDC#getContext()
CALLER: static org.apache.log4j.MDC#get(java.lang.String)
	CALLEE: org.apache.log4j.MDC#get0(java.lang.String)
CALLER: static org.apache.log4j.MDC#<clinit>()
	CALLEE: org.apache.log4j.MDC#<init>()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newLinkedList()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#name(java.lang.String)
CALLER: org.apache.log4j.spi.LocationInfo#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.apache.log4j.spi.LocationInfo#appendFragment(java.lang.StringBuffer,java.lang.String)
CALLER: static org.apache.log4j.MDC#getContext()
	CALLEE: org.apache.log4j.MDC#getContext0()
CALLER: org.apache.log4j.MDC#<init>()
	CALLEE: static org.apache.log4j.helpers.Loader#isJava1()
	CALLEE: org.apache.log4j.helpers.ThreadLocalMap#<init>()
	CALLEE: static org.apache.log4j.MDC#class$(java.lang.String)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#name(java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Object[])
CALLER: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#computeArrayListCapacity(int)
CALLER: static jersey.repackaged.com.google.common.collect.Lists#computeArrayListCapacity(int)
	CALLEE: static jersey.repackaged.com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.primitives.Ints#saturatedCast(long)
CALLER: org.apache.log4j.helpers.DateTimeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)
	CALLEE: org.apache.log4j.helpers.AbsoluteTimeDateFormat#format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.4#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.4#apply(org.glassfish.jersey.model.ContractProvider.Builder)
CALLER: org.glassfish.jersey.model.internal.ComponentBag#getClasses(jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#filter(java.util.Set,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.6#<init>(org.glassfish.jersey.model.internal.ComponentBag,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.glassfish.jersey.internal.Errors.1#call()
	CALLEE: org.glassfish.jersey.internal.Errors.1#call()
CALLER: org.glassfish.jersey.model.internal.RankedComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#compare(org.glassfish.jersey.model.internal.RankedProvider,org.glassfish.jersey.model.internal.RankedProvider)
CALLER: javax.ws.rs.core.MediaType.2#compare(java.lang.Object,java.lang.Object)
	CALLEE: javax.ws.rs.core.MediaType.2#compare(java.lang.String,java.lang.String)
CALLER: org.glassfish.jersey.model.internal.CommonConfig.2#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.2#compare(org.glassfish.jersey.internal.spi.AutoDiscoverable,org.glassfish.jersey.internal.spi.AutoDiscoverable)
CALLER: org.eclipse.jetty.http.DateGenerator.1#initialValue()
	CALLEE: org.eclipse.jetty.http.DateGenerator.1#initialValue()
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Class)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getAttribute(java.lang.String)
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getInitParameter(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getInitParameter(java.lang.String)
CALLER: javax.ws.rs.core.MediaType#toString()
	CALLEE: static javax.ws.rs.ext.RuntimeDelegate#getInstance()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#log(java.lang.String,java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$200(org.eclipse.jetty.server.handler.ContextHandler)
CALLER: org.eclipse.jetty.servlet.ServletContextHandler.Context#createServlet(java.lang.Class)
	CALLEE: javax.servlet.ServletException#<init>(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#createInstance(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller.1#call()
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller.1#call()
CALLER: org.glassfish.jersey.server.ResourceConfig#getClassLoader()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.State#getClassLoader()
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#addProperties(java.util.Map)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#addProperties(java.util.Map)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#registerResources(java.util.Set)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#setClassLoader(java.lang.ClassLoader)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.model.ContractProvider.Builder#build()
	CALLEE: org.glassfish.jersey.model.ContractProvider#<init>(java.lang.Class,java.util.Map,int,java.util.Set,org.glassfish.jersey.model.ContractProvider.1)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder.1#<init>(org.glassfish.jersey.model.ContractProvider.Builder)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.Map,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Object)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#registerFinder(org.glassfish.jersey.server.ResourceFinder)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.jersey.server.ApplicationHandler.7#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.7#apply(org.glassfish.jersey.model.ContractProvider)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#close()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.JarFileScanner#access$000(org.glassfish.jersey.server.internal.scanning.JarFileScanner)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxy(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxy(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxy(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxy(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxy(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.eclipse.jetty.server.HttpConnection#onOpen()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#onOpen()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#fillInterested()
CALLER: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
CALLER: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#tryToComputeNext()
CALLER: org.glassfish.jersey.server.model.ResourceModel.1#get()
	CALLEE: org.glassfish.jersey.server.model.ResourceModel.1#get()
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#read()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.JarFileScanner#access$000(org.glassfish.jersey.server.internal.scanning.JarFileScanner)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#read(byte[],int,int)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.JarFileScanner#access$000(org.glassfish.jersey.server.internal.scanning.JarFileScanner)
CALLER: org.glassfish.jersey.server.internal.scanning.JarFileScanner.1#available()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.JarFileScanner#access$000(org.glassfish.jersey.server.internal.scanning.JarFileScanner)
CALLER: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#printThrowable(java.lang.Throwable)
CALLER: org.glassfish.hk2.utilities.reflection.Logger#debug(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Logger#printThrowable(java.lang.Throwable)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#createIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#access$000(org.glassfish.jersey.internal.OsgiRegistry,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#<init>(org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder,java.util.List,java.lang.String,java.lang.Class)
CALLER: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
CALLER: org.glassfish.jersey.server.ResourceBag#getRootResources()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.Resource#getPath()
CALLER: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#to(org.glassfish.jersey.process.internal.ChainableStage)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#addTailStage(org.glassfish.jersey.process.internal.Stage)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder#createClassIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createClassIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#access$000(org.glassfish.jersey.internal.OsgiRegistry,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#<init>(org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder,java.util.List)
CALLER: org.glassfish.jersey.internal.ServiceFinder.DefaultServiceIteratorProvider#createClassIterator(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: liquibase.changelog.AbstractChangeLogHistoryService#upgradeChecksums(liquibase.changelog.DatabaseChangeLog,liquibase.Contexts,liquibase.LabelExpression)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.changelog.filter.ContextChangeSetFilter#<init>(liquibase.Contexts)
	CALLEE: liquibase.changelog.filter.DbmsChangeSetFilter#<init>(liquibase.database.Database)
	CALLEE: liquibase.logging.core.DefaultLogger#debug(java.lang.String)
	CALLEE: liquibase.changelog.filter.ContextChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.DbmsChangeSetFilter#accepts(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#isAccepted()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#getRanChangeSets()
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getDatabase()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#replaceChecksum(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getLastCheckSum()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#init()
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: liquibase.exception.UnexpectedLiquibaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getDatabase()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#writeHeader(java.io.File)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#isExecuteDdlAgainstDatabase()
	CALLEE: liquibase.statement.core.CreateDatabaseChangeLogTableStatement#<init>()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#setExecType(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: liquibase.database.AbstractJdbcDatabase#commit()
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getDatabase()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#isExecuteDmlAgainstDatabase()
	CALLEE: liquibase.statement.core.MarkChangeSetRanStatement#<init>(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService.2#<init>(liquibase.changelog.OfflineChangeLogHistoryService,liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#replaceChangeSet(liquibase.changelog.ChangeSet,liquibase.changelog.OfflineChangeLogHistoryService.ReplaceChangeSetLogic)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#appendChangeSet(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
CALLER: liquibase.changelog.AbstractChangeLogHistoryService#getRunStatus(liquibase.changelog.ChangeSet)
	CALLEE: static liquibase.logging.LogFactory#getLogger()
	CALLEE: liquibase.logging.core.DefaultLogger#info(java.lang.String)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#replaceChecksum(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getRanChangeSet(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getLastCheckSum()
	CALLEE: liquibase.change.CheckSum#equals(java.lang.Object)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#getRanChangeSets()
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.String)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#writeHeader(java.io.File)
	CALLEE: liquibase.util.csv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#readNext()
	CALLEE: liquibase.ContextExpression#<init>()
	CALLEE: liquibase.ContextExpression#<init>(java.lang.String)
	CALLEE: liquibase.Labels#<init>()
	CALLEE: liquibase.Labels#<init>(java.lang.String)
	CALLEE: static liquibase.change.CheckSum#parse(java.lang.String)
	CALLEE: liquibase.util.ISODateFormat#<init>()
	CALLEE: liquibase.util.ISODateFormat#parse(java.lang.String)
	CALLEE: static liquibase.changelog.ChangeSet.ExecType#valueOf(java.lang.String)
	CALLEE: liquibase.changelog.RanChangeSet#<init>(java.lang.String,java.lang.String,java.lang.String,liquibase.change.CheckSum,java.util.Date,java.lang.String,liquibase.changelog.ChangeSet.ExecType,java.lang.String,java.lang.String,liquibase.ContextExpression,liquibase.Labels,java.lang.String)
CALLER: org.eclipse.jetty.server.HttpConnection#onClose()
	CALLEE: org.eclipse.jetty.util.IteratingCallback#close()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#onClose()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#isEmpty()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterables#any(java.lang.Iterable,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.eclipse.jetty.server.HttpInput#init(org.eclipse.jetty.server.HttpChannelState)
	CALLEE: org.eclipse.jetty.server.HttpInput#lock()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$400(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: javax.servlet.ServletContextAttributeEvent#<init>(javax.servlet.ServletContext,java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#ensureMap()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$400(org.eclipse.jetty.server.handler.ContextHandler)
	CALLEE: javax.servlet.ServletContextAttributeEvent#<init>(javax.servlet.ServletContext,java.lang.String,java.lang.Object)
CALLER: org.eclipse.jetty.util.AttributesMap#removeAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getResourcePaths(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getResourcePaths(java.lang.String)
CALLER: org.glassfish.hk2.api.MultiException#getMessage()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.apache.log4j.config.PropertySetterException#getMessage()
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: org.glassfish.hk2.api.MultiException#getMessage()
	CALLEE: org.glassfish.jersey.server.model.ModelValidationException#getMessage()
	CALLEE: org.glassfish.hk2.api.MultiException#getErrors()
CALLER: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#getMessage()
CALLER: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: static jersey.repackaged.com.google.common.base.Predicates#access$800()
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: org.eclipse.jetty.server.HttpConnection#toString()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#toString()
CALLER: org.glassfish.hk2.api.MultiException#printStackTrace(java.io.PrintStream)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
	CALLEE: org.glassfish.hk2.api.MultiException#printStackTrace(java.io.PrintStream)
	CALLEE: org.glassfish.hk2.api.MultiException#getErrors()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getResourceAsStream(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
	CALLEE: static org.eclipse.jetty.server.handler.ContextHandler#access$100()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext.Context#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.Context#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream()
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#addContractType(java.lang.reflect.Type)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#addAdvertisedContract(java.lang.String)
CALLER: org.eclipse.jetty.server.HttpChannel#toString()
	CALLEE: org.eclipse.jetty.server.HttpChannelState#getState()
CALLER: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#size(java.util.Iterator)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#close()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#isMarkedEvicted()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#closeStatements()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask.1#cancel()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#cancel()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#resetConnectionState(com.zaxxer.hikari.pool.ProxyConnection,int)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#recycle(long)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyConnection#prepareStatement(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#prepareStatement(java.lang.String)
CALLER: com.zaxxer.hikari.pool.HikariProxyConnection#prepareStatement(java.lang.String,int)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#prepareStatement(java.lang.String,int)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
CALLER: org.apache.log4j.or.RendererMap#findAndRender(java.lang.Object)
	CALLEE: org.apache.log4j.or.RendererMap#get(java.lang.Class)
	CALLEE: org.apache.log4j.or.DefaultRenderer#doRender(java.lang.Object)
CALLER: org.glassfish.jersey.message.internal.AcceptableMediaType#hashCode()
	CALLEE: javax.ws.rs.core.MediaType#hashCode()
CALLER: org.glassfish.jersey.message.internal.QualitySourceMediaType#hashCode()
	CALLEE: javax.ws.rs.core.MediaType#hashCode()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#close()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#close()
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#open()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#open()
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.ResourceFinderException#<init>(java.lang.Throwable)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#advance()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#hasNext()
	CALLEE: static org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#access$100(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner)
	CALLEE: static org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#access$200(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner,java.io.File)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource)
	CALLEE: static org.glassfish.jersey.server.model.Resource#access$200(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource.Data)
CALLER: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList.1#transform(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.8#transform(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList.1#transform(java.lang.Object)
CALLER: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.PackageNamesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner.1#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FilesScanner.1#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#hasNext()
CALLER: org.glassfish.jersey.server.model.ResourceModel#getRuntimeResourceModel()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#get()
CALLER: org.glassfish.hk2.api.AnnotationLiteral#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#getMembers()
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#invoke(java.lang.reflect.Method,java.lang.Object)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#<init>()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#processPaths(java.lang.String[])
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#reset()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#reset()
CALLER: org.glassfish.hk2.api.AnnotationLiteral#hashCode()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#getMembers()
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#invoke(java.lang.reflect.Method,java.lang.Object)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#open()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#open()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
	CALLEE: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#hasNext()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#hasNext()
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#close()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#close()
CALLER: org.glassfish.jersey.model.internal.ComponentBag.4#apply(org.glassfish.jersey.model.ContractProvider.Builder)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder#build()
CALLER: org.glassfish.jersey.internal.Errors.1#call()
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator.1#run()
CALLER: org.glassfish.jersey.model.internal.RankedComparator#compare(org.glassfish.jersey.model.internal.RankedProvider,org.glassfish.jersey.model.internal.RankedProvider)
	CALLEE: org.glassfish.jersey.model.internal.RankedComparator#getPriority(org.glassfish.jersey.model.internal.RankedProvider)
	CALLEE: static org.glassfish.jersey.model.internal.RankedComparator.Order#access$000(org.glassfish.jersey.model.internal.RankedComparator.Order)
CALLER: org.eclipse.jetty.http.DateGenerator.1#initialValue()
	CALLEE: org.eclipse.jetty.http.DateGenerator#<init>()
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#getAttribute(java.lang.String)
	CALLEE: org.eclipse.jetty.util.AttributesMap#getAttribute(java.lang.String)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller.1#call()
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#access$000(org.glassfish.jersey.server.model.IntrospectionModeller)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#addProperties(java.util.Map)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.Map,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#<init>(java.util.Map,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: org.glassfish.jersey.server.ResourceConfig.ImmutableState#register(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RC_NOT_MODIFIABLE()
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.eclipse.jetty.io.AbstractConnection#onOpen()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.eclipse.jetty.io.AbstractConnection#fillInterested()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.IdleState#fillInterested()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#next(org.eclipse.jetty.io.AbstractConnection.State,org.eclipse.jetty.io.AbstractConnection.State)
CALLER: static jersey.repackaged.com.google.common.collect.AbstractIterator.1#<clinit>()
	CALLEE: static jersey.repackaged.com.google.common.collect.AbstractIterator.State#values()
CALLER: jersey.repackaged.com.google.common.collect.AbstractIterator#tryToComputeNext()
	CALLEE: jersey.repackaged.com.google.common.collect.Iterators.7#computeNext()
CALLER: org.glassfish.jersey.server.model.ResourceModel.1#get()
	CALLEE: static org.glassfish.jersey.server.model.ResourceModel#access$100(org.glassfish.jersey.server.model.ResourceModel)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModel#<init>(java.util.List)
CALLER: static org.glassfish.hk2.utilities.reflection.Logger#printThrowable(java.lang.Throwable)
	CALLEE: org.apache.log4j.config.PropertySetterException#getMessage()
	CALLEE: org.h2.jdbc.JdbcSQLException#getMessage()
	CALLEE: org.glassfish.hk2.api.MultiException#getMessage()
	CALLEE: org.glassfish.jersey.server.model.ModelValidationException#getMessage()
	CALLEE: org.h2.jdbc.JdbcSQLException#printStackTrace(java.io.PrintStream)
	CALLEE: org.glassfish.hk2.api.MultiException#printStackTrace(java.io.PrintStream)
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#access$000(org.glassfish.jersey.internal.OsgiRegistry,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry#locateAllProviders(java.lang.String)
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
CALLER: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#addTailStage(org.glassfish.jersey.process.internal.Stage)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#convertTransformations(org.glassfish.jersey.process.internal.Stage)
	CALLEE: org.glassfish.jersey.process.internal.AbstractChainableStage#setDefaultNext(org.glassfish.jersey.process.internal.Stage)
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#replaceChecksum(liquibase.changelog.ChangeSet)
	CALLEE: static liquibase.executor.ExecutorService#getInstance()
	CALLEE: liquibase.executor.ExecutorService#getExecutor(liquibase.database.Database)
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getDatabase()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#isExecuteDmlAgainstDatabase()
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#replaceChangeSet(liquibase.changelog.ChangeSet,liquibase.changelog.OfflineChangeLogHistoryService.ReplaceChangeSetLogic)
	CALLEE: liquibase.statement.core.UpdateChangeSetChecksumStatement#<init>(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService.1#<init>(liquibase.changelog.OfflineChangeLogHistoryService,liquibase.changelog.ChangeSet)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#writeHeader(java.io.File)
	CALLEE: liquibase.util.csv.CSVWriter#<init>(java.io.Writer)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[])
CALLER: liquibase.statement.core.CreateDatabaseChangeLogTableStatement#<init>()
	CALLEE: liquibase.statement.AbstractSqlStatement#<init>()
CALLER: liquibase.statement.core.MarkChangeSetRanStatement#<init>(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.statement.AbstractSqlStatement#<init>()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#replaceChangeSet(liquibase.changelog.ChangeSet,liquibase.changelog.OfflineChangeLogHistoryService.ReplaceChangeSetLogic)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.util.csv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#readNext()
	CALLEE: liquibase.util.csv.CSVWriter#<init>(java.io.Writer)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[])
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService.2#execute(java.lang.String[])
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService.1#execute(java.lang.String[])
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#flush()
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#close()
	CALLEE: liquibase.util.csv.opencsv.CSVReader#close()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#appendChangeSet(liquibase.changelog.ChangeSet,liquibase.changelog.ChangeSet.ExecType)
	CALLEE: liquibase.exception.DatabaseException#<init>(java.lang.Throwable)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#flush()
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#close()
	CALLEE: liquibase.util.csv.opencsv.CSVReader#close()
	CALLEE: liquibase.util.csv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#readNext()
	CALLEE: liquibase.util.ISODateFormat#<init>()
	CALLEE: liquibase.util.csv.CSVWriter#<init>(java.io.Writer)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[])
	CALLEE: liquibase.util.ISODateFormat#format(java.sql.Timestamp)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#getNextSequenceValue()
	CALLEE: static liquibase.util.LiquibaseUtil#getBuildVersion()
	CALLEE: liquibase.changelog.AbstractChangeLogHistoryService#getDeploymentId()
CALLER: liquibase.changelog.AbstractChangeLogHistoryService#getRanChangeSet(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.OfflineChangeLogHistoryService#getRanChangeSets()
	CALLEE: liquibase.changelog.RanChangeSet#isSameAs(liquibase.changelog.ChangeSet)
CALLER: liquibase.util.csv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader)
CALLER: liquibase.util.csv.opencsv.CSVReader#readNext()
	CALLEE: liquibase.util.csv.opencsv.CSVReader#getNextLine()
	CALLEE: liquibase.util.csv.opencsv.CSVReader#validateResult(java.lang.String[])
	CALLEE: liquibase.util.csv.opencsv.CSVReader#combineResultsFromMultipleReads(java.lang.String[],java.lang.String[])
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isPending()
	CALLEE: liquibase.util.csv.opencsv.CSVParser#parseLineMulti(java.lang.String)
CALLER: liquibase.ContextExpression#<init>(java.lang.String)
	CALLEE: liquibase.ContextExpression#parseContextString(java.lang.String)
CALLER: liquibase.Labels#<init>(java.lang.String)
	CALLEE: liquibase.Labels#parseLabelString(java.lang.String)
CALLER: static liquibase.change.CheckSum#parse(java.lang.String)
	CALLEE: liquibase.change.CheckSum#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.util.IteratingCallback#close()
	CALLEE: org.eclipse.jetty.server.HttpConnection.SendCallback#onCompleteFailure(java.lang.Throwable)
CALLER: org.eclipse.jetty.io.AbstractConnection#onClose()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: static jersey.repackaged.com.google.common.collect.Iterables#any(java.lang.Iterable,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.FilteredCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#any(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#iterator()
CALLER: javax.servlet.ServletContextAttributeEvent#<init>(javax.servlet.ServletContext,java.lang.String,java.lang.Object)
	CALLEE: javax.servlet.ServletContextEvent#<init>(javax.servlet.ServletContext)
CALLER: org.eclipse.jetty.util.AttributesMap#ensureMap()
	CALLEE: org.eclipse.jetty.util.AttributesMap#map()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#getResourcePaths(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#getResource(java.lang.String)
CALLER: org.eclipse.jetty.webapp.WebAppContext.Context#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#isExtractWAR()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#getResource(java.lang.String)
CALLER: org.eclipse.jetty.util.resource.JarResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream(boolean)
	CALLEE: org.eclipse.jetty.util.resource.JarResource.1#<init>(org.eclipse.jetty.util.resource.JarResource,java.io.InputStream)
CALLER: org.eclipse.jetty.util.resource.URLResource#getInputStream()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getInputStream(boolean)
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#size(java.util.Iterator)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
CALLER: com.zaxxer.hikari.pool.ProxyConnection#closeStatements()
	CALLEE: com.zaxxer.hikari.util.FastList#size()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.util.FastList#get(int)
	CALLEE: com.zaxxer.hikari.util.FastList#clear()
CALLER: static com.zaxxer.hikari.pool.ProxyConnection.ClosedConnection#<clinit>()
	CALLEE: static com.zaxxer.hikari.pool.ProxyConnection.ClosedConnection#getClosedConnection()
CALLER: com.zaxxer.hikari.pool.ProxyLeakTask#cancel()
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.SimpleLogger#info(java.lang.String,java.lang.Object)
CALLER: com.zaxxer.hikari.pool.PoolEntry#resetConnectionState(com.zaxxer.hikari.pool.ProxyConnection,int)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#resetConnectionState(java.sql.Connection,com.zaxxer.hikari.pool.ProxyConnection,int)
CALLER: com.zaxxer.hikari.pool.PoolEntry#recycle(long)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#recycle(com.zaxxer.hikari.pool.PoolEntry)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getPoolName()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask.1#cancel()
	CALLEE: com.zaxxer.hikari.pool.ProxyLeakTask#cancel()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#evict(java.lang.String)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#prepareStatement(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#trackStatement(java.sql.Statement)
	CALLEE: static com.zaxxer.hikari.pool.ProxyFactory#getProxyPreparedStatement(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#prepareStatement(java.lang.String,int)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#trackStatement(java.sql.Statement)
	CALLEE: static com.zaxxer.hikari.pool.ProxyFactory#getProxyPreparedStatement(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
CALLER: org.apache.log4j.or.RendererMap#get(java.lang.Class)
	CALLEE: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#advance()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: static org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#access$200(org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner,java.io.File)
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#processFile(java.io.File)
CALLER: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.internal.scanning.VfsSchemeResourceFinderFactory.VfsResourceFinder#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.JarZipSchemeResourceFinderFactory.JarZipSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.JarFileScanner#next()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#next()
CALLER: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.BundleSchemeResourceFinderFactory.BundleSchemeScanner#hasNext()
CALLER: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.FileSchemeResourceFinderFactory.FileSchemeScanner.1#hasNext()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(java.lang.Runnable)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$300(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$400(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$500(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$700(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$800(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$900(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder.1#<init>(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.Resource.Data)
CALLER: jersey.repackaged.com.google.common.collect.Iterators.8#transform(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
CALLER: org.glassfish.hk2.api.AnnotationLiteral#getMembers()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral.1#<init>(org.glassfish.hk2.api.AnnotationLiteral)
CALLER: static org.glassfish.hk2.api.AnnotationLiteral#invoke(java.lang.reflect.Method,java.lang.Object)
	CALLEE: static org.glassfish.hk2.api.AnnotationLiteral#setAccessible(java.lang.reflect.AccessibleObject)
CALLER: org.glassfish.jersey.servlet.WebAppResourcesScanner#next()
	CALLEE: org.glassfish.jersey.server.internal.scanning.CompositeResourceFinder#next()
CALLER: org.glassfish.jersey.server.model.ComponentModelValidator.1#run()
	CALLEE: static org.glassfish.jersey.internal.Errors#mark()
	CALLEE: static org.glassfish.jersey.server.model.internal.ModelErrors#getErrorsAsResourceModelIssues(boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#unmark()
	CALLEE: static org.glassfish.jersey.server.model.ComponentModelValidator#access$000(org.glassfish.jersey.server.model.ComponentModelValidator,org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: static org.glassfish.jersey.server.model.ComponentModelValidator#access$100(org.glassfish.jersey.server.model.ComponentModelValidator)
CALLER: org.glassfish.jersey.model.internal.RankedComparator#getPriority(org.glassfish.jersey.model.internal.RankedProvider)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#getRank()
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#access$000(org.glassfish.jersey.server.model.IntrospectionModeller)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#doCreateResourceBuilder()
CALLER: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: static jersey.repackaged.com.google.common.collect.Platform#mapsTransformEntriesSortedMap(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#<init>(java.util.Map,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.ImprovedAbstractMap#<init>()
CALLER: org.eclipse.jetty.io.AbstractConnection#next(org.eclipse.jetty.io.AbstractConnection.State,org.eclipse.jetty.io.AbstractConnection.State)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#onEnter(org.eclipse.jetty.io.AbstractConnection)
CALLER: jersey.repackaged.com.google.common.collect.Iterators.7#computeNext()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.9#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.3#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.7#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#endOfData()
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModel#<init>(java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModel#getRuntimeResources(java.util.List)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.Builder#build(org.glassfish.jersey.server.model.RuntimeResource)
CALLER: org.glassfish.jersey.internal.OsgiRegistry#locateAllProviders(java.lang.String)
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#call()
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
CALLER: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#convertTransformations(org.glassfish.jersey.process.internal.Stage)
	CALLEE: org.glassfish.jersey.process.internal.Stages.LinkedStage#<init>(jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.process.internal.Stages.LinkedStage#<init>(jersey.repackaged.com.google.common.base.Function,org.glassfish.jersey.process.internal.Stage)
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
CALLER: liquibase.statement.core.UpdateChangeSetChecksumStatement#<init>(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.statement.AbstractSqlStatement#<init>()
CALLER: static liquibase.util.csv.CSVWriter#<clinit>()
	CALLEE: liquibase.util.ISODateFormat#<init>()
CALLER: liquibase.util.csv.CSVWriter#<init>(java.io.Writer)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer)
CALLER: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[])
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[],boolean)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService.2#execute(java.lang.String[])
	CALLEE: liquibase.util.ISODateFormat#<init>()
	CALLEE: liquibase.util.ISODateFormat#format(java.sql.Timestamp)
	CALLEE: static liquibase.changelog.OfflineChangeLogHistoryService#access$100(liquibase.changelog.OfflineChangeLogHistoryService)
	CALLEE: static liquibase.changelog.OfflineChangeLogHistoryService#access$000(liquibase.changelog.OfflineChangeLogHistoryService)
	CALLEE: static liquibase.changelog.OfflineChangeLogHistoryService#access$200(liquibase.changelog.OfflineChangeLogHistoryService)
CALLER: liquibase.changelog.OfflineChangeLogHistoryService.1#execute(java.lang.String[])
	CALLEE: static liquibase.changelog.OfflineChangeLogHistoryService#access$000(liquibase.changelog.OfflineChangeLogHistoryService)
CALLER: liquibase.util.csv.opencsv.CSVWriter#close()
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#flush()
CALLER: liquibase.changelog.OfflineChangeLogHistoryService#getNextSequenceValue()
	CALLEE: liquibase.util.csv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#readNext()
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char)
CALLER: liquibase.util.csv.opencsv.CSVReader#getNextLine()
	CALLEE: liquibase.util.csv.opencsv.CSVReader#isClosed()
	CALLEE: liquibase.util.csv.opencsv.stream.reader.LineReader#readLine()
CALLER: liquibase.ContextExpression#parseContextString(java.lang.String)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: static liquibase.util.StringUtils#splitAndTrim(java.lang.String,java.lang.String)
CALLER: liquibase.Labels#parseLabelString(java.lang.String)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
	CALLEE: static liquibase.util.StringUtils#splitAndTrim(java.lang.String,java.lang.String)
CALLER: static org.eclipse.jetty.util.IteratingCallback.1#<clinit>()
	CALLEE: static org.eclipse.jetty.util.IteratingCallback.Action#values()
	CALLEE: static org.eclipse.jetty.util.IteratingCallback.State#values()
CALLER: org.eclipse.jetty.server.HttpConnection.SendCallback#onCompleteFailure(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: org.eclipse.jetty.server.HttpConnection.SendCallback#releaseHeader()
	CALLEE: static org.eclipse.jetty.server.HttpConnection#access$1000(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.util.Callback,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#shutdownOutput()
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#any(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: static jersey.repackaged.com.google.common.collect.Iterators#indexOf(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: static org.eclipse.jetty.util.URIUtil#canonicalPath(java.lang.String)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkAlias(java.lang.String,org.eclipse.jetty.util.resource.Resource)
CALLER: org.eclipse.jetty.webapp.WebAppContext#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#ignore(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#getResource(java.lang.String)
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#getResourceAlias(java.lang.String)
CALLER: org.eclipse.jetty.util.resource.URLResource#getInputStream(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarFileResource#checkConnection()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#checkConnection()
CALLER: static com.zaxxer.hikari.pool.ProxyConnection.ClosedConnection#getClosedConnection()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection.ClosedConnection.1#<init>()
CALLER: com.zaxxer.hikari.pool.PoolBase#resetConnectionState(java.sql.Connection,com.zaxxer.hikari.pool.ProxyConnection,int)
	CALLEE: com.zaxxer.hikari.pool.PoolBase#setNetworkTimeout(java.sql.Connection,long)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.SimpleLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.SimpleLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#getReadOnlyState()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#getAutoCommitState()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#getTransactionIsolationState()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#getCatalogState()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#getNetworkTimeoutState()
	CALLEE: com.zaxxer.hikari.pool.PoolBase#stringFromResetBits(int)
CALLER: com.zaxxer.hikari.pool.HikariPool#recycle(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordConnectionUsage(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.pool.PoolBase.NopMetricsTrackerDelegate#recordConnectionUsage(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.util.ConcurrentBag#requite(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
CALLER: com.zaxxer.hikari.pool.PoolEntry#evict(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.HikariPool#closeConnection(com.zaxxer.hikari.pool.PoolEntry,java.lang.String)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#trackStatement(java.sql.Statement)
	CALLEE: com.zaxxer.hikari.util.FastList#add(java.lang.Object)
CALLER: static com.zaxxer.hikari.pool.ProxyFactory#getProxyPreparedStatement(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#<init>(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
CALLER: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
	CALLEE: org.apache.log4j.or.RendererMap#searchInterfaces(java.lang.Class)
CALLER: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
CALLER: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(org.glassfish.hk2.api.ServiceHandle)
CALLER: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(org.glassfish.jersey.internal.Errors.ErrorMessage)
CALLER: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
CALLER: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(org.glassfish.jersey.model.internal.RankedProvider)
CALLER: static org.glassfish.hk2.api.AnnotationLiteral#setAccessible(java.lang.reflect.AccessibleObject)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral.2#<init>(java.lang.reflect.AccessibleObject)
CALLER: static org.glassfish.jersey.server.model.ComponentModelValidator#access$000(org.glassfish.jersey.server.model.ComponentModelValidator,org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator#validateWithErrors(org.glassfish.jersey.server.model.ResourceModelComponent)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#doCreateResourceBuilder()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#extended(boolean)
	CALLEE: static org.glassfish.jersey.server.model.internal.ModelHelper#getAnnotatedResourceClass(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getAnnotationTypes(java.lang.reflect.AnnotatedElement,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#name(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#checkForNonPublicMethodIssues()
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Consumes)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Produces)
	CALLEE: org.glassfish.jersey.server.model.MethodList#<init>(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#checkResourceClassSetters(org.glassfish.jersey.server.model.MethodList,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.InvocableValidator#isSingleton(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#checkResourceClassFields(boolean,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder()
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#addResourceMethods(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,java.util.List,java.util.List,java.util.Collection,boolean)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#addSubResourceMethods(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,java.util.List,java.util.List,java.util.Collection,boolean)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#addSubResourceLocators(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,boolean)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NEW_AR_CREATED_BY_INTROSPECTION_MODELER(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
CALLER: static jersey.repackaged.com.google.common.collect.Platform#mapsTransformEntriesSortedMap(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.NavigableMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#transformEntriesIgnoreNavigable(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.1#apply(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#access$700(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Class)
CALLER: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.9#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.3#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.7#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Object)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.1#apply(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_INSTANTIABLE_COMPONENT(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Class)
CALLER: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Class)
CALLER: org.glassfish.jersey.server.ApplicationHandler.9#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#checkProviderRuntime(java.lang.Class,org.glassfish.jersey.model.ContractProvider,javax.ws.rs.RuntimeType,boolean,boolean)
CALLER: org.glassfish.jersey.model.internal.CommonConfig.3#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.3#apply(org.glassfish.hk2.utilities.Binder)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.7#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.2#apply(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModel#getRuntimeResources(java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Maps#newHashMap()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModel#getRuntimeResources(java.util.List)
	CALLEE: org.glassfish.jersey.uri.PathTemplate#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getPattern()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.Builder#<init>(java.util.List,java.util.List,java.lang.String)
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#getRegex()
	CALLEE: org.glassfish.jersey.server.model.Resource#getPath()
	CALLEE: org.glassfish.jersey.server.model.Resource#getChildResources()
CALLER: static org.glassfish.jersey.server.model.RuntimeResource#<clinit>()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.1#<init>()
CALLER: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean,org.glassfish.jersey.internal.ServiceFinder.1)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#<init>(java.lang.Class,java.lang.String,java.lang.ClassLoader,boolean)
CALLER: org.glassfish.jersey.process.internal.Stages.LinkedStage#<init>(jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.process.internal.Stages.LinkedStage#<init>(jersey.repackaged.com.google.common.base.Function,org.glassfish.jersey.process.internal.Stage)
CALLER: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char)
CALLER: liquibase.util.csv.opencsv.CSVWriter#writeNext(java.lang.String[],boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#stringContainsSpecialCharacters(java.lang.String)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#processLine(java.lang.String)
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char,int,boolean)
CALLER: static org.eclipse.jetty.util.IteratingCallback.Action#<clinit>()
	CALLEE: org.eclipse.jetty.util.IteratingCallback.Action#<init>(java.lang.String,int)
CALLER: org.eclipse.jetty.server.HttpConnection.SendCallback#releaseHeader()
	CALLEE: static org.eclipse.jetty.server.HttpConnection#access$800(org.eclipse.jetty.server.HttpConnection)
	CALLEE: org.eclipse.jetty.io.ArrayByteBufferPool#release(java.nio.ByteBuffer)
CALLER: static org.eclipse.jetty.server.HttpConnection#access$1000(org.eclipse.jetty.server.HttpConnection,org.eclipse.jetty.util.Callback,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#failedCallback(org.eclipse.jetty.util.Callback,java.lang.Throwable)
CALLER: org.eclipse.jetty.io.ChannelEndPoint#shutdownOutput()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#close()
CALLER: static jersey.repackaged.com.google.common.collect.Iterators#indexOf(java.util.Iterator,jersey.repackaged.com.google.common.base.Predicate)
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.9#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.3#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.7#apply(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Object)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#checkAlias(java.lang.String,org.eclipse.jetty.util.resource.Resource)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler.ApproveNonExistentDirectoryAliases#check(java.lang.String,org.eclipse.jetty.util.resource.Resource)
CALLER: com.zaxxer.hikari.pool.PoolBase.MetricsTrackerDelegate#recordConnectionUsage(com.zaxxer.hikari.pool.PoolEntry)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#getMillisSinceBorrowed()
	CALLEE: com.zaxxer.hikari.metrics.dropwizard.CodaHaleMetricsTracker#recordConnectionUsageMillis(long)
CALLER: com.zaxxer.hikari.util.ConcurrentBag#requite(com.zaxxer.hikari.util.ConcurrentBag.IConcurrentBagEntry)
	CALLEE: com.zaxxer.hikari.util.QueuedSequenceSynchronizer#signal()
	CALLEE: com.zaxxer.hikari.util.FastList#add(java.lang.Object)
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#lazySet(int)
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#<init>(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
	CALLEE: com.zaxxer.hikari.pool.ProxyPreparedStatement#<init>(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
CALLER: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(org.glassfish.jersey.internal.Errors.ErrorMessage)
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getMessage()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getSeverity()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#getSource()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#<init>(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
CALLER: org.glassfish.jersey.internal.inject.Providers.2#apply(org.glassfish.jersey.model.internal.RankedProvider)
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#getProvider()
CALLER: org.glassfish.jersey.server.model.ComponentModelValidator#validateWithErrors(org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getComponents()
	CALLEE: org.glassfish.jersey.server.model.Invocable#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getComponents()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler#getComponents()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: org.glassfish.jersey.server.model.ComponentModelValidator#validateWithErrors(org.glassfish.jersey.server.model.ResourceModelComponent)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#getComponents()
	CALLEE: org.glassfish.jersey.server.model.Resource#getComponents()
	CALLEE: org.glassfish.jersey.server.model.Resource#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getComponents()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.HandlerConstructor#getComponents()
	CALLEE: org.glassfish.jersey.server.model.HandlerConstructor#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getComponents()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#checkForNonPublicMethodIssues()
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller#getAllDeclaredMethods(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#<init>(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withMetaAnnotation(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_RES_METHOD(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_SUB_RES_METHOD(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutMetaAnnotation(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_SUB_RES_LOC(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#iterator()
	CALLEE: org.glassfish.jersey.server.model.MethodList#isNotPublic()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Consumes)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(java.lang.String[])
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Produces)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(java.lang.String[])
CALLER: org.glassfish.jersey.server.model.MethodList#<init>(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#<init>(java.lang.Class,boolean)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#checkResourceClassSetters(org.glassfish.jersey.server.model.MethodList,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.InvocableValidator#isSingleton(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutMetaAnnotation(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[])
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#validateParameter(org.glassfish.jersey.server.model.Parameter,java.lang.Object,java.lang.String,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#iterator()
	CALLEE: org.glassfish.jersey.server.model.MethodList#hasNumParams(int)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getParameterTypes()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getGenericParameterTypes()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
	CALLEE: org.glassfish.jersey.server.model.MethodList#hasReturnType(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotations()
	CALLEE: org.glassfish.jersey.server.model.MethodList#nameStartsWith(java.lang.String)
CALLER: static org.glassfish.jersey.server.model.InvocableValidator#isSingleton(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#isProvider(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#checkResourceClassFields(boolean,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[])
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#validateParameter(org.glassfish.jersey.server.model.Parameter,java.lang.Object,java.lang.String,java.lang.String,boolean)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredFieldsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
CALLER: static org.glassfish.jersey.server.model.Resource#builder(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String,org.glassfish.jersey.server.model.Resource.1)
CALLER: static org.glassfish.jersey.server.model.Resource#builder()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.1)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#addResourceMethods(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,java.util.List,java.util.List,java.util.Collection,boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlingMethod(java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlerParameters(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#extended(boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withMetaAnnotation(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveConsumedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveProducedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#introspectAsyncFeatures(org.glassfish.jersey.server.model.AnnotatedMethod,org.glassfish.jersey.server.model.ResourceMethod.Builder)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#addMethod(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.MethodList#iterator()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#encodedParameters(boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#consumes(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getDeclaredMethod()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotations()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMetaMethodAnnotations(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handledBy(java.lang.Class,java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#produces(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.lang.annotation.Annotation[])
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#addSubResourceMethods(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,java.util.List,java.util.List,java.util.Collection,boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handledBy(java.lang.Class,java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlingMethod(java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlerParameters(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.lang.annotation.Annotation[])
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#extended(boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withMetaAnnotation(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveConsumedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveProducedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#introspectAsyncFeatures(org.glassfish.jersey.server.model.AnnotatedMethod,org.glassfish.jersey.server.model.ResourceMethod.Builder)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#addChildResource(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#addMethod(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.MethodList#iterator()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#encodedParameters(boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#consumes(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getDeclaredMethod()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotations()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMetaMethodAnnotations(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#produces(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.util.Collection)
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#addSubResourceLocators(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.MethodList,java.util.List,boolean,boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withoutMetaAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#withAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#addChildResource(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#addMethod()
	CALLEE: org.glassfish.jersey.server.model.MethodList#iterator()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#encodedParameters(boolean)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getDeclaredMethod()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handledBy(java.lang.Class,java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlingMethod(java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#handlerParameters(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#extended(boolean)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#NEW_AR_CREATED_BY_INTROSPECTION_MODELER(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNEW_AR_CREATED_BY_INTROSPECTION_MODELER(java.lang.Object)
CALLER: static jersey.repackaged.com.google.common.collect.Maps#transformEntries(java.util.NavigableMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesNavigableMap#<init>(java.util.NavigableMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: static jersey.repackaged.com.google.common.collect.Maps#transformEntriesIgnoreNavigable(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesSortedMap#<init>(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.2#apply(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.ResourceConfig.RuntimeConfig#access$700(org.glassfish.jersey.server.ResourceConfig.RuntimeConfig)
CALLER: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
CALLER: org.glassfish.jersey.server.ResourceConfig.RuntimeConfig.3.2#apply(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_INSTANTIABLE_COMPONENT(java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
CALLER: org.glassfish.jersey.server.ApplicationHandler.8#apply(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#checkProviderRuntime(java.lang.Class,org.glassfish.jersey.model.ContractProvider,javax.ws.rs.RuntimeType,boolean,boolean)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.1#apply(org.glassfish.jersey.model.ContractProvider)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.2#apply(org.glassfish.jersey.model.ContractProvider)
CALLER: static org.glassfish.jersey.uri.UriTemplate#<clinit>()
	CALLEE: org.glassfish.jersey.uri.UriTemplate.1#<init>()
	CALLEE: org.glassfish.jersey.uri.UriTemplate#<init>()
CALLER: org.glassfish.jersey.uri.PathTemplate#<init>(java.lang.String)
	CALLEE: static org.glassfish.jersey.uri.PathTemplate#prefixWithSlash(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.PathTemplate.PathTemplateParser#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.UriTemplate#<init>(org.glassfish.jersey.uri.internal.UriTemplateParser)
CALLER: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char,char)
CALLER: liquibase.util.csv.opencsv.CSVWriter#processLine(java.lang.String)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#processCharacter(java.lang.StringBuilder,char)
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char,int,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char,int,boolean,boolean)
CALLER: org.eclipse.jetty.io.AbstractConnection#failedCallback(org.eclipse.jetty.util.Callback,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#execute(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.util.thread.NonBlockingThread#isNonBlockingThread()
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getExecutor()
	CALLEE: org.eclipse.jetty.io.AbstractConnection.1#<init>(org.eclipse.jetty.io.AbstractConnection,org.eclipse.jetty.util.Callback,java.lang.Throwable)
CALLER: com.zaxxer.hikari.pool.PoolEntry#getMillisSinceBorrowed()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#elapsedMillis(long)
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#elapsedMillis(long)
CALLER: com.zaxxer.hikari.pool.ProxyPreparedStatement#<init>(com.zaxxer.hikari.pool.ProxyConnection,java.sql.PreparedStatement)
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#<init>(com.zaxxer.hikari.pool.ProxyConnection,java.sql.Statement)
CALLER: org.glassfish.jersey.server.model.ResourceModel#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitResourceModel(org.glassfish.jersey.server.model.ResourceModel)
CALLER: org.glassfish.jersey.server.model.ResourceModel#getComponents()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: org.glassfish.jersey.server.model.ResourceModel#getRuntimeResourceModel()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModel#getRuntimeResources()
CALLER: org.glassfish.jersey.server.model.IntrospectionModeller#getAllDeclaredMethods(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.IntrospectionModeller.2#<init>(org.glassfish.jersey.server.model.IntrospectionModeller,java.lang.Class,java.util.List)
CALLER: org.glassfish.jersey.server.model.MethodList#<init>(java.util.Collection)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#<init>(java.lang.reflect.Method)
CALLER: org.glassfish.jersey.server.model.MethodList#withMetaAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList.6#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_RES_METHOD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_RES_METHOD(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_SUB_RES_METHOD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_SUB_RES_METHOD(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.MethodList#withoutMetaAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.8#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.Class)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#NON_PUB_SUB_RES_LOC(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_SUB_RES_LOC(java.lang.Object)
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(java.lang.String[])
	CALLEE: static org.glassfish.jersey.internal.util.Tokenizer#tokenize(java.lang.String,java.lang.String)
	CALLEE: static javax.ws.rs.core.MediaType#valueOf(java.lang.String)
CALLER: org.glassfish.jersey.server.model.MethodList#<init>(java.lang.Class,boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodList#<init>(java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.MethodList#getAllDeclaredMethods(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.MethodList#getMethods(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[])
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.jersey.server.model.Parameter.4#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.5#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.6#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.7#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.8#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.9#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.10#getSource()
	CALLEE: static org.glassfish.jersey.server.model.Parameter#getValue(java.lang.annotation.Annotation)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveGenericType(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.server.model.Parameter.BeanParameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String,org.glassfish.jersey.server.model.Parameter.1)
	CALLEE: org.glassfish.jersey.server.model.Parameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,org.glassfish.jersey.server.model.Parameter.Source,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#rawClass()
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#type()
	CALLEE: org.glassfish.jersey.server.model.Parameter.1#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.2#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.3#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.4#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.5#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.6#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.7#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.8#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.9#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.10#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.1#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.2#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter.3#getSource()
CALLER: static org.glassfish.jersey.server.model.Parameter#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.Parameter#createParamAnnotationHelperMap()
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator#validateParameter(org.glassfish.jersey.server.model.Parameter,java.lang.Object,java.lang.String,java.lang.String,boolean)
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(java.lang.Runnable)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator.1#<init>(org.glassfish.jersey.server.model.Parameter,boolean,java.lang.Object,java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.server.model.Parameter.Source#<clinit>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.Source#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.internal.inject.Providers#isProvider(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#findFirstProviderContract(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredFieldsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.4#<init>(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveConsumedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Consumes)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#resolveProducedTypes(org.glassfish.jersey.server.model.AnnotatedMethod,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.IntrospectionModeller#extractMediaTypes(javax.ws.rs.Produces)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.IntrospectionModeller#introspectAsyncFeatures(org.glassfish.jersey.server.model.AnnotatedMethod,org.glassfish.jersey.server.model.ResourceMethod.Builder)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getParameterAnnotations()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#suspended(long,java.util.concurrent.TimeUnit)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#managedAsync()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNEW_AR_CREATED_BY_INTROSPECTION_MODELER(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesNavigableMap#<init>(java.util.NavigableMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesSortedMap#<init>(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesSortedMap#<init>(java.util.SortedMap,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#<init>(java.util.Map,jersey.repackaged.com.google.common.collect.Maps.EntryTransformer)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.1#apply(org.glassfish.jersey.model.ContractProvider)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
CALLER: org.glassfish.jersey.model.internal.ComponentBag.2#apply(org.glassfish.jersey.model.ContractProvider)
	CALLEE: org.glassfish.jersey.model.ContractProvider#getContracts()
CALLER: static org.glassfish.jersey.uri.internal.UriTemplateParser#<clinit>()
	CALLEE: static org.glassfish.jersey.uri.internal.UriTemplateParser#initReserved()
	CALLEE: static org.glassfish.jersey.uri.internal.UriTemplateParser#initHexToUpperCaseRegex()
CALLER: org.glassfish.jersey.uri.PathTemplate.PathTemplateParser#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#<init>(java.lang.String)
CALLER: org.glassfish.jersey.uri.UriTemplate#<init>(org.glassfish.jersey.uri.internal.UriTemplateParser)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getTemplate()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getNormalizedTemplate()
	CALLEE: static org.glassfish.jersey.uri.UriTemplate#initUriPattern(org.glassfish.jersey.uri.internal.UriTemplateParser)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getNumberOfExplicitRegexes()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getNumberOfRegexGroups()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getNumberOfLiteralCharacters()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getNames()
CALLER: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char,char)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char,char,char)
CALLER: liquibase.util.csv.opencsv.CSVWriter#processCharacter(java.lang.StringBuilder,char)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#checkCharactersToEscape(char)
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,char,char,char,int,boolean,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,int,liquibase.util.csv.opencsv.CSVParser)
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#getSet(java.lang.Class[])
CALLER: org.glassfish.jersey.server.model.AnnotatedMethod#<init>(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#findAnnotatedMethod(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#mergeMethodAnnotations(java.lang.reflect.Method,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#mergeParameterAnnotations(java.lang.reflect.Method,java.lang.reflect.Method)
CALLER: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.6#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.8#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList#<init>(org.glassfish.jersey.server.model.AnnotatedMethod[])
	CALLEE: org.glassfish.jersey.server.model.MethodList.5#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.7#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.2#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.1#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.3#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.MethodList.4#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_RES_METHOD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_SUB_RES_METHOD(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableNON_PUB_SUB_RES_LOC(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.model.MethodList#getAllDeclaredMethods(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredMethodsPA(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.Parameter#getValue(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveGenericType(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveGenericType(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.17#<init>(java.lang.reflect.Type[],java.lang.reflect.ParameterizedType)
	CALLEE: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class,java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getArrayForComponentType(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#rawClass()
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#type()
CALLER: org.glassfish.jersey.server.model.Parameter.BeanParameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String,org.glassfish.jersey.server.model.Parameter.1)
	CALLEE: org.glassfish.jersey.server.model.Parameter.BeanParameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String)
CALLER: static org.glassfish.jersey.server.model.Parameter#createParamAnnotationHelperMap()
	CALLEE: org.glassfish.jersey.server.model.Parameter.1#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.2#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.3#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.4#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.5#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.6#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.7#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.8#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.9#<init>()
	CALLEE: org.glassfish.jersey.server.model.Parameter.10#<init>()
CALLER: static org.glassfish.jersey.internal.inject.Providers#findFirstProviderContract(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#isSupportedContract(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getImplementedContracts(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#findFirstProviderContract(java.lang.Class)
CALLER: static org.glassfish.jersey.uri.PatternWithGroups#<clinit>()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#<init>()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups.EmptyStringMatchResult#<init>(org.glassfish.jersey.uri.PatternWithGroups.1)
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#parse(org.glassfish.jersey.uri.internal.CharacterIterator)
CALLER: static org.glassfish.jersey.uri.UriTemplate#initUriPattern(org.glassfish.jersey.uri.internal.UriTemplateParser)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getPattern()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getGroupIndexes()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#<init>(java.util.regex.Pattern,int[])
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#getNumberOfRegexGroups()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#getGroupIndexes()
CALLER: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char,char,char)
	CALLEE: liquibase.util.csv.opencsv.CSVWriter#<init>(java.io.Writer,char,char,char,java.lang.String)
CALLER: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean,boolean)
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,int,liquibase.util.csv.opencsv.CSVParser)
	CALLEE: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,int,liquibase.util.csv.opencsv.CSVParser,boolean,boolean)
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#findAnnotatedMethod(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#findAnnotatedMethod(java.lang.Class,java.lang.reflect.Method)
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#mergeMethodAnnotations(java.lang.reflect.Method,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#asList(java.lang.Object[])
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#mergeParameterAnnotations(java.lang.reflect.Method,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#asList(java.lang.Object[])
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#annotationNotInList(java.lang.Class,java.util.List)
CALLER: org.glassfish.jersey.server.model.MethodList.6#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotations()
CALLER: org.glassfish.jersey.server.model.MethodList.8#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotations()
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredMethodsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.6#<init>(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
CALLER: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#<init>(java.lang.Class,java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#<init>(java.lang.Class,java.lang.reflect.Type)
CALLER: org.glassfish.jersey.server.model.Parameter.BeanParameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[])
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredFieldsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Parameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,org.glassfish.jersey.server.model.Parameter.Source,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String,org.glassfish.jersey.server.model.Parameter.1)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredConstructorsPA(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,java.lang.reflect.Constructor,boolean)
CALLER: org.glassfish.jersey.uri.PatternWithGroups.EmptyStringMatchResult#<init>(org.glassfish.jersey.uri.PatternWithGroups.1)
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups.EmptyStringMatchResult#<init>()
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#parse(org.glassfish.jersey.uri.internal.CharacterIterator)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#hasNext()
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#next()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#processLiteralCharacters()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#parseName(org.glassfish.jersey.uri.internal.CharacterIterator,int)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_INVALID_SYNTAX_TERMINATED(java.lang.Object)
CALLER: static liquibase.util.csv.opencsv.enums.CSVReaderNullFieldIndicator#<clinit>()
	CALLEE: liquibase.util.csv.opencsv.enums.CSVReaderNullFieldIndicator#<init>(java.lang.String,int)
CALLER: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean,boolean,liquibase.util.csv.opencsv.enums.CSVReaderNullFieldIndicator)
CALLER: liquibase.util.csv.opencsv.CSVReader#<init>(java.io.Reader,int,liquibase.util.csv.opencsv.CSVParser,boolean,boolean)
	CALLEE: liquibase.util.csv.opencsv.stream.reader.LineReader#<init>(java.io.BufferedReader,boolean)
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#findAnnotatedMethod(java.lang.Class,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#findAnnotatedMethod(java.lang.Class,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#findMethodOnClassPA(java.lang.Class,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#hasAnnotations(java.lang.reflect.Method)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.reflect.ParameterizedType,java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
CALLER: org.glassfish.jersey.server.model.Parameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,org.glassfish.jersey.server.model.Parameter.Source,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String,org.glassfish.jersey.server.model.Parameter.1)
	CALLEE: org.glassfish.jersey.server.model.Parameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,org.glassfish.jersey.server.model.Parameter.Source,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getDeclaredConstructorsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.16#<init>(java.lang.Class)
CALLER: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,java.lang.reflect.Constructor,boolean)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class[],java.lang.reflect.Type[],java.lang.annotation.Annotation[][])
CALLER: org.glassfish.jersey.uri.internal.CharacterIterator#next()
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#hasNext()
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#processLiteralCharacters()
	CALLEE: static org.glassfish.jersey.uri.UriComponent#isHexCharacter(char)
	CALLEE: org.glassfish.jersey.uri.PathTemplate.PathTemplateParser#encodeLiteralCharacters(java.lang.String)
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#parseName(org.glassfish.jersey.uri.internal.CharacterIterator,int)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_NAME_MORE_THAN_ONCE(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_INVALID_SYNTAX(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#next()
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#consumeWhiteSpace(org.glassfish.jersey.uri.internal.CharacterIterator)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#pos()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_START_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.uri.internal.UriTemplateParser#parseRegex(org.glassfish.jersey.uri.internal.CharacterIterator)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_AFTER_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_PART_OF_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_INVALID_SYNTAX_TERMINATED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_INVALID_SYNTAX_TERMINATED(java.lang.Object)
CALLER: liquibase.util.csv.opencsv.CSVParser#<init>(char,char,char,boolean,boolean,boolean,liquibase.util.csv.opencsv.enums.CSVReaderNullFieldIndicator)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#anyCharactersAreTheSame(char,char,char)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#findMethodOnClassPA(java.lang.Class,java.lang.reflect.Method)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.18#<init>(java.lang.Class,java.lang.reflect.Method)
CALLER: static org.glassfish.jersey.server.model.AnnotatedMethod#hasAnnotations(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#hasMetaMethodAnnotations(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#hasMethodAnnotations(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.AnnotatedMethod#hasParameterAnnotations(java.lang.reflect.Method)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.reflect.ParameterizedType,java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
	CALLEE: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class,java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getArrayForComponentType(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.collection.ClassTypePair#of(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveTypeVariable(java.lang.Class,java.lang.Class,java.lang.reflect.TypeVariable,java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getRawType()
CALLER: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class[],java.lang.reflect.Type[],java.lang.annotation.Annotation[][])
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class,java.lang.reflect.Type,java.lang.annotation.Annotation[])
CALLER: org.glassfish.jersey.uri.PathTemplate.PathTemplateParser#encodeLiteralCharacters(java.lang.String)
	CALLEE: static org.glassfish.jersey.uri.UriComponent#contextualEncode(java.lang.String,org.glassfish.jersey.uri.UriComponent.Type)
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#consumeWhiteSpace(org.glassfish.jersey.uri.internal.CharacterIterator)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#next()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_START_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_START_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.uri.internal.UriTemplateParser#parseRegex(org.glassfish.jersey.uri.internal.CharacterIterator)
	CALLEE: org.glassfish.jersey.uri.internal.CharacterIterator#next()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_AFTER_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_AFTER_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_PART_OF_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_PART_OF_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_NAME_MORE_THAN_ONCE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_NAME_MORE_THAN_ONCE(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_TEMPLATE_PARSER_INVALID_SYNTAX(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_INVALID_SYNTAX(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_INVALID_SYNTAX_TERMINATED(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: liquibase.util.csv.opencsv.CSVParser#anyCharactersAreTheSame(char,char,char)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isSameCharacter(char,char)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_START_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_AFTER_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_ILLEGAL_CHAR_PART_OF_NAME(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_NAME_MORE_THAN_ONCE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_TEMPLATE_PARSER_INVALID_SYNTAX(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.MethodList#withAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.5#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.Class)
CALLER: org.glassfish.jersey.server.model.MethodList#withoutAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.7#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.Class)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#shortToString()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#addChildResource(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_ADD_CHILD_ALREADY_CHILD()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String,org.glassfish.jersey.server.model.Resource.Builder)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#addMethod()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#addMethod(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#httpMethod(java.lang.String)
CALLER: liquibase.util.csv.opencsv.stream.reader.LineReader#readLine()
	CALLEE: liquibase.util.csv.opencsv.stream.reader.LineReader#readUntilNewline()
CALLER: org.eclipse.jetty.io.AbstractConnection.FillInterestedState#onEnter(org.eclipse.jetty.io.AbstractConnection)
	CALLEE: org.eclipse.jetty.io.AbstractConnection#getEndPoint()
	CALLEE: static org.eclipse.jetty.io.AbstractConnection#access$200(org.eclipse.jetty.io.AbstractConnection)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint#fillInterested(org.eclipse.jetty.util.Callback)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#build()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#buildResourceData()
	CALLEE: org.glassfish.jersey.server.model.Resource#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data,org.glassfish.jersey.server.model.Resource.1)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#next()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#next()
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#next()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#next()
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#setConfigs()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$400(java.lang.String,java.net.URL,java.util.Set)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#handleClassNotFoundException()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#build(org.glassfish.jersey.process.internal.Stage)
	CALLEE: org.glassfish.jersey.process.internal.Stages.StageChainBuilder#addTailStage(org.glassfish.jersey.process.internal.Stage)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_COULD_NOT_BE_CREATED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.ServiceConfigurationError#<init>(java.lang.String)
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#next()
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.1#hasNext()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#setConfigs()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$400(java.lang.String,java.net.URL,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_COULD_NOT_BE_CREATED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$700(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#handleClassNotFoundException()
CALLER: org.glassfish.jersey.server.model.Resource.Builder.1#run()
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$600(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MERGE_CONFLICT_LOCATORS(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator.1#run()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getAnnotations()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#access$000()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#SINGLETON_INJECTS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getType()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#access$100(java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#PARAMETER_UNRESOLVABLE(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxyForSameScope(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxyForSameScope(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxyForSameScope(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#proxyForSameScope(boolean)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#proxyForSameScope(boolean)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#qualifiedBy(java.lang.annotation.Annotation)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#named(java.lang.String)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#named(java.lang.String)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#to(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#to(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.RuntimeResource.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.1#compare(org.glassfish.jersey.server.model.RuntimeResource,org.glassfish.jersey.server.model.RuntimeResource)
CALLER: jersey.repackaged.com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#join(java.util.Iterator)
CALLER: com.zaxxer.hikari.pool.ProxyStatement#close()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#untrackStatement(java.sql.Statement)
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#getGeneratedKeys()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#execute()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyPreparedStatement#execute()
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#setTimestamp(int,java.sql.Timestamp)
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#setNull(int,int)
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyPreparedStatement#executeQuery()
	CALLEE: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyPreparedStatement#executeQuery()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#getClassPath()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.util.resource.FileResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.BadResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.JarResource#getFile()
	CALLEE: org.eclipse.jetty.util.resource.URLResource#getFile()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#newResource(java.net.URL)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#setAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#checkManagedAttribute(java.lang.String,java.lang.Object)
	CALLEE: org.eclipse.jetty.util.AttributesMap#setAttribute(java.lang.String,java.lang.Object)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.Parameter#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#equals(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Parameter#hashCode()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#hashCode()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#hashCode()
CALLER: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#equals(java.lang.Object)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getRawType()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getActualTypeArguments()
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.17#getActualTypeArguments()
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.17#getRawType()
CALLER: org.eclipse.jetty.server.handler.ContextHandler.Context#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
CALLER: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: static org.glassfish.hk2.utilities.reflection.Pretty#pType(java.lang.reflect.ParameterizedType)
CALLER: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getRawType()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSourceName()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getDefaultValue()
CALLER: liquibase.changelog.RanChangeSet#toString()
	CALLEE: liquibase.changelog.RanChangeSet#getChangeLog()
	CALLEE: liquibase.changelog.RanChangeSet#getAuthor()
	CALLEE: liquibase.changelog.RanChangeSet#getId()
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#size()
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#size()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#size()
CALLER: org.eclipse.jetty.io.ArrayByteBufferPool#release(java.nio.ByteBuffer)
	CALLEE: org.eclipse.jetty.io.ArrayByteBufferPool#bucketFor(int,boolean)
	CALLEE: static org.eclipse.jetty.util.BufferUtil#clear(java.nio.ByteBuffer)
CALLER: org.eclipse.jetty.http.DateGenerator#doFormatDate(long)
	CALLEE: static org.eclipse.jetty.util.StringUtil#append2digits(java.lang.StringBuilder,int)
CALLER: org.eclipse.jetty.http.DateGenerator#doFormatCookieDate(java.lang.StringBuilder,long)
	CALLEE: static org.eclipse.jetty.util.StringUtil#append2digits(java.lang.StringBuilder,int)
CALLER: org.eclipse.jetty.util.resource.JarResource.1#close()
	CALLEE: static org.eclipse.jetty.util.IO#getClosedStream()
CALLER: org.glassfish.jersey.model.ContractProvider#getContracts()
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#keySet()
CALLER: org.glassfish.jersey.model.ContractProvider#getPriority(java.lang.Class)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#containsKey(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#get(java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#log(org.slf4j.event.LoggingEvent)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
CALLER: liquibase.changelog.RanChangeSet#isSameAs(liquibase.changelog.ChangeSet)
	CALLEE: liquibase.changelog.RanChangeSet#getChangeLog()
	CALLEE: liquibase.changelog.RanChangeSet#getAuthor()
	CALLEE: liquibase.changelog.RanChangeSet#getId()
CALLER: org.eclipse.jetty.server.session.HashedSession#save(boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#didActivate()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#isIdled()
	CALLEE: org.eclipse.jetty.server.session.MemSession#clearAttributes()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#willPassivate()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#save()
CALLER: org.glassfish.jersey.server.model.RuntimeResource.Builder#build(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.RuntimeResource,java.lang.String,org.glassfish.jersey.server.model.RuntimeResource.1)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#call()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#call()
CALLER: liquibase.util.csv.opencsv.CSVParser#parseLineMulti(java.lang.String)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#parseLine(java.lang.String,boolean)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#get(int)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#get(int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Parameter.1#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.1#getValueOf(javax.ws.rs.core.Context)
CALLER: org.glassfish.jersey.server.model.Parameter.2#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.2#getValueOf(javax.ws.rs.CookieParam)
CALLER: org.glassfish.jersey.server.model.Parameter.3#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.3#getValueOf(javax.ws.rs.FormParam)
CALLER: org.glassfish.jersey.server.model.Parameter.4#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.4#getValueOf(javax.ws.rs.HeaderParam)
CALLER: org.glassfish.jersey.server.model.Parameter.5#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.5#getValueOf(javax.ws.rs.MatrixParam)
CALLER: org.glassfish.jersey.server.model.Parameter.6#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.6#getValueOf(javax.ws.rs.PathParam)
CALLER: org.glassfish.jersey.server.model.Parameter.7#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.7#getValueOf(javax.ws.rs.QueryParam)
CALLER: org.glassfish.jersey.server.model.Parameter.8#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.8#getValueOf(javax.ws.rs.container.Suspended)
CALLER: org.glassfish.jersey.server.model.Parameter.9#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.9#getValueOf(org.glassfish.jersey.server.Uri)
CALLER: org.glassfish.jersey.server.model.Parameter.10#getValueOf(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.jersey.server.model.Parameter.10#getValueOf(javax.ws.rs.BeanParam)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#listIterator(int)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#listIterator(int)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList.1#<init>(jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList,java.util.ListIterator)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#listIterator(int)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_ADD_CHILD_ALREADY_CHILD()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_ADD_CHILD_ALREADY_CHILD()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#<init>(java.lang.String,org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder#<init>(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newLinkedHashSet()
CALLER: org.eclipse.jetty.io.AbstractEndPoint#fillInterested(org.eclipse.jetty.util.Callback)
	CALLEE: org.eclipse.jetty.io.IdleTimeout#notIdle()
	CALLEE: org.eclipse.jetty.io.FillInterest#register(org.eclipse.jetty.util.Callback)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#buildResourceData()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet(java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$700(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$800(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#processMethodBuilders()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#processChildResourceBuilders()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#mergeResources(java.util.List)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#areAllMembersExtended(java.util.List)
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#<init>(java.util.List,java.lang.String,java.util.List,org.glassfish.jersey.server.model.ResourceMethod.Data,java.util.List,java.util.Set,java.util.Set,boolean,org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#onBuildChildResource(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#isExtended()
CALLER: org.glassfish.jersey.server.model.Resource#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data,org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.OsgiServiceFinder.2#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyClassIterator#next()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#classForNameWithExceptionPEA(java.lang.String,java.lang.ClassLoader)
	CALLEE: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#hasNext()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$700(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$300(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_CLASS_COULD_NOT_BE_LOADED(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#setConfigs()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$300(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$200(java.lang.ClassLoader,java.lang.String)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#access$400(java.lang.String,java.net.URL,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#parse(java.lang.String,java.net.URL,java.util.Set)
CALLER: org.glassfish.jersey.internal.ServiceFinder.AbstractLazyIterator#handleClassNotFoundException()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableDEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#DEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableDEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_COULD_NOT_BE_CREATED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_COULD_NOT_BE_CREATED(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#access$700(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String,java.lang.Throwable)
CALLER: org.glassfish.jersey.internal.ServiceFinder.LazyObjectIterator#handleClassNotFoundException()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$500()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#access$300(java.lang.String,java.lang.String)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#remove(int)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#remove(int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MERGE_CONFLICT_LOCATORS(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MERGE_CONFLICT_LOCATORS(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#SINGLETON_INJECTS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSINGLETON_INJECTS_PARAMETER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_PARAMETER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator#access$100(java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteType(java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#PARAMETER_UNRESOLVABLE(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizablePARAMETER_UNRESOLVABLE(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResource.1#compare(org.glassfish.jersey.server.model.RuntimeResource,org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getPathPattern()
	CALLEE: org.glassfish.jersey.uri.PathPattern.1#compare(java.lang.Object,java.lang.Object)
CALLER: jersey.repackaged.com.google.common.base.Joiner#join(java.util.Iterator)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#untrackStatement(java.sql.Statement)
	CALLEE: com.zaxxer.hikari.util.FastList#remove(java.lang.Object)
CALLER: com.zaxxer.hikari.pool.ProxyStatement#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.ProxyPreparedStatement#execute()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#markCommitStateDirty()
CALLER: com.zaxxer.hikari.pool.ProxyPreparedStatement#executeQuery()
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#markCommitStateDirty()
	CALLEE: static com.zaxxer.hikari.pool.ProxyFactory#getProxyResultSet(com.zaxxer.hikari.pool.ProxyConnection,com.zaxxer.hikari.pool.ProxyStatement,java.sql.ResultSet)
CALLER: org.eclipse.jetty.server.handler.ContextHandler#newResource(java.net.URL)
	CALLEE: static org.eclipse.jetty.util.resource.Resource#newResource(java.net.URL)
CALLER: org.glassfish.jersey.model.internal.ComponentBag.6#apply(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag#getModel(java.lang.Class)
	CALLEE: org.glassfish.jersey.model.internal.ComponentBag.1#apply(java.lang.Object)
CALLER: static org.glassfish.hk2.utilities.reflection.Pretty#pType(java.lang.reflect.ParameterizedType)
	CALLEE: static org.glassfish.hk2.utilities.reflection.ReflectionHelper#getRawClass(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getActualTypeArguments()
	CALLEE: static org.glassfish.hk2.utilities.reflection.Pretty#clazz(java.lang.Class)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Pretty#type(java.lang.reflect.Type)
CALLER: jersey.repackaged.com.google.common.collect.Maps.TransformedEntriesMap#get(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder.1#transformEntry(java.lang.Object,java.lang.Object)
CALLER: org.eclipse.jetty.server.session.AbstractSession#willPassivate()
	CALLEE: javax.servlet.http.HttpSessionEvent#<init>(javax.servlet.http.HttpSession)
	CALLEE: org.eclipse.jetty.server.session.MemSession#getAttributeMap()
CALLER: org.eclipse.jetty.server.session.HashedSession#save()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getId()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#save(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.server.session.HashedSession#saveFailed()
CALLER: org.glassfish.jersey.server.model.RuntimeResource#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.RuntimeResource,java.lang.String,org.glassfish.jersey.server.model.RuntimeResource.1)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.RuntimeResource,java.lang.String)
CALLER: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#call()
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#access$100()
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#access$200(org.osgi.framework.Bundle,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#EXCEPTION_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
CALLER: liquibase.util.csv.opencsv.CSVParser#parseLine(java.lang.String,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#inQuotes(boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isNextCharacterEscapable(java.lang.String,boolean,int)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#appendNextCharacterAndAdvanceLoop(java.lang.String,java.lang.StringBuilder,int)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isNextCharacterEscapedQuote(java.lang.String,boolean,int)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#atStartOfField(java.lang.StringBuilder)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isAllWhiteSpace(java.lang.CharSequence)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#convertEmptyToNullIfNeeded(java.lang.String,boolean)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList.1#<init>(jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList,java.util.ListIterator)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_ADD_CHILD_ALREADY_CHILD()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.eclipse.jetty.io.FillInterest#register(org.eclipse.jetty.util.Callback)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.io.FillInterest#onFail(java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.AbstractEndPoint.1#needsFill()
	CALLEE: org.eclipse.jetty.io.FillInterest#fillable()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#processMethodBuilders()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#build()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#processChildResourceBuilders()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#build()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#mergeResources(java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$1000(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#mergeWith(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#buildResourceData()
	CALLEE: static org.glassfish.jersey.server.model.Resource#access$1100(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#areAllMembersExtended(java.util.List)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$1300(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#isExtended()
CALLER: org.glassfish.jersey.server.model.Resource.Data#<init>(java.util.List,java.lang.String,java.util.List,org.glassfish.jersey.server.model.ResourceMethod.Data,java.util.List,java.util.Set,java.util.Set,boolean,org.glassfish.jersey.server.model.Resource.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#<init>(java.util.List,java.lang.String,java.util.List,org.glassfish.jersey.server.model.ResourceMethod.Data,java.util.List,java.util.Set,java.util.Set,boolean)
CALLER: org.glassfish.jersey.server.model.Resource#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#lazy(org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$300(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$400(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$500(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.2#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod#transform(org.glassfish.jersey.server.model.Resource,java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.Resource#immutableCopy(java.util.List)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.ResourceMethod.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource#transform(org.glassfish.jersey.server.model.Resource,java.util.List)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#access$300(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#PROVIDER_CLASS_COULD_NOT_BE_LOADED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_CLASS_COULD_NOT_BE_LOADED(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#access$200(java.lang.ClassLoader,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#getResources(java.lang.ClassLoader,java.lang.String)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#parse(java.lang.String,java.net.URL,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#parseLine(java.lang.String,java.net.URL,java.io.BufferedReader,int,java.util.List,java.util.Set)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableDEPENDENT_CLASS_OF_PROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableDEPENDENT_CLASS_OF_PROVIDER_FORMAT_ERROR(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_COULD_NOT_BE_CREATED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String,java.lang.Throwable)
	CALLEE: org.glassfish.jersey.internal.ServiceConfigurationError#<init>(java.lang.String)
CALLER: jersey.repackaged.com.google.common.collect.TransformedIterator#remove()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#remove()
	CALLEE: jersey.repackaged.com.google.common.collect.UnmodifiableIterator#remove()
	CALLEE: org.glassfish.jersey.server.internal.AbstractResourceFinderAdapter#remove()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MERGE_CONFLICT_LOCATORS(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSINGLETON_INJECTS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteType(java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteParameterizedType(java.lang.reflect.ParameterizedType)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizablePARAMETER_UNRESOLVABLE(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.uri.PathPattern#<clinit>()
	CALLEE: org.glassfish.jersey.uri.PathPattern#<init>()
	CALLEE: org.glassfish.jersey.uri.PathPattern#<init>(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.PathPattern.1#<init>()
CALLER: jersey.repackaged.com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
CALLER: com.zaxxer.hikari.pool.ProxyConnection#markCommitStateDirty()
	CALLEE: com.zaxxer.hikari.util.ClockSource.MillisecondClockSource#currentTime()
	CALLEE: com.zaxxer.hikari.util.ClockSource.NanosecondClockSource#currentTime()
CALLER: static com.zaxxer.hikari.pool.ProxyFactory#getProxyResultSet(com.zaxxer.hikari.pool.ProxyConnection,com.zaxxer.hikari.pool.ProxyStatement,java.sql.ResultSet)
	CALLEE: com.zaxxer.hikari.pool.HikariProxyResultSet#<init>(com.zaxxer.hikari.pool.ProxyConnection,com.zaxxer.hikari.pool.ProxyStatement,java.sql.ResultSet)
CALLER: static org.glassfish.hk2.utilities.reflection.Pretty#type(java.lang.reflect.Type)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: static org.glassfish.hk2.utilities.reflection.Pretty#pType(java.lang.reflect.ParameterizedType)
	CALLEE: static org.glassfish.hk2.utilities.reflection.Pretty#clazz(java.lang.Class)
CALLER: org.glassfish.jersey.model.ContractProvider.Builder.1#transformEntry(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.model.ContractProvider.Builder.1#transformEntry(java.lang.Class,java.lang.Integer)
CALLER: org.eclipse.jetty.server.session.HashedSession#save(java.io.OutputStream)
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getClusterId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getMaxInactiveInterval()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getCreationTime()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getNodeId()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getAccessed()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getRequests()
	CALLEE: org.eclipse.jetty.server.session.MemSession#getAttributes()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.session.MemSession#doGet(java.lang.String)
CALLER: org.glassfish.jersey.server.model.RuntimeResource#<init>(java.util.List,java.util.List,org.glassfish.jersey.server.model.RuntimeResource,java.lang.String)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.Builder#build(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.Resource#getPathPattern()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceLocator()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceMethods()
CALLER: static org.glassfish.jersey.internal.OsgiRegistry#access$200(org.osgi.framework.Bundle,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.OsgiRegistry#loadClass(org.osgi.framework.Bundle,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#EXCEPTION_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableEXCEPTION_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ERROR_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
CALLER: liquibase.util.csv.opencsv.CSVParser#isNextCharacterEscapable(java.lang.String,boolean,int)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isCharacterEscapable(char)
CALLER: liquibase.util.csv.opencsv.CSVParser#isNextCharacterEscapedQuote(java.lang.String,boolean,int)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isCharacterQuoteCharacter(char)
CALLER: liquibase.util.csv.opencsv.CSVParser#isAllWhiteSpace(java.lang.CharSequence)
	CALLEE: static liquibase.util.StringUtils#isWhitespace(java.lang.CharSequence)
CALLER: liquibase.util.csv.opencsv.CSVParser#convertEmptyToNullIfNeeded(java.lang.String,boolean)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#shouldConvertEmptyToNull(boolean)
CALLER: jersey.repackaged.com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: org.eclipse.jetty.io.AbstractEndPoint.1#needsFill()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#needsFill()
CALLER: static org.glassfish.jersey.server.model.Resource#access$1100(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static org.glassfish.jersey.server.model.Resource#builder(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.Resource.Data#<init>(java.util.List,java.lang.String,java.util.List,org.glassfish.jersey.server.model.ResourceMethod.Data,java.util.List,java.util.Set,java.util.Set,boolean)
	CALLEE: org.glassfish.jersey.uri.PathPattern#<init>(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: static org.glassfish.jersey.server.model.Resource#access$000(java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.Resource#access$100(java.util.Set)
CALLER: static org.glassfish.jersey.server.model.ResourceMethod#transform(org.glassfish.jersey.server.model.Resource,java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#transform(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#<init>(org.glassfish.jersey.server.model.Resource)
CALLER: static org.glassfish.jersey.server.model.Resource#immutableCopy(java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#isEmpty()
CALLER: static org.glassfish.jersey.server.model.Resource#transform(org.glassfish.jersey.server.model.Resource,java.util.List)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#transform(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#<init>(org.glassfish.jersey.server.model.Resource)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_NOT_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.jersey.internal.ServiceConfigurationError#<init>(java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizablePROVIDER_CLASS_COULD_NOT_BE_LOADED(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.ServiceFinder#getResources(java.lang.ClassLoader,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#getResources(java.lang.String)
CALLER: static org.glassfish.jersey.internal.ServiceFinder#parseLine(java.lang.String,java.net.URL,java.io.BufferedReader,int,java.util.List,java.util.Set)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ILLEGAL_CONFIG_SYNTAX()
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.net.URL,int,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#ILLEGAL_PROVIDER_CLASS_NAME(java.lang.Object)
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteParameterizedType(java.lang.reflect.ParameterizedType)
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#getActualTypeArguments()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteType(java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.17#getActualTypeArguments()
CALLER: org.glassfish.jersey.uri.PathPattern#<init>()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#<init>()
CALLER: static org.glassfish.jersey.uri.PathPattern.RightHandPath#<clinit>()
	CALLEE: org.glassfish.jersey.uri.PathPattern.RightHandPath#<init>(java.lang.String,int,java.lang.String)
CALLER: org.glassfish.jersey.uri.PathPattern#<init>(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.PathTemplate#<init>(java.lang.String)
	CALLEE: org.glassfish.jersey.uri.PathPattern#<init>(org.glassfish.jersey.uri.PathTemplate,org.glassfish.jersey.uri.PathPattern.RightHandPath)
CALLER: jersey.repackaged.com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Joiner#toString(java.lang.Object)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#<init>(com.zaxxer.hikari.pool.ProxyConnection,com.zaxxer.hikari.pool.ProxyStatement,java.sql.ResultSet)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#<init>(com.zaxxer.hikari.pool.ProxyConnection,com.zaxxer.hikari.pool.ProxyStatement,java.sql.ResultSet)
CALLER: org.glassfish.jersey.model.ContractProvider.Builder.1#transformEntry(java.lang.Class,java.lang.Integer)
	CALLEE: static org.glassfish.jersey.model.ContractProvider.Builder#access$700(org.glassfish.jersey.model.ContractProvider.Builder)
CALLER: org.eclipse.jetty.server.session.MemSession#getAttributes()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
CALLER: org.eclipse.jetty.server.session.AbstractSession#getAttributeNames()
	CALLEE: org.eclipse.jetty.server.session.HashedSession#checkValid()
	CALLEE: org.eclipse.jetty.server.session.MemSession#doGetAttributeNames()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableEXCEPTION_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableERROR_CAUGHT_WHILE_LOADING_SPI_PROVIDERS()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: liquibase.util.csv.opencsv.CSVParser#isCharacterEscapable(char)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isCharacterQuoteCharacter(char)
	CALLEE: liquibase.util.csv.opencsv.CSVParser#isCharacterEscapeCharacter(char)
CALLER: static liquibase.util.StringUtils#isWhitespace(java.lang.CharSequence)
	CALLEE: static liquibase.util.StringUtils#trimToNull(java.lang.String)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#needsFill()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#updateLocalInterests(int,boolean)
CALLER: static org.glassfish.jersey.server.model.Resource#access$000(java.util.List)
	CALLEE: static org.glassfish.jersey.server.model.Resource#immutableCopy(java.util.List)
CALLER: static org.glassfish.jersey.server.model.Resource#access$100(java.util.Set)
	CALLEE: static org.glassfish.jersey.server.model.Resource#immutableCopy(java.util.Set)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ILLEGAL_CONFIG_SYNTAX()
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableILLEGAL_CONFIG_SYNTAX()
CALLER: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.net.URL,int,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.ServiceFinder#fail(java.lang.String,java.lang.String)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#ILLEGAL_PROVIDER_CLASS_NAME(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableILLEGAL_PROVIDER_CLASS_NAME(java.lang.Object)
CALLER: org.glassfish.jersey.uri.PathPattern#<init>(org.glassfish.jersey.uri.PathTemplate,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getPattern()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#getRegex()
	CALLEE: static org.glassfish.jersey.uri.PathPattern#postfixWithCapturingGroup(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getNumberOfRegexGroups()
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#getGroupIndexes()
	CALLEE: static org.glassfish.jersey.uri.PathPattern#addIndexForRightHandPathCapturingGroup(int,int[])
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#<init>(java.lang.String,int[])
CALLER: jersey.repackaged.com.google.common.base.Joiner#toString(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#toString()
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: org.eclipse.jetty.server.Server#toString()
	CALLEE: org.eclipse.jetty.server.handler.ContextHandler#toString()
	CALLEE: org.eclipse.jetty.webapp.WebAppContext#toString()
	CALLEE: org.eclipse.jetty.server.AbstractNetworkConnector#toString()
	CALLEE: org.eclipse.jetty.util.thread.QueuedThreadPool#toString()
	CALLEE: org.eclipse.jetty.util.component.ContainerLifeCycle.Bean#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnectionFactory#toString()
	CALLEE: org.eclipse.jetty.server.handler.HandlerCollection#toString()
	CALLEE: liquibase.changelog.ChangeLogParameters.ChangeLogParameter#toString()
	CALLEE: org.apache.log4j.NameValue#toString()
	CALLEE: org.eclipse.jetty.server.AbstractConnector.Acceptor#toString()
	CALLEE: org.eclipse.jetty.server.HttpConfiguration#toString()
	CALLEE: org.eclipse.jetty.util.MultiException#toString()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#toString()
	CALLEE: liquibase.servicelocator.AssignableToPackageScanFilter#toString()
	CALLEE: org.eclipse.jetty.http.PathMap.MappedEntry#toString()
	CALLEE: org.eclipse.jetty.http.HttpField#toString()
	CALLEE: org.eclipse.jetty.server.session.AbstractSession#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletHolder#toString()
	CALLEE: org.eclipse.jetty.servlet.ServletMapping#toString()
	CALLEE: org.h2.jdbc.JdbcSQLException#toString()
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#toString()
	CALLEE: com.zaxxer.hikari.pool.PoolEntry#toString()
	CALLEE: org.eclipse.jetty.util.FutureCallback#toString()
	CALLEE: liquibase.changelog.filter.ChangeSetFilterResult#toString()
	CALLEE: org.eclipse.jetty.util.ConstantThrowable#toString()
	CALLEE: javax.ws.rs.core.MediaType#toString()
	CALLEE: org.glassfish.jersey.model.internal.RankedProvider#toString()
	CALLEE: org.glassfish.hk2.api.MultiException#toString()
	CALLEE: jersey.repackaged.com.google.common.base.Predicates.AndPredicate#toString()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#toString()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#toString()
	CALLEE: org.glassfish.hk2.utilities.reflection.ParameterizedTypeImpl#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceModelIssue#toString()
	CALLEE: org.glassfish.jersey.server.model.Parameter#toString()
	CALLEE: liquibase.changelog.RanChangeSet#toString()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#toString()
	CALLEE: org.glassfish.jersey.internal.OsgiRegistry.BundleSpiProvidersLoader#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.Invocable#toString()
CALLER: static liquibase.util.csv.opencsv.CSVParser.1#<clinit>()
	CALLEE: static liquibase.util.csv.opencsv.enums.CSVReaderNullFieldIndicator#values()
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#updateLocalInterests(int,boolean)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isInputShutdown()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#isOutputShutdown()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#updateKey(java.lang.Runnable)
CALLER: static org.glassfish.jersey.server.model.Resource#immutableCopy(java.util.Set)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newIdentityHashSet()
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableILLEGAL_CONFIG_SYNTAX()
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableILLEGAL_PROVIDER_CLASS_NAME(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.uri.PathPattern#postfixWithCapturingGroup(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: static org.glassfish.jersey.uri.PathPattern.RightHandPath#access$100(org.glassfish.jersey.uri.PathPattern.RightHandPath)
CALLER: org.glassfish.jersey.uri.PatternWithGroups#<init>(java.lang.String,int[])
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#<init>(java.util.regex.Pattern,int[])
	CALLEE: static org.glassfish.jersey.uri.PatternWithGroups#compile(java.lang.String)
CALLER: org.eclipse.jetty.io.SelectorManager.ManagedSelector#updateKey(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#submit(java.lang.Runnable)
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#wakeup()
	CALLEE: org.eclipse.jetty.io.SelectorManager.ManagedSelector#runChange(java.lang.Runnable)
	CALLEE: static org.eclipse.jetty.io.SelectorManager#access$400()
CALLER: static org.glassfish.jersey.uri.PathPattern.RightHandPath#access$100(org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.PathPattern.RightHandPath#getRegex()
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList.1#transform(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#listIterator(int)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingSequentialList#listIterator(int)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#listIterator(int)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList.1#<init>(jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList,java.util.ListIterator)
CALLER: org.glassfish.jersey.server.model.MethodList.5#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.MethodList.7#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint.1#run()
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#close()
	CALLEE: org.eclipse.jetty.io.ChannelEndPoint#getChannel()
	CALLEE: static org.eclipse.jetty.io.SelectChannelEndPoint#access$000(org.eclipse.jetty.io.SelectChannelEndPoint)
	CALLEE: static org.eclipse.jetty.io.SelectChannelEndPoint#access$100(org.eclipse.jetty.io.SelectChannelEndPoint)
	CALLEE: static org.eclipse.jetty.io.SelectChannelEndPoint#access$200(org.eclipse.jetty.io.SelectChannelEndPoint,int,int)
CALLER: org.glassfish.jersey.server.model.Resource.2#get()
	CALLEE: org.glassfish.jersey.server.model.Resource.2#get()
CALLER: org.eclipse.jetty.server.handler.ContextHandler#shutdown()
	CALLEE: org.eclipse.jetty.util.component.AbstractLifeCycle#isRunning()
	CALLEE: org.eclipse.jetty.util.FutureCallback#<init>(boolean)
CALLER: org.glassfish.jersey.server.model.MethodList#hasNumParams(int)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.2#<init>(org.glassfish.jersey.server.model.MethodList,int)
CALLER: org.glassfish.jersey.server.model.MethodList#isNotPublic()
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.1#<init>(org.glassfish.jersey.server.model.MethodList)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.ClassBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryTypeBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.FactoryInstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder.InstanceBasedBindingBuilder#in(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.binding.AbstractBindingBuilder#in(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.Resource#getPath()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$1000(org.glassfish.jersey.server.model.Resource.Data)
CALLER: liquibase.change.CheckSum#equals(java.lang.Object)
	CALLEE: liquibase.change.CheckSum#toString()
CALLER: org.glassfish.jersey.server.model.Resource.Builder#onBuildChildResource(org.glassfish.jersey.server.model.Resource.Builder,org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Resource#toString()
	CALLEE: org.glassfish.jersey.server.model.Resource.Data#toString()
CALLER: org.glassfish.jersey.server.model.Resource#getHandlerClasses()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$700(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.Resource#getHandlerInstances()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$800(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.Resource#getComponents()
	CALLEE: org.glassfish.jersey.server.model.Resource#getChildResources()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceLocator()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceMethods()
CALLER: org.glassfish.jersey.server.model.Resource#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.Resource#getParent()
	CALLEE: org.glassfish.jersey.server.model.ResourceValidator#visitResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.ResourceValidator#visitChildResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitChildResource(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.model.RuntimeResource#getComponents()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getChildRuntimeResources()
CALLER: org.glassfish.jersey.server.model.RuntimeResource#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitRuntimeResource(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#visitRuntimeResource(org.glassfish.jersey.server.model.RuntimeResource)
CALLER: org.glassfish.jersey.uri.PathPattern.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.uri.PathPattern.1#compare(org.glassfish.jersey.uri.PathPattern,org.glassfish.jersey.uri.PathPattern)
CALLER: org.glassfish.jersey.server.model.Resource#getPathPattern()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$2500(org.glassfish.jersey.server.model.Resource.Data)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#close()
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#next()
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getMetaData()
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getString(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getTimestamp(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getDouble(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getLong(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getInt(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: com.zaxxer.hikari.pool.HikariProxyResultSet#getBoolean(java.lang.String)
	CALLEE: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#isEmpty()
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#isEmpty()
CALLER: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(org.glassfish.jersey.server.model.ResourceMethod.Data)
CALLER: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder#build()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.ResourceMethod.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#isExtended()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#createInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#<init>(java.lang.String,java.util.Collection,java.util.Collection,boolean,boolean,long,java.util.concurrent.TimeUnit,org.glassfish.jersey.server.model.Invocable,java.util.Collection,boolean,org.glassfish.jersey.server.model.ResourceMethod.1)
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder#onBuildMethod(org.glassfish.jersey.server.model.ResourceMethod.Builder,org.glassfish.jersey.server.model.ResourceMethod.Data)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList.1#<init>(jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList,java.util.ListIterator)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedListIterator#<init>(java.util.ListIterator)
CALLER: static org.eclipse.jetty.io.SelectChannelEndPoint#access$200(org.eclipse.jetty.io.SelectChannelEndPoint,int,int)
	CALLEE: org.eclipse.jetty.io.SelectChannelEndPoint#setKeyInterests(int,int)
CALLER: org.glassfish.jersey.server.model.Resource.2#get()
	CALLEE: static org.glassfish.jersey.server.model.Resource.Data#access$900(org.glassfish.jersey.server.model.Resource.Data)
CALLER: org.glassfish.jersey.server.model.ResourceValidator#visitResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.ResourceValidator#checkResource(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.model.ResourceValidator#visitChildResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.ResourceValidator#checkResource(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#visitRuntimeResource(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#checkMethods(org.glassfish.jersey.server.model.RuntimeResource)
CALLER: org.glassfish.jersey.uri.PathPattern.1#compare(org.glassfish.jersey.uri.PathPattern,org.glassfish.jersey.uri.PathPattern)
	CALLEE: static org.glassfish.jersey.uri.PathPattern#access$000(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.uri.UriTemplate.1#compare(java.lang.Object,java.lang.Object)
CALLER: com.zaxxer.hikari.pool.ProxyResultSet#checkException(java.sql.SQLException)
	CALLEE: com.zaxxer.hikari.pool.ProxyConnection#checkException(java.sql.SQLException)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.1#apply(org.glassfish.jersey.server.model.ResourceMethod.Data)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.ResourceMethod.Data)
CALLER: org.glassfish.jersey.server.model.Resource.1#apply(org.glassfish.jersey.server.model.Resource.Data)
	CALLEE: org.glassfish.jersey.server.model.Resource#<init>(org.glassfish.jersey.server.model.Resource,org.glassfish.jersey.server.model.Resource.Data,org.glassfish.jersey.server.model.Resource.1)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder#createInvocable()
	CALLEE: static org.glassfish.jersey.server.model.MethodHandler#create(java.lang.Class,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.MethodHandler#create(java.lang.Object,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.Invocable#create(org.glassfish.jersey.server.model.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method,boolean,java.lang.reflect.Type)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Data#<init>(java.lang.String,java.util.Collection,java.util.Collection,boolean,boolean,long,java.util.concurrent.TimeUnit,org.glassfish.jersey.server.model.Invocable,java.util.Collection,boolean,org.glassfish.jersey.server.model.ResourceMethod.1)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#<init>(java.lang.String,java.util.Collection,java.util.Collection,boolean,boolean,long,java.util.concurrent.TimeUnit,org.glassfish.jersey.server.model.Invocable,java.util.Collection,boolean)
CALLER: org.glassfish.jersey.server.model.Resource.Builder#onBuildMethod(org.glassfish.jersey.server.model.ResourceMethod.Builder,org.glassfish.jersey.server.model.ResourceMethod.Data)
	CALLEE: static org.glassfish.jersey.internal.Errors#processWithException(java.lang.Runnable)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getType()
	CALLEE: org.glassfish.jersey.server.model.Resource.Builder.3#<init>(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandler()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getHandlerInstance()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#getHandlerInstance()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#isClassBased()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#isClassBased()
CALLER: org.eclipse.jetty.io.SelectChannelEndPoint#setKeyInterests(int,int)
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.eclipse.jetty.util.log.StdErrLog#isDebugEnabled()
CALLER: org.glassfish.jersey.server.model.ResourceValidator#checkResource(org.glassfish.jersey.server.model.Resource)
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.Resource#getPath()
	CALLEE: org.glassfish.jersey.server.model.Resource#getChildResources()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceLocator()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceMethods()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONTAINS_RES_METHODS_AND_LOCATOR(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_EMPTY(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#checkMethods(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getFullPathRegex()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_SRLS_PATH_PATTERN(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#sameHttpMethod(org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#checkIntersectingMediaTypes(org.glassfish.jersey.server.model.RuntimeResource,java.lang.String,org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getHttpMethod()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResourceMethods()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResourceLocators()
CALLER: org.glassfish.jersey.uri.UriTemplate.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.uri.UriTemplate.1#compare(org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
CALLER: static org.glassfish.jersey.server.model.MethodHandler#create(java.lang.Class,boolean,java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#<init>(java.lang.Class,boolean,java.util.Collection)
CALLER: static org.glassfish.jersey.server.model.MethodHandler#create(java.lang.Object,java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#<init>(java.lang.Object,java.util.Collection)
CALLER: static org.glassfish.jersey.server.model.Invocable#create(org.glassfish.jersey.server.model.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method,boolean,java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.server.model.Invocable#<init>(org.glassfish.jersey.server.model.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method,boolean,java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.server.model.Invocable#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.Invocable#initApplyMethod()
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Data#<init>(java.lang.String,java.util.Collection,java.util.Collection,boolean,boolean,long,java.util.concurrent.TimeUnit,org.glassfish.jersey.server.model.Invocable,java.util.Collection,boolean)
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#newArrayList(java.lang.Iterable)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#access$200(java.lang.String)
CALLER: static org.glassfish.jersey.server.model.Resource.3#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#values()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_CONTAINS_RES_METHODS_AND_LOCATOR(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONTAINS_RES_METHODS_AND_LOCATOR(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_EMPTY(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_EMPTY(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResource#getFullPathRegex()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getRegex()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_SRLS_PATH_PATTERN(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_SRLS_PATH_PATTERN(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#sameHttpMethod(org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getHttpMethod()
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#checkIntersectingMediaTypes(org.glassfish.jersey.server.model.RuntimeResource,java.lang.String,org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getRegex()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#getEffectiveInputTypes(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#getEffectiveOutputTypes(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.message.internal.MediaTypes#intersect(java.util.List,java.util.List)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_FATAL_RMS(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_RMS_IN(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.internal.Errors#hint(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_RMS_OUT(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getProducedTypes()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getConsumedTypes()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: org.glassfish.jersey.server.model.Invocable#requiresEntity()
CALLER: org.glassfish.jersey.uri.UriTemplate.1#compare(org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.uri.PatternWithGroups#getRegex()
	CALLEE: static org.glassfish.jersey.uri.UriTemplate#access$000(org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getNumberOfExplicitRegexes()
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getNumberOfTemplateVariables()
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getNumberOfExplicitCharacters()
CALLER: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#<init>(java.lang.Class,boolean,java.util.Collection)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,java.lang.reflect.Constructor,boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler#<init>(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.HandlerConstructor#<init>(java.lang.reflect.Constructor,java.util.List)
CALLER: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#<init>(java.lang.Object,java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler#<init>(java.util.Collection)
CALLER: org.glassfish.jersey.server.model.Invocable#<init>(org.glassfish.jersey.server.model.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method,boolean,java.lang.reflect.Type)
	CALLEE: javax.ws.rs.core.GenericType#getType()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#resolveGenericType(java.lang.Class,java.lang.Class,java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#rawClass()
	CALLEE: org.glassfish.jersey.internal.util.collection.ClassTypePair#type()
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#findOverridingMethodOnClass(java.lang.Class,java.lang.reflect.Method)
	CALLEE: javax.ws.rs.core.GenericType#<init>(java.lang.reflect.Type)
	CALLEE: javax.ws.rs.core.GenericType#getRawType()
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,java.lang.reflect.Method,boolean)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#getHandlerClass()
CALLER: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#access$200(java.lang.String)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#classify(java.lang.String)
CALLER: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<clinit>()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.1#<init>(java.lang.String,int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.2#<init>(java.lang.String,int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.3#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_CONTAINS_RES_METHODS_AND_LOCATOR(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_EMPTY(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_SRLS_PATH_PATTERN(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#getEffectiveInputTypes(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getType()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getRawType()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getConsumedTypes()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getDeclaredAnnotations()
CALLER: org.glassfish.jersey.server.model.RuntimeResourceModelValidator#getEffectiveOutputTypes(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getProducedTypes()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getRawResponseType()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getResponseType()
CALLER: static org.glassfish.jersey.message.internal.MediaTypes#intersect(java.util.List,java.util.List)
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: static org.glassfish.jersey.message.internal.MediaTypes#typeEqual(javax.ws.rs.core.MediaType,javax.ws.rs.core.MediaType)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_FATAL_RMS(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_FATAL_RMS(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_RMS_IN(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_RMS_IN(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.Errors#hint(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.Errors#getInstance()
	CALLEE: org.glassfish.jersey.internal.Errors.ErrorMessage#<init>(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity,org.glassfish.jersey.internal.Errors.1)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_RMS_OUT(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_RMS_OUT(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#findOverridingMethodOnClass(java.lang.Class,java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#_getMethods(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#compareParameterTypes(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#OVERRIDING_METHOD_CANNOT_BE_FOUND(java.lang.Object,java.lang.Object)
CALLER: javax.ws.rs.core.GenericType#<init>(java.lang.reflect.Type)
	CALLEE: static javax.ws.rs.core.GenericType#getClass(java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,java.lang.reflect.Method,boolean)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#<init>(java.lang.reflect.Method)
	CALLEE: static org.glassfish.jersey.server.model.Parameter#create(java.lang.Class,java.lang.Class,boolean,java.lang.Class[],java.lang.reflect.Type[],java.lang.annotation.Annotation[][])
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getParameterTypes()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getGenericParameterTypes()
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getParameterAnnotations()
CALLER: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.1#<init>(java.lang.String,int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<init>(java.lang.String,int,org.glassfish.jersey.server.model.ResourceMethod.1)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.2#<init>(java.lang.String,int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<init>(java.lang.String,int,org.glassfish.jersey.server.model.ResourceMethod.1)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType.3#<init>(java.lang.String,int)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<init>(java.lang.String,int,org.glassfish.jersey.server.model.ResourceMethod.1)
CALLER: static org.glassfish.jersey.message.internal.MediaTypes#typeEqual(javax.ws.rs.core.MediaType,javax.ws.rs.core.MediaType)
	CALLEE: javax.ws.rs.core.MediaType#getType()
	CALLEE: javax.ws.rs.core.MediaType#getSubtype()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_FATAL_RMS(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_RMS_IN(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_RMS_OUT(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#_getMethods(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#getMethodsPA(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#compareParameterTypes(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#compareParameterTypes(java.lang.reflect.Type,java.lang.reflect.Type)
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#OVERRIDING_METHOD_CANNOT_BE_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.internal.LocalizationMessages#localizableOVERRIDING_METHOD_CANNOT_BE_FOUND(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.AnnotatedMethod#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<init>(java.lang.String,int,org.glassfish.jersey.server.model.ResourceMethod.1)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#<init>(java.lang.String,int)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#getMethodsPA(java.lang.Class)
	CALLEE: org.glassfish.jersey.internal.util.ReflectionHelper.19#<init>(java.lang.Class)
CALLER: static org.glassfish.jersey.internal.util.ReflectionHelper#compareParameterTypes(java.lang.reflect.Type,java.lang.reflect.Type)
	CALLEE: static org.glassfish.jersey.internal.util.ReflectionHelper#checkTypeBounds(java.lang.Class,java.lang.reflect.Type[])
CALLER: static org.glassfish.jersey.internal.LocalizationMessages#localizableOVERRIDING_METHOD_CANNOT_BE_FOUND(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.MethodList.2#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getParameterTypes()
CALLER: org.glassfish.jersey.server.model.MethodList.1#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
CALLER: org.glassfish.jersey.server.model.Resource.Builder.3#run()
	CALLEE: static org.glassfish.jersey.internal.Errors#error(java.lang.Object,java.lang.String,org.glassfish.jersey.Severity)
	CALLEE: static org.glassfish.jersey.server.model.Resource.Builder#access$600(org.glassfish.jersey.server.model.Resource.Builder)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_SRLS(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.HandlerConstructor#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitResourceHandlerConstructor(org.glassfish.jersey.server.model.HandlerConstructor)
	CALLEE: org.glassfish.jersey.server.model.InvocableValidator#visitResourceHandlerConstructor(org.glassfish.jersey.server.model.HandlerConstructor)
CALLER: org.glassfish.jersey.server.model.AnnotatedMethod#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.glassfish.jersey.server.model.MethodList#hasReturnType(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.3#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.Class)
CALLER: org.glassfish.jersey.server.model.AnnotatedMethod#getMetaMethodAnnotations(java.lang.Class)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#buildProvideMethod()
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.BuiltActiveDescriptor#<init>(java.lang.Class,java.util.Set,java.lang.annotation.Annotation,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,org.glassfish.hk2.api.HK2Loader,org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.1)
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#has(java.lang.String,java.lang.String)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#has(java.lang.String,java.util.List)
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#qualifiedBy(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.hk2.utilities.NamedImpl#value()
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl#build()
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.BuiltActiveDescriptor#<init>(java.lang.Class,java.util.Set,java.lang.annotation.Annotation,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,org.glassfish.hk2.api.HK2Loader,org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.1)
CALLER: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList.1#transform(java.lang.Object)
	CALLEE: org.glassfish.jersey.model.internal.CommonConfig.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.ProviderToService#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.internal.ModelErrors.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.ApplicationHandler.WorkersToStringTransform#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.inject.Providers.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Resource.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethod#toString()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#toString()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getComponents()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getInvocable()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitResourceMethod(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#visitResourceMethod(org.glassfish.jersey.server.model.ResourceMethod)
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getHttpMethod()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getHttpMethod()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getInvocable()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getProducedTypes()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getProducedTypes()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getConsumedTypes()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getConsumedTypes()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_SRLS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_SRLS(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.InvocableValidator#visitResourceHandlerConstructor(org.glassfish.jersey.server.model.HandlerConstructor)
	CALLEE: static org.glassfish.jersey.server.model.InvocableValidator#isSingleton(java.lang.Class)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#validateParameter(org.glassfish.jersey.server.model.Parameter,java.lang.Object,java.lang.String,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.model.HandlerConstructor#getConstructor()
	CALLEE: org.glassfish.jersey.server.model.HandlerConstructor#getParameters()
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.BuiltActiveDescriptor#<init>(java.lang.Class,java.util.Set,java.lang.annotation.Annotation,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,org.glassfish.hk2.api.HK2Loader,org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.1)
	CALLEE: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.BuiltActiveDescriptor#<init>(java.lang.Class,java.util.Set,java.lang.annotation.Annotation,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,org.glassfish.hk2.api.HK2Loader)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#visitResourceMethod(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getType()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#visitJaxrsResourceMethod(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#visitSubResourceLocator(org.glassfish.jersey.server.model.ResourceMethod)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_SRLS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.hk2.internal.ActiveDescriptorBuilderImpl.BuiltActiveDescriptor#<init>(java.lang.Class,java.util.Set,java.lang.annotation.Annotation,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map,org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#<init>(java.util.Set,java.lang.Class,java.lang.String,java.util.Set,org.glassfish.hk2.api.DescriptorType,org.glassfish.hk2.api.DescriptorVisibility,int,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.util.Map)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setLoader(org.glassfish.hk2.api.HK2Loader)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setReified(boolean)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setScopeAsAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setImplementation(java.lang.String)
CALLER: static org.glassfish.jersey.server.model.ResourceMethodValidator.2#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#values()
CALLER: org.glassfish.jersey.server.model.ResourceMethod#getType()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#getType()
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#visitJaxrsResourceMethod(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#checkMethod(org.glassfish.jersey.server.model.ResourceMethod)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#visitSubResourceLocator(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#checkParameters(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#checkValueProviders(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.Invocable#getRawResponseType()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_RETURNS_VOID(java.lang.Object)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setScopeAsAnnotation(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setScopeAnnotation(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#checkMethod(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#isConcreteType(java.lang.reflect.Type)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandler()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getResponseType()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#TYPE_OF_METHOD_NOT_RESOLVABLE_TO_CONCRETE_TYPE(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_EMPTY_PATH_ANNOTATION(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Parameter#isAnnotationPresent(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.Errors#hint(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getHttpMethod()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#checkParameters(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethodValidator#checkValueProviders(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#isSuspendDeclared()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_RETURNS_VOID(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Invocable#requiresEntity()
	CALLEE: org.glassfish.jersey.server.model.Invocable#isInflector()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_CONSUMES_ENTITY(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_CONSUMES_FORM_PARAM(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#MULTIPLE_HTTP_METHOD_DESIGNATORS(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#checkParameters(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethodValidator#validateParameter(org.glassfish.jersey.server.model.Parameter,java.lang.Object,java.lang.String,java.lang.String,boolean)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getAnnotations()
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getType()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_HAS_ENTITY_PARAM(java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_NON_ANNOTATED_PARAMETER(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethodValidator#checkValueProviders(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandlingMethod()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getValueProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_PARAMETER_MISSING_VALUE_PROVIDER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_RETURNS_VOID(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_RETURNS_VOID(java.lang.Object)
CALLER: org.glassfish.hk2.utilities.AbstractActiveDescriptor#setScopeAnnotation(java.lang.Class)
	CALLEE: org.glassfish.hk2.utilities.DescriptorImpl#setScope(java.lang.String)
CALLER: org.glassfish.jersey.server.model.ResourceMethod#isSuspendDeclared()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Data#isSuspended()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_RETURNS_VOID(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_RETURNS_VOID(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Invocable#requiresEntity()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_CONSUMES_ENTITY(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_CONSUMES_ENTITY(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#GET_CONSUMES_FORM_PARAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_CONSUMES_FORM_PARAM(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#MULTIPLE_HTTP_METHOD_DESIGNATORS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMULTIPLE_HTTP_METHOD_DESIGNATORS(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#TYPE_OF_METHOD_NOT_RESOLVABLE_TO_CONCRETE_TYPE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableTYPE_OF_METHOD_NOT_RESOLVABLE_TO_CONCRETE_TYPE(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#METHOD_EMPTY_PATH_ANNOTATION(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_EMPTY_PATH_ANNOTATION(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_HAS_ENTITY_PARAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_HAS_ENTITY_PARAM(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#AMBIGUOUS_NON_ANNOTATED_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_NON_ANNOTATED_PARAMETER(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Invocable#getValueProviders(org.glassfish.hk2.api.ServiceLocator)
	CALLEE: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#createValueProviders(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.model.Parameterized)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#ERROR_PARAMETER_MISSING_VALUE_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_PARAMETER_MISSING_VALUE_PROVIDER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_RETURNS_VOID(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_RETURNS_VOID(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_CONSUMES_ENTITY(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableGET_CONSUMES_FORM_PARAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMULTIPLE_HTTP_METHOD_DESIGNATORS(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableTYPE_OF_METHOD_NOT_RESOLVABLE_TO_CONCRETE_TYPE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableMETHOD_EMPTY_PATH_ANNOTATION(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_HAS_ENTITY_PARAM(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableAMBIGUOUS_NON_ANNOTATED_PARAMETER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#createValueProviders(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.model.Parameterized)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getProviders(org.glassfish.hk2.api.ServiceLocator,java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
	CALLEE: org.glassfish.jersey.server.spi.internal.ParameterValueHelper.1#<init>()
	CALLEE: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#getValueFactory(java.util.Collection,org.glassfish.jersey.server.model.Parameter)
	CALLEE: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#wrapParamFactory(org.glassfish.hk2.api.Factory,org.glassfish.jersey.server.model.Parameter.Source)
	CALLEE: org.glassfish.jersey.server.model.Parameter#isQualified()
	CALLEE: static org.glassfish.jersey.server.model.Parameter#overrideSource(org.glassfish.jersey.server.model.Parameter,org.glassfish.jersey.server.model.Parameter.Source)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableERROR_PARAMETER_MISSING_VALUE_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#wrapParamFactory(org.glassfish.hk2.api.Factory,org.glassfish.jersey.server.model.Parameter.Source)
	CALLEE: org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource#<init>(org.glassfish.hk2.api.Factory,org.glassfish.jersey.server.model.Parameter.Source)
CALLER: org.glassfish.jersey.server.model.Parameter#isQualified()
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getAnnotations()
CALLER: static org.glassfish.jersey.server.model.Parameter#overrideSource(org.glassfish.jersey.server.model.Parameter,org.glassfish.jersey.server.model.Parameter.Source)
	CALLEE: org.glassfish.jersey.server.model.Parameter#<init>(java.lang.annotation.Annotation[],java.lang.annotation.Annotation,org.glassfish.jersey.server.model.Parameter.Source,java.lang.String,java.lang.Class,java.lang.reflect.Type,boolean,java.lang.String)
CALLER: org.glassfish.jersey.server.model.MethodList.3#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
CALLER: org.glassfish.jersey.server.spi.internal.ParameterValueHelper.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.spi.internal.ParameterValueHelper.1#compare(org.glassfish.jersey.server.spi.internal.ValueFactoryProvider,org.glassfish.jersey.server.spi.internal.ValueFactoryProvider)
CALLER: org.glassfish.jersey.message.internal.AcceptableMediaType#equals(java.lang.Object)
	CALLEE: javax.ws.rs.core.MediaType#equals(java.lang.Object)
CALLER: org.glassfish.jersey.message.internal.QualitySourceMediaType#equals(java.lang.Object)
	CALLEE: javax.ws.rs.core.MediaType#equals(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.util.Collection)
	CALLEE: jersey.repackaged.com.google.common.collect.Collections2.TransformedCollection#iterator()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#next()
	CALLEE: jersey.repackaged.com.google.common.collect.TransformedIterator#hasNext()
CALLER: org.glassfish.jersey.server.model.MethodList#nameStartsWith(java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.MethodList#filter(org.glassfish.jersey.server.model.MethodList.Filter)
	CALLEE: org.glassfish.jersey.server.model.MethodList.4#<init>(org.glassfish.jersey.server.model.MethodList,java.lang.String)
CALLER: org.glassfish.jersey.server.model.Invocable#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitInvocable(org.glassfish.jersey.server.model.Invocable)
	CALLEE: org.glassfish.jersey.server.model.InvocableValidator#visitInvocable(org.glassfish.jersey.server.model.Invocable)
CALLER: org.glassfish.jersey.server.model.Parameter#isAnnotationPresent(java.lang.Class)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getAnnotation(java.lang.Class)
CALLER: org.glassfish.jersey.server.model.InvocableValidator#visitInvocable(org.glassfish.jersey.server.model.Invocable)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#getProviderContracts(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.Errors#warning(java.lang.Object,java.lang.String)
	CALLEE: static org.glassfish.jersey.internal.inject.Providers#isProvider(java.lang.Class)
	CALLEE: static org.glassfish.jersey.internal.Errors#fatal(java.lang.Object,java.lang.String)
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.ClassBasedMethodHandler#getHandlerClass()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandler()
	CALLEE: org.glassfish.jersey.server.model.MethodHandler.InstanceBasedMethodHandler#getHandlerClass()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_IMPLEMENTS_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MULTIPLE_SCOPE_ANNOTATIONS(java.lang.Object)
CALLER: org.glassfish.jersey.server.model.Parameter#getAnnotation(java.lang.Class)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_IMPLEMENTS_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_IMPLEMENTS_PROVIDER(java.lang.Object,java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#RESOURCE_MULTIPLE_SCOPE_ANNOTATIONS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MULTIPLE_SCOPE_ANNOTATIONS(java.lang.Object)
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_IMPLEMENTS_PROVIDER(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableRESOURCE_MULTIPLE_SCOPE_ANNOTATIONS(java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.server.model.MethodList.4#keep(org.glassfish.jersey.server.model.AnnotatedMethod)
	CALLEE: org.glassfish.jersey.server.model.AnnotatedMethod#getMethod()
CALLER: org.glassfish.jersey.server.model.MethodHandler#accept(org.glassfish.jersey.server.model.ResourceModelVisitor)
	CALLEE: org.glassfish.jersey.server.model.AbstractResourceModelVisitor#visitMethodHandler(org.glassfish.jersey.server.model.MethodHandler)
CALLER: org.glassfish.jersey.server.internal.routing.Routing.Builder#buildStage()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#<init>(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.internal.JerseyResourceContext,javax.ws.rs.core.Configuration,org.glassfish.jersey.message.MessageBodyWorkers,org.glassfish.jersey.server.internal.ProcessingProviders,org.glassfish.jersey.server.model.ResourceMethodInvoker.Builder)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#buildModel(org.glassfish.jersey.server.model.RuntimeResourceModel,boolean)
	CALLEE: org.glassfish.jersey.server.internal.routing.RoutingStage#<init>(org.glassfish.jersey.server.internal.routing.Router)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.lang.annotation.Annotation[])
	CALLEE: static jersey.repackaged.com.google.common.collect.Collections2#transform(java.util.Collection,jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder#nameBindings(java.util.Collection)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#<init>(org.glassfish.jersey.server.model.ResourceMethod.Builder)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#<init>(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.internal.JerseyResourceContext,javax.ws.rs.core.Configuration,org.glassfish.jersey.message.MessageBodyWorkers,org.glassfish.jersey.server.internal.ProcessingProviders,org.glassfish.jersey.server.model.ResourceMethodInvoker.Builder)
	CALLEE: static org.glassfish.jersey.internal.util.collection.Values#lazy(org.glassfish.jersey.internal.util.collection.Value)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.1#<init>(org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder,org.glassfish.hk2.api.ServiceLocator,javax.ws.rs.core.Configuration,org.glassfish.jersey.server.internal.JerseyResourceContext)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#buildModel(org.glassfish.jersey.server.model.RuntimeResourceModel,boolean)
	CALLEE: org.glassfish.jersey.server.model.Resource#getPathPattern()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createRootRouter(org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder,boolean)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#to(org.glassfish.jersey.server.internal.routing.Router)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#build()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResourceModel#getRuntimeResources()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getPathPattern()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getChildRuntimeResources()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResourceMethods()
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedUriRouter#<init>()
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedRuntimeResourceRouter#<init>(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createResourceMethodRouters(org.glassfish.jersey.server.model.RuntimeResource,boolean)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#<init>(org.glassfish.jersey.message.MessageBodyWorkers,java.util.List)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#startNextRoute(org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder,org.glassfish.jersey.uri.PathPattern)
	CALLEE: static org.glassfish.jersey.uri.PathPattern#asClosed(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResourceLocator()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouterForChildLocator(boolean,org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedMethodRouter#<init>(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createMethodRouter(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getLocatorResource(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.uri.PathPattern#getTemplate()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouter(boolean,org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
CALLER: org.glassfish.jersey.server.internal.routing.RoutingStage#<init>(org.glassfish.jersey.server.internal.routing.Router)
	CALLEE: org.glassfish.jersey.process.internal.AbstractChainableStage#<init>()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createResourceMethodRouters(org.glassfish.jersey.server.model.RuntimeResource,boolean)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#get(int)
	CALLEE: org.glassfish.jersey.server.model.Resource#getPathPattern()
	CALLEE: org.glassfish.jersey.uri.PathPattern#getTemplate()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceMethods()
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedMethodRouter#<init>(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createMethodRouter(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouter(boolean,org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResources()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getParent()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getParentResources()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodRouting#<init>(org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.internal.routing.Router[])
CALLER: static org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#<clinit>()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#<init>()
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#<init>(org.glassfish.jersey.message.MessageBodyWorkers,java.util.List)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getHttpMethod()
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#addAllConsumesProducesCombinations(java.util.List,org.glassfish.jersey.server.internal.routing.MethodRouting)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#createHeadEnrichedRouter()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#createInternalRouter()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#startNextRoute(org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder,org.glassfish.jersey.uri.PathPattern)
	CALLEE: static org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#newRoute(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#route(org.glassfish.jersey.uri.PathPattern)
CALLER: static org.glassfish.jersey.uri.PathPattern#asClosed(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.uri.PathPattern#<init>(java.lang.String,org.glassfish.jersey.uri.PathPattern.RightHandPath)
	CALLEE: org.glassfish.jersey.uri.PathPattern#getTemplate()
	CALLEE: org.glassfish.jersey.uri.UriTemplate#getTemplate()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouterForChildLocator(boolean,org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: jersey.repackaged.com.google.common.collect.Lists.TransformingRandomAccessList#get(int)
	CALLEE: org.glassfish.jersey.server.model.Resource#getPathPattern()
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceLocator()
	CALLEE: org.glassfish.jersey.uri.PathPattern#getTemplate()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouter(boolean,org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResources()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getParentResources()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createMethodRouter(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.LazyValueImpl#get()
	CALLEE: org.glassfish.jersey.internal.util.collection.Values.1#get()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getHandler()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getType()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createInflector(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: static org.glassfish.jersey.server.internal.routing.Routers#endpoint(org.glassfish.jersey.server.internal.process.Endpoint)
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMethodHandlerRouter#<init>(org.glassfish.jersey.server.model.MethodHandler,org.glassfish.jersey.server.internal.routing.Router)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder#getRouter(org.glassfish.jersey.server.model.ResourceMethod)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getLocatorResource(org.glassfish.jersey.server.model.RuntimeResource)
	CALLEE: org.glassfish.jersey.server.model.Resource#getResourceLocator()
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource#getResources()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#getTemplateRouter(boolean,org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.uri.PathPattern#getTemplate()
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedTemplateRouter#<init>(org.glassfish.jersey.uri.UriTemplate,org.glassfish.jersey.uri.UriTemplate)
	CALLEE: org.glassfish.jersey.server.internal.routing.PushMatchedTemplateRouter#<init>(org.glassfish.jersey.uri.UriTemplate)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder#createRootRouter(org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder,boolean)
	CALLEE: static org.glassfish.jersey.server.internal.routing.Routers#noop()
	CALLEE: org.glassfish.jersey.server.internal.routing.MatchResultInitializerRouter#<init>(org.glassfish.jersey.server.internal.routing.Router)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#build()
CALLER: org.glassfish.jersey.server.model.RuntimeResource#getParentResources()
	CALLEE: static jersey.repackaged.com.google.common.collect.Lists#transform(java.util.List,jersey.repackaged.com.google.common.base.Function)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#<init>(org.glassfish.jersey.server.model.RuntimeResource)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#addAllConsumesProducesCombinations(java.util.List,org.glassfish.jersey.server.internal.routing.MethodRouting)
	CALLEE: static jersey.repackaged.com.google.common.collect.Sets#newHashSet()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getProducedTypes()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getConsumedTypes()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#fillMediaTypes(java.util.Set,org.glassfish.jersey.server.model.ResourceMethod,java.util.List,boolean)
	CALLEE: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#<init>(javax.ws.rs.core.MediaType,boolean)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#<init>(org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.MethodRouting,org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#createHeadEnrichedRouter()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.4#<init>(org.glassfish.jersey.server.internal.routing.MethodSelectingRouter)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#createInternalRouter()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.2#<init>(org.glassfish.jersey.server.internal.routing.MethodSelectingRouter)
CALLER: static org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#newRoute(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#<init>()
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#startNewRoute(org.glassfish.jersey.uri.PathPattern)
CALLER: static org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.2#<clinit>()
	CALLEE: static org.glassfish.jersey.server.model.ResourceMethod.JaxrsType#values()
CALLER: static org.glassfish.jersey.server.internal.routing.Routers#endpoint(org.glassfish.jersey.server.internal.process.Endpoint)
	CALLEE: org.glassfish.jersey.server.internal.routing.Routers.EndpointRouter#<init>(org.glassfish.jersey.server.internal.process.Endpoint)
CALLER: static org.glassfish.jersey.server.internal.routing.Routers#<clinit>()
	CALLEE: org.glassfish.jersey.server.internal.routing.Routers.1#<init>()
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#fillMediaTypes(java.util.Set,org.glassfish.jersey.server.model.ResourceMethod,java.util.List,boolean)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getRawResponseType()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#fillInputTypesFromWorkers(java.util.Set,org.glassfish.jersey.server.model.Invocable)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#fillOutputTypesFromWorkers(java.util.Set,java.lang.Class)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#<init>(org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.MethodRouting,org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#<init>(org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType,org.glassfish.jersey.server.internal.routing.MethodRouting)
CALLER: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#startNewRoute(org.glassfish.jersey.uri.PathPattern)
	CALLEE: static org.glassfish.jersey.server.internal.routing.Route#of(org.glassfish.jersey.uri.PathPattern,java.util.List)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter#fillInputTypesFromWorkers(java.util.Set,org.glassfish.jersey.server.model.Invocable)
	CALLEE: org.glassfish.jersey.server.model.Parameter#getSource()
	CALLEE: org.glassfish.jersey.server.model.Parameter#getRawType()
	CALLEE: org.glassfish.jersey.server.model.Invocable#getParameters()
CALLER: static org.glassfish.jersey.server.internal.routing.Route#of(org.glassfish.jersey.uri.PathPattern,java.util.List)
	CALLEE: org.glassfish.jersey.server.internal.routing.Route#<init>(org.glassfish.jersey.uri.PathPattern,java.util.List)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.1#get()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.1#get()
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#compare(org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor,org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.annotation.Annotation)
CALLER: org.glassfish.jersey.server.model.RuntimeResource.2#apply(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.model.RuntimeResource.2#apply(org.glassfish.jersey.server.model.Resource)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#equals(java.lang.Object)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#hashCode()
	CALLEE: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#hashCode()
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor#toString()
	CALLEE: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#getMediaType()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder.1#get()
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder#<init>(org.glassfish.hk2.api.ServiceLocator,javax.ws.rs.core.Configuration,org.glassfish.jersey.server.internal.JerseyResourceContext,org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#compare(org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor,org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.ConsumesProducesAcceptor)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getProducedTypes()
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getConsumedTypes()
	CALLEE: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#getMediaType()
	CALLEE: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#compare(java.util.List,java.util.List)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.1#compare(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.model.ResourceMethod.Builder.1#apply(java.lang.annotation.Annotation)
	CALLEE: org.glassfish.hk2.api.AnnotationLiteral#annotationType()
CALLER: org.glassfish.jersey.server.model.RuntimeResource.2#apply(org.glassfish.jersey.server.model.Resource)
	CALLEE: org.glassfish.jersey.server.model.Resource#getParent()
CALLER: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#equals(java.lang.Object)
	CALLEE: javax.ws.rs.core.MediaType#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.AcceptableMediaType#equals(java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#equals(java.lang.Object)
CALLER: org.glassfish.jersey.server.internal.routing.CombinedMediaType.EffectiveMediaType#hashCode()
	CALLEE: javax.ws.rs.core.MediaType#hashCode()
	CALLEE: org.glassfish.jersey.message.internal.AcceptableMediaType#hashCode()
	CALLEE: org.glassfish.jersey.message.internal.QualitySourceMediaType#hashCode()
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder#<init>(org.glassfish.hk2.api.ServiceLocator,javax.ws.rs.core.Configuration,org.glassfish.jersey.server.internal.JerseyResourceContext,org.glassfish.jersey.server.internal.routing.RuntimeModelBuilder)
	CALLEE: org.glassfish.jersey.server.ResourceConfig#getProperties()
	CALLEE: static org.glassfish.jersey.server.ServerProperties#getValue(java.util.Map,java.lang.String,java.lang.Object,java.lang.Class)
	CALLEE: static jersey.repackaged.com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_CACHE_INVALID_SIZE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder.1#<init>(org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#build(jersey.repackaged.com.google.common.cache.CacheLoader)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#expireAfterAccess(long,java.util.concurrent.TimeUnit)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#maximumSize(long)
CALLER: org.glassfish.jersey.server.internal.routing.MethodSelectingRouter.1#compare(java.util.List,java.util.List)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.2#compare(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.message.internal.MediaTypes.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.1#compare(javax.ws.rs.core.MediaType,javax.ws.rs.core.MediaType)
CALLER: static jersey.repackaged.com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#<init>()
CALLER: static jersey.repackaged.com.google.common.cache.CacheBuilder#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder.1#<init>()
	CALLEE: static jersey.repackaged.com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder.2#<init>()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder.3#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#SUBRES_LOC_CACHE_INVALID_SIZE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.Localizer#localize(org.glassfish.jersey.internal.l10n.Localizable)
	CALLEE: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_CACHE_INVALID_SIZE(java.lang.Object,java.lang.Object)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder.1#<init>(org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheLoader#<init>()
CALLER: org.glassfish.jersey.message.internal.MediaTypes.2#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.2#compare(java.util.List,java.util.List)
CALLER: org.glassfish.jersey.message.internal.MediaTypes.1#compare(javax.ws.rs.core.MediaType,javax.ws.rs.core.MediaType)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.1#rank(javax.ws.rs.core.MediaType)
CALLER: static jersey.repackaged.com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.base.Suppliers.SupplierOfInstance#<init>(java.lang.Object)
CALLER: jersey.repackaged.com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkArgument(boolean)
CALLER: static jersey.repackaged.com.google.common.base.Ticker#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.base.Ticker.1#<init>()
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder.3#<init>()
	CALLEE: jersey.repackaged.com.google.common.base.Ticker#<init>()
CALLER: static org.glassfish.jersey.server.internal.LocalizationMessages#localizableSUBRES_LOC_CACHE_INVALID_SIZE(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.internal.l10n.LocalizableMessageFactory#getMessage(java.lang.String,java.lang.Object[])
CALLER: org.glassfish.jersey.message.internal.MediaTypes.2#compare(java.util.List,java.util.List)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: org.glassfish.jersey.message.internal.MediaTypes.2#getLeastSpecific(java.util.List)
CALLER: org.glassfish.jersey.message.internal.MediaTypes.1#rank(javax.ws.rs.core.MediaType)
	CALLEE: javax.ws.rs.core.MediaType#isWildcardSubtype()
	CALLEE: javax.ws.rs.core.MediaType#isWildcardType()
CALLER: jersey.repackaged.com.google.common.base.Ticker.1#<init>()
	CALLEE: jersey.repackaged.com.google.common.base.Ticker#<init>()
CALLER: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#route(org.glassfish.jersey.uri.PathPattern)
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#startNewRoute(org.glassfish.jersey.uri.PathPattern)
CALLER: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#build()
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouterBuilder#acceptedRoutes()
	CALLEE: org.glassfish.jersey.server.internal.routing.PathMatchingRouter#<init>(java.util.List)
CALLER: org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder#getRouter(org.glassfish.jersey.server.model.ResourceMethod)
	CALLEE: org.glassfish.jersey.server.internal.routing.SubResourceLocatorRouter#<init>(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.internal.JerseyResourceContext,org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#build(jersey.repackaged.com.google.common.cache.CacheLoader)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.LocalLoadingCache#<init>(jersey.repackaged.com.google.common.cache.CacheBuilder,jersey.repackaged.com.google.common.cache.CacheLoader)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#expireAfterAccess(long,java.util.concurrent.TimeUnit)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#maximumSize(long)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: javax.ws.rs.core.MediaType#isWildcardSubtype()
	CALLEE: javax.ws.rs.core.MediaType#getSubtype()
CALLER: javax.ws.rs.core.MediaType#isWildcardType()
	CALLEE: javax.ws.rs.core.MediaType#getType()
CALLER: org.glassfish.jersey.server.internal.routing.SubResourceLocatorRouter#<init>(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.model.ResourceMethod,org.glassfish.jersey.server.internal.JerseyResourceContext,org.glassfish.jersey.server.internal.routing.RuntimeLocatorModelBuilder)
	CALLEE: org.glassfish.jersey.server.model.ResourceMethod#getInvocable()
	CALLEE: static org.glassfish.jersey.server.spi.internal.ParameterValueHelper#createValueProviders(org.glassfish.hk2.api.ServiceLocator,org.glassfish.jersey.server.model.Parameterized)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.LocalLoadingCache#<init>(jersey.repackaged.com.google.common.cache.CacheBuilder,jersey.repackaged.com.google.common.cache.CacheLoader)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#<init>(jersey.repackaged.com.google.common.cache.CacheBuilder,jersey.repackaged.com.google.common.cache.CacheLoader)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.LocalManualCache#<init>(jersey.repackaged.com.google.common.cache.LocalCache,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: static jersey.repackaged.com.google.common.base.Preconditions#checkState(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static jersey.repackaged.com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object[])
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static jersey.repackaged.com.google.common.cache.LocalCache#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.1#<init>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.2#<init>()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#<init>(jersey.repackaged.com.google.common.cache.CacheBuilder,jersey.repackaged.com.google.common.cache.CacheLoader)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getInitialCapacity()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#customWeigher()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#newSegmentArray(int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#createSegment(int,long,jersey.repackaged.com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: jersey.repackaged.com.google.common.base.Suppliers.SupplierOfInstance#get()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getConcurrencyLevel()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getMaximumWeight()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getExpireAfterAccessNanos()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getExpireAfterWriteNanos()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getRefreshNanos()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static jersey.repackaged.com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#recordsTime()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: static jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#getFactory(jersey.repackaged.com.google.common.cache.LocalCache.Strength,boolean,boolean)
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getStatsCounterSupplier()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.LocalManualCache#<init>(jersey.repackaged.com.google.common.cache.LocalCache,jersey.repackaged.com.google.common.cache.LocalCache.1)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.LocalManualCache#<init>(jersey.repackaged.com.google.common.cache.LocalCache)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: static jersey.repackaged.com.google.common.cache.CacheBuilder.NullListener#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder.NullListener#<init>(java.lang.String,int)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#recordsTime()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#recordsAccess()
CALLER: jersey.repackaged.com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: static jersey.repackaged.com.google.common.base.Ticker#systemTicker()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesAccessQueue()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesWriteQueue()
CALLER: static jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#createSegment(int,long,jersey.repackaged.com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Segment#<init>(jersey.repackaged.com.google.common.cache.LocalCache,int,long,jersey.repackaged.com.google.common.cache.AbstractCache.StatsCounter)
CALLER: static jersey.repackaged.com.google.common.cache.LocalCache.Strength#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
CALLER: static jersey.repackaged.com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static jersey.repackaged.com.google.common.cache.CacheBuilder.OneWeigher#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.cache.CacheBuilder.OneWeigher#<init>(java.lang.String,int)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#expiresAfterWrite()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#refreshes()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#expiresAfterWrite()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Segment#<init>(jersey.repackaged.com.google.common.cache.LocalCache,int,long,jersey.repackaged.com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: static jersey.repackaged.com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jersey.repackaged.com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Segment#newEntryArray(int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesKeyReferences()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#usesValueReferences()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue#<init>()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache#customWeigher()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue.1#<init>(jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue#<init>()
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue.1#<init>(jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,jersey.repackaged.com.google.common.cache.LocalCache.1)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int)
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue.1#<init>(jersey.repackaged.com.google.common.cache.LocalCache.WriteQueue)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue.1#<init>(jersey.repackaged.com.google.common.cache.LocalCache.AccessQueue)
	CALLEE: jersey.repackaged.com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: jersey.repackaged.com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
	CALLEE: static jersey.repackaged.com.google.common.base.Equivalence#equals()
CALLER: static jersey.repackaged.com.google.common.base.Equivalence.Equals#<clinit>()
	CALLEE: jersey.repackaged.com.google.common.base.Equivalence.Equals#<init>()
CALLER: jersey.repackaged.com.google.common.base.Equivalence.Equals#<init>()
	CALLEE: jersey.repackaged.com.google.common.base.Equivalence#<init>()
