CALLER: static Capsule#main(java.lang.String[])
	CALLEE: static Capsule#main0(java.lang.String[])
CALLER: static Capsule#<clinit>()
	CALLEE: static Capsule#T_FILE(java.lang.String)
	CALLEE: static Capsule#emptyOrTrue(java.lang.String)
	CALLEE: static Capsule#getProperty(java.lang.String)
	CALLEE: static Capsule#immutableSet(java.lang.Object[])
	CALLEE: static Capsule#getOS()
	CALLEE: static Capsule#OPTION(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static Capsule#OPTION(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)
	CALLEE: static Capsule#T_STRING()
	CALLEE: static Capsule#ATTRIBUTE(java.lang.String,java.lang.Object,java.lang.Object,boolean,java.lang.String)
	CALLEE: static Capsule#T_LIST(java.lang.Object)
	CALLEE: static Capsule#T_FILE()
	CALLEE: static Capsule#T_MAP(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static Capsule#T_BOOL()
	CALLEE: static Capsule#getNativeLibExtension()
CALLER: static Capsule#main0(java.lang.String[])
	CALLEE: static Capsule#myCapsule(java.util.List)
	CALLEE: static Capsule#isWrapperFactoryCapsule(Capsule)
	CALLEE: static Capsule#runOtherCapsule(java.util.List)
	CALLEE: static Capsule#runActions(Capsule,java.util.List)
	CALLEE: static Capsule#printError(java.lang.Throwable,Capsule)
CALLER: static Capsule#premain(java.lang.String,java.lang.instrument.Instrumentation)
	CALLEE: static Capsule#myCapsule(java.util.List)
	CALLEE: static Capsule#processOptions()
	CALLEE: static Capsule#split(java.lang.String,java.lang.String)
	CALLEE: static Capsule#printError(int,java.lang.Throwable)
CALLER: Capsule#run()
	CALLEE: static Capsule#printError(int,java.lang.Throwable)
	CALLEE: static Capsule#getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: Capsule#cleanup1()
	CALLEE: static Capsule#log(int,java.lang.String)
CALLER: Capsule#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: Capsule#invokeMBeanServer(java.lang.reflect.Method,java.lang.Object[])
	CALLEE: static Capsule#isLogging(int)
	CALLEE: static Capsule#isThrows(java.lang.reflect.Method,java.lang.Throwable)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
CALLER: Capsule#toString()
	CALLEE: static Capsule#isLogging(int)
	CALLEE: Capsule#getAppId()
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: Capsule#getMode()
CALLER: static Capsule#getProperty(java.lang.String)
	CALLEE: static Capsule#getProperty0(java.lang.String)
	CALLEE: static Capsule#setContext(java.lang.String,java.lang.String,java.lang.Object)
CALLER: static Capsule#getOS()
	CALLEE: static Capsule#log(int,java.lang.String)
CALLER: static Capsule#OPTION(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static Capsule#OPTION(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)
CALLER: static Capsule#ATTRIBUTE(java.lang.String,java.lang.Object,java.lang.Object,boolean,java.lang.String)
	CALLEE: static Capsule#isValidType(java.lang.Object)
	CALLEE: static Capsule#attr(java.lang.String)
CALLER: static Capsule#T_FILE()
	CALLEE: static Capsule#T_FILE(java.lang.String)
CALLER: static Capsule#T_MAP(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static Capsule#promote(java.lang.Object,java.lang.Object)
CALLER: static Capsule#getNativeLibExtension()
	CALLEE: static Capsule#isWindows()
	CALLEE: static Capsule#isMac()
	CALLEE: static Capsule#isUnix()
CALLER: static Capsule#myCapsule(java.util.List)
	CALLEE: static Capsule#processOptions()
	CALLEE: static Capsule#findOwnJarFile()
	CALLEE: static Capsule#newCapsule(java.lang.ClassLoader,java.nio.file.Path)
	CALLEE: static Capsule#clearContext()
	CALLEE: static Capsule#processCmdLineOptions(java.util.List,java.util.List)
CALLER: static Capsule#runOtherCapsule(java.util.List)
	CALLEE: static Capsule#runMain(java.nio.file.Path,java.util.List)
CALLER: static Capsule#runActions(Capsule,java.util.List)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#verifyAgent(boolean)
	CALLEE: static Capsule#systemPropertyEmptyOrNotFalse(java.lang.String)
	CALLEE: static Capsule#getMethod(Capsule,java.lang.String,java.lang.Class[])
CALLER: static Capsule#printError(java.lang.Throwable,Capsule)
	CALLEE: static Capsule#printError(int,java.lang.Throwable)
	CALLEE: static Capsule#printUsage(Capsule)
CALLER: static Capsule#processOptions()
	CALLEE: static Capsule#getProperty0(java.lang.String)
	CALLEE: static Capsule#setProperty(java.lang.String,java.lang.String)
	CALLEE: static Capsule#optionTakesArguments(java.lang.String)
CALLER: static Capsule#printError(int,java.lang.Throwable)
	CALLEE: static Capsule#isLogging(int)
	CALLEE: static Capsule#getProperty0(java.lang.String)
	CALLEE: static Capsule#hasContext()
	CALLEE: static Capsule#getContext()
	CALLEE: static Capsule#getLogLevel(java.lang.String)
	CALLEE: static Capsule#deshadow(java.lang.Throwable)
CALLER: static Capsule#getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
	CALLEE: static Capsule#getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
	CALLEE: static Capsule#accessible(java.lang.reflect.AccessibleObject)
CALLER: Capsule#cleanup1()
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
	CALLEE: Capsule#cleanup()
CALLER: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#isLogging(int)
CALLER: Capsule#invokeMBeanServer(java.lang.reflect.Method,java.lang.Object[])
	CALLEE: Capsule#getMBeanServerConnection()
	CALLEE: static Capsule#getMethod(java.lang.Class,java.lang.reflect.Method)
CALLER: static Capsule#isLogging(int)
	CALLEE: static Capsule#getLogLevel()
CALLER: static Capsule#log(int,java.lang.Throwable)
	CALLEE: static Capsule#isLogging(int)
CALLER: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#setContext(java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: Capsule#getAttributeNoLookup(java.util.Map.Entry)
	CALLEE: Capsule#type(java.util.Map.Entry)
	CALLEE: static Capsule#hasFILE_T(java.lang.Object)
	CALLEE: Capsule#lookupInAttribute(java.lang.Object,java.util.Map.Entry)
	CALLEE: Capsule#name(java.util.Map.Entry)
CALLER: static Capsule#isValidType(java.lang.Object)
	CALLEE: static Capsule#isValidType(java.lang.Object)
CALLER: static Capsule#attr(java.lang.String)
	CALLEE: static Capsule#entry(java.lang.Object,java.lang.Object)
CALLER: static Capsule#findOwnJarFile()
	CALLEE: static Capsule#findJarFile(java.lang.Class)
CALLER: static Capsule#newCapsule(java.lang.ClassLoader,java.nio.file.Path)
	CALLEE: static Capsule#newCapsule0(java.lang.ClassLoader,java.nio.file.Path)
CALLER: static Capsule#clearContext()
	CALLEE: static Capsule#setContext(java.lang.String,java.lang.String,java.lang.Object)
CALLER: static Capsule#processCmdLineOptions(java.util.List,java.util.List)
	CALLEE: static Capsule#processOptions()
	CALLEE: static Capsule#setProperty(java.lang.String,java.lang.String)
	CALLEE: static Capsule#optionTakesArguments(java.lang.String)
	CALLEE: static Capsule#first(java.lang.Iterable)
	CALLEE: static Capsule#getAfter(java.lang.String,char)
	CALLEE: static Capsule#getBefore(java.lang.String,char)
	CALLEE: static Capsule#simpleToOption(java.lang.String)
CALLER: static Capsule#runMain(java.nio.file.Path,java.util.List)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#deshadow(java.lang.Throwable)
	CALLEE: static Capsule#getMainClass(java.nio.file.Path)
	CALLEE: static Capsule#newClassLoader0(java.lang.ClassLoader,java.nio.file.Path[])
CALLER: static Capsule#systemPropertyEmptyOrNotFalse(java.lang.String)
	CALLEE: static Capsule#getProperty0(java.lang.String)
CALLER: static Capsule#getMethod(Capsule,java.lang.String,java.lang.Class[])
	CALLEE: static Capsule#getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
CALLER: static Capsule#printUsage(Capsule)
	CALLEE: static Capsule#printHelp(boolean)
CALLER: static Capsule#deshadow(java.lang.Throwable)
	CALLEE: static Capsule#deshadow(java.lang.String,java.lang.Throwable)
CALLER: Capsule#cleanup()
	CALLEE: Capsule#getCallTarget(java.lang.Class)
	CALLEE: Capsule#cleanup0()
CALLER: Capsule#getMBeanServerConnection()
	CALLEE: static Capsule#printError(int,java.lang.Throwable)
	CALLEE: static Capsule#verifyAgent(boolean)
	CALLEE: Capsule#verifyAfterStage(int)
	CALLEE: Capsule#send(int,java.lang.Object)
	CALLEE: Capsule#receive()
CALLER: static Capsule#getMethod(java.lang.Class,java.lang.reflect.Method)
	CALLEE: static Capsule#getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
CALLER: Capsule#getAttributeNoLookup(java.util.Map.Entry)
	CALLEE: static Capsule#setContext(java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: Capsule#name(java.util.Map.Entry)
	CALLEE: Capsule#attribute0(java.util.Map.Entry)
CALLER: Capsule#type(java.util.Map.Entry)
	CALLEE: static Capsule#T_STRING()
	CALLEE: Capsule#name(java.util.Map.Entry)
CALLER: static Capsule#hasFILE_T(java.lang.Object)
	CALLEE: static Capsule#hasFILE_T(java.lang.Object)
CALLER: Capsule#lookupInAttribute(java.lang.Object,java.util.Map.Entry)
	CALLEE: Capsule#type(java.util.Map.Entry)
	CALLEE: Capsule#lookupInAttribute(java.lang.Object,java.lang.Object,java.util.Map.Entry,java.lang.Object)
CALLER: static Capsule#newCapsule0(java.lang.ClassLoader,java.nio.file.Path)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#accessible(java.lang.reflect.AccessibleObject)
	CALLEE: static Capsule#loadCapsule(java.lang.ClassLoader,java.nio.file.Path)
CALLER: static Capsule#first(java.lang.Iterable)
	CALLEE: static Capsule#isEmpty(java.lang.Iterable)
CALLER: static Capsule#simpleToOption(java.lang.String)
	CALLEE: static Capsule#optionToSimple(java.lang.String)
CALLER: static Capsule#getMainClass(java.nio.file.Path)
	CALLEE: static Capsule#getManifest(java.nio.file.Path)
	CALLEE: static Capsule#getMainClass(java.util.jar.Manifest)
CALLER: static Capsule#newClassLoader0(java.lang.ClassLoader,java.nio.file.Path[])
	CALLEE: static Capsule#newClassLoader0(java.lang.ClassLoader,java.util.List)
CALLER: static Capsule#printHelp(boolean)
	CALLEE: static Capsule#findOwnJarFile()
	CALLEE: static Capsule#optionTakesArguments(java.lang.String)
	CALLEE: static Capsule#optionToSimple(java.lang.String)
	CALLEE: static Capsule#toFriendlyPath(java.nio.file.Path)
	CALLEE: static Capsule#isExecutable(java.nio.file.Path)
CALLER: static Capsule#deshadow(java.lang.String,java.lang.Throwable)
	CALLEE: static Capsule#deshadow(java.lang.String,java.lang.Throwable)
CALLER: Capsule#getCallTarget(java.lang.Class)
	CALLEE: static Capsule#isStream(java.lang.String)
CALLER: Capsule#cleanup0()
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#deshadow(java.lang.Throwable)
	CALLEE: Capsule#killChild()
	CALLEE: static Capsule#delete(java.nio.file.Path)
CALLER: Capsule#send(int,java.lang.Object)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
	CALLEE: Capsule#verifyAfterStage(int)
	CALLEE: Capsule#send0(int,java.lang.Object)
CALLER: Capsule#receive()
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
	CALLEE: Capsule#verifyAfterStage(int)
	CALLEE: Capsule#receive(int,java.lang.Object)
CALLER: Capsule#attribute0(java.util.Map.Entry)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: Capsule#attribute00(java.util.Map.Entry)
	CALLEE: Capsule#getManifestAttribute(java.lang.String)
	CALLEE: Capsule#hasAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#isDependency(java.lang.String)
	CALLEE: static Capsule#getAppArtifactId(java.lang.String)
	CALLEE: static Capsule#getAppArtifactVersion(java.lang.String)
	CALLEE: Capsule#buildClassPath0(java.util.List)
	CALLEE: Capsule#windowsAttributes(java.util.Map.Entry,java.lang.Object)
	CALLEE: Capsule#agentAttributes(java.util.Map.Entry,java.lang.Object)
CALLER: Capsule#lookupInAttribute(java.lang.Object,java.lang.Object,java.util.Map.Entry,java.lang.Object)
	CALLEE: Capsule#lookupInAttribute(java.lang.Object,java.lang.Object,java.util.Map.Entry,java.lang.Object)
	CALLEE: Capsule#lookup(java.lang.String,java.lang.String,java.util.Map.Entry,java.lang.Object)
CALLER: static Capsule#loadCapsule(java.lang.ClassLoader,java.nio.file.Path)
	CALLEE: static Capsule#getMainClass(java.nio.file.Path)
	CALLEE: static Capsule#loadCapsule(java.lang.ClassLoader,java.lang.String,java.lang.String)
CALLER: static Capsule#optionToSimple(java.lang.String)
	CALLEE: static Capsule#camelCaseToDashed(java.lang.String)
CALLER: static Capsule#getManifest(java.nio.file.Path)
	CALLEE: static Capsule#openJarInputStream(java.nio.file.Path)
CALLER: static Capsule#isExecutable(java.nio.file.Path)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
CALLER: Capsule#killChild()
	CALLEE: static Capsule#isWindows()
	CALLEE: Capsule#send(int,java.lang.Object)
CALLER: static Capsule#delete(java.nio.file.Path)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#delete(java.nio.file.Path)
CALLER: Capsule#send0(int,java.lang.Object)
	CALLEE: static Capsule#log(int,java.lang.String)
CALLER: Capsule#receive(int,java.lang.Object)
	CALLEE: Capsule#send(int,java.lang.Object)
	CALLEE: Capsule#startJMXServer()
	CALLEE: Capsule#connectToJMX(javax.management.remote.JMXServiceURL)
CALLER: Capsule#attribute00(java.util.Map.Entry)
	CALLEE: static Capsule#setContext(java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: Capsule#type(java.util.Map.Entry)
	CALLEE: Capsule#name(java.util.Map.Entry)
	CALLEE: static Capsule#isEmpty(java.lang.Object)
	CALLEE: Capsule#defaultValue(java.lang.Object,java.lang.Object)
CALLER: Capsule#hasAttribute(java.util.Map.Entry)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#isEmpty(java.lang.Object)
CALLER: Capsule#buildClassPath0(java.util.List)
	CALLEE: static Capsule#isDeepEmpty(java.lang.Object)
	CALLEE: static Capsule#time(java.lang.String,long)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: Capsule#hasAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#isDependency(java.lang.String)
	CALLEE: static Capsule#clock()
	CALLEE: Capsule#isWrapperOfNonCapsule()
	CALLEE: Capsule#addCapsuleJars(java.util.List)
	CALLEE: static Capsule#isGlob(java.lang.String)
	CALLEE: Capsule#path(java.lang.String,java.lang.String[])
	CALLEE: static Capsule#toAbsolutePath(java.nio.file.Path)
	CALLEE: Capsule#sanitize(java.lang.String)
	CALLEE: Capsule#lookup(java.lang.String,java.util.Map.Entry)
	CALLEE: static Capsule#addAllIfAbsent(java.util.Collection,java.util.Collection)
	CALLEE: static Capsule#nullToEmpty(java.util.List)
CALLER: Capsule#windowsAttributes(java.util.Map.Entry,java.lang.Object)
	CALLEE: static Capsule#isWindows()
CALLER: Capsule#agentAttributes(java.util.Map.Entry,java.lang.Object)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#findOwnJarFile()
	CALLEE: static Capsule#getLogLevel()
	CALLEE: static Capsule#cast(java.util.Map.Entry,java.lang.Object)
	CALLEE: Capsule#processOutgoingPath(java.lang.Object)
	CALLEE: Capsule#isWrapperCapsule()
	CALLEE: Capsule#getJarFile()
CALLER: Capsule#lookup(java.lang.String,java.lang.String,java.util.Map.Entry,java.lang.Object)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: Capsule#name(java.util.Map.Entry)
	CALLEE: static Capsule#nullToEmpty(java.lang.String)
CALLER: static Capsule#loadCapsule(java.lang.ClassLoader,java.lang.String,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#accessible(java.lang.reflect.AccessibleObject)
	CALLEE: static Capsule#toString(java.lang.ClassLoader)
	CALLEE: static Capsule#getActualCapsuleClass(java.lang.Class)
CALLER: static Capsule#openJarInputStream(java.nio.file.Path)
	CALLEE: static Capsule#skipToZipStart(java.io.InputStream,java.io.OutputStream)
CALLER: Capsule#startJMXServer()
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
CALLER: Capsule#connectToJMX(javax.management.remote.JMXServiceURL)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.Throwable)
CALLER: static Capsule#clock()
	CALLEE: static Capsule#isLogging(int)
CALLER: Capsule#addCapsuleJars(java.util.List)
	CALLEE: static Capsule#findJarFile(java.lang.Class)
	CALLEE: Capsule#getJarFile()
CALLER: Capsule#path(java.lang.String,java.lang.String[])
	CALLEE: Capsule#getFileSystem()
CALLER: Capsule#sanitize(java.lang.String)
	CALLEE: static Capsule#isDependency(java.lang.String)
	CALLEE: static Capsule#toNativePath(java.lang.String)
	CALLEE: Capsule#sanitize(java.nio.file.Path)
CALLER: Capsule#lookup(java.lang.String,java.util.Map.Entry)
	CALLEE: Capsule#lookup(java.lang.String,java.lang.String,java.util.Map.Entry,java.lang.Object)
CALLER: static Capsule#isDeepEmpty(java.lang.Object)
	CALLEE: static Capsule#isDeepEmpty(java.lang.Object)
CALLER: static Capsule#time(java.lang.String,long)
	CALLEE: static Capsule#isLogging(int)
	CALLEE: static Capsule#time(java.lang.String,long,long)
CALLER: Capsule#processOutgoingPath(java.lang.Object)
	CALLEE: Capsule#resolve(java.lang.Object)
	CALLEE: static Capsule#firstOrNull(java.lang.Iterable)
	CALLEE: static Capsule#toString(java.nio.file.Path)
CALLER: static Capsule#toString(java.lang.ClassLoader)
	CALLEE: static Capsule#toString(java.lang.ClassLoader)
CALLER: Capsule#sanitize(java.nio.file.Path)
	CALLEE: Capsule#getAppDir()
	CALLEE: Capsule#getJavaHome()
CALLER: static Capsule#time(java.lang.String,long,long)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#isLogging(int)
CALLER: Capsule#resolve(java.lang.Object)
	CALLEE: static Capsule#log(int,java.lang.String)
CALLER: static Capsule#firstOrNull(java.lang.Iterable)
	CALLEE: static Capsule#isEmpty(java.lang.Iterable)
CALLER: static Capsule#toString(java.nio.file.Path)
	CALLEE: static Capsule#isUnix()
CALLER: Capsule#getJavaHome()
	CALLEE: static Capsule#getProperty(java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#entry(java.lang.Object,java.lang.Object)
	CALLEE: Capsule#chooseJavaHome()
CALLER: Capsule#chooseJavaHome()
	CALLEE: Capsule#getCallTarget(java.lang.Class)
	CALLEE: Capsule#chooseJavaHome0()
CALLER: Capsule#chooseJavaHome0()
	CALLEE: static Capsule#time(java.lang.String,long)
	CALLEE: static Capsule#getProperty(java.lang.String)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#isLogging(int)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#entry(java.lang.Object,java.lang.Object)
	CALLEE: static Capsule#clock()
	CALLEE: static Capsule#emptyToNull(java.lang.String)
	CALLEE: static Capsule#getJavaVersion(java.nio.file.Path)
	CALLEE: static Capsule#isJDK(java.nio.file.Path)
	CALLEE: Capsule#isMatchingJavaVersion(java.lang.String,boolean)
	CALLEE: Capsule#findJavaHome(boolean)
CALLER: static Capsule#getJavaVersion(java.nio.file.Path)
	CALLEE: static Capsule#isJavaDir(java.lang.String)
	CALLEE: static Capsule#getActualJavaVersion(java.nio.file.Path)
CALLER: Capsule#isMatchingJavaVersion(java.lang.String,boolean)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: Capsule#name(java.util.Map.Entry)
	CALLEE: Capsule#hasAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#compareVersions(java.lang.String,java.lang.String)
	CALLEE: static Capsule#shortJavaVersion(java.lang.String)
	CALLEE: static Capsule#compareVersions(java.lang.String,java.lang.String,int)
	CALLEE: Capsule#getMinUpdateFor(java.lang.String)
	CALLEE: static Capsule#parseJavaVersion(java.lang.String)
CALLER: Capsule#findJavaHome(boolean)
	CALLEE: static Capsule#log(int,java.lang.String)
	CALLEE: static Capsule#entry(java.lang.Object,java.lang.Object)
	CALLEE: static Capsule#isJDK(java.nio.file.Path)
	CALLEE: Capsule#isMatchingJavaVersion(java.lang.String,boolean)
	CALLEE: static Capsule#compareVersions(java.lang.String,java.lang.String)
	CALLEE: static Capsule#getJavaHomes()
	CALLEE: static Capsule#nullToEmpty(java.util.Map)
CALLER: static Capsule#isJavaDir(java.lang.String)
	CALLEE: static Capsule#shortJavaVersion(java.lang.String)
CALLER: static Capsule#getActualJavaVersion(java.nio.file.Path)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#first(java.lang.Iterable)
	CALLEE: static Capsule#getJavaExecutable0(java.nio.file.Path)
	CALLEE: static Capsule#exec(int,boolean,java.lang.ProcessBuilder)
CALLER: static Capsule#compareVersions(java.lang.String,java.lang.String)
	CALLEE: static Capsule#parseJavaVersion(java.lang.String)
	CALLEE: static Capsule#compareVersions(int[],int[])
CALLER: static Capsule#compareVersions(java.lang.String,java.lang.String,int)
	CALLEE: static Capsule#parseJavaVersion(java.lang.String)
	CALLEE: static Capsule#compareVersions(int[],int[],int)
CALLER: Capsule#getMinUpdateFor(java.lang.String)
	CALLEE: Capsule#getAttribute(java.util.Map.Entry)
	CALLEE: static Capsule#shortJavaVersion(java.lang.String)
	CALLEE: static Capsule#parseJavaVersion(java.lang.String)
	CALLEE: static Capsule#toInt(java.lang.String[])
	CALLEE: static Capsule#equals(int[],int[],int)
CALLER: static Capsule#parseJavaVersion(java.lang.String)
	CALLEE: static Capsule#toInt(java.lang.String)
CALLER: static Capsule#getJavaHomes()
	CALLEE: static Capsule#getProperty(java.lang.String)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#isWindows()
	CALLEE: static Capsule#isJavaDir(java.lang.String)
	CALLEE: static Capsule#getJavaHomes(java.nio.file.Path)
	CALLEE: static Capsule#windowsJavaHomesHeuristics(java.nio.file.Path,java.util.Map)
CALLER: static Capsule#getJavaExecutable0(java.nio.file.Path)
	CALLEE: static Capsule#isWindows()
CALLER: static Capsule#exec(int,boolean,java.lang.ProcessBuilder)
	CALLEE: static Capsule#rethrow(java.lang.Throwable)
	CALLEE: static Capsule#join(java.util.Collection,java.lang.String)
CALLER: static Capsule#compareVersions(int[],int[])
	CALLEE: static Capsule#compareVersions(int[],int[],int)
CALLER: static Capsule#getJavaHomes(java.nio.file.Path)
	CALLEE: static Capsule#first(java.lang.Iterable)
	CALLEE: static Capsule#isJavaDir(java.lang.String)
	CALLEE: static Capsule#getActualJavaVersion(java.nio.file.Path)
	CALLEE: static Capsule#parseJavaVersion(java.lang.String)
	CALLEE: static Capsule#searchJavaHomeInDir(java.nio.file.Path)
	CALLEE: static Capsule#multiput(java.util.Map,java.lang.Object,java.util.List)
CALLER: static Capsule#windowsJavaHomesHeuristics(java.nio.file.Path,java.util.Map)
	CALLEE: static Capsule#nullToEmpty(java.util.Map)
	CALLEE: static Capsule#getJavaHomes(java.nio.file.Path)
	CALLEE: static Capsule#multiputAll(java.util.Map,java.util.Map)
CALLER: static Capsule#join(java.util.Collection,java.lang.String)
	CALLEE: static Capsule#toString(java.lang.Object)
CALLER: static Capsule#searchJavaHomeInDir(java.nio.file.Path)
	CALLEE: static Capsule#isJDK(java.nio.file.Path)
	CALLEE: static Capsule#searchJavaHomeInDir(java.nio.file.Path)
	CALLEE: static Capsule#isJavaHome(java.nio.file.Path)
CALLER: static Capsule#toString(java.lang.Object)
	CALLEE: static Capsule#toString(java.nio.file.Path)
CALLER: static Capsule#isJavaHome(java.nio.file.Path)
	CALLEE: static Capsule#isWindows()
