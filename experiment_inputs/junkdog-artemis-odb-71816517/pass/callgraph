CALLER: static com.artemis.cli.CliApplication#main(java.lang.String[])
	CALLEE: com.artemis.cli.CliApplication#<init>()
	CALLEE: com.artemis.cli.CliApplication#parse(java.lang.String[])
CALLER: com.artemis.cli.CliApplication#parse(java.lang.String[])
	CALLEE: com.artemis.cli.MatrixCommand#<init>()
	CALLEE: com.artemis.cli.WeaveCommand#<init>()
	CALLEE: com.artemis.cli.OptimizationCommand#<init>()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#<init>()
	CALLEE: com.beust.jcommander.JCommander#<init>(java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander#addCommand(java.lang.String,java.lang.Object)
	CALLEE: static com.artemis.cli.CliApplication#getJarName()
	CALLEE: com.beust.jcommander.JCommander#setProgramName(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#parse(java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#usage()
	CALLEE: com.beust.jcommander.JCommander#getParsedCommand()
	CALLEE: com.artemis.cli.MatrixCommand#execute()
	CALLEE: com.artemis.cli.WeaveCommand#execute()
	CALLEE: com.artemis.cli.OptimizationCommand#execute()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#execute()
CALLER: static com.beust.jcommander.JCommander#<clinit>()
	CALLEE: static com.beust.jcommander.internal.Lists#newLinkedList()
	CALLEE: com.beust.jcommander.internal.DefaultConverterFactory#<init>()
CALLER: com.beust.jcommander.JCommander#<init>(java.lang.Object)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: static com.beust.jcommander.internal.Maps#newHashMap()
	CALLEE: static com.beust.jcommander.internal.Maps#newLinkedHashMap()
	CALLEE: com.beust.jcommander.JCommander.1#<init>(com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.JCommander.DefaultVariableArity#<init>(com.beust.jcommander.JCommander,com.beust.jcommander.JCommander.1)
	CALLEE: com.beust.jcommander.JCommander#addObject(java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander#createDescriptions()
CALLER: com.beust.jcommander.JCommander#addCommand(java.lang.String,java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander#addCommand(java.lang.String,java.lang.Object,java.lang.String[])
CALLER: com.beust.jcommander.JCommander#setProgramName(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#setProgramName(java.lang.String,java.lang.String[])
CALLER: com.beust.jcommander.JCommander#parse(java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#parse(boolean,java.lang.String[])
CALLER: com.beust.jcommander.JCommander#usage()
	CALLEE: com.beust.jcommander.JCommander#usage(java.lang.StringBuilder)
	CALLEE: static com.beust.jcommander.JCommander#getConsole()
	CALLEE: com.beust.jcommander.internal.JDK6Console#println(java.lang.String)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#println(java.lang.String)
CALLER: com.artemis.cli.MatrixCommand#execute()
	CALLEE: net.onedaybeard.ecs.model.ComponentDependencyMatrix#<init>(java.lang.String,java.util.List,java.io.File)
	CALLEE: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process()
CALLER: com.artemis.cli.WeaveCommand#execute()
	CALLEE: static com.artemis.Weaver#enablePooledWeaving(boolean)
	CALLEE: static com.artemis.Weaver#generateLinkMutators(boolean)
	CALLEE: static com.artemis.Weaver#optimizeEntitySystems(boolean)
	CALLEE: com.artemis.Weaver#<init>(java.io.File)
	CALLEE: com.artemis.Weaver#execute()
	CALLEE: static com.artemis.cli.WeaveCommand#getSummary(java.util.List,long)
	CALLEE: com.artemis.WeaverLog#getFormattedLog()
CALLER: com.artemis.cli.OptimizationCommand#execute()
	CALLEE: com.artemis.WeaverLog#<init>()
	CALLEE: static com.artemis.ClassUtil#find(java.io.File)
	CALLEE: static com.artemis.Weaver#rewriteEntitySystems(java.util.List,com.artemis.WeaverLog)
	CALLEE: com.artemis.WeaverLog#getFormattedLog()
	CALLEE: static com.artemis.cli.OptimizationCommand#getSummary(java.util.List,long)
CALLER: com.artemis.cli.EclipseProcessorCommand#execute()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#configureSavePaths()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#downloadProcessor()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#writeProjectConfiguration()
CALLER: static com.beust.jcommander.internal.DefaultConverterFactory#<clinit>()
	CALLEE: static com.beust.jcommander.internal.Maps#newHashMap()
CALLER: com.beust.jcommander.JCommander.DefaultVariableArity#<init>(com.beust.jcommander.JCommander,com.beust.jcommander.JCommander.1)
	CALLEE: com.beust.jcommander.JCommander.DefaultVariableArity#<init>(com.beust.jcommander.JCommander)
CALLER: com.beust.jcommander.JCommander#createDescriptions()
	CALLEE: static com.beust.jcommander.internal.Maps#newHashMap()
	CALLEE: com.beust.jcommander.JCommander#addDescription(java.lang.Object)
CALLER: com.beust.jcommander.JCommander#addCommand(java.lang.String,java.lang.Object,java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#<init>(java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander#setProgramName(java.lang.String,java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#setDefaultProvider(com.beust.jcommander.IDefaultProvider)
	CALLEE: com.beust.jcommander.StringKey#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.StringKey#equals(java.lang.Object)
	CALLEE: static com.beust.jcommander.JCommander.ProgramName#access$000(com.beust.jcommander.JCommander.ProgramName)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander.ProgramName#equals(java.lang.Object)
CALLER: com.beust.jcommander.JCommander#setProgramName(java.lang.String,java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander.ProgramName#<init>(java.lang.String,java.util.List)
CALLER: com.beust.jcommander.JCommander#parse(boolean,java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#createDescriptions()
	CALLEE: com.beust.jcommander.JCommander#join(java.lang.Object[])
	CALLEE: com.beust.jcommander.JCommander#p(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#initializeDefaultValues()
	CALLEE: com.beust.jcommander.JCommander#expandArgs(java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#parseValues(java.lang.String[],boolean)
	CALLEE: com.beust.jcommander.JCommander#validateOptions()
CALLER: com.beust.jcommander.JCommander#usage(java.lang.StringBuilder)
	CALLEE: com.beust.jcommander.JCommander#usage(java.lang.StringBuilder,java.lang.String)
CALLER: static com.beust.jcommander.JCommander#getConsole()
	CALLEE: com.beust.jcommander.internal.JDK6Console#<init>(java.lang.Object)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#<init>()
CALLER: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process()
	CALLEE: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process(java.lang.String)
CALLER: com.artemis.Weaver#execute()
	CALLEE: com.artemis.WeaverLog#<init>()
	CALLEE: static com.artemis.Weaver#rewriteEntitySystems(java.util.List,com.artemis.WeaverLog)
	CALLEE: static com.artemis.ClassUtil#find(java.util.Set)
	CALLEE: static com.artemis.Weaver#rewriteComponents(java.util.List,com.artemis.WeaverLog)
	CALLEE: static com.artemis.Weaver#generateLinkMutators(java.util.List,com.artemis.WeaverLog)
	CALLEE: static com.artemis.Weaver#rewriteProfilers(java.util.List)
	CALLEE: static com.artemis.Weaver#sort(com.artemis.WeaverLog)
CALLER: static com.artemis.WeaverLog#<clinit>()
	CALLEE: static com.artemis.WeaverLog#horizontalLine()
CALLER: static com.artemis.ClassUtil#find(java.io.File)
	CALLEE: static com.artemis.ClassUtil#find(java.util.Set)
CALLER: static com.artemis.Weaver#rewriteEntitySystems(java.util.List,com.artemis.WeaverLog)
	CALLEE: com.artemis.Weaver.Timer#<init>(com.artemis.Weaver.1)
	CALLEE: static com.artemis.Weaver#newThreadPool()
	CALLEE: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: static com.artemis.Weaver#optimizeEntitySystem(java.util.concurrent.ExecutorService,java.lang.String)
	CALLEE: static com.artemis.Weaver#awaitTermination(java.util.concurrent.ExecutorService)
	CALLEE: com.artemis.Weaver.Timer#duration()
CALLER: com.artemis.WeaverLog#getFormattedLog()
	CALLEE: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object,char)
	CALLEE: static com.artemis.WeaverLog#getComponentSummary(java.util.List)
	CALLEE: static com.artemis.WeaverLog#getEntityLinksSummary(java.util.List)
	CALLEE: static com.artemis.WeaverLog#getSystemSummary(java.util.List)
CALLER: com.artemis.cli.EclipseProcessorCommand#downloadProcessor()
	CALLEE: static com.artemis.cli.EclipseProcessorCommand#getArtemisVersion()
	CALLEE: static org.apache.commons.io.FileUtils#copyURLToFile(java.net.URL,java.io.File)
CALLER: com.artemis.cli.EclipseProcessorCommand#writeProjectConfiguration()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#writeFactoryPath()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#writeCorePrefs()
	CALLEE: com.artemis.cli.EclipseProcessorCommand#writeJdtAptPrefs()
CALLER: com.beust.jcommander.JCommander#addDescription(java.lang.Object)
	CALLEE: com.beust.jcommander.WrappedParameter#getParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#getDynamicParameter()
	CALLEE: com.beust.jcommander.JCommander#addDescription(java.lang.Object)
	CALLEE: com.beust.jcommander.StringKey#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#p(java.lang.String)
	CALLEE: static com.beust.jcommander.Parameterized#parseArg(java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterDescription#<init>(java.lang.Object,com.beust.jcommander.Parameter,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.ParameterDescription#<init>(java.lang.Object,com.beust.jcommander.DynamicParameter,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.Parameterized#getName()
	CALLEE: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#getDelegateAnnotation()
	CALLEE: com.beust.jcommander.Parameterized#getWrappedParameter()
CALLER: com.beust.jcommander.JCommander#setDefaultProvider(com.beust.jcommander.IDefaultProvider)
	CALLEE: com.beust.jcommander.JCommander#setDefaultProvider(com.beust.jcommander.IDefaultProvider)
CALLER: com.beust.jcommander.JCommander#p(java.lang.String)
	CALLEE: static com.beust.jcommander.JCommander#getConsole()
	CALLEE: com.beust.jcommander.internal.JDK6Console#println(java.lang.String)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#println(java.lang.String)
CALLER: com.beust.jcommander.JCommander#initializeDefaultValues()
	CALLEE: com.beust.jcommander.JCommander#initializeDefaultValues()
	CALLEE: com.beust.jcommander.JCommander#initializeDefaultValue(com.beust.jcommander.ParameterDescription)
CALLER: com.beust.jcommander.JCommander#expandArgs(java.lang.String[])
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: static com.beust.jcommander.JCommander#readFile(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#expandDynamicArg(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#isOption(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getSeparatorFor(java.lang.String[],java.lang.String)
CALLER: com.beust.jcommander.JCommander#parseValues(java.lang.String[],boolean)
	CALLEE: com.beust.jcommander.JCommander#parse(java.lang.String[])
	CALLEE: static com.beust.jcommander.JCommander.ProgramName#access$000(com.beust.jcommander.JCommander.ProgramName)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#p(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#isOption(java.lang.String[],java.lang.String)
	CALLEE: static com.beust.jcommander.JCommander#trim(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findCommandByAlias(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findParameterDescription(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#readPassword(java.lang.String,boolean)
	CALLEE: com.beust.jcommander.JCommander#processVariableArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription)
	CALLEE: com.beust.jcommander.JCommander#processFixedArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription,java.lang.Class)
	CALLEE: static com.beust.jcommander.Strings#isStringEmpty(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getMainParameter(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#convertValue(com.beust.jcommander.Parameterized,java.lang.Class,java.lang.String)
	CALLEE: static com.beust.jcommander.ParameterDescription#validateParameter(com.beust.jcommander.ParameterDescription,java.lang.Class,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#setAssigned(boolean)
	CALLEE: com.beust.jcommander.MissingCommandException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#subArray(java.lang.String[],int)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.ParameterDescription#isAssigned()
	CALLEE: com.beust.jcommander.ParameterDescription#getDescription()
	CALLEE: com.beust.jcommander.ParameterDescription#isHelp()
	CALLEE: com.beust.jcommander.ParameterDescription#getParameterized()
	CALLEE: com.beust.jcommander.ParameterDescription#addValue(java.lang.String)
	CALLEE: com.beust.jcommander.WrappedParameter#arity()
	CALLEE: com.beust.jcommander.WrappedParameter#variableArity()
	CALLEE: com.beust.jcommander.WrappedParameter#echoInput()
	CALLEE: com.beust.jcommander.WrappedParameter#password()
	CALLEE: com.beust.jcommander.Parameterized#getType()
	CALLEE: com.beust.jcommander.Parameterized#getGenericType()
CALLER: com.beust.jcommander.JCommander#validateOptions()
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.JCommander#pluralize(int,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.ParameterDescription#isAssigned()
	CALLEE: com.beust.jcommander.ParameterDescription#getDescription()
	CALLEE: com.beust.jcommander.WrappedParameter#required()
	CALLEE: com.beust.jcommander.ParameterDescription#getNames()
CALLER: com.beust.jcommander.JCommander#usage(java.lang.StringBuilder,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#password()
	CALLEE: com.beust.jcommander.WrappedParameter#names()
	CALLEE: com.beust.jcommander.WrappedParameter#required()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getName()
	CALLEE: com.beust.jcommander.ParameterDescription#getNames()
	CALLEE: com.beust.jcommander.ParameterDescription#isDynamicParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#hidden()
	CALLEE: com.beust.jcommander.ParameterDescription#getDefault()
	CALLEE: com.beust.jcommander.WrappedParameter#getAssignment()
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: com.beust.jcommander.JCommander#createDescriptions()
	CALLEE: static com.beust.jcommander.Strings#isStringEmpty(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getDescription()
	CALLEE: static com.beust.jcommander.JCommander.ProgramName#access$300(com.beust.jcommander.JCommander.ProgramName)
	CALLEE: com.beust.jcommander.JCommander#getParameterDescriptionComparator()
	CALLEE: com.beust.jcommander.JCommander#s(int)
	CALLEE: com.beust.jcommander.JCommander#wrapDescription(java.lang.StringBuilder,int,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#usage(java.lang.String,java.lang.StringBuilder,java.lang.String)
CALLER: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#<init>(java.util.List,java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process(net.onedaybeard.ecs.model.EcsTypeInspector)
CALLER: static com.artemis.ClassUtil#find(java.util.Set)
	CALLEE: static com.artemis.ClassUtil#addFiles(java.util.List,java.io.File)
CALLER: static com.artemis.Weaver#rewriteComponents(java.util.List,com.artemis.WeaverLog)
	CALLEE: com.artemis.Weaver.Timer#<init>(com.artemis.Weaver.1)
	CALLEE: static com.artemis.Weaver#newThreadPool()
	CALLEE: static com.artemis.Weaver#awaitTermination(java.util.concurrent.ExecutorService)
	CALLEE: com.artemis.Weaver.Timer#duration()
	CALLEE: static com.artemis.Weaver#processComponentTypes(java.util.concurrent.ExecutorService,java.lang.String,java.util.List)
CALLER: static com.artemis.Weaver#generateLinkMutators(java.util.List,com.artemis.WeaverLog)
	CALLEE: com.artemis.Weaver.Timer#<init>(com.artemis.Weaver.1)
	CALLEE: static com.artemis.Weaver#newThreadPool()
	CALLEE: static com.artemis.Weaver#awaitTermination(java.util.concurrent.ExecutorService)
	CALLEE: com.artemis.Weaver.Timer#duration()
	CALLEE: static com.artemis.Weaver#processEntityLinkMutators(java.util.concurrent.ExecutorService,java.lang.String,java.util.List)
CALLER: static com.artemis.Weaver#rewriteProfilers(java.util.List)
	CALLEE: static com.artemis.Weaver#newThreadPool()
	CALLEE: static com.artemis.Weaver#awaitTermination(java.util.concurrent.ExecutorService)
	CALLEE: static com.artemis.Weaver#processProfilers(java.util.concurrent.ExecutorService,java.lang.String)
CALLER: static com.artemis.Weaver#sort(com.artemis.WeaverLog)
	CALLEE: com.artemis.Weaver.1#<init>()
CALLER: static com.artemis.meta.ClassMetadata.WeaverType#<clinit>()
	CALLEE: com.artemis.meta.ClassMetadata.WeaverType#<init>(java.lang.String,int)
CALLER: com.artemis.Weaver.Timer#<init>(com.artemis.Weaver.1)
	CALLEE: com.artemis.Weaver.Timer#<init>()
CALLER: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#classReaderFor(java.io.InputStream)
CALLER: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.meta.ClassMetadata#<init>()
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: com.artemis.meta.MetaScanner#<init>(com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassReader#getClassName()
CALLER: static com.artemis.meta.ClassMetadata.OptimizationType#<clinit>()
	CALLEE: com.artemis.meta.ClassMetadata.OptimizationType#<init>(java.lang.String,int)
CALLER: static com.artemis.Weaver#optimizeEntitySystem(java.util.concurrent.ExecutorService,java.lang.String)
	CALLEE: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.weaver.OptimizationTransmuter#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
CALLER: static com.artemis.WeaverLog#getComponentSummary(java.util.List)
	CALLEE: static com.artemis.WeaverLog#shortenClass(org.objectweb.asm.Type)
	CALLEE: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object)
CALLER: static com.artemis.WeaverLog#getEntityLinksSummary(java.util.List)
	CALLEE: static com.artemis.WeaverLog#shortenClass(org.objectweb.asm.Type)
	CALLEE: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object)
	CALLEE: com.artemis.meta.ClassMetadata#fields()
CALLER: static com.artemis.WeaverLog#getSystemSummary(java.util.List)
	CALLEE: static com.artemis.WeaverLog#shortenClass(org.objectweb.asm.Type)
	CALLEE: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object)
CALLER: static com.artemis.cli.EclipseProcessorCommand#getArtemisVersion()
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream)
CALLER: static org.apache.commons.io.FileUtils#copyURLToFile(java.net.URL,java.io.File)
	CALLEE: static org.apache.commons.io.FileUtils#copyInputStreamToFile(java.io.InputStream,java.io.File)
CALLER: com.artemis.cli.EclipseProcessorCommand#writeFactoryPath()
	CALLEE: static com.artemis.cli.EclipseProcessorCommand#getArtemisVersion()
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream)
	CALLEE: com.artemis.cli.EclipseProcessorCommand#getProjectName()
	CALLEE: static org.apache.commons.io.FileUtils#write(java.io.File,java.lang.CharSequence)
CALLER: com.artemis.cli.EclipseProcessorCommand#writeCorePrefs()
	CALLEE: static org.apache.commons.io.FileUtils#openInputStream(java.io.File)
	CALLEE: static org.apache.commons.io.FileUtils#openOutputStream(java.io.File)
CALLER: com.artemis.cli.EclipseProcessorCommand#writeJdtAptPrefs()
	CALLEE: static org.apache.commons.io.FileUtils#write(java.io.File,java.lang.CharSequence)
	CALLEE: com.artemis.cli.EclipseProcessorCommand#genSrcDir()
CALLER: static com.beust.jcommander.Parameterized#parseArg(java.lang.Object)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: com.beust.jcommander.WrappedParameter#<init>(com.beust.jcommander.Parameter)
	CALLEE: com.beust.jcommander.Parameterized#<init>(com.beust.jcommander.WrappedParameter,com.beust.jcommander.ParametersDelegate,java.lang.reflect.Field,java.lang.reflect.Method)
	CALLEE: com.beust.jcommander.WrappedParameter#<init>(com.beust.jcommander.DynamicParameter)
CALLER: com.beust.jcommander.ParameterDescription#<init>(java.lang.Object,com.beust.jcommander.Parameter,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.WrappedParameter#<init>(com.beust.jcommander.Parameter)
	CALLEE: com.beust.jcommander.ParameterDescription#init(java.lang.Object,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
CALLER: com.beust.jcommander.ParameterDescription#<init>(java.lang.Object,com.beust.jcommander.DynamicParameter,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.WrappedParameter#<init>(com.beust.jcommander.DynamicParameter)
	CALLEE: com.beust.jcommander.ParameterDescription#init(java.lang.Object,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.Parameterized#getName()
	CALLEE: com.beust.jcommander.Parameterized#getType()
CALLER: com.beust.jcommander.JCommander#initializeDefaultValue(com.beust.jcommander.ParameterDescription)
	CALLEE: com.beust.jcommander.JCommander#p(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#names()
	CALLEE: com.beust.jcommander.ParameterDescription#addValue(java.lang.String,boolean)
CALLER: static com.beust.jcommander.JCommander#readFile(java.lang.String)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
CALLER: com.beust.jcommander.JCommander#expandDynamicArg(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#names()
	CALLEE: com.beust.jcommander.ParameterDescription#isDynamicParameter()
CALLER: com.beust.jcommander.JCommander#isOption(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getOptionPrefixes(java.lang.String[],java.lang.String)
CALLER: com.beust.jcommander.JCommander#getSeparatorFor(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getDescriptionFor(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getObject()
CALLER: com.beust.jcommander.JCommander#findCommandByAlias(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findProgramName(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findCommand(com.beust.jcommander.JCommander.ProgramName)
CALLER: com.beust.jcommander.JCommander#findParameterDescription(java.lang.String)
	CALLEE: com.beust.jcommander.StringKey#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.FuzzyMap#findInMap(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean,boolean)
CALLER: com.beust.jcommander.JCommander#readPassword(java.lang.String,boolean)
	CALLEE: static com.beust.jcommander.JCommander#getConsole()
	CALLEE: com.beust.jcommander.internal.JDK6Console#print(java.lang.String)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#print(java.lang.String)
	CALLEE: com.beust.jcommander.internal.JDK6Console#readPassword(boolean)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#readPassword(boolean)
CALLER: com.beust.jcommander.JCommander#processVariableArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.JCommander.DefaultVariableArity#processVariableArity(java.lang.String,java.lang.String[])
	CALLEE: com.beust.jcommander.JCommander#processFixedArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription,java.lang.Class,int)
	CALLEE: com.beust.jcommander.WrappedParameter#names()
	CALLEE: com.beust.jcommander.ParameterDescription#getObject()
CALLER: com.beust.jcommander.JCommander#processFixedArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription,java.lang.Class)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameter()
	CALLEE: com.beust.jcommander.JCommander#processFixedArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription,java.lang.Class,int)
	CALLEE: com.beust.jcommander.WrappedParameter#arity()
CALLER: com.beust.jcommander.JCommander#getMainParameter(java.lang.String)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#getType()
	CALLEE: com.beust.jcommander.Parameterized#set(java.lang.Object,java.lang.Object)
CALLER: com.beust.jcommander.JCommander#convertValue(com.beust.jcommander.Parameterized,java.lang.Class,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findConverter(java.lang.Class)
	CALLEE: com.beust.jcommander.JCommander#instantiateConverter(java.lang.String,java.lang.Class)
	CALLEE: com.beust.jcommander.JCommander#convertToList(java.lang.String,com.beust.jcommander.IStringConverter,java.lang.Class)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
	CALLEE: com.beust.jcommander.Parameterized#getGenericType()
	CALLEE: com.beust.jcommander.Parameterized#findFieldGenericType()
	CALLEE: com.beust.jcommander.Parameterized#getParameter()
CALLER: static com.beust.jcommander.ParameterDescription#validateParameter(com.beust.jcommander.ParameterDescription,java.lang.Class,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
	CALLEE: static com.beust.jcommander.ParameterDescription#p(java.lang.String)
CALLER: com.beust.jcommander.MissingCommandException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
CALLER: static com.beust.jcommander.JCommander.ProgramName#access$300(com.beust.jcommander.JCommander.ProgramName)
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getDisplayName()
CALLER: com.beust.jcommander.JCommander#wrapDescription(java.lang.StringBuilder,int,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#s(int)
	CALLEE: com.beust.jcommander.JCommander#getColumnSize()
CALLER: com.beust.jcommander.JCommander#usage(java.lang.String,java.lang.StringBuilder,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#usage(java.lang.StringBuilder,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findCommandByAlias(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getCommandDescription(java.lang.String)
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#<init>(java.util.List,java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.ConfigurationResolver#<init>(java.util.List,java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.ConfigurationResolver#clearDefaultTypes()
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#findEcsTypes(net.onedaybeard.ecs.model.scan.ClassStore)
	CALLEE: net.onedaybeard.ecs.model.EcsMapping#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.List)
CALLER: net.onedaybeard.ecs.model.ComponentDependencyMatrix#process(net.onedaybeard.ecs.model.EcsTypeInspector)
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#getTypeMap()
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#getMatrixData()
	CALLEE: net.onedaybeard.ecs.model.ComponentDependencyMatrix#write(java.util.SortedMap,net.onedaybeard.ecs.model.MatrixData)
CALLER: static com.artemis.ClassUtil#addFiles(java.util.List,java.io.File)
	CALLEE: static com.artemis.ClassUtil#addFiles(java.util.List,java.io.File)
CALLER: static com.artemis.Weaver#processComponentTypes(java.util.concurrent.ExecutorService,java.lang.String,java.util.List)
	CALLEE: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.weaver.ComponentTypeTransmuter#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
CALLER: static com.artemis.Weaver#processEntityLinkMutators(java.util.concurrent.ExecutorService,java.lang.String,java.util.List)
	CALLEE: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.meta.ClassMetadata#foundEntityLinks()
	CALLEE: com.artemis.weaver.EntityLinkGenerator#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
CALLER: static com.artemis.Weaver#processProfilers(java.util.concurrent.ExecutorService,java.lang.String)
	CALLEE: static com.artemis.Weaver#classReaderFor(java.lang.String)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.weaver.ProfilerTransmuter#<init>(java.lang.String,com.artemis.meta.ClassMetadata,org.objectweb.asm.ClassReader)
CALLER: static com.artemis.Weaver#classReaderFor(java.io.InputStream)
	CALLEE: org.objectweb.asm.ClassReader#<init>(java.io.InputStream)
CALLER: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#<init>(int,java.lang.String,int,int)
CALLER: static org.objectweb.asm.Type#<clinit>()
	CALLEE: org.objectweb.asm.Type#<init>(int,java.lang.String,int,int)
CALLER: com.artemis.meta.MetaScanner#<init>(com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: com.artemis.weaver.OptimizationTransmuter#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.CallableTransmuter#<init>(java.lang.String)
CALLER: static com.artemis.WeaverLog#shortenClass(org.objectweb.asm.Type)
	CALLEE: static com.artemis.WeaverLog#shortenClass(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getClassName()
CALLER: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object)
	CALLEE: static com.artemis.WeaverLog#format(java.lang.String,java.lang.Object,char)
CALLER: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream)
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream,java.nio.charset.Charset)
CALLER: static org.apache.commons.io.IOUtils#<clinit>()
	CALLEE: org.apache.commons.io.output.StringBuilderWriter#<init>(int)
	CALLEE: org.apache.commons.io.output.StringBuilderWriter#toString()
	CALLEE: org.apache.commons.io.output.StringBuilderWriter#close()
CALLER: static org.apache.commons.io.FileUtils#copyInputStreamToFile(java.io.InputStream,java.io.File)
	CALLEE: static org.apache.commons.io.FileUtils#copyToFile(java.io.InputStream,java.io.File)
CALLER: static org.apache.commons.io.FileUtils#write(java.io.File,java.lang.CharSequence)
	CALLEE: static org.apache.commons.io.FileUtils#write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)
CALLER: static org.apache.commons.io.FileUtils#openOutputStream(java.io.File)
	CALLEE: static org.apache.commons.io.FileUtils#openOutputStream(java.io.File,boolean)
CALLER: com.beust.jcommander.ParameterDescription#init(java.lang.Object,com.beust.jcommander.Parameterized,java.util.ResourceBundle,com.beust.jcommander.JCommander)
	CALLEE: com.beust.jcommander.ParameterDescription#findResourceBundle(java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterDescription#initDescription(java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.beust.jcommander.ParameterDescription#validateDefaultValues(java.lang.String[])
	CALLEE: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#getType()
CALLER: com.beust.jcommander.JCommander#getOptionPrefixes(java.lang.String[],java.lang.String)
	CALLEE: static com.beust.jcommander.Strings#isStringEmpty(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getDescriptionFor(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getObject()
CALLER: com.beust.jcommander.JCommander#getDescriptionFor(java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getPrefixDescriptionFor(java.lang.String)
CALLER: com.beust.jcommander.JCommander#findProgramName(java.lang.String)
	CALLEE: com.beust.jcommander.StringKey#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.FuzzyMap#findInMap(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean,boolean)
CALLER: com.beust.jcommander.JCommander#findCommand(com.beust.jcommander.JCommander.ProgramName)
	CALLEE: static com.beust.jcommander.FuzzyMap#findInMap(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean,boolean)
CALLER: static com.beust.jcommander.FuzzyMap#findInMap(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean,boolean)
	CALLEE: static com.beust.jcommander.FuzzyMap#findAbbreviatedValue(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean)
	CALLEE: com.beust.jcommander.StringKey#getName()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getName()
CALLER: com.beust.jcommander.internal.JDK6Console#readPassword(boolean)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
CALLER: com.beust.jcommander.internal.DefaultConsole#readPassword(boolean)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
CALLER: com.beust.jcommander.JCommander.DefaultVariableArity#processVariableArity(java.lang.String,java.lang.String[])
	CALLEE: static com.beust.jcommander.JCommander#access$100(com.beust.jcommander.JCommander,java.lang.String[],java.lang.String)
CALLER: com.beust.jcommander.JCommander#processFixedArity(java.lang.String[],int,com.beust.jcommander.ParameterDescription,java.lang.Class,int)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.JCommander#trim(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameterized()
	CALLEE: com.beust.jcommander.ParameterDescription#addValue(java.lang.String)
CALLER: com.beust.jcommander.JCommander#findConverter(java.lang.Class)
	CALLEE: com.beust.jcommander.internal.DefaultConverterFactory#getConverter(java.lang.Class)
CALLER: com.beust.jcommander.JCommander#convertToList(java.lang.String,com.beust.jcommander.IStringConverter,java.lang.Class)
	CALLEE: static com.beust.jcommander.internal.Lists#newArrayList()
CALLER: static com.beust.jcommander.ParameterDescription#p(java.lang.String)
	CALLEE: static com.beust.jcommander.JCommander#getConsole()
	CALLEE: com.beust.jcommander.internal.JDK6Console#println(java.lang.String)
	CALLEE: com.beust.jcommander.internal.DefaultConsole#println(java.lang.String)
CALLER: com.beust.jcommander.JCommander#getCommandDescription(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#findCommandByAlias(java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getI18nString(java.util.ResourceBundle,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#getObjects()
CALLER: net.onedaybeard.ecs.model.scan.ConfigurationResolver#<init>(java.util.List,java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.TypeConfiguration#<init>(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassStore#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.List)
CALLER: net.onedaybeard.ecs.model.scan.ConfigurationResolver#clearDefaultTypes()
	CALLEE: net.onedaybeard.ecs.model.scan.TypeConfiguration#<init>(java.lang.String)
CALLER: net.onedaybeard.ecs.model.EcsMapping#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.EcsMapping#findComponents(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.EcsMapping#getComponentIndices(java.util.SortedSet)
	CALLEE: static net.onedaybeard.ecs.model.RowTypeMapping#from(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.Map)
	CALLEE: net.onedaybeard.ecs.model.MatrixData#<init>(java.util.List,java.util.List)
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#setMatrixData(net.onedaybeard.ecs.model.MatrixData)
	CALLEE: org.objectweb.asm.Type#getClassName()
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#getTypeMap()
	CALLEE: static net.onedaybeard.ecs.model.EcsTypeInspector#findCommonPackage(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.EcsTypeInspector#toPackageName(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getClassName()
CALLER: net.onedaybeard.ecs.model.ComponentDependencyMatrix#write(java.util.SortedMap,net.onedaybeard.ecs.model.MatrixData)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,int)
	CALLEE: com.x5.template.Theme#<init>()
	CALLEE: com.x5.template.Theme#makeChunk(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#<init>(java.lang.String)
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#findLongestClassName(java.util.Map)
	CALLEE: com.x5.template.Chunk#render(java.io.Writer)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object)
CALLER: com.artemis.weaver.ComponentTypeTransmuter#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.CallableTransmuter#<init>(java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator#<init>(java.lang.String,org.objectweb.asm.ClassReader,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.CallableTransmuter#<init>(java.lang.String)
CALLER: com.artemis.weaver.ProfilerTransmuter#<init>(java.lang.String,com.artemis.meta.ClassMetadata,org.objectweb.asm.ClassReader)
	CALLEE: com.artemis.weaver.CallableTransmuter#<init>(java.lang.String)
CALLER: org.objectweb.asm.ClassReader#<init>(java.io.InputStream)
	CALLEE: static org.objectweb.asm.ClassReader#readStream(java.io.InputStream,boolean)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[])
CALLER: org.objectweb.asm.ClassVisitor#<init>(int)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream,java.nio.charset.Charset)
	CALLEE: static org.apache.commons.io.Charsets#toCharset(java.nio.charset.Charset)
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.Reader)
CALLER: static org.apache.commons.io.FileUtils#copyToFile(java.io.InputStream,java.io.File)
	CALLEE: static org.apache.commons.io.FileUtils#openOutputStream(java.io.File)
	CALLEE: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.OutputStream)
CALLER: static org.apache.commons.io.FileUtils#write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)
	CALLEE: static org.apache.commons.io.FileUtils#writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)
CALLER: com.beust.jcommander.ParameterDescription#findResourceBundle(java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterDescription#isEmpty(java.lang.String)
CALLER: com.beust.jcommander.ParameterDescription#validateDefaultValues(java.lang.String[])
	CALLEE: com.beust.jcommander.ParameterDescription#validateValueParameter(java.lang.String,java.lang.Object)
CALLER: com.beust.jcommander.JCommander#getPrefixDescriptionFor(java.lang.String)
	CALLEE: com.beust.jcommander.StringKey#getName()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getName()
CALLER: static com.beust.jcommander.FuzzyMap#findAbbreviatedValue(java.util.Map,com.beust.jcommander.FuzzyMap.IKey,boolean)
	CALLEE: static com.beust.jcommander.internal.Maps#newHashMap()
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.StringKey#getName()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getName()
CALLER: static com.beust.jcommander.JCommander#access$100(com.beust.jcommander.JCommander,java.lang.String[],java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#isOption(java.lang.String[],java.lang.String)
CALLER: net.onedaybeard.ecs.model.scan.TypeConfiguration#<init>(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.TypeConfiguration#loadTypes()
	CALLEE: net.onedaybeard.ecs.model.scan.TypeConfiguration#loadAspectMethods()
CALLER: net.onedaybeard.ecs.model.scan.ClassStore#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.List)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassStore#collectClasses(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#mapParentToChildren(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#resolveExtendedTypes(net.onedaybeard.ecs.model.scan.TypeConfiguration,java.util.Map)
CALLER: static net.onedaybeard.ecs.model.EcsMapping#findComponents(java.util.List)
	CALLEE: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#<init>(net.onedaybeard.ecs.model.EcsMapping.1)
CALLER: static net.onedaybeard.ecs.model.RowTypeMapping#from(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver,java.util.Map)
	CALLEE: static net.onedaybeard.ecs.model.RowTypeMapping#filterComponentMappings(net.onedaybeard.ecs.model.scan.EcsTypeData)
	CALLEE: static net.onedaybeard.ecs.model.RowTypeMapping#mapComponents(java.util.Collection,net.onedaybeard.ecs.model.ComponentReference,java.util.Map,net.onedaybeard.ecs.model.ComponentReference[])
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver,net.onedaybeard.ecs.model.ComponentReference[])
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#cleanSelfTypeReferences()
CALLER: net.onedaybeard.ecs.model.MatrixData#<init>(java.util.List,java.util.List)
	CALLEE: net.onedaybeard.ecs.model.MatrixData#extractArtemisTypes(java.util.List)
CALLER: static net.onedaybeard.ecs.model.EcsTypeInspector#findCommonPackage(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.EcsTypeInspector#toPackageName(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getClassName()
CALLER: com.x5.template.Theme#<init>()
	CALLEE: com.x5.template.Theme#<init>(java.lang.String,java.lang.String,java.lang.String)
CALLER: com.x5.template.Theme#makeChunk(java.lang.String)
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Chunk#setMacroLibrary(com.x5.template.ContentSource,com.x5.template.ChunkFactory)
	CALLEE: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#append(com.x5.template.Snippet)
	CALLEE: com.x5.template.Theme#shareContentSources(com.x5.template.Chunk)
	CALLEE: com.x5.template.Chunk#setLocale(java.lang.String)
	CALLEE: com.x5.template.Chunk#setErrorHandling(boolean,java.io.PrintStream)
CALLER: static net.onedaybeard.ecs.util.MatrixStringUtil#findLongestClassName(java.util.Map)
	CALLEE: net.onedaybeard.ecs.util.MatrixStringUtil.LongestClassName#<init>(net.onedaybeard.ecs.util.MatrixStringUtil.1)
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#findLongestString(java.util.Map,net.onedaybeard.ecs.util.MatrixStringUtil.LongestMapper)
CALLER: org.objectweb.asm.ClassReader#<init>(byte[])
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[],int,int)
CALLER: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: static org.apache.commons.io.IOUtils#readLines(java.io.Reader)
	CALLEE: static org.apache.commons.io.IOUtils#toBufferedReader(java.io.Reader)
CALLER: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static org.apache.commons.io.IOUtils#copyLarge(java.io.InputStream,java.io.OutputStream)
CALLER: static org.apache.commons.io.FileUtils#writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)
	CALLEE: static org.apache.commons.io.FileUtils#openOutputStream(java.io.File,boolean)
	CALLEE: static org.apache.commons.io.IOUtils#write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)
CALLER: com.beust.jcommander.ParameterDescription#validateValueParameter(java.lang.String,java.lang.Object)
	CALLEE: com.beust.jcommander.WrappedParameter#validateValueWith()
	CALLEE: static com.beust.jcommander.ParameterDescription#validateValueParameter(java.lang.Class,java.lang.String,java.lang.Object)
CALLER: net.onedaybeard.ecs.model.scan.TypeConfiguration#loadTypes()
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream)
	CALLEE: static net.onedaybeard.ecs.model.scan.TypeConfiguration#addType(java.lang.String,java.util.Set)
CALLER: net.onedaybeard.ecs.model.scan.TypeConfiguration#loadAspectMethods()
	CALLEE: static org.apache.commons.io.IOUtils#readLines(java.io.InputStream)
CALLER: net.onedaybeard.ecs.model.scan.ClassStore#collectClasses(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#fileSystem(java.net.URI)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#walk(java.nio.file.Path)
CALLER: static net.onedaybeard.ecs.model.scan.ClassStore#resolveExtendedTypes(net.onedaybeard.ecs.model.scan.TypeConfiguration,java.util.Map)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#recursiveResolution(java.util.Set,java.util.Map)
CALLER: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#<init>(net.onedaybeard.ecs.model.EcsMapping.1)
	CALLEE: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#<init>()
CALLER: static net.onedaybeard.ecs.model.ComponentReference#<clinit>()
	CALLEE: net.onedaybeard.ecs.model.ComponentReference#<init>(java.lang.String,int,java.lang.String)
CALLER: net.onedaybeard.ecs.model.RowTypeMapping#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver,net.onedaybeard.ecs.model.ComponentReference[])
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#shortName(org.objectweb.asm.Type)
	CALLEE: static net.onedaybeard.ecs.model.RowTypeMapping#createNameIndices(java.util.Set)
CALLER: net.onedaybeard.ecs.model.MatrixData#extractArtemisTypes(java.util.List)
	CALLEE: static net.onedaybeard.ecs.model.MatrixData#insert(java.util.SortedSet,java.lang.String[])
CALLER: com.x5.template.Chunk#setMacroLibrary(com.x5.template.ContentSource,com.x5.template.ChunkFactory)
	CALLEE: com.x5.template.Chunk#addProtocol(com.x5.template.ContentSource)
CALLER: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Theme#getThemeLayers()
	CALLEE: com.x5.template.Theme#prettyFail(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#provides(java.lang.String)
CALLER: com.x5.template.Theme#shareContentSources(com.x5.template.Chunk)
	CALLEE: com.x5.template.Chunk#addProtocol(com.x5.template.ContentSource)
CALLER: static net.onedaybeard.ecs.model.RowTypeMapping.EcsRowType#<clinit>()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping.EcsRowType#<init>(java.lang.String,int,java.lang.String)
CALLER: net.onedaybeard.ecs.util.MatrixStringUtil.LongestClassName#<init>(net.onedaybeard.ecs.util.MatrixStringUtil.1)
	CALLEE: net.onedaybeard.ecs.util.MatrixStringUtil.LongestClassName#<init>()
CALLER: static net.onedaybeard.ecs.util.MatrixStringUtil#findLongestString(java.util.Map,net.onedaybeard.ecs.util.MatrixStringUtil.LongestMapper)
	CALLEE: net.onedaybeard.ecs.util.MatrixStringUtil.LongestClassName#getMaxLength(net.onedaybeard.ecs.model.RowTypeMapping,java.lang.String)
CALLER: org.objectweb.asm.ClassReader#<init>(byte[],int,int)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[],int,boolean)
CALLER: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
	CALLEE: static org.objectweb.asm.Constants#isWhitelisted(java.lang.String)
	CALLEE: static org.objectweb.asm.Constants#checkIsPreview(java.io.InputStream)
CALLER: static org.apache.commons.io.IOUtils#copyLarge(java.io.InputStream,java.io.OutputStream)
	CALLEE: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.OutputStream,int)
CALLER: static org.apache.commons.io.IOUtils#write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)
	CALLEE: static org.apache.commons.io.Charsets#toCharset(java.nio.charset.Charset)
CALLER: static com.beust.jcommander.ParameterDescription#validateValueParameter(java.lang.Class,java.lang.String,java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.ParameterDescription#p(java.lang.String)
CALLER: static net.onedaybeard.ecs.model.scan.TypeConfiguration#addType(java.lang.String,java.util.Set)
	CALLEE: static net.onedaybeard.ecs.model.scan.TypeConfiguration#type(java.lang.String)
CALLER: static net.onedaybeard.ecs.model.scan.ClassStore#recursiveResolution(java.util.Set,java.util.Map)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#recursiveResolution(org.objectweb.asm.Type,java.util.Map,java.util.Set)
CALLER: static net.onedaybeard.ecs.util.MatrixStringUtil#shortName(org.objectweb.asm.Type)
	CALLEE: org.objectweb.asm.Type#getClassName()
CALLER: static net.onedaybeard.ecs.model.RowTypeMapping#createNameIndices(java.util.Set)
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#shortName(org.objectweb.asm.Type)
CALLER: com.x5.template.Chunk#addProtocol(com.x5.template.ContentSource)
	CALLEE: com.x5.template.Theme#getProtocol()
CALLER: com.x5.template.Theme#getThemeLayers()
	CALLEE: com.x5.template.Theme#init()
CALLER: com.x5.template.Theme#prettyFail(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.Chunk#logChunkError(java.io.PrintStream,java.lang.String)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getTemplatePath(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getDefaultExtension()
CALLER: org.objectweb.asm.ClassReader#<init>(byte[],int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readBootstrapMethodsAttribute(int)
CALLER: static org.apache.commons.io.IOUtils#copy(java.io.InputStream,java.io.OutputStream,int)
	CALLEE: static org.apache.commons.io.IOUtils#copyLarge(java.io.InputStream,java.io.OutputStream,byte[])
CALLER: com.artemis.Weaver.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.artemis.Weaver.1#compare(com.artemis.meta.ClassMetadata,com.artemis.meta.ClassMetadata)
CALLER: static net.onedaybeard.ecs.model.scan.TypeConfiguration#type(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
CALLER: static net.onedaybeard.ecs.model.scan.ClassStore#recursiveResolution(org.objectweb.asm.Type,java.util.Map,java.util.Set)
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassStore#recursiveResolution(org.objectweb.asm.Type,java.util.Map,java.util.Set)
CALLER: com.x5.template.Theme#init()
	CALLEE: com.x5.template.Theme#parseLayerNames(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#<init>(java.lang.String,java.lang.String,int)
	CALLEE: com.x5.template.TemplateSet#signalFailureWithNull()
	CALLEE: com.x5.template.TemplateSet#setLayerName(java.lang.String)
CALLER: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: static com.x5.template.Snippet#getSnippetFromCache(java.lang.String)
	CALLEE: com.x5.template.Snippet#<init>(java.lang.String)
CALLER: static com.x5.template.Snippet#<clinit>()
	CALLEE: static com.x5.template.Snippet#isCacheEnabled()
CALLER: org.objectweb.asm.ClassReader#readBootstrapMethodsAttribute(int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#getFirstAttributeOffset()
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
CALLER: com.artemis.Weaver.1#compare(com.artemis.meta.ClassMetadata,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.Type#toString()
CALLER: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getTypeInternal(java.lang.String,int,int)
CALLER: com.x5.template.TemplateSet#<init>(java.lang.String,java.lang.String,int)
	CALLEE: com.x5.template.TemplateSet#getDefaultEncoding()
CALLER: static com.x5.template.Snippet#getSnippetFromCache(java.lang.String)
	CALLEE: com.x5.template.Snippet#<init>(java.lang.String)
	CALLEE: static com.x5.template.Snippet#pruneCache(long)
CALLER: com.x5.template.Snippet#<init>(java.lang.String)
	CALLEE: com.x5.template.Snippet#parseParts(java.lang.String)
CALLER: org.objectweb.asm.ClassReader#getFirstAttributeOffset()
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
CALLER: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUtf(int,char[])
CALLER: static org.objectweb.asm.Type#getTypeInternal(java.lang.String,int,int)
	CALLEE: org.objectweb.asm.Type#<init>(int,java.lang.String,int,int)
CALLER: com.x5.template.Snippet#parseParts(java.lang.String)
	CALLEE: static com.x5.template.Snippet#isJavascriptHeadFake(int,java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
	CALLEE: com.x5.template.SnippetToken#<init>(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Snippet#isLiteralClose(java.lang.String,char,int,int)
	CALLEE: com.x5.template.Snippet#extractComment(int,int,int,java.lang.String,int)
	CALLEE: com.x5.template.Snippet#extractTag(char,java.lang.String,int,int,int)
	CALLEE: com.x5.template.SnippetComment#<init>(java.lang.String)
	CALLEE: com.x5.template.Snippet#groupBlocks(java.util.List)
CALLER: org.objectweb.asm.ClassReader#readUtf(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUtf(int,int,char[])
CALLER: com.x5.template.SnippetToken#<init>(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
CALLER: com.x5.template.Snippet#extractComment(int,int,int,java.lang.String,int)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
	CALLEE: com.x5.template.SnippetComment#<init>(java.lang.String)
CALLER: com.x5.template.Snippet#extractTag(char,java.lang.String,int,int,int)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
	CALLEE: com.x5.template.SnippetTag#<init>(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.SnippetToken#parseTokenWithArgs(java.lang.String)
CALLER: com.x5.template.SnippetComment#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
CALLER: com.x5.template.Snippet#groupBlocks(java.util.List)
	CALLEE: com.x5.template.LocaleTag#getBlockStartMarker()
	CALLEE: com.x5.template.MacroTag#getBlockStartMarker()
	CALLEE: com.x5.template.Snippet#groupBlocks(java.util.List)
	CALLEE: static com.x5.template.BlockTag#findMatchingBlockEnd(com.x5.template.BlockTag,java.util.List,int)
	CALLEE: com.x5.template.SnippetBlockTag#<init>(com.x5.template.SnippetTag,java.util.List,com.x5.template.SnippetTag)
	CALLEE: com.x5.template.SnippetBlockTag#doSmartTrimAroundBlock()
	CALLEE: com.x5.template.Snippet#smartTrimBeforeBlockStart(java.util.List,com.x5.template.SnippetBlockTag,int)
	CALLEE: com.x5.template.Snippet#smartTrimAfterBlockEnd(java.util.List,com.x5.template.SnippetBlockTag,int)
	CALLEE: com.x5.template.SnippetError#<init>(java.lang.String)
	CALLEE: com.x5.template.LoopTag#getBlockStartMarker()
	CALLEE: com.x5.template.IfTag#getBlockStartMarker()
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getBlockTagType()
CALLER: static com.x5.template.SnippetTag#<clinit>()
	CALLEE: com.x5.template.LoopTag#<init>()
	CALLEE: com.x5.template.IfTag#<init>()
	CALLEE: com.x5.template.LocaleTag#<init>()
	CALLEE: com.x5.template.MacroTag#<init>()
	CALLEE: static com.x5.template.SnippetTag#extractTagTokens(com.x5.template.BlockTag[])
CALLER: com.x5.template.SnippetTag#<init>(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
CALLER: static com.x5.template.SnippetToken#parseTokenWithArgs(java.lang.String)
	CALLEE: com.x5.template.SnippetToken#<init>(java.lang.String,java.lang.String)
CALLER: static com.x5.template.BlockTag#findMatchingBlockEnd(com.x5.template.BlockTag,java.util.List,int)
	CALLEE: static com.x5.template.BlockTag#locateTag(java.util.List,java.lang.String,int)
	CALLEE: com.x5.template.LoopTag#getBlockStartMarker()
	CALLEE: com.x5.template.IfTag#getBlockStartMarker()
	CALLEE: com.x5.template.LocaleTag#getBlockStartMarker()
	CALLEE: com.x5.template.MacroTag#getBlockStartMarker()
	CALLEE: com.x5.template.LoopTag#getBlockEndMarker()
	CALLEE: com.x5.template.IfTag#getBlockEndMarker()
	CALLEE: com.x5.template.LocaleTag#getBlockEndMarker()
	CALLEE: com.x5.template.MacroTag#getBlockEndMarker()
CALLER: com.x5.template.SnippetBlockTag#<init>(com.x5.template.SnippetTag,java.util.List,com.x5.template.SnippetTag)
	CALLEE: com.x5.template.SnippetTag#<init>(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Snippet#<init>(java.util.List)
	CALLEE: com.x5.template.SnippetBlockTag#initBlockTag()
CALLER: com.x5.template.SnippetBlockTag#doSmartTrimAroundBlock()
	CALLEE: com.x5.template.LoopTag#doSmartTrimAroundBlock()
	CALLEE: com.x5.template.IfTag#doSmartTrimAroundBlock()
	CALLEE: com.x5.template.BlockTag#doSmartTrimAroundBlock()
	CALLEE: com.x5.template.MacroTag#doSmartTrimAroundBlock()
CALLER: com.x5.template.Snippet#smartTrimBeforeBlockStart(java.util.List,com.x5.template.SnippetBlockTag,int)
	CALLEE: com.x5.template.Snippet#smartTrimBeforeBlockStart(java.util.List,com.x5.template.SnippetBlockTag,int)
	CALLEE: com.x5.template.Snippet#blockBodyStartsOnSameLine(com.x5.template.SnippetBlockTag)
	CALLEE: com.x5.template.SnippetBlockTag#getCloseTag()
	CALLEE: com.x5.template.SnippetPart#setText(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isLiteral()
CALLER: com.x5.template.Snippet#smartTrimAfterBlockEnd(java.util.List,com.x5.template.SnippetBlockTag,int)
	CALLEE: com.x5.template.SnippetBlockTag#getCloseTag()
	CALLEE: com.x5.template.SnippetPart#setText(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isLiteral()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
CALLER: com.x5.template.SnippetError#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
CALLER: com.x5.template.LoopTag#<init>()
	CALLEE: com.x5.template.BlockTag#<init>()
CALLER: com.x5.template.IfTag#<init>()
	CALLEE: com.x5.template.BlockTag#<init>()
CALLER: static com.x5.template.LocaleTag#<clinit>()
	CALLEE: static com.x5.template.filters.RegexFilter#escapeRegex(java.lang.String)
CALLER: com.x5.template.LocaleTag#<init>()
	CALLEE: com.x5.template.BlockTag#<init>()
CALLER: com.x5.template.MacroTag#<init>()
	CALLEE: com.x5.template.BlockTag#<init>()
CALLER: static com.x5.template.SnippetTag#extractTagTokens(com.x5.template.BlockTag[])
	CALLEE: com.x5.template.LoopTag#getBlockStartMarker()
	CALLEE: com.x5.template.IfTag#getBlockStartMarker()
	CALLEE: com.x5.template.LocaleTag#getBlockStartMarker()
	CALLEE: com.x5.template.MacroTag#getBlockStartMarker()
CALLER: static com.x5.template.BlockTag#locateTag(java.util.List,java.lang.String,int)
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.SnippetBlockTag#initBlockTag()
	CALLEE: com.x5.template.LoopTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.IfTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.LocaleTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#<init>(java.lang.String,com.x5.template.Snippet)
CALLER: com.x5.template.Snippet#blockBodyStartsOnSameLine(com.x5.template.SnippetBlockTag)
	CALLEE: com.x5.template.SnippetBlockTag#getBody()
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isLiteral()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
CALLER: static com.x5.template.filters.BasicFilter#<clinit>()
	CALLEE: com.x5.template.filters.RegexFilter#<init>()
	CALLEE: com.x5.template.filters.SelectedFilter#<init>()
	CALLEE: com.x5.template.filters.SHA1HexFilter#<init>()
	CALLEE: com.x5.template.filters.SHA1Base64Filter#<init>()
	CALLEE: com.x5.template.filters.TranslateFilter#<init>()
	CALLEE: com.x5.template.filters.URLDecodeFilter#<init>()
	CALLEE: com.x5.template.filters.URLEncodeFilter#<init>()
	CALLEE: com.x5.template.filters.AlternateFilter#<init>()
	CALLEE: com.x5.template.filters.Base64DecodeFilter#<init>()
	CALLEE: com.x5.template.filters.Base64EncodeFilter#<init>()
	CALLEE: com.x5.template.filters.CalcFilter#<init>()
	CALLEE: com.x5.template.filters.CheckedFilter#<init>()
	CALLEE: com.x5.template.filters.DefangFilter#<init>()
	CALLEE: com.x5.template.filters.EscapeXMLFilter#<init>()
	CALLEE: com.x5.template.filters.UnescapeXMLFilter#<init>()
	CALLEE: com.x5.template.filters.ExecFilter#<init>()
	CALLEE: com.x5.template.filters.FormatFilter#<init>()
	CALLEE: com.x5.template.filters.HexFilter#<init>()
	CALLEE: com.x5.template.filters.HexUpperFilter#<init>()
	CALLEE: com.x5.template.filters.IndentFilter#<init>()
	CALLEE: com.x5.template.filters.LetterCaseFilter#<init>()
	CALLEE: com.x5.template.filters.MD5HexFilter#<init>()
	CALLEE: com.x5.template.filters.MD5Base64Filter#<init>()
	CALLEE: com.x5.template.filters.OnEmptyFilter#<init>()
	CALLEE: com.x5.template.filters.OnDefinedFilter#<init>()
	CALLEE: com.x5.template.filters.OnMatchFilter#<init>()
	CALLEE: com.x5.template.filters.OrdinalSuffixFilter#<init>()
	CALLEE: com.x5.template.filters.QuickCalcFilter#<init>()
CALLER: com.x5.template.LoopTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.BlockTag#<init>()
	CALLEE: com.x5.template.LoopTag#parseParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#initBody(com.x5.template.Snippet)
CALLER: com.x5.template.IfTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.BlockTag#<init>()
	CALLEE: com.x5.template.IfTag#parseParams(java.lang.String)
	CALLEE: com.x5.template.IfTag#initBody(com.x5.template.Snippet)
CALLER: com.x5.template.LocaleTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.BlockTag#<init>()
	CALLEE: com.x5.template.Snippet#toString()
CALLER: com.x5.template.MacroTag#<init>(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.BlockTag#<init>()
	CALLEE: com.x5.template.Snippet#copy()
	CALLEE: com.x5.template.MacroTag#parseInlineTemplate(com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#parseDefs(com.x5.template.Snippet,java.lang.String)
CALLER: com.x5.template.filters.AlternateFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.Base64DecodeFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.Base64EncodeFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.CalcFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.CheckedFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.DefangFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.EscapeXMLFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.UnescapeXMLFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.ExecFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.FormatFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.HexFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.HexUpperFilter#<init>()
	CALLEE: com.x5.template.filters.HexFilter#<init>()
CALLER: com.x5.template.filters.IndentFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.LetterCaseFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.MD5HexFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.MD5Base64Filter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.OnEmptyFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.OnDefinedFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.OnMatchFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.OrdinalSuffixFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.QuickCalcFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.RegexFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.SelectedFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.SHA1HexFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.SHA1Base64Filter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.TranslateFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.URLDecodeFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.filters.URLEncodeFilter#<init>()
	CALLEE: com.x5.template.filters.BasicFilter#<init>()
CALLER: com.x5.template.LoopTag#parseParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#parseFnParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#parseEZParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#parseAttributes(java.lang.String)
CALLER: com.x5.template.LoopTag#initBody(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#getParts()
	CALLEE: com.x5.template.LoopTag#extractParts(java.util.List,int,int,boolean)
	CALLEE: com.x5.template.LoopTag#smartTrim(java.util.List)
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.IfTag#parseParams(java.lang.String)
	CALLEE: com.x5.template.IfTag#parseCond(java.lang.String)
	CALLEE: com.x5.template.IfTag#parseAttributes(java.lang.String)
CALLER: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
CALLER: com.x5.template.Snippet#copy()
	CALLEE: com.x5.template.Snippet#<init>(java.lang.String)
	CALLEE: com.x5.template.Snippet#<init>(java.util.List)
CALLER: com.x5.template.MacroTag#parseInlineTemplate(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#getParts()
	CALLEE: com.x5.template.Snippet#<init>(java.util.List,int,int)
	CALLEE: static com.x5.template.LoopTag#smartTrimSnippetParts(java.util.List,boolean)
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.MacroTag#parseDefs(com.x5.template.Snippet,java.lang.String)
	CALLEE: com.x5.template.MacroTag#parseDefsOriginal(com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#parseDefsSimplified(com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#parseDefsJsonStrict(com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#parseDefsJsonLax(com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#parseDefsXML(com.x5.template.Snippet)
CALLER: com.x5.template.LoopTag#parseFnParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#fetchData(java.lang.String)
CALLER: com.x5.template.LoopTag#parseEZParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#fetchData(java.lang.String)
	CALLEE: com.x5.template.LoopTag#_parseAttributes(java.lang.String)
CALLER: com.x5.template.LoopTag#parseAttributes(java.lang.String)
	CALLEE: com.x5.template.LoopTag#fetchData(java.lang.String)
	CALLEE: com.x5.template.LoopTag#_parseAttributes(java.lang.String)
CALLER: com.x5.template.LoopTag#extractParts(java.util.List,int,int,boolean)
	CALLEE: com.x5.template.Snippet#<init>(java.util.List)
	CALLEE: com.x5.template.LoopTag#smartTrim(java.util.List)
CALLER: com.x5.template.LoopTag#smartTrim(java.util.List)
	CALLEE: static com.x5.template.LoopTag#smartTrimSnippetParts(java.util.List,boolean)
	CALLEE: com.x5.template.LoopTag#isTrimAll()
CALLER: static com.x5.template.LoopTag#smartTrimSnippetParts(java.util.List,boolean)
	CALLEE: static com.x5.template.LoopTag#trimLeft(java.lang.String)
	CALLEE: static com.x5.template.LoopTag#smartTrimString(java.lang.String,boolean,boolean)
	CALLEE: static com.x5.template.LoopTag#trimRight(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setText(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isLiteral()
CALLER: com.x5.template.MacroTag#parseDefsOriginal(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#getParts()
	CALLEE: com.x5.template.Snippet#<init>(java.util.List,int,int)
	CALLEE: com.x5.template.MacroTag#findMatchingDefEnd(java.util.List,int)
	CALLEE: com.x5.template.MacroTag#saveDef(java.lang.String,com.x5.template.Snippet)
	CALLEE: com.x5.template.MacroTag#getSimpleDef(java.lang.String)
	CALLEE: com.x5.template.MacroTag#saveDef(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.MacroTag#parseDefsJsonStrict(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.MacroTag#logInputError(java.lang.String)
	CALLEE: com.x5.template.MacroTag#parseStrictJsonKeepingOrder(java.lang.String)
	CALLEE: com.x5.template.MacroTag#importJSONDefs(java.util.Map)
	CALLEE: net.minidev.json.JSONArray#toString()
CALLER: com.x5.template.MacroTag#parseDefsJsonLax(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.MacroTag#logInputError(java.lang.String)
	CALLEE: com.x5.template.MacroTag#importJSONDefs(java.util.Map)
	CALLEE: static net.minidev.json.JSONValue#parseKeepingOrder(java.lang.String)
	CALLEE: net.minidev.json.JSONArray#toString()
CALLER: com.x5.template.MacroTag#parseDefsXML(com.x5.template.Snippet)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.util.LiteXml#<init>(java.lang.String)
	CALLEE: com.x5.template.MacroTag#parseXMLObject(com.x5.util.LiteXml)
CALLER: com.x5.template.LoopTag#fetchData(java.lang.String)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.Snippet#getPointer()
	CALLEE: com.x5.template.Snippet#isSimplePointer()
	CALLEE: com.x5.template.LoopTag#registerOption(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#applyRegex(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.InlineTable#parseTable(java.lang.String)
	CALLEE: com.x5.template.SimpleTable#<init>(java.lang.String[])
	CALLEE: com.x5.template.SimpleTable#<init>(java.util.List)
	CALLEE: com.x5.template.TableOfMaps#<init>(java.util.List)
	CALLEE: static com.x5.template.TableOfMaps#boxObjectList(java.util.List)
	CALLEE: static com.x5.util.DataCapsuleTable#extractData(java.lang.Object[])
	CALLEE: static com.x5.template.TableOfMaps#boxObjectArray(java.lang.Object[])
	CALLEE: com.x5.template.ObjectTable#<init>(java.util.Map)
	CALLEE: com.x5.template.Chunk#getTemplateSet()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.Theme#fetch(java.lang.String)
CALLER: com.x5.template.MacroTag#findMatchingDefEnd(java.util.List,int)
	CALLEE: com.x5.template.SnippetPart#isTag()
	CALLEE: com.x5.template.SnippetTag#isTag()
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.MacroTag#saveDef(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.MacroTag#saveDef(java.lang.String,com.x5.template.Snippet)
CALLER: com.x5.template.MacroTag#parseStrictJsonKeepingOrder(java.lang.String)
	CALLEE: net.minidev.json.parser.JSONParser#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParser#parse(java.lang.String,net.minidev.json.parser.ContainerFactory)
CALLER: static net.minidev.json.JSONValue#parseKeepingOrder(java.lang.String)
	CALLEE: net.minidev.json.parser.JSONParser#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParser#parse(java.lang.String,net.minidev.json.parser.ContainerFactory)
CALLER: static net.minidev.json.JSONValue#<clinit>()
	CALLEE: net.minidev.json.parser.FakeContainerFactory#<init>()
CALLER: static com.x5.util.LiteXml#<clinit>()
	CALLEE: static com.x5.util.LiteXml#getStandardEntities()
CALLER: com.x5.template.MacroTag#parseXMLObject(com.x5.util.LiteXml)
	CALLEE: com.x5.template.MacroTag#parseXMLObject(com.x5.util.LiteXml)
	CALLEE: com.x5.util.LiteXml#getChildNodes()
	CALLEE: com.x5.util.LiteXml#getNodeType()
	CALLEE: com.x5.util.LiteXml#getAttributes()
	CALLEE: com.x5.util.LiteXml#getNodeValue()
CALLER: static com.x5.template.filters.RegexFilter#applyRegex(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
	CALLEE: static com.x5.template.filters.RegexFilter#parseRegexEscapes(java.lang.String)
	CALLEE: static com.x5.template.Chunk#findAndReplace(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#applyCaseConversions(java.lang.String)
CALLER: static com.x5.template.InlineTable#parseTable(java.lang.String)
	CALLEE: static com.x5.template.InlineTable#_parseTable(java.lang.String)
CALLER: com.x5.template.SimpleTable#<init>(java.util.List)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
CALLER: static com.x5.template.TableOfMaps#boxObjectList(java.util.List)
	CALLEE: com.x5.template.TableOfMaps#<init>(java.util.List)
	CALLEE: com.x5.util.ObjectDataMap#<init>(java.lang.Object)
CALLER: static com.x5.util.DataCapsuleTable#extractData(java.lang.Object[])
	CALLEE: com.x5.util.DataCapsuleTable#<init>(com.x5.util.DataCapsule[])
CALLER: static com.x5.template.TableOfMaps#boxObjectArray(java.lang.Object[])
	CALLEE: com.x5.template.TableOfMaps#<init>(java.util.List)
	CALLEE: com.x5.util.ObjectDataMap#<init>(java.lang.Object)
CALLER: static net.minidev.json.parser.ContainerFactory#<clinit>()
	CALLEE: net.minidev.json.parser.ContainerFactory.1#<init>()
	CALLEE: net.minidev.json.parser.ContainerFactory.2#<init>()
CALLER: net.minidev.json.parser.JSONParser#parse(java.lang.String,net.minidev.json.parser.ContainerFactory)
	CALLEE: net.minidev.json.parser.JSONParserString#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParserString#parse(java.lang.String,net.minidev.json.parser.ContainerFactory)
CALLER: static net.minidev.json.JSONStyle#<clinit>()
	CALLEE: net.minidev.json.JSONStyle#<init>()
	CALLEE: net.minidev.json.JSONStyle#<init>(int)
CALLER: com.x5.util.LiteXml#getChildNodes()
	CALLEE: com.x5.util.LiteXml#<init>(java.lang.String)
	CALLEE: com.x5.util.LiteXml#getRawNodeValue()
	CALLEE: com.x5.util.LiteXml#isCDATA(java.lang.String)
	CALLEE: com.x5.util.LiteXml#extendArray(int[])
CALLER: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextUnescapedDelim(java.lang.String,java.lang.String,int)
CALLER: static com.x5.template.InlineTable#_parseTable(java.lang.String)
	CALLEE: static com.x5.template.InlineTable#nextUnescapedDelim(java.util.regex.Pattern,java.lang.String,int)
	CALLEE: com.x5.template.SimpleTable#<init>(java.lang.String[],java.util.ArrayList)
CALLER: static com.x5.util.ObjectDataMap#<clinit>()
	CALLEE: static com.x5.util.ObjectDataMap#getWrapperTypes()
CALLER: net.minidev.json.parser.JSONParserString#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParserMemory#<init>(int)
CALLER: net.minidev.json.parser.JSONParserString#parse(java.lang.String,net.minidev.json.parser.ContainerFactory)
	CALLEE: net.minidev.json.parser.JSONParserString#parse(java.lang.String,net.minidev.json.parser.ContainerFactory,net.minidev.json.parser.ContentHandler)
CALLER: net.minidev.json.JSONStyle#<init>()
	CALLEE: net.minidev.json.JSONStyle#<init>(int)
CALLER: com.x5.util.LiteXml#getRawNodeValue()
	CALLEE: com.x5.util.LiteXml#getNodeType()
CALLER: static com.x5.template.TextFilter#<clinit>()
	CALLEE: static com.x5.template.TextFilter#registerStockFilters()
CALLER: net.minidev.json.parser.JSONParserMemory#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParserBase#<init>(int)
CALLER: static net.minidev.json.parser.ContentHandlerDumy#<clinit>()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#<init>()
CALLER: net.minidev.json.parser.JSONParserString#parse(java.lang.String,net.minidev.json.parser.ContainerFactory,net.minidev.json.parser.ContentHandler)
	CALLEE: net.minidev.json.parser.JSONParserBase#parse(net.minidev.json.parser.ContainerFactory,net.minidev.json.parser.ContentHandler)
CALLER: static net.minidev.json.JStylerObj#<clinit>()
	CALLEE: net.minidev.json.JStylerObj.MPSimple#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.MPTrue#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.MPAgressive#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.EscapeLT#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.Escape4Web#<init>(net.minidev.json.JStylerObj.1)
CALLER: static com.x5.template.TextFilter#registerStockFilters()
	CALLEE: static com.x5.template.filters.BasicFilter#getStockFilters()
CALLER: net.minidev.json.parser.JSONParserBase#<init>(int)
	CALLEE: net.minidev.json.parser.JSONParserBase.MSB#<init>(int)
CALLER: net.minidev.json.parser.JSONParserBase#parse(net.minidev.json.parser.ContainerFactory,net.minidev.json.parser.ContentHandler)
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.JSONParserBase#readMain(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserBase#skipSpace()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,java.lang.Throwable)
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#endJSON()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#startJSON()
CALLER: net.minidev.json.JStylerObj.MPSimple#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.MPSimple#<init>()
CALLER: net.minidev.json.JStylerObj.MPTrue#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.MPTrue#<init>()
CALLER: net.minidev.json.JStylerObj.MPAgressive#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.MPAgressive#<init>()
CALLER: net.minidev.json.JStylerObj.EscapeLT#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.EscapeLT#<init>()
CALLER: net.minidev.json.JStylerObj.Escape4Web#<init>(net.minidev.json.JStylerObj.1)
	CALLEE: net.minidev.json.JStylerObj.Escape4Web#<init>()
CALLER: static com.x5.template.filters.BasicFilter#getStockFilters()
	CALLEE: com.x5.template.filters.LetterCaseFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.MD5HexFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.MD5Base64Filter#getFilterAliases()
	CALLEE: com.x5.template.filters.OnEmptyFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.OrdinalSuffixFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.RegexFilter#getFilterName()
	CALLEE: com.x5.template.filters.SelectedFilter#getFilterName()
	CALLEE: com.x5.template.filters.SHA1HexFilter#getFilterName()
	CALLEE: com.x5.template.filters.SHA1Base64Filter#getFilterName()
	CALLEE: com.x5.template.filters.TranslateFilter#getFilterName()
	CALLEE: com.x5.template.filters.URLDecodeFilter#getFilterName()
	CALLEE: com.x5.template.filters.URLEncodeFilter#getFilterName()
	CALLEE: com.x5.template.filters.AlternateFilter#getFilterName()
	CALLEE: com.x5.template.filters.Base64DecodeFilter#getFilterName()
	CALLEE: com.x5.template.filters.Base64EncodeFilter#getFilterName()
	CALLEE: com.x5.template.filters.CalcFilter#getFilterName()
	CALLEE: com.x5.template.filters.CheckedFilter#getFilterName()
	CALLEE: com.x5.template.filters.DefangFilter#getFilterName()
	CALLEE: com.x5.template.filters.EscapeXMLFilter#getFilterName()
	CALLEE: com.x5.template.filters.UnescapeXMLFilter#getFilterName()
	CALLEE: com.x5.template.filters.ExecFilter#getFilterName()
	CALLEE: com.x5.template.filters.FormatFilter#getFilterName()
	CALLEE: com.x5.template.filters.HexFilter#getFilterName()
	CALLEE: com.x5.template.filters.HexUpperFilter#getFilterName()
	CALLEE: com.x5.template.filters.IndentFilter#getFilterName()
	CALLEE: com.x5.template.filters.LetterCaseFilter#getFilterName()
	CALLEE: com.x5.template.filters.MD5HexFilter#getFilterName()
	CALLEE: com.x5.template.filters.MD5Base64Filter#getFilterName()
	CALLEE: com.x5.template.filters.OnEmptyFilter#getFilterName()
	CALLEE: com.x5.template.filters.OnDefinedFilter#getFilterName()
	CALLEE: com.x5.template.filters.OnMatchFilter#getFilterName()
	CALLEE: com.x5.template.filters.OrdinalSuffixFilter#getFilterName()
	CALLEE: com.x5.template.filters.QuickCalcFilter#getFilterName()
	CALLEE: com.x5.template.filters.BasicFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.SelectedFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.SHA1HexFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.SHA1Base64Filter#getFilterAliases()
	CALLEE: com.x5.template.filters.TranslateFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.URLEncodeFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.AlternateFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.Base64EncodeFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.CheckedFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.DefangFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.EscapeXMLFilter#getFilterAliases()
	CALLEE: com.x5.template.filters.UnescapeXMLFilter#getFilterAliases()
CALLER: net.minidev.json.parser.JSONParserBase#readMain(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.JSONParserBase#readObject()
	CALLEE: net.minidev.json.parser.JSONParserBase#readArray()
	CALLEE: net.minidev.json.parser.JSONParserMemory#readString()
	CALLEE: net.minidev.json.parser.JSONParserMemory#readNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserMemory#readNumber(boolean[])
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#primitive(java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#skipSpace()
	CALLEE: net.minidev.json.parser.JSONParserString#readS()
CALLER: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: static net.minidev.json.parser.ParseException#toMessage(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.ParseException#<init>(int,java.lang.Throwable)
	CALLEE: static net.minidev.json.parser.ParseException#toMessage(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#readObject()
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.JSONParserBase#readMain(boolean[])
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.JSONParserMemory#readString()
	CALLEE: net.minidev.json.parser.JSONParserMemory#readNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserString#readNoEnd()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#endObject()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#endObjectEntry()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#startObjectEntry(java.lang.String)
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#startObject()
	CALLEE: net.minidev.json.parser.ContainerFactory.2#createObjectContainer()
CALLER: net.minidev.json.parser.JSONParserBase#readArray()
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.JSONParserBase#readMain(boolean[])
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#endArray()
	CALLEE: net.minidev.json.parser.ContentHandlerDumy#startArray()
	CALLEE: net.minidev.json.parser.ContainerFactory.2#createArrayContainer()
CALLER: net.minidev.json.parser.JSONParserMemory#readString()
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.JSONParserMemory#readNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserString#indexOf(char,int)
	CALLEE: net.minidev.json.parser.JSONParserString#extractString(int,int)
	CALLEE: net.minidev.json.parser.JSONParserBase#checkControleChar()
	CALLEE: net.minidev.json.parser.JSONParserBase.MSB#clear()
	CALLEE: net.minidev.json.parser.JSONParserBase#readString2()
CALLER: net.minidev.json.parser.JSONParserMemory#readNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserBase#skipNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserMemory#extractStringTrim(int,int)
CALLER: net.minidev.json.parser.JSONParserMemory#readNumber(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.JSONParserBase#skipSpace()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.JSONParserBase#skipNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserMemory#extractStringTrim(int,int)
	CALLEE: net.minidev.json.parser.JSONParserBase#skipDigits()
	CALLEE: net.minidev.json.parser.JSONParserBase#parseNumber(java.lang.String)
	CALLEE: net.minidev.json.parser.JSONParserBase#extractFloat()
	CALLEE: net.minidev.json.parser.JSONParserBase.MSB#append(char)
	CALLEE: net.minidev.json.parser.JSONParserBase#checkLeadinZero()
CALLER: net.minidev.json.parser.JSONParserString#readNoEnd()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#checkControleChar()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#readString2()
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
	CALLEE: net.minidev.json.parser.JSONParserBase.MSB#append(char)
	CALLEE: net.minidev.json.parser.JSONParserBase.MSB#toString()
	CALLEE: net.minidev.json.parser.JSONParserBase#readUnicode()
CALLER: net.minidev.json.parser.JSONParserBase#skipNQString(boolean[])
	CALLEE: net.minidev.json.parser.JSONParserString#readS()
CALLER: net.minidev.json.parser.JSONParserMemory#extractStringTrim(int,int)
	CALLEE: net.minidev.json.parser.JSONParserString#extractString(int,int)
CALLER: net.minidev.json.parser.JSONParserBase#skipDigits()
	CALLEE: net.minidev.json.parser.JSONParserString#readS()
CALLER: net.minidev.json.parser.JSONParserBase#parseNumber(java.lang.String)
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#extractFloat()
	CALLEE: net.minidev.json.parser.JSONParserBase#checkLeadinZero()
CALLER: net.minidev.json.parser.JSONParserBase#checkLeadinZero()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
CALLER: net.minidev.json.parser.JSONParserBase#readUnicode()
	CALLEE: net.minidev.json.parser.JSONParserString#read()
	CALLEE: net.minidev.json.parser.ParseException#<init>(int,int,java.lang.Object)
CALLER: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#compare(org.objectweb.asm.Type,org.objectweb.asm.Type)
CALLER: com.x5.util.LiteXml#getAttributes()
	CALLEE: com.x5.util.LiteXml#parseAttributes(java.lang.String)
CALLER: com.x5.util.LiteXml#getNodeValue()
	CALLEE: com.x5.util.LiteXml#getRawNodeValue()
	CALLEE: com.x5.util.LiteXml#isCDATA(java.lang.String)
	CALLEE: static com.x5.util.LiteXml#unescapeXML(java.lang.String)
CALLER: net.minidev.json.parser.ContainerFactory.2#createArrayContainer()
	CALLEE: net.minidev.json.JSONArray#<init>()
CALLER: com.beust.jcommander.JCommander.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander.1#compare(com.beust.jcommander.ParameterDescription,com.beust.jcommander.ParameterDescription)
CALLER: com.beust.jcommander.ParameterDescription#isHelp()
	CALLEE: com.beust.jcommander.WrappedParameter#isHelp()
CALLER: com.beust.jcommander.ParameterDescription#addValue(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#addValue(java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)
CALLER: org.objectweb.asm.ClassReader#getClassName()
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
CALLER: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#getDisplayName()
CALLER: com.beust.jcommander.ParameterDescription#getNames()
	CALLEE: com.beust.jcommander.WrappedParameter#names()
CALLER: org.objectweb.asm.Type#toString()
	CALLEE: org.objectweb.asm.Type#getDescriptor()
CALLER: com.x5.template.SnippetBlockTag#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
CALLER: com.x5.template.SnippetTag#getBlockTagType()
	CALLEE: com.x5.template.LoopTag#hasBody(java.lang.String)
	CALLEE: com.x5.template.BlockTag#hasBody(java.lang.String)
CALLER: com.x5.template.TemplateSet#getTemplatePath(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#truncateNameToStub(java.lang.String)
CALLER: com.x5.template.TemplateSet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getSnippet(java.lang.String,java.lang.String)
CALLER: com.x5.template.TemplateSet#provides(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#_get(java.lang.String,java.lang.String,boolean)
CALLER: com.x5.template.Chunk#render(java.io.Writer)
	CALLEE: com.x5.template.Chunk#explodeForParentToPrinter(java.io.Writer,java.util.Vector)
CALLER: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
CALLER: com.x5.template.Chunk#set(java.lang.String,java.lang.Object)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
CALLER: com.x5.template.Chunk#set(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
CALLER: com.beust.jcommander.ParameterDescription#addValue(java.lang.String,boolean)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: static com.beust.jcommander.ParameterDescription#p(java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#validateValueParameter(java.lang.String,java.lang.Object)
	CALLEE: com.beust.jcommander.WrappedParameter#names()
	CALLEE: com.beust.jcommander.Parameterized#getName()
	CALLEE: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#getType()
	CALLEE: com.beust.jcommander.Parameterized#set(java.lang.Object,java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterDescription#isMultiOption()
	CALLEE: com.beust.jcommander.ParameterDescription#validateParameter(java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#convertValue(com.beust.jcommander.ParameterDescription,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#fieldIsSetForTheFirstTime(boolean)
	CALLEE: com.beust.jcommander.ParameterDescription#newCollection(java.lang.Class)
	CALLEE: com.beust.jcommander.WrappedParameter#addValue(com.beust.jcommander.Parameterized,java.lang.Object,java.lang.Object)
CALLER: net.onedaybeard.ecs.model.RowTypeMapping#setMatrixData(net.onedaybeard.ecs.model.MatrixData)
	CALLEE: static net.onedaybeard.ecs.model.RowTypeMapping#typeIndices(java.util.Map,java.lang.String[])
CALLER: org.objectweb.asm.Type#getClassName()
	CALLEE: org.objectweb.asm.Type#getClassName()
	CALLEE: org.objectweb.asm.Type#getElementType()
	CALLEE: org.objectweb.asm.Type#getDimensions()
CALLER: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
CALLER: com.beust.jcommander.Parameterized#getParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#getParameter()
CALLER: com.beust.jcommander.Parameterized#set(java.lang.Object,java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.Throwable)
CALLER: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#getName()
CALLER: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.beust.jcommander.Parameterized#getName()
CALLER: net.onedaybeard.ecs.model.EcsMapping.ShortNameComparator#compare(org.objectweb.asm.Type,org.objectweb.asm.Type)
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#shortName(org.objectweb.asm.Type)
CALLER: com.x5.util.LiteXml#parseAttributes(java.lang.String)
	CALLEE: static com.x5.util.LiteXml#unescapeXML(java.lang.String)
	CALLEE: static com.x5.util.LiteXml#nextUnescapedDelim(java.lang.String,java.lang.String,int)
CALLER: com.beust.jcommander.JCommander.1#compare(com.beust.jcommander.ParameterDescription,com.beust.jcommander.ParameterDescription)
	CALLEE: com.beust.jcommander.ParameterDescription#getLongestName()
CALLER: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ProfileAnnotationRemoverWeaver#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.EcsScanner#visitAnnotation(java.lang.String,boolean)
	CALLEE: net.onedaybeard.ecs.model.scan.SurfaceTypeCollector#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.ParentChainFinder#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#getFirstAttributeOffset()
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readUtf(int,int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.Context#<init>()
	CALLEE: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: com.artemis.meta.MetaScanner#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#readModuleAttributes(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int,int,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitNestHost(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.meta.MetaScanner#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.ClassVisitor#visitNestMember(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitPermittedSubclass(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassReader#readRecordComponent(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readField(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readMethod(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitEnd()
	CALLEE: org.objectweb.asm.ClassWriter#visitEnd()
	CALLEE: org.objectweb.asm.ClassWriter#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassWriter#visitPermittedSubclass(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitNestMember(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.ClassWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassWriter#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitNestHost(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#visitEnd()
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readStringish(int,char[])
CALLER: com.x5.template.TemplateSet#getSnippet(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#_get(java.lang.String,java.lang.String,boolean)
CALLER: com.x5.template.TemplateSet#_get(java.lang.String,java.lang.String,boolean)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getTemplatePath(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#truncateNameToStub(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getFromCache(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#readAndCacheTemplate(java.lang.String,java.lang.String,java.io.BufferedReader)
	CALLEE: com.x5.template.TemplateSet#getResourcePath(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.TemplateSet#grokCallerClass()
	CALLEE: com.x5.template.TemplateSet#fishForTemplate(java.lang.String)
CALLER: com.x5.template.Chunk#explodeForParentToPrinter(java.io.Writer,java.util.Vector)
	CALLEE: com.x5.template.Chunk#pushContextStack(java.util.Vector)
	CALLEE: com.x5.template.FilteredPrinter#<init>(java.io.Writer,com.x5.template.Chunk,java.lang.String)
	CALLEE: com.x5.template.Chunk#renderForParentToPrinter(java.io.Writer)
	CALLEE: com.x5.template.FilteredPrinter#flush()
	CALLEE: com.x5.template.Chunk#popContextStack()
CALLER: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
	CALLEE: com.x5.util.ObjectDataMap#<init>(java.lang.Object)
	CALLEE: com.x5.template.Chunk#coercePrimitivesToString(java.lang.Object)
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: com.beust.jcommander.ParameterDescription#isMultiOption()
	CALLEE: com.beust.jcommander.Parameterized#getType()
	CALLEE: com.beust.jcommander.Parameterized#isDynamicParameter()
CALLER: com.beust.jcommander.ParameterDescription#validateParameter(java.lang.String,java.lang.String)
	CALLEE: static com.beust.jcommander.ParameterDescription#validateParameter(com.beust.jcommander.ParameterDescription,java.lang.Class,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.WrappedParameter#validateWith()
CALLER: com.beust.jcommander.JCommander#convertValue(com.beust.jcommander.ParameterDescription,java.lang.String)
	CALLEE: com.beust.jcommander.JCommander#convertValue(com.beust.jcommander.Parameterized,java.lang.Class,java.lang.String)
	CALLEE: com.beust.jcommander.ParameterDescription#getParameterized()
	CALLEE: com.beust.jcommander.Parameterized#getType()
CALLER: com.beust.jcommander.ParameterDescription#newCollection(java.lang.Class)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
CALLER: com.beust.jcommander.WrappedParameter#addValue(com.beust.jcommander.Parameterized,java.lang.Object,java.lang.Object)
	CALLEE: com.beust.jcommander.ParameterException#<init>(java.lang.String)
	CALLEE: com.beust.jcommander.Parameterized#set(java.lang.Object,java.lang.Object)
	CALLEE: com.beust.jcommander.WrappedParameter#callPut(java.lang.Object,com.beust.jcommander.Parameterized,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.Type#getElementType()
	CALLEE: static org.objectweb.asm.Type#getTypeInternal(java.lang.String,int,int)
	CALLEE: org.objectweb.asm.Type#getDimensions()
CALLER: net.onedaybeard.ecs.model.RowTypeMapping#getName()
	CALLEE: static net.onedaybeard.ecs.util.MatrixStringUtil#shortName(org.objectweb.asm.Type)
CALLER: net.onedaybeard.ecs.model.scan.ClassStore#findEcsTypes(net.onedaybeard.ecs.model.scan.ClassData)
	CALLEE: net.onedaybeard.ecs.model.scan.SurfaceTypeCollector#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#accept(org.objectweb.asm.ClassVisitor)
CALLER: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.Attribute#<init>(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])
CALLER: com.artemis.meta.MetaScanner#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#resolve(com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: org.objectweb.asm.ClassVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitSource(java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.ClassReader#readModuleAttributes(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int,int,java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readModule(int,char[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitModule(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#readPackage(int,char[])
	CALLEE: org.objectweb.asm.ClassWriter#visitModule(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ModuleWriter#visitEnd()
	CALLEE: org.objectweb.asm.ModuleWriter#visitProvide(java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ModuleWriter#visitUse(java.lang.String)
	CALLEE: org.objectweb.asm.ModuleWriter#visitOpen(java.lang.String,int,java.lang.String[])
	CALLEE: org.objectweb.asm.ModuleWriter#visitExport(java.lang.String,int,java.lang.String[])
	CALLEE: org.objectweb.asm.ModuleWriter#visitRequire(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ModuleWriter#visitPackage(java.lang.String)
	CALLEE: org.objectweb.asm.ModuleWriter#visitMainClass(java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visitNestHost(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitNestHost(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitNestHost(java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
CALLER: com.artemis.meta.MetaScanner#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.meta.MetaScanner.AnnotationReader#<init>(org.objectweb.asm.AnnotationVisitor,com.artemis.meta.ClassMetadata,com.artemis.meta.MetaScanner.1)
	CALLEE: com.artemis.meta.ProfileAnnotationReader#<init>(java.lang.String,com.artemis.meta.ClassMetadata)
CALLER: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[])
	CALLEE: org.objectweb.asm.AnnotationVisitor#visitEnd()
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnd()
CALLER: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: org.objectweb.asm.TypePath#<init>(byte[],int)
CALLER: org.objectweb.asm.ClassVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.ClassWriter#visitAttribute(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.ClassVisitor#visitNestMember(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitNestMember(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitNestMember(java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visitPermittedSubclass(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitPermittedSubclass(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitPermittedSubclass(java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassWriter#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.ClassReader#readRecordComponent(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.RecordComponentWriter#visitEnd()
	CALLEE: org.objectweb.asm.RecordComponentWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.RecordComponentWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.RecordComponentWriter#visitAnnotation(java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassReader#readField(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: net.onedaybeard.ecs.model.scan.EcsScanner#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: com.artemis.meta.MetaScanner#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.FieldVisitor#visitEnd()
	CALLEE: org.objectweb.asm.FieldVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.FieldVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: com.artemis.meta.MetaScanner.EntityIdScanVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassWriter#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.FieldWriter#visitEnd()
	CALLEE: org.objectweb.asm.FieldWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.FieldWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.FieldWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: org.objectweb.asm.ClassReader#readMethod(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readUtf(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[])
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: com.artemis.meta.MetaScanner#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassReader#readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitEnd()
	CALLEE: org.objectweb.asm.MethodVisitor#visitCode()
	CALLEE: org.objectweb.asm.MethodVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotationDefault()
	CALLEE: org.objectweb.asm.MethodVisitor#visitParameter(java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.MethodWriter#visitCode()
	CALLEE: org.objectweb.asm.MethodWriter#visitEnd()
	CALLEE: org.objectweb.asm.MethodWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotationDefault()
	CALLEE: org.objectweb.asm.MethodWriter#visitParameter(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodWriter#setMethodAttributesSource(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#canCopyMethodAttributes(org.objectweb.asm.ClassReader,boolean,boolean,int,int,int)
	CALLEE: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.pooled.PooledComponentWeaver#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnd()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitCode()
	CALLEE: com.artemis.weaver.pooled.ResetMethodVisitor#visitCode()
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.EcsScanner#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.MethodScanner#visitAnnotation(java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassVisitor#visitEnd()
	CALLEE: org.objectweb.asm.ClassVisitor#visitEnd()
	CALLEE: org.objectweb.asm.ClassWriter#visitEnd()
	CALLEE: com.artemis.weaver.profile.ProfileVisitor#visitEnd()
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#visitEnd()
CALLER: org.objectweb.asm.ClassReader#readStringish(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
CALLER: com.x5.template.TemplateSet#readAndCacheTemplate(java.lang.String,java.lang.String,java.io.BufferedReader)
	CALLEE: com.x5.template.TemplateSet#skipComment(int,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.TemplateSet#readAndCacheSubTemplate(java.lang.String,java.lang.String,java.io.BufferedReader,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#addToCache(java.lang.String,java.lang.String,java.lang.StringBuilder)
CALLER: com.x5.template.TemplateSet#getResourcePath(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#truncateNameToStub(java.lang.String)
CALLER: com.x5.template.TemplateSet#fishForTemplate(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#fishForTemplateInContext(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#peekInsideJar(java.lang.String,java.lang.String)
CALLER: com.x5.template.Chunk#renderForParentToPrinter(java.io.Writer)
	CALLEE: com.x5.template.Chunk#explodeToPrinter(java.io.Writer,java.lang.Object,int)
	CALLEE: com.x5.template.Chunk#mergeTemplateParts()
CALLER: com.x5.template.FilteredPrinter#flush()
	CALLEE: com.x5.template.FilteredPrinter#flush()
	CALLEE: com.x5.template.Chunk#explodeToPrinter(java.io.Writer,java.lang.Object,int)
	CALLEE: static com.x5.template.TextFilter#applyTextFilter(com.x5.template.Chunk,java.lang.String,java.lang.String)
CALLER: com.x5.template.Chunk#coercePrimitivesToString(java.lang.Object)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: static com.x5.util.ObjectDataMap#isWrapperType(java.lang.Class)
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
CALLER: com.beust.jcommander.Parameterized#isDynamicParameter()
	CALLEE: com.beust.jcommander.WrappedParameter#getDynamicParameter()
CALLER: com.beust.jcommander.WrappedParameter#callPut(java.lang.Object,com.beust.jcommander.Parameterized,java.lang.String,java.lang.String)
	CALLEE: com.beust.jcommander.Parameterized#get(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#getType()
	CALLEE: com.beust.jcommander.WrappedParameter#findPut(java.lang.Class)
CALLER: net.onedaybeard.ecs.model.scan.SurfaceTypeCollector#<init>(net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: org.objectweb.asm.Attribute#read(org.objectweb.asm.ClassReader,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.Attribute#<init>(java.lang.String)
CALLER: static com.artemis.weaver.optimizer.EntitySystemType#resolve(com.artemis.meta.ClassMetadata)
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#resolve(java.lang.String)
CALLER: static com.artemis.weaver.optimizer.EntitySystemType#<clinit>()
	CALLEE: com.artemis.weaver.optimizer.EntitySystemType#<init>(java.lang.String,int,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.CommonClassWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: org.objectweb.asm.ClassReader#readModule(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readStringish(int,char[])
CALLER: org.objectweb.asm.ClassVisitor#visitModule(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitModule(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitModule(java.lang.String,int,java.lang.String)
CALLER: org.objectweb.asm.ClassReader#readPackage(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readStringish(int,char[])
CALLER: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: com.artemis.weaver.CommonClassWeaver#visitAnnotation(java.lang.String,boolean)
CALLER: com.artemis.meta.MetaScanner.AnnotationReader#<init>(org.objectweb.asm.AnnotationVisitor,com.artemis.meta.ClassMetadata,com.artemis.meta.MetaScanner.1)
	CALLEE: com.artemis.meta.MetaScanner.AnnotationReader#<init>(org.objectweb.asm.AnnotationVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.meta.ProfileAnnotationReader#<init>(java.lang.String,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int)
CALLER: org.objectweb.asm.ClassReader#readElementValue(org.objectweb.asm.AnnotationVisitor,int,java.lang.String,char[])
	CALLEE: org.objectweb.asm.AnnotationVisitor#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnum(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.BindVisitor#visitArray(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.BindVisitor.BindValueVisitor#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readLong(int)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visitArray(java.lang.String)
	CALLEE: com.artemis.meta.ProfileAnnotationReader#visitArray(java.lang.String)
	CALLEE: com.artemis.meta.MetaScanner.AnnotationReader#visit(java.lang.String,java.lang.Object)
	CALLEE: com.artemis.meta.ProfileAnnotationReader#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visitAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visitEnum(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitArray(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visit(java.lang.String,java.lang.Object)
CALLER: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readLabel(int,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.ClassVisitor#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: org.objectweb.asm.ClassReader#readLong(int)
	CALLEE: static org.objectweb.asm.Type#getMethodType(java.lang.String)
	CALLEE: org.objectweb.asm.Handle#<init>(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readConstantDynamic(int,char[])
CALLER: com.artemis.meta.MetaScanner#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.artemis.meta.ClassMetadata#field(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.artemis.meta.MetaScanner.EntityIdScanVisitor#<init>(org.objectweb.asm.FieldVisitor,com.artemis.meta.FieldDescriptor,java.lang.Class)
	CALLEE: static com.artemis.meta.MetaScanner#constInstructionFor(com.artemis.meta.FieldDescriptor)
	CALLEE: com.artemis.meta.FieldDescriptor#isResettable()
	CALLEE: com.artemis.meta.FieldDescriptor#set(int,java.lang.String,java.lang.String,java.lang.Object)
CALLER: com.artemis.meta.MetaScanner#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.meta.MethodDescriptor#<init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.meta.DefaultValueScanner#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
CALLER: org.objectweb.asm.ClassReader#readParameterAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitParameterAnnotation(int,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotableParameterCount(int,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitParameterAnnotation(int,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotableParameterCount(int,boolean)
CALLER: org.objectweb.asm.ClassReader#readCode(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInsn(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: com.artemis.weaver.optimizer.SystemMethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: net.onedaybeard.ecs.model.scan.ConstructorScanner#visitLdcInsn(java.lang.Object)
	CALLEE: net.onedaybeard.ecs.model.scan.MethodScanner#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.ClassReader#readShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readAttribute(org.objectweb.asm.Attribute[],java.lang.String,int,int,char[],int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotationTarget(org.objectweb.asm.Context,int)
	CALLEE: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#createDebugLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readTypeAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#computeImplicitFrame(org.objectweb.asm.Context)
	CALLEE: org.objectweb.asm.ClassReader#getTypeAnnotationBytecodeOffset(int[],int)
	CALLEE: org.objectweb.asm.ClassReader#readStackMapFrame(int,boolean,boolean,org.objectweb.asm.Context)
	CALLEE: org.objectweb.asm.Label#accept(org.objectweb.asm.MethodVisitor,boolean)
	CALLEE: org.objectweb.asm.Label#addLineNumber(int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.meta.DefaultValueScanner#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.meta.DefaultValueScanner#visitLdcInsn(java.lang.Object)
	CALLEE: com.artemis.meta.DefaultValueScanner#visitIntInsn(int,int)
	CALLEE: com.artemis.meta.DefaultValueScanner#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: com.artemis.meta.DefaultValueScanner#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodWriter#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodWriter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodWriter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodWriter#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodWriter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLabel(org.objectweb.asm.Label)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTypeInsn(int,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
CALLER: com.x5.template.TemplateSet#readAndCacheSubTemplate(java.lang.String,java.lang.String,java.io.BufferedReader,java.lang.String)
	CALLEE: com.x5.template.TemplateSet#addToCache(java.lang.String,java.lang.String,java.lang.StringBuilder)
	CALLEE: static com.x5.template.TemplateSet#findLiteralMarker(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getLiteralLines(int,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.TemplateSet#stripComment(int,java.lang.String,java.io.BufferedReader)
	CALLEE: com.x5.template.TemplateSet#getNextTemplateLine(java.lang.String,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.EndOfSnippetException#getRestOfLine()
CALLER: com.x5.template.TemplateSet#addToCache(java.lang.String,java.lang.String,java.lang.StringBuilder)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: static com.x5.template.Snippet#makeLiteralSnippet(java.lang.String)
	CALLEE: static com.x5.template.TemplateSet#expandShorthand(java.lang.String,java.lang.StringBuilder)
	CALLEE: static com.x5.template.TemplateSet#removeBlockTagIndents(java.lang.String)
CALLER: com.x5.template.TemplateSet#fishForTemplateInContext(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#peekInsideJar(java.lang.String,java.lang.String)
CALLER: com.x5.template.Chunk#explodeToPrinter(java.io.Writer,java.lang.Object,int)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#explodeForParentToPrinter(java.io.Writer,java.util.Vector)
	CALLEE: com.x5.template.Chunk#explodeToPrinter(java.io.Writer,java.lang.Object,int)
	CALLEE: com.x5.template.Chunk#handleError(java.lang.String)
	CALLEE: com.x5.template.Snippet#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Chunk#prepareParentContext()
	CALLEE: static com.x5.util.DataCapsuleReader#getReader(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#getDataClassName()
CALLER: com.x5.template.Chunk#mergeTemplateParts()
	CALLEE: static com.x5.template.Snippet#consolidateSnippets(java.util.Vector)
CALLER: static com.x5.template.TextFilter#applyTextFilter(com.x5.template.Chunk,java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.InlineTable#parseTable(java.lang.String)
	CALLEE: static com.x5.template.Chunk#findAndReplace(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#applyTextFilter(com.x5.template.Chunk,java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#findNextFilter(java.lang.String)
	CALLEE: static com.x5.template.TextFilter#parseArgs(java.lang.String)
	CALLEE: com.x5.template.Chunk#getChunkFactory()
	CALLEE: static com.x5.template.TextFilter#joinInlineTable(com.x5.util.TableData,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#accessArrayIndex(com.x5.util.TableData,java.lang.String)
	CALLEE: com.x5.template.filters.AlternateFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.Base64DecodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.Base64EncodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.CalcFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.CheckedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.DefangFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.EscapeXMLFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.UnescapeXMLFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.ExecFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.FormatFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.HexUpperFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.IndentFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.LetterCaseFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.MD5HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.MD5Base64Filter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.OnEmptyFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.OnDefinedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.OnMatchFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.OrdinalSuffixFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.QuickCalcFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.RegexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.SelectedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.SHA1HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.SHA1Base64Filter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.TranslateFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.URLDecodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.URLEncodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.Theme#getFilters()
CALLER: static com.artemis.weaver.optimizer.EntitySystemType#resolve(java.lang.String)
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#values()
CALLER: com.artemis.meta.MetaScanner.AnnotationReader#<init>(org.objectweb.asm.AnnotationVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int,org.objectweb.asm.AnnotationVisitor)
CALLER: org.objectweb.asm.AnnotationVisitor#<init>(int)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int,org.objectweb.asm.AnnotationVisitor)
CALLER: org.objectweb.asm.ClassReader#readLong(int)
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
CALLER: org.objectweb.asm.ClassReader#readLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.Label#<init>()
CALLER: static org.objectweb.asm.Type#getMethodType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#<init>(int,java.lang.String,int,int)
CALLER: org.objectweb.asm.ClassReader#readConstantDynamic(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readConst(int,char[])
	CALLEE: org.objectweb.asm.ConstantDynamic#<init>(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
CALLER: com.artemis.meta.ClassMetadata#field(java.lang.String)
	CALLEE: com.artemis.meta.FieldDescriptor#<init>(java.lang.String)
CALLER: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassWriter#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: com.artemis.meta.MetaScanner.EntityIdScanVisitor#<init>(org.objectweb.asm.FieldVisitor,com.artemis.meta.FieldDescriptor,java.lang.Class)
	CALLEE: org.objectweb.asm.FieldVisitor#<init>(int,org.objectweb.asm.FieldVisitor)
CALLER: static com.artemis.meta.MetaScanner#constInstructionFor(com.artemis.meta.FieldDescriptor)
	CALLEE: org.objectweb.asm.tree.InsnNode#<init>(int)
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
CALLER: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.OptimizationTransmuter.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.profile.ProfileVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.2#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.3#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.5#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: com.artemis.meta.DefaultValueScanner#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: org.objectweb.asm.ClassReader#createDebugLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readLabel(int,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.ClassReader#readTypeAnnotations(org.objectweb.asm.MethodVisitor,org.objectweb.asm.Context,int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readUTF8(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#readInt(int)
	CALLEE: org.objectweb.asm.ClassReader#readElementValues(org.objectweb.asm.AnnotationVisitor,int,boolean,char[])
	CALLEE: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
	CALLEE: org.objectweb.asm.TypePath#<init>(byte[],int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.ClassReader#computeImplicitFrame(org.objectweb.asm.Context)
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
CALLER: org.objectweb.asm.ClassReader#getTypeAnnotationBytecodeOffset(int[],int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readByte(int)
CALLER: org.objectweb.asm.ClassReader#readStackMapFrame(int,boolean,boolean,org.objectweb.asm.Context)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readVerificationTypeInfo(int,java.lang.Object[],int,char[],org.objectweb.asm.Label[])
CALLER: static com.x5.template.TemplateSet#findLiteralMarker(java.lang.String)
	CALLEE: static com.x5.template.TemplateSet#findLiteralMarker(java.lang.String,int)
CALLER: com.x5.template.TemplateSet#getNextTemplateLine(java.lang.String,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.TemplateSet#readAndCacheSubTemplate(java.lang.String,java.lang.String,java.io.BufferedReader,java.lang.String)
	CALLEE: static com.x5.template.TemplateSet#findLiteralMarker(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getLiteralLines(int,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.TemplateSet#getCommentLines(int,java.lang.String,java.io.BufferedReader,java.lang.StringBuilder)
	CALLEE: com.x5.template.EndOfSnippetException#<init>(java.lang.String)
CALLER: static com.x5.template.Snippet#makeLiteralSnippet(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
	CALLEE: com.x5.template.Snippet#<init>(java.util.List)
CALLER: static com.x5.template.TemplateSet#expandShorthand(java.lang.String,java.lang.StringBuilder)
	CALLEE: static com.x5.template.TemplateSet#expandShorthandInclude(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static com.x5.template.TemplateSet#expandShorthandTag(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static com.x5.template.TemplateSet#skipLiterals(java.lang.StringBuilder,int)
	CALLEE: static com.x5.template.TemplateSet#expandShorthandMacro(java.lang.StringBuilder,java.lang.String,int)
CALLER: static com.x5.template.TemplateSet#removeBlockTagIndents(java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#applyRegex(java.lang.String,java.lang.String)
CALLER: com.x5.template.Chunk#handleError(java.lang.String)
	CALLEE: com.x5.template.Chunk#logError(java.lang.String)
CALLER: com.x5.template.Snippet#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetPart#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetToken#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetComment#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetBlockTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetError#render(java.io.Writer,com.x5.template.Chunk,int)
CALLER: static com.x5.util.DataCapsuleReader#getReader(com.x5.util.DataCapsule[])
	CALLEE: static com.x5.util.DataCapsuleReader#getReaderFromCache(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#<init>(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#getDataClassName()
CALLER: static com.x5.template.Snippet#consolidateSnippets(java.util.Vector)
	CALLEE: com.x5.template.Snippet#groupBlocks(java.util.List)
	CALLEE: com.x5.template.Snippet#<init>(java.util.List)
	CALLEE: com.x5.template.Snippet#ungroupBlocks()
CALLER: static com.x5.template.TextFilter#findNextFilter(java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextUnescapedDelim(java.lang.String,java.lang.String,int)
CALLER: static com.x5.template.TextFilter#parseArgs(java.lang.String)
	CALLEE: static com.x5.template.TextFilter#parseArgs(java.lang.String,boolean)
CALLER: static com.x5.template.TextFilter#joinInlineTable(com.x5.util.TableData,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#extractListFromTable(com.x5.util.TableData)
	CALLEE: static com.x5.template.TextFilter#joinStringList(java.util.List,java.lang.String)
CALLER: static com.x5.template.TextFilter#accessArrayIndex(com.x5.util.TableData,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#extractListFromTable(com.x5.util.TableData)
	CALLEE: static com.x5.template.TextFilter#accessArrayIndex(java.util.List,java.lang.String)
CALLER: com.x5.template.filters.AlternateFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.TextFilter#magicBraces(com.x5.template.Chunk,java.lang.String)
CALLER: com.x5.template.filters.Base64DecodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.Base64DecodeFilter#base64Decode(java.lang.String)
CALLER: com.x5.template.filters.Base64EncodeFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.Base64EncodeFilter#base64(java.lang.String)
CALLER: com.x5.template.filters.CalcFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.CalcFilter#easyCalc(java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.CheckedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SelectedFilter#checked(com.x5.template.Chunk,java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.DefangFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.DefangFilter#defang(java.lang.String)
CALLER: com.x5.template.filters.UnescapeXMLFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.util.LiteXml#unescapeXML(java.lang.String)
CALLER: com.x5.template.filters.ExecFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#append(com.x5.template.Snippet)
	CALLEE: com.x5.template.Chunk#getTemplateSet()
	CALLEE: com.x5.template.Chunk#setOrDelete(java.lang.String,java.lang.Object)
	CALLEE: com.x5.template.Chunk#toString()
CALLER: com.x5.template.filters.FormatFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: static com.x5.template.filters.FormatFilter#applyFormatString(java.lang.String,java.lang.String,com.x5.template.ChunkLocale)
CALLER: com.x5.template.filters.HexUpperFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.filters.HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.IndentFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.IndentFilter#applyIndent(java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.LetterCaseFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: com.x5.template.ChunkLocale#getJavaLocale()
CALLER: com.x5.template.filters.MD5HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.MD5HexFilter#md5Hex(java.lang.String)
CALLER: com.x5.template.filters.MD5Base64Filter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.MD5HexFilter#md5Base64(java.lang.String)
CALLER: com.x5.template.filters.OnEmptyFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.TextFilter#magicBraces(com.x5.template.Chunk,java.lang.String)
CALLER: com.x5.template.filters.OnDefinedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.TextFilter#magicBraces(com.x5.template.Chunk,java.lang.String)
CALLER: com.x5.template.filters.OnMatchFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.OnMatchFilter#applyMatchTransform(com.x5.template.Chunk,java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.OrdinalSuffixFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.OrdinalSuffixFilter#ordinalSuffix(java.lang.String)
CALLER: com.x5.template.filters.QuickCalcFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.QuickCalcFilter#applyQuickCalc(java.lang.String,java.lang.String)
CALLER: com.x5.template.filters.RegexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.RegexFilter#applyRegex(java.lang.String,java.lang.String)
CALLER: com.x5.template.filters.SelectedFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SelectedFilter#selected(com.x5.template.Chunk,java.lang.String,java.lang.String[])
CALLER: com.x5.template.filters.SHA1HexFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SHA1HexFilter#sha1Hex(java.lang.String)
CALLER: com.x5.template.filters.SHA1Base64Filter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SHA1HexFilter#sha1Base64(java.lang.String)
CALLER: com.x5.template.filters.TranslateFilter#transformText(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: com.x5.template.ChunkLocale#translate(java.lang.String,java.lang.String[],com.x5.template.Chunk)
CALLER: org.objectweb.asm.AnnotationVisitor#<init>(int,org.objectweb.asm.AnnotationVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: static org.objectweb.asm.Label#<clinit>()
	CALLEE: org.objectweb.asm.Label#<init>()
CALLER: org.objectweb.asm.FieldVisitor#<init>(int,org.objectweb.asm.FieldVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: org.objectweb.asm.tree.InsnNode#<init>(int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#<init>(int)
CALLER: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: org.objectweb.asm.ClassReader#readVerificationTypeInfo(int,java.lang.Object[],int,char[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.ClassReader#readClass(int,char[])
	CALLEE: org.objectweb.asm.ClassReader#createLabel(int,org.objectweb.asm.Label[])
CALLER: static com.x5.template.TemplateSet#expandShorthandInclude(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static com.x5.template.TemplateSet#nextUnescapedDelim(java.lang.String,java.lang.StringBuilder,int)
CALLER: static com.x5.template.TemplateSet#expandShorthandTag(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static com.x5.template.TemplateSet#nextUnescapedDelim(java.lang.String,java.lang.StringBuilder,int)
	CALLEE: static com.x5.template.TemplateSet#expandFnArgs(java.lang.StringBuilder,java.lang.String,int,java.lang.String,int)
CALLER: com.x5.template.Chunk#logError(java.lang.String)
	CALLEE: static com.x5.template.Chunk#logChunkError(java.io.PrintStream,java.lang.String)
CALLER: com.x5.template.SnippetToken#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Snippet#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#translate(java.lang.String,java.lang.String[],com.x5.template.Chunk)
CALLER: com.x5.template.SnippetTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#explodeToPrinter(java.io.Writer,java.lang.Object,int)
	CALLEE: com.x5.template.Snippet#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetPart#depthCheckFails(int,java.io.Writer)
	CALLEE: com.x5.template.SnippetTag#init(java.lang.String)
	CALLEE: com.x5.template.Chunk#resolveTagValue(com.x5.template.SnippetTag,int)
CALLER: com.x5.template.SnippetBlockTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetPart#depthCheckFails(int,java.io.Writer)
	CALLEE: com.x5.template.LoopTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.IfTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.LocaleTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.MacroTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
CALLER: com.x5.template.SnippetError#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Chunk#renderErrorsToOutput()
CALLER: com.x5.util.DataCapsuleReader#<init>(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#extractLegend(com.x5.util.DataCapsule[])
CALLER: static com.x5.template.TextFilter#parseArgs(java.lang.String,boolean)
	CALLEE: static com.x5.template.TextFilter#parseCommaDelimitedArgs(java.lang.String)
CALLER: static com.x5.template.TextFilter#extractListFromTable(com.x5.util.TableData)
	CALLEE: com.x5.template.SimpleTable#hasNext()
	CALLEE: com.x5.template.SimpleTable#nextRecord()
	CALLEE: com.x5.template.SimpleTable#getRow()
CALLER: static com.x5.template.TextFilter#joinStringList(java.util.List,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#parseArgs(java.lang.String,boolean)
CALLER: static com.x5.template.TextFilter#accessArrayIndex(java.util.List,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#parseArgs(java.lang.String,boolean)
CALLER: static com.x5.template.TextFilter#magicBraces(com.x5.template.Chunk,java.lang.String)
	CALLEE: com.x5.template.Chunk#makeTag(java.lang.String)
CALLER: static com.x5.template.filters.Base64EncodeFilter#base64(java.lang.String)
	CALLEE: static com.x5.template.filters.Base64EncodeFilter#base64(byte[])
CALLER: static com.x5.template.filters.CalcFilter#easyCalc(java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.Calc#evalExpression(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])
CALLER: static com.x5.template.filters.SelectedFilter#checked(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SelectedFilter#selected(com.x5.template.Chunk,java.lang.String,java.lang.String[],java.lang.String)
CALLER: com.x5.template.Chunk#setOrDelete(java.lang.String,java.lang.Object)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
	CALLEE: com.x5.template.Chunk#containsKey(java.lang.Object)
CALLER: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#render(java.io.Writer)
CALLER: com.x5.template.Chunk#getLocale()
	CALLEE: static com.x5.template.ChunkLocale#getInstance(java.lang.String,com.x5.template.Chunk)
CALLER: static com.x5.template.filters.FormatFilter#applyFormatString(java.lang.String,java.lang.String,com.x5.template.ChunkLocale)
	CALLEE: static com.x5.template.filters.FormatFilter#formatNumberFromString(java.lang.String,java.lang.String,com.x5.template.ChunkLocale)
CALLER: static com.x5.template.filters.MD5HexFilter#md5Hex(java.lang.String)
	CALLEE: static com.x5.template.filters.MD5HexFilter#md5(java.lang.String,boolean)
CALLER: static com.x5.template.filters.MD5HexFilter#md5Base64(java.lang.String)
	CALLEE: static com.x5.template.filters.MD5HexFilter#md5(java.lang.String,boolean)
CALLER: static com.x5.template.filters.OnMatchFilter#applyMatchTransform(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.TextFilter#magicBraces(com.x5.template.Chunk,java.lang.String)
CALLER: static com.x5.template.filters.SelectedFilter#selected(com.x5.template.Chunk,java.lang.String,java.lang.String[])
	CALLEE: static com.x5.template.filters.SelectedFilter#selected(com.x5.template.Chunk,java.lang.String,java.lang.String[],java.lang.String)
CALLER: static com.x5.template.filters.SHA1HexFilter#sha1Hex(java.lang.String)
	CALLEE: static com.x5.template.filters.SHA1HexFilter#sha1(java.lang.String,boolean)
CALLER: static com.x5.template.filters.SHA1HexFilter#sha1Base64(java.lang.String)
	CALLEE: static com.x5.template.filters.SHA1HexFilter#sha1(java.lang.String,boolean)
CALLER: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk)
	CALLEE: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk,java.util.HashMap)
CALLER: com.x5.template.SnippetTag#init(java.lang.String)
	CALLEE: com.x5.template.SnippetTag#confirmPipe(java.lang.String,int)
	CALLEE: com.x5.template.SnippetTag#parseTagTokens(java.lang.String,int,int)
	CALLEE: com.x5.template.SnippetTag#parsePath(java.lang.String)
CALLER: com.x5.template.Chunk#resolveTagValue(com.x5.template.SnippetTag,int)
	CALLEE: com.x5.template.Chunk#_resolveTagValue(com.x5.template.SnippetTag,int,boolean)
CALLER: com.x5.template.LoopTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.LoopTag#fetchData(java.lang.String)
	CALLEE: com.x5.template.LoopTag#cookLoopToPrinter(java.io.Writer,com.x5.template.Chunk,boolean,int,com.x5.util.TableData)
CALLER: com.x5.template.IfTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Snippet#getParts()
	CALLEE: com.x5.template.IfTag#parseCond(java.lang.String)
	CALLEE: com.x5.template.SnippetTag#getTag()
	CALLEE: com.x5.template.IfTag#nextElseTag(java.util.List,int)
	CALLEE: com.x5.template.IfTag#isTrueExpr(java.lang.String,com.x5.template.Chunk)
	CALLEE: com.x5.template.IfTag#renderChosenParts(java.io.Writer,com.x5.template.Chunk,int,java.util.List,int,int)
CALLER: com.x5.template.LocaleTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.LocaleTag#_translate()
CALLER: com.x5.template.MacroTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Theme#makeChunk(java.lang.String)
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Chunk#append(com.x5.template.Snippet)
	CALLEE: com.x5.template.Chunk#getChunkFactory()
	CALLEE: com.x5.template.Chunk#logError(java.lang.String)
	CALLEE: com.x5.template.Chunk#renderErrorsToOutput()
	CALLEE: com.x5.template.Theme#makeChunk()
	CALLEE: com.x5.template.Chunk#setMultiple(java.util.Map)
	CALLEE: com.x5.template.Chunk#render(java.io.Writer,com.x5.template.Chunk)
CALLER: com.x5.util.DataCapsuleReader#extractLegend(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#extractLegend(com.x5.util.DataCapsule)
CALLER: static com.x5.template.TextFilter#parseCommaDelimitedArgs(java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextUnescapedDelim(java.lang.String,java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextArgDelim(java.lang.String,int)
CALLER: static com.x5.template.filters.SelectedFilter#selected(com.x5.template.Chunk,java.lang.String,java.lang.String[],java.lang.String)
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
CALLER: com.x5.template.Chunk#containsKey(java.lang.Object)
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: static com.x5.template.ChunkLocale#getInstance(java.lang.String,com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#<init>(java.lang.String,com.x5.template.Chunk)
CALLER: static com.x5.template.filters.FormatFilter#formatNumberFromString(java.lang.String,java.lang.String,com.x5.template.ChunkLocale)
	CALLEE: static com.x5.template.filters.FormatFilter#getJavaLocale(com.x5.template.ChunkLocale)
CALLER: static com.x5.template.filters.MD5HexFilter#md5(java.lang.String,boolean)
	CALLEE: static com.x5.template.filters.MD5HexFilter#hashCrypt(java.lang.String,java.lang.String,boolean)
CALLER: static com.x5.template.filters.SHA1HexFilter#sha1(java.lang.String,boolean)
	CALLEE: static com.x5.template.filters.MD5HexFilter#hashCrypt(java.lang.String,java.lang.String,boolean)
CALLER: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk,java.util.HashMap)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
CALLER: com.x5.template.SnippetTag#confirmPipe(java.lang.String,int)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
CALLER: com.x5.template.SnippetTag#parseTagTokens(java.lang.String,int,int)
	CALLEE: static com.x5.template.TextFilter#grokFinalFilterPipe(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#grokValidColonScanPoint(java.lang.String,int)
CALLER: com.x5.template.Chunk#_resolveTagValue(com.x5.template.SnippetTag,int,boolean)
	CALLEE: com.x5.template.Chunk#_resolveTagValue(com.x5.template.SnippetTag,int,boolean)
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.SimpleTable#get(java.lang.Object)
	CALLEE: com.x5.template.ObjectTable#get(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#get(java.lang.Object)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
	CALLEE: com.x5.template.Chunk#coercePrimitivesToString(java.lang.Object)
	CALLEE: static com.x5.template.TextFilter#applyTextFilter(com.x5.template.Chunk,java.lang.String,java.lang.String)
	CALLEE: com.x5.template.SnippetTag#getPath()
	CALLEE: com.x5.template.Chunk#resolveBackticks(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#altFetch(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#hasValue(java.lang.String)
	CALLEE: com.x5.template.Chunk#getTagValue(java.lang.String)
	CALLEE: com.x5.template.Chunk#getCurrentParentContext()
	CALLEE: com.x5.template.SnippetTag#getFilters()
	CALLEE: com.x5.template.SnippetTag#getDefaultValue()
	CALLEE: com.x5.template.SnippetTag#applyFiltersFirst()
	CALLEE: com.x5.template.Chunk#makeChildChunk()
	CALLEE: static com.x5.template.TextFilter#splitFilters(java.lang.String)
	CALLEE: com.x5.template.Chunk#makeFilterOnion(java.lang.Object,com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#append(java.lang.String)
CALLER: com.x5.template.LoopTag#cookLoopToPrinter(java.io.Writer,com.x5.template.Chunk,boolean,int,com.x5.util.TableData)
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#append(com.x5.template.Snippet)
	CALLEE: com.x5.template.Chunk#setLocale(java.lang.String)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object)
	CALLEE: com.x5.template.Chunk#set(java.lang.String,int)
	CALLEE: com.x5.template.Snippet#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Chunk#getChunkFactory()
	CALLEE: com.x5.template.Chunk#logError(java.lang.String)
	CALLEE: com.x5.template.Chunk#getTemplateSet()
	CALLEE: com.x5.template.Chunk#setOrDelete(java.lang.String,java.lang.Object)
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: com.x5.template.Chunk#renderErrorsToOutput()
	CALLEE: com.x5.template.SimpleTable#hasNext()
	CALLEE: com.x5.template.SimpleTable#nextRecord()
	CALLEE: com.x5.template.Theme#makeChunk()
	CALLEE: com.x5.template.Chunk#render(java.io.Writer,com.x5.template.Chunk)
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.TableOfMaps#hasNext()
	CALLEE: com.x5.template.ObjectTable#hasNext()
	CALLEE: com.x5.util.DataCapsuleTable#hasNext()
	CALLEE: com.x5.template.Theme#provides(java.lang.String)
	CALLEE: com.x5.template.LoopTag#eatTagSymbol(java.lang.String)
	CALLEE: com.x5.template.SimpleTable#getColumnLabels()
	CALLEE: com.x5.template.TableOfMaps#getColumnLabels()
	CALLEE: com.x5.template.ObjectTable#getColumnLabels()
	CALLEE: com.x5.util.DataCapsuleTable#getColumnLabels()
	CALLEE: com.x5.template.TableOfMaps#nextRecord()
	CALLEE: com.x5.template.ObjectTable#nextRecord()
	CALLEE: com.x5.util.DataCapsuleTable#nextRecord()
	CALLEE: com.x5.template.SimpleTable#get(java.lang.Object)
	CALLEE: com.x5.template.SimpleTable#keySet()
	CALLEE: com.x5.template.Chunk#unset(java.lang.String)
	CALLEE: com.x5.template.SimpleTable#reset()
	CALLEE: com.x5.template.TableOfMaps#reset()
	CALLEE: com.x5.template.ObjectTable#reset()
	CALLEE: com.x5.util.DataCapsuleTable#reset()
	CALLEE: com.x5.template.Chunk#resetTags()
	CALLEE: com.x5.template.ObjectTable#get(java.lang.Object)
	CALLEE: com.x5.template.ObjectTable#keySet()
	CALLEE: com.x5.util.ObjectDataMap#get(java.lang.Object)
	CALLEE: com.x5.template.Chunk#keySet()
	CALLEE: com.x5.util.ObjectDataMap#keySet()
CALLER: com.x5.template.IfTag#nextElseTag(java.util.List,int)
	CALLEE: com.x5.template.SnippetTag#getTag()
CALLER: com.x5.template.IfTag#isTrueExpr(java.lang.String,com.x5.template.Chunk)
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.IfTag#unescape(java.lang.String)
	CALLEE: com.x5.template.IfTag#isMatch(java.lang.String,java.lang.String)
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
CALLER: com.x5.template.IfTag#renderChosenParts(java.io.Writer,com.x5.template.Chunk,int,java.util.List,int,int)
	CALLEE: com.x5.template.SnippetPart#getText()
	CALLEE: com.x5.template.SnippetPart#isLiteral()
	CALLEE: com.x5.template.SnippetPart#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetToken#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetComment#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetBlockTag#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.SnippetError#render(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.IfTag#isTrimAll()
	CALLEE: com.x5.template.IfTag#trimLeft(java.lang.String)
	CALLEE: com.x5.template.IfTag#trimRight(java.lang.String)
	CALLEE: com.x5.template.IfTag#smartTrim(java.lang.String)
CALLER: com.x5.template.LocaleTag#_translate()
	CALLEE: com.x5.template.Chunk#getLocale()
	CALLEE: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#translate(java.lang.String,java.lang.String[],com.x5.template.Chunk)
CALLER: com.x5.template.Theme#makeChunk()
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Chunk#setMacroLibrary(com.x5.template.ContentSource,com.x5.template.ChunkFactory)
	CALLEE: com.x5.template.Theme#shareContentSources(com.x5.template.Chunk)
	CALLEE: com.x5.template.Chunk#setLocale(java.lang.String)
	CALLEE: com.x5.template.Chunk#setErrorHandling(boolean,java.io.PrintStream)
CALLER: com.x5.template.Chunk#setMultiple(java.util.Map)
	CALLEE: com.x5.template.Chunk#setOrDelete(java.lang.String,java.lang.Object)
CALLER: com.x5.template.Chunk#render(java.io.Writer,com.x5.template.Chunk)
	CALLEE: com.x5.template.Chunk#explodeForParentToPrinter(java.io.Writer,java.util.Vector)
	CALLEE: com.x5.template.Chunk#prepareParentContext()
CALLER: com.x5.util.DataCapsuleReader#extractLegend(com.x5.util.DataCapsule)
	CALLEE: com.x5.util.DataCapsuleReader#parseExportMap(int,java.lang.String,java.lang.String)
CALLER: static com.x5.template.TextFilter#nextArgDelim(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextUnescapedDelim(java.lang.String,java.lang.String,int)
CALLER: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.Chunk#resolveTagValue(java.lang.String,int)
CALLER: com.x5.template.ChunkLocale#<init>(java.lang.String,com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#loadTranslations(com.x5.template.Chunk)
CALLER: static com.x5.template.filters.FormatFilter#getJavaLocale(com.x5.template.ChunkLocale)
	CALLEE: com.x5.template.ChunkLocale#getJavaLocale()
CALLER: static com.x5.template.filters.MD5HexFilter#hashCrypt(java.lang.String,java.lang.String,boolean)
	CALLEE: static com.x5.template.filters.Base64EncodeFilter#base64(byte[])
CALLER: static com.x5.template.TextFilter#grokFinalFilterPipe(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#findNextFilter(java.lang.String)
CALLER: static com.x5.template.TextFilter#grokValidColonScanPoint(java.lang.String,int)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
	CALLEE: static com.x5.template.TextFilter#nextUnescapedDelim(java.lang.String,java.lang.String,int)
CALLER: com.x5.template.Chunk#resolveBackticks(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#resolveBackticks(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#resolveTagValue(java.lang.String,int)
CALLER: com.x5.template.Chunk#altFetch(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#altFetch(java.lang.String,int,boolean)
CALLER: com.x5.template.Chunk#getTagValue(java.lang.String)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.Snippet#isSimple()
CALLER: com.x5.template.Chunk#makeChildChunk()
	CALLEE: com.x5.template.Chunk#<init>()
	CALLEE: com.x5.template.Chunk#setLocale(java.lang.String)
	CALLEE: com.x5.template.Theme#makeChunk()
CALLER: static com.x5.template.TextFilter#splitFilters(java.lang.String)
	CALLEE: static com.x5.template.TextFilter#findNextFilter(java.lang.String)
CALLER: com.x5.template.Chunk#makeFilterOnion(java.lang.Object,com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.TextFilter#typeFilter(com.x5.template.Chunk,java.lang.Object)
	CALLEE: com.x5.template.Chunk#wrapRemainingFilters(com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#makeFilterOnion(java.lang.String[],com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#stringifyList(java.util.List)
CALLER: com.x5.template.ObjectTable#hasNext()
	CALLEE: com.x5.template.ObjectTable#getOrderedKeys()
CALLER: com.x5.template.Theme#provides(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#provides(java.lang.String)
CALLER: com.x5.util.DataCapsuleTable#getColumnLabels()
	CALLEE: com.x5.util.DataCapsuleTable#getReader()
	CALLEE: com.x5.util.DataCapsuleReader#getColumnLabels()
CALLER: com.x5.template.ObjectTable#nextRecord()
	CALLEE: com.x5.template.ObjectTable#hasNext()
CALLER: com.x5.util.DataCapsuleTable#nextRecord()
	CALLEE: com.x5.util.DataCapsuleTable#getColumnLabels()
	CALLEE: com.x5.util.DataCapsuleTable#getRow()
CALLER: com.x5.template.SimpleTable#get(java.lang.Object)
	CALLEE: com.x5.template.SimpleTable#getRow()
	CALLEE: com.x5.template.SimpleTable#indexColumns()
CALLER: com.x5.template.SimpleTable#keySet()
	CALLEE: com.x5.template.SimpleTable#indexColumns()
CALLER: com.x5.template.Chunk#unset(java.lang.String)
	CALLEE: com.x5.template.Chunk#setOrDelete(java.lang.String,java.lang.Object)
CALLER: com.x5.template.ObjectTable#reset()
	CALLEE: com.x5.template.ObjectTable#getOrderedKeys()
CALLER: com.x5.template.IfTag#unescape(java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#parseRegexEscapes(java.lang.String)
CALLER: com.x5.template.IfTag#isMatch(java.lang.String,java.lang.String)
	CALLEE: static com.x5.template.filters.RegexFilter#nextRegexDelim(java.lang.String,int)
CALLER: com.x5.template.IfTag#smartTrim(java.lang.String)
	CALLEE: com.x5.template.IfTag#smartTrim(java.lang.String,boolean)
CALLER: com.x5.util.DataCapsuleReader#parseExportMap(int,java.lang.String,java.lang.String)
	CALLEE: static com.x5.util.DataCapsuleReader#transmogrify(java.lang.String)
CALLER: com.x5.template.Chunk#resolveTagValue(java.lang.String,int)
	CALLEE: com.x5.template.Chunk#_resolveTagValue(com.x5.template.SnippetTag,int,boolean)
	CALLEE: static com.x5.template.SnippetTag#parseTag(java.lang.String)
CALLER: com.x5.template.ChunkLocale#loadTranslations(com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#locateLocaleDB(com.x5.template.Chunk)
	CALLEE: com.x5.template.ChunkLocale#grokLocaleDBCharset()
	CALLEE: com.csvreader.CsvReader#<init>(java.io.InputStream,java.nio.charset.Charset)
	CALLEE: com.csvreader.CsvReader#setUseComments(boolean)
	CALLEE: com.csvreader.CsvReader#readRecord()
	CALLEE: com.csvreader.CsvReader#getValues()
CALLER: com.x5.template.Chunk#altFetch(java.lang.String,int,boolean)
	CALLEE: com.x5.template.Chunk#altFetch(java.lang.String,int,boolean)
	CALLEE: com.x5.template.TemplateSet#fetch(java.lang.String)
	CALLEE: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Theme#getProtocol()
	CALLEE: com.x5.template.Chunk#handleError(java.lang.String)
	CALLEE: com.x5.template.Chunk#getCurrentParentContext()
	CALLEE: static com.x5.template.filters.Calc#evalCalc(java.lang.String,java.util.Map)
	CALLEE: static com.x5.template.LoopTag#expandLoop(java.lang.String,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.Chunk#formatTagStack(java.lang.String)
	CALLEE: static com.x5.template.TextFilter#translateIncludeIf(java.lang.String,java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.x5.template.Theme#fetch(java.lang.String)
CALLER: static com.x5.template.TextFilter#typeFilter(com.x5.template.Chunk,java.lang.Object)
	CALLEE: static com.x5.template.TextFilter#_typeFilter(com.x5.template.Chunk,java.lang.Object,int)
CALLER: com.x5.template.Chunk#wrapRemainingFilters(com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.Object,java.lang.String)
	CALLEE: com.x5.template.Chunk#makeChildChunk()
	CALLEE: com.x5.template.Chunk#append(java.lang.String)
CALLER: com.x5.template.Chunk#makeFilterOnion(java.lang.String[],com.x5.template.Chunk,java.lang.String[])
	CALLEE: com.x5.template.Chunk#set(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.Chunk#wrapRemainingFilters(com.x5.template.Chunk,java.lang.String[])
	CALLEE: static com.x5.template.TextFilter#joinStringArray(java.lang.String[],java.lang.String)
	CALLEE: static com.x5.template.TextFilter#accessArrayIndex(java.lang.String[],java.lang.String)
CALLER: com.x5.template.Chunk#stringifyList(java.util.List)
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
CALLER: com.x5.template.ObjectTable#getOrderedKeys()
	CALLEE: com.x5.template.SimpleTable#keySet()
	CALLEE: com.x5.template.ObjectTable#keySet()
	CALLEE: com.x5.template.Chunk#keySet()
	CALLEE: com.x5.util.ObjectDataMap#keySet()
CALLER: com.x5.util.DataCapsuleTable#getReader()
	CALLEE: static com.x5.util.DataCapsuleReader#getReader(com.x5.util.DataCapsule)
CALLER: com.x5.util.DataCapsuleTable#getRow()
	CALLEE: com.x5.util.DataCapsuleTable#getRowRaw()
CALLER: com.x5.template.IfTag#smartTrim(java.lang.String,boolean)
	CALLEE: com.x5.template.IfTag#isTrimAll()
CALLER: static com.x5.util.DataCapsuleReader#transmogrify(java.lang.String)
	CALLEE: static com.x5.util.ObjectDataMap#splitCamelCase(java.lang.String)
CALLER: static com.x5.template.SnippetTag#parseTag(java.lang.String)
	CALLEE: com.x5.template.SnippetTag#<init>(java.lang.String,java.lang.String)
	CALLEE: com.x5.template.SnippetTag#init(java.lang.String)
CALLER: com.x5.template.ChunkLocale#locateLocaleDB(com.x5.template.Chunk)
	CALLEE: static com.x5.template.TemplateSet#grokCallerClass()
	CALLEE: com.x5.template.ChunkLocale#peekInsideJar(java.lang.String,java.lang.String)
CALLER: com.csvreader.CsvReader#<init>(java.io.InputStream,java.nio.charset.Charset)
	CALLEE: com.csvreader.CsvReader#<init>(java.io.Reader)
CALLER: com.csvreader.CsvReader#readRecord()
	CALLEE: com.csvreader.CsvReader#checkClosed()
	CALLEE: com.csvreader.CsvReader#checkDataLength()
	CALLEE: com.csvreader.CsvReader#endColumn()
	CALLEE: com.csvreader.CsvReader#endRecord()
	CALLEE: static com.csvreader.CsvReader#hexToDec(char)
	CALLEE: com.csvreader.CsvReader#appendLetter(char)
	CALLEE: com.csvreader.CsvReader#updateCurrentValue()
	CALLEE: com.csvreader.CsvReader#close()
	CALLEE: com.csvreader.CsvReader#skipLine()
CALLER: com.csvreader.CsvReader#getValues()
	CALLEE: com.csvreader.CsvReader#checkClosed()
CALLER: static com.x5.template.filters.Calc#evalCalc(java.lang.String,java.util.Map)
	CALLEE: static com.x5.template.filters.Calc#evalExpression(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])
	CALLEE: static com.x5.template.filters.Calc#parseVarNames(java.lang.String)
	CALLEE: static com.x5.template.filters.Calc#grokVarValues(java.lang.String,java.util.Map)
CALLER: static com.x5.template.LoopTag#expandLoop(java.lang.String,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.LoopTag#renderBlock(java.io.Writer,com.x5.template.Chunk,int)
	CALLEE: com.x5.template.LoopTag#<init>(java.lang.String,com.x5.template.Chunk)
CALLER: com.x5.template.Chunk#formatTagStack(java.lang.String)
	CALLEE: com.x5.template.Chunk#getCurrentParentContext()
	CALLEE: com.x5.template.Chunk#outputTags(java.lang.StringBuilder,java.lang.String,java.lang.String,int)
CALLER: static com.x5.template.TextFilter#translateIncludeIf(java.lang.String,java.lang.String,java.lang.String,java.util.Map)
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: static com.x5.template.filters.RegexFilter#escapeRegex(java.lang.String)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
CALLER: com.x5.template.Theme#fetch(java.lang.String)
	CALLEE: com.x5.template.Theme#getThemeLayers()
	CALLEE: com.x5.template.TemplateSet#provides(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#fetch(java.lang.String)
CALLER: static com.x5.template.TextFilter#_typeFilter(com.x5.template.Chunk,java.lang.Object,int)
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: static com.x5.template.TextFilter#_typeFilter(com.x5.template.Chunk,java.lang.Object,int)
	CALLEE: static com.x5.template.TextFilter#isInlineTable(java.lang.String)
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.x5.template.Snippet#getPointer()
	CALLEE: com.x5.template.Snippet#isSimplePointer()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
CALLER: com.x5.template.Chunk#append(java.lang.String)
	CALLEE: com.x5.template.Chunk#append(com.x5.template.Snippet)
	CALLEE: static com.x5.template.Snippet#getSnippet(java.lang.String)
CALLER: static com.x5.template.TextFilter#joinStringArray(java.lang.String[],java.lang.String)
	CALLEE: static com.x5.template.TextFilter#joinStringList(java.util.List,java.lang.String)
CALLER: static com.x5.template.TextFilter#accessArrayIndex(java.lang.String[],java.lang.String)
	CALLEE: static com.x5.template.TextFilter#accessArrayIndex(java.util.List,java.lang.String)
CALLER: static com.x5.util.DataCapsuleReader#getReader(com.x5.util.DataCapsule)
	CALLEE: com.x5.util.DataCapsuleReader#<init>(com.x5.util.DataCapsule[])
	CALLEE: com.x5.util.DataCapsuleReader#getDataClassName()
	CALLEE: static com.x5.util.DataCapsuleReader#getReaderFromCache(com.x5.util.DataCapsule)
CALLER: com.x5.util.DataCapsuleTable#getRowRaw()
	CALLEE: com.x5.util.DataCapsuleTable#getReader()
	CALLEE: com.x5.util.DataCapsuleReader#extractData(com.x5.util.DataCapsule)
CALLER: com.csvreader.CsvReader#finalize()
	CALLEE: com.csvreader.CsvReader#close(boolean)
CALLER: com.csvreader.CsvReader#<init>(java.io.Reader)
	CALLEE: com.csvreader.CsvReader#<init>(java.io.Reader,char)
CALLER: com.csvreader.CsvReader#checkDataLength()
	CALLEE: com.csvreader.CsvReader#updateCurrentValue()
	CALLEE: com.csvreader.CsvReader#close()
CALLER: com.csvreader.CsvReader#endColumn()
	CALLEE: com.csvreader.CsvReader#updateCurrentValue()
	CALLEE: com.csvreader.CsvReader#close()
CALLER: com.csvreader.CsvReader#close()
	CALLEE: com.csvreader.CsvReader#close(boolean)
CALLER: com.csvreader.CsvReader#skipLine()
	CALLEE: com.csvreader.CsvReader#checkClosed()
	CALLEE: com.csvreader.CsvReader#checkDataLength()
CALLER: static com.x5.template.filters.Calc#parseVarNames(java.lang.String)
	CALLEE: static com.x5.template.filters.Calc#isLegalNameChar(char)
CALLER: static com.x5.template.filters.Calc#grokVarValues(java.lang.String,java.util.Map)
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
CALLER: com.x5.template.LoopTag#<init>(java.lang.String,com.x5.template.Chunk)
	CALLEE: com.x5.template.BlockTag#<init>()
	CALLEE: com.x5.template.LoopTag#parseParams(java.lang.String)
	CALLEE: com.x5.template.LoopTag#initWithoutBlock()
CALLER: com.x5.template.TemplateSet#fetch(java.lang.String)
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.x5.template.TemplateSet#getCleanTemplate(java.lang.String)
CALLER: static com.x5.template.TextFilter#isInlineTable(java.lang.String)
	CALLEE: static com.x5.template.InlineTable#parseTable(java.lang.String)
CALLER: com.csvreader.CsvReader#<init>(java.io.Reader,char)
	CALLEE: com.csvreader.CsvReader.UserSettings#<init>(com.csvreader.CsvReader)
	CALLEE: com.csvreader.CsvReader.DataBuffer#<init>(com.csvreader.CsvReader)
	CALLEE: com.csvreader.CsvReader.ColumnBuffer#<init>(com.csvreader.CsvReader)
	CALLEE: com.csvreader.CsvReader.RawRecordBuffer#<init>(com.csvreader.CsvReader)
	CALLEE: com.csvreader.CsvReader.HeadersHolder#<init>(com.csvreader.CsvReader)
CALLER: com.x5.template.LoopTag#initWithoutBlock()
	CALLEE: com.x5.template.Theme#getSnippet(java.lang.String)
	CALLEE: com.x5.template.Chunk#getTemplateSet()
CALLER: com.x5.template.TemplateSet#getCleanTemplate(java.lang.String)
	CALLEE: com.x5.template.TemplateSet#getSnippet(java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.Label#accept(org.objectweb.asm.MethodVisitor,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLabel(org.objectweb.asm.Label)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitLineNumber(int,org.objectweb.asm.Label)
CALLER: org.objectweb.asm.MethodVisitor#visitEnd()
	CALLEE: org.objectweb.asm.MethodVisitor#visitEnd()
	CALLEE: org.objectweb.asm.MethodWriter#visitEnd()
CALLER: org.objectweb.asm.MethodVisitor#visitCode()
	CALLEE: org.objectweb.asm.MethodVisitor#visitCode()
	CALLEE: org.objectweb.asm.MethodWriter#visitCode()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitCode()
CALLER: org.objectweb.asm.MethodVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodWriter#visitAttribute(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.MethodVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotation(java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitAnnotationDefault()
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotationDefault()
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotationDefault()
CALLER: org.objectweb.asm.MethodVisitor#visitParameter(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitParameter(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitParameter(java.lang.String,int)
CALLER: org.objectweb.asm.MethodVisitor#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitMaxs(int,int)
CALLER: org.objectweb.asm.MethodVisitor#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
CALLER: org.objectweb.asm.MethodVisitor#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLabel(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.MethodVisitor#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMultiANewArrayInsn(java.lang.String,int)
CALLER: org.objectweb.asm.MethodVisitor#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitIincInsn(int,int)
CALLER: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTypeInsn(int,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitTypeInsn(int,java.lang.String)
CALLER: org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodWriter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
CALLER: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: net.onedaybeard.ecs.model.scan.ConstructorScanner#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: com.artemis.meta.DefaultValueScanner#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.meta.ClassMetadata#field(java.lang.String)
	CALLEE: com.artemis.meta.FieldDescriptor#isResettable()
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: com.artemis.meta.DefaultValueScanner#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.tree.LdcInsnNode#<init>(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
CALLER: com.artemis.meta.DefaultValueScanner#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.tree.IntInsnNode#<init>(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
CALLER: com.artemis.meta.DefaultValueScanner#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.tree.VarInsnNode#<init>(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
CALLER: org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodWriter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.MethodVisitor#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodWriter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.MethodVisitor#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitJumpInsn(int,org.objectweb.asm.Label)
CALLER: com.artemis.meta.DefaultValueScanner#visitInsn(int)
	CALLEE: org.objectweb.asm.tree.InsnNode#<init>(int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
CALLER: org.objectweb.asm.MethodVisitor#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodWriter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
CALLER: org.objectweb.asm.MethodVisitor#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
CALLER: org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitParameterAnnotation(int,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitParameterAnnotation(int,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitParameterAnnotation(int,java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitAnnotableParameterCount(int,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotableParameterCount(int,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitAnnotableParameterCount(int,boolean)
CALLER: org.objectweb.asm.FieldVisitor#visitEnd()
	CALLEE: org.objectweb.asm.FieldWriter#visitEnd()
CALLER: org.objectweb.asm.FieldVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.FieldWriter#visitAttribute(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.FieldVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.FieldWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: com.artemis.meta.MetaScanner.EntityIdScanVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.FieldVisitor#visitAnnotation(java.lang.String,boolean)
CALLER: org.objectweb.asm.AnnotationVisitor#visitEnd()
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnd()
CALLER: org.objectweb.asm.AnnotationVisitor#visitArray(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitArray(java.lang.String)
CALLER: com.artemis.meta.ProfileAnnotationReader#visitArray(java.lang.String)
	CALLEE: com.artemis.meta.ProfileAnnotationReader#<init>(java.lang.String,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.meta.MetaScanner.AnnotationReader#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visit(java.lang.String,java.lang.Object)
CALLER: com.artemis.meta.ProfileAnnotationReader#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visit(java.lang.String,java.lang.Object)
CALLER: org.objectweb.asm.AnnotationVisitor#visitAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitAnnotation(java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.AnnotationVisitor#visitEnum(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnum(java.lang.String,java.lang.String,java.lang.String)
CALLER: com.x5.template.ObjectTable#get(java.lang.Object)
	CALLEE: com.beust.jcommander.StringKey#equals(java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander.ProgramName#equals(java.lang.Object)
	CALLEE: org.objectweb.asm.Type#equals(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#equals(java.lang.Object)
	CALLEE: com.x5.template.Chunk#get(java.lang.Object)
	CALLEE: com.x5.template.SimpleTable#get(java.lang.Object)
	CALLEE: com.x5.template.ObjectTable#get(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#get(java.lang.Object)
	CALLEE: com.x5.template.Chunk#equals(java.lang.Object)
CALLER: com.x5.util.ObjectDataMap#get(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#init()
CALLER: com.x5.template.Chunk#keySet()
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: com.x5.util.ObjectDataMap#keySet()
	CALLEE: com.x5.util.ObjectDataMap#init()
CALLER: net.minidev.json.JSONArray#toString()
	CALLEE: net.minidev.json.JSONArray#toJSONString()
CALLER: com.x5.util.DataCapsuleReader#extractData(com.x5.util.DataCapsule)
	CALLEE: com.x5.util.DataCapsuleReader#grokMethods(com.x5.util.DataCapsule)
CALLER: com.x5.template.Snippet#getPointer()
	CALLEE: com.x5.template.SnippetTag#getTag()
	CALLEE: com.x5.template.Snippet#isSimplePointer()
CALLER: com.x5.template.Chunk#hashCode()
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: com.x5.template.Snippet#ungroupBlocks()
	CALLEE: com.x5.template.SnippetPart#<init>(java.lang.String)
	CALLEE: com.x5.template.SnippetPart#setLiteral(boolean)
	CALLEE: com.x5.template.SnippetBlockTag#getCloseTag()
	CALLEE: com.x5.template.SnippetBlockTag#getBody()
	CALLEE: com.x5.template.Snippet#ungroupBlocks()
	CALLEE: com.x5.template.SnippetBlockTag#getOpenTag()
CALLER: com.x5.template.ChunkLocale#translate(java.lang.String,java.lang.String[],com.x5.template.Chunk)
	CALLEE: static com.x5.template.ChunkLocale#processFormatString(java.lang.String,java.lang.String[],com.x5.template.Chunk,java.util.HashMap)
CALLER: com.x5.template.Chunk#equals(java.lang.Object)
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: org.objectweb.asm.MethodVisitor#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodWriter#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitLineNumber(int,org.objectweb.asm.Label)
CALLER: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.optimizer.SystemMethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.tree.LdcInsnNode#<init>(java.lang.Object)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#<init>(int)
CALLER: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.Type#getSort()
	CALLEE: org.objectweb.asm.MethodWriter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLdcInsn(java.lang.Object)
CALLER: org.objectweb.asm.tree.IntInsnNode#<init>(int,int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#<init>(int)
CALLER: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitIntInsn(int,int)
CALLER: org.objectweb.asm.tree.VarInsnNode#<init>(int,int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#<init>(int)
CALLER: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
CALLER: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInsn(int)
CALLER: org.objectweb.asm.FieldVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.FieldWriter#visitAnnotation(java.lang.String,boolean)
CALLER: org.objectweb.asm.AnnotationVisitor#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationWriter#visit(java.lang.String,java.lang.Object)
CALLER: com.x5.util.ObjectDataMap#init()
	CALLEE: com.x5.util.ObjectDataMap#mapify(java.lang.Object)
CALLER: net.minidev.json.JSONArray#toJSONString()
	CALLEE: static net.minidev.json.JSONArray#toJSONString(java.util.List,net.minidev.json.JSONStyle)
CALLER: com.x5.util.ObjectDataMap#size()
	CALLEE: com.x5.util.ObjectDataMap#init()
CALLER: com.x5.util.ObjectDataMap#containsKey(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#init()
CALLER: com.x5.util.ObjectDataMap#mapify(java.lang.Object)
	CALLEE: static com.x5.util.ObjectDataMap#splitCamelCase(java.lang.String)
	CALLEE: com.x5.util.ObjectDataMap#mapifyBean(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#storeValue(java.util.Map,java.lang.Class,java.lang.String,java.lang.Object)
CALLER: static net.minidev.json.JSONArray#toJSONString(java.util.List,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONArray#writeJSONString(java.lang.Iterable,java.lang.Appendable,net.minidev.json.JSONStyle)
CALLER: com.x5.util.ObjectDataMap#mapifyBean(java.lang.Object)
	CALLEE: static com.x5.util.ObjectDataMap#splitCamelCase(java.lang.String)
	CALLEE: com.x5.util.ObjectDataMap#storeValue(java.util.Map,java.lang.Class,java.lang.String,java.lang.Object)
CALLER: com.x5.util.ObjectDataMap#storeValue(java.util.Map,java.lang.Class,java.lang.String,java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#<init>(java.lang.Object)
	CALLEE: static com.x5.util.ObjectDataMap#isWrapperType(java.lang.Class)
	CALLEE: static com.x5.util.ObjectDataMap#wrapBean(java.lang.Object)
CALLER: static net.minidev.json.JSONArray#writeJSONString(java.lang.Iterable,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONValue#writeJSONString(java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
CALLER: static com.x5.util.ObjectDataMap#wrapBean(java.lang.Object)
	CALLEE: com.x5.util.ObjectDataMap#<init>(java.lang.Object)
CALLER: static net.minidev.json.JSONValue#writeJSONString(java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: net.minidev.json.JSONArray#toJSONString()
	CALLEE: static net.minidev.json.JSONArray#writeJSONString(java.lang.Iterable,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONValue#writeJSONString(java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONStyle#mustProtectValue(java.lang.String)
	CALLEE: static net.minidev.json.JSONValue#escape(java.lang.String,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONArray#writeJSONString(java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONArray#writeJSONString(java.lang.Appendable)
	CALLEE: net.minidev.json.JSONArray#toJSONString(net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONObject#writeJSON(java.util.Map,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONUtil#getGetterName(java.lang.String)
	CALLEE: static net.minidev.json.JSONUtil#getIsName(java.lang.String)
	CALLEE: static net.minidev.json.JSONObject#writeJSONKV(java.lang.String,java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
CALLER: net.minidev.json.JSONStyle#mustProtectValue(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPSimple#mustBeProtect(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPTrue#mustBeProtect(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPAgressive#mustBeProtect(java.lang.String)
CALLER: static net.minidev.json.JSONValue#escape(java.lang.String,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONStyle#escape(java.lang.String,java.lang.Appendable)
CALLER: net.minidev.json.JSONArray#writeJSONString(java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONArray#writeJSONString(java.lang.Iterable,java.lang.Appendable,net.minidev.json.JSONStyle)
CALLER: net.minidev.json.JSONArray#writeJSONString(java.lang.Appendable)
	CALLEE: static net.minidev.json.JSONArray#writeJSONString(java.lang.Iterable,java.lang.Appendable,net.minidev.json.JSONStyle)
CALLER: net.minidev.json.JSONArray#toJSONString(net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONArray#toJSONString(java.util.List,net.minidev.json.JSONStyle)
CALLER: static net.minidev.json.JSONObject#writeJSON(java.util.Map,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#toString()
	CALLEE: org.objectweb.asm.Label#toString()
	CALLEE: com.x5.template.Snippet#toString()
	CALLEE: com.beust.jcommander.StringKey#toString()
	CALLEE: com.beust.jcommander.JCommander.ProgramName#toString()
	CALLEE: org.objectweb.asm.Type#toString()
	CALLEE: com.x5.template.SnippetPart#toString()
	CALLEE: com.x5.template.SnippetBlockTag#toString()
	CALLEE: net.onedaybeard.ecs.model.RowTypeMapping#toString()
	CALLEE: com.beust.jcommander.ParameterDescription#toString()
	CALLEE: com.x5.template.Chunk#toString()
	CALLEE: net.minidev.json.JSONArray#toString()
	CALLEE: com.artemis.meta.FieldDescriptor#toString()
	CALLEE: com.artemis.meta.MethodDescriptor#toString()
	CALLEE: com.x5.template.ChunkLocale#toString()
	CALLEE: static net.minidev.json.JSONObject#writeJSONKV(java.lang.String,java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: com.x5.template.Chunk#entrySet()
	CALLEE: com.x5.util.ObjectDataMap#entrySet()
	CALLEE: com.x5.template.SimpleTable#entrySet()
	CALLEE: com.x5.template.ObjectTable#entrySet()
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#toString()
CALLER: static net.minidev.json.JSONObject#writeJSONKV(java.lang.String,java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: static net.minidev.json.JSONValue#writeJSONString(java.lang.Object,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONStyle#mustProtectValue(java.lang.String)
	CALLEE: static net.minidev.json.JSONValue#escape(java.lang.String,java.lang.Appendable,net.minidev.json.JSONStyle)
	CALLEE: net.minidev.json.JSONStyle#mustProtectKey(java.lang.String)
CALLER: net.minidev.json.JStylerObj.MPSimple#mustBeProtect(java.lang.String)
	CALLEE: static net.minidev.json.JStylerObj#isSpace(char)
	CALLEE: static net.minidev.json.JStylerObj#isSpecial(char)
	CALLEE: static net.minidev.json.JStylerObj#isSpecialChar(char)
	CALLEE: static net.minidev.json.JStylerObj#isUnicode(char)
	CALLEE: static net.minidev.json.JStylerObj#isKeyword(java.lang.String)
CALLER: net.minidev.json.JStylerObj.MPAgressive#mustBeProtect(java.lang.String)
	CALLEE: static net.minidev.json.JStylerObj#isSpecial(char)
	CALLEE: static net.minidev.json.JStylerObj#isUnicode(char)
	CALLEE: static net.minidev.json.JStylerObj#isKeyword(java.lang.String)
	CALLEE: static net.minidev.json.JStylerObj#isSpecialClose(char)
CALLER: net.minidev.json.JSONStyle#escape(java.lang.String,java.lang.Appendable)
	CALLEE: net.minidev.json.JStylerObj.EscapeLT#escape(java.lang.String,java.lang.Appendable)
	CALLEE: net.minidev.json.JStylerObj.Escape4Web#escape(java.lang.String,java.lang.Appendable)
CALLER: com.x5.template.Chunk#entrySet()
	CALLEE: com.x5.template.Chunk#copyToHashtable()
CALLER: com.x5.util.ObjectDataMap#entrySet()
	CALLEE: com.x5.util.ObjectDataMap#init()
CALLER: net.minidev.json.JSONStyle#mustProtectKey(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPSimple#mustBeProtect(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPTrue#mustBeProtect(java.lang.String)
	CALLEE: net.minidev.json.JStylerObj.MPAgressive#mustBeProtect(java.lang.String)
CALLER: com.x5.template.SimpleTable#containsKey(java.lang.Object)
	CALLEE: com.x5.template.SimpleTable#indexColumns()
CALLER: com.x5.template.ObjectTable#containsKey(java.lang.Object)
	CALLEE: com.beust.jcommander.StringKey#equals(java.lang.Object)
	CALLEE: com.beust.jcommander.JCommander.ProgramName#equals(java.lang.Object)
	CALLEE: org.objectweb.asm.Type#equals(java.lang.Object)
	CALLEE: com.beust.jcommander.Parameterized#equals(java.lang.Object)
	CALLEE: com.x5.template.Chunk#equals(java.lang.Object)
CALLER: com.x5.template.ObjectTable#size()
	CALLEE: com.x5.template.ObjectTable#hasNext()
CALLER: static net.onedaybeard.ecs.model.scan.ClassStore#lambda$mapParentToChildren$3(java.util.Map,net.onedaybeard.ecs.model.scan.ClassData)
	CALLEE: net.onedaybeard.ecs.model.scan.ParentChainFinder#<init>(java.util.Map)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#accept(org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.CallableTransmuter#call()
	CALLEE: com.artemis.weaver.OptimizationTransmuter#process(java.lang.String)
	CALLEE: com.artemis.weaver.ComponentTypeTransmuter#process(java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator#process(java.lang.String)
	CALLEE: com.artemis.weaver.ProfilerTransmuter#process(java.lang.String)
CALLER: net.onedaybeard.ecs.model.scan.ParentChainFinder#<init>(java.util.Map)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: com.artemis.weaver.OptimizationTransmuter#process(java.lang.String)
	CALLEE: com.artemis.weaver.OptimizationTransmuter#process(java.lang.String)
CALLER: com.artemis.weaver.ComponentTypeTransmuter#process(java.lang.String)
	CALLEE: com.artemis.weaver.ComponentTypeTransmuter#process(java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator#process(java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator#process(java.lang.String)
CALLER: com.artemis.weaver.ProfilerTransmuter#process(java.lang.String)
	CALLEE: com.artemis.weaver.ProfilerTransmuter#process(java.lang.String)
CALLER: com.artemis.weaver.OptimizationTransmuter#process(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.1#<init>(com.artemis.weaver.OptimizationTransmuter,int,org.objectweb.asm.ClassVisitor)
	CALLEE: static com.artemis.weaver.OptimizationTransmuter#sourceType(com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#<init>(java.lang.Class,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#addMethod(java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.optimizer.OptimizingSystemWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: com.artemis.weaver.WeaverException#<init>(java.lang.Throwable)
CALLER: com.artemis.weaver.ComponentTypeTransmuter#process(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[])
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: com.artemis.weaver.ComponentTypeTransmuter#injectMethodStub(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#toByteArray()
	CALLEE: com.artemis.weaver.CommonClassWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.pooled.PooledComponentWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.EntityLinkGenerator#process(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: com.artemis.meta.ClassMetadata#fields()
	CALLEE: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: com.artemis.weaver.WeaverException#<init>(java.lang.Throwable)
	CALLEE: com.artemis.weaver.EntityLinkGenerator#generateMutator(com.artemis.meta.FieldDescriptor,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,java.util.List)
CALLER: com.artemis.weaver.ProfilerTransmuter#process(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: com.artemis.weaver.ProfilerTransmuter#injectProfilerStubs(com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.profile.ProfileVisitor#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.ProfileAnnotationRemoverWeaver#<init>(org.objectweb.asm.ClassVisitor)
CALLER: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: org.objectweb.asm.ClassWriter#<init>(org.objectweb.asm.ClassReader,int)
CALLER: com.artemis.weaver.OptimizationTransmuter.1#<init>(com.artemis.weaver.OptimizationTransmuter,int,org.objectweb.asm.ClassVisitor)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: static com.artemis.weaver.OptimizationTransmuter#sourceType(com.artemis.meta.ClassMetadata)
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#resolve(com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#<init>(java.lang.Class,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: static com.artemis.Weaver#toClassReader(java.lang.Class)
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#addMethod(java.lang.String,java.lang.String)
	CALLEE: com.artemis.meta.MethodDescriptor#<init>(java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#addMethod(com.artemis.meta.MethodDescriptor)
CALLER: com.artemis.weaver.optimizer.OptimizingSystemWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#toByteArray()
CALLER: static com.artemis.weaver.ComponentTypeTransmuter.1#<clinit>()
	CALLEE: static com.artemis.meta.ClassMetadata.WeaverType#values()
CALLER: com.artemis.weaver.ComponentTypeTransmuter#injectMethodStub(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.MethodWriter#visitCode()
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitEnd()
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.ClassWriter#toByteArray()
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#getAttributeCount()
	CALLEE: org.objectweb.asm.RecordComponentWriter#putRecordComponentInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ModuleWriter#putAttributes(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.RecordComponentWriter#computeRecordComponentInfoSize()
	CALLEE: org.objectweb.asm.ModuleWriter#computeAttributesSize()
	CALLEE: org.objectweb.asm.ModuleWriter#getAttributeCount()
	CALLEE: org.objectweb.asm.ClassTooLargeException#<init>(java.lang.String,int)
	CALLEE: org.objectweb.asm.ByteVector#<init>(int)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ClassWriter#replaceAsmInstructions(byte[],boolean)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.FieldWriter#computeFieldInfoSize()
	CALLEE: org.objectweb.asm.MethodWriter#computeMethodInfoSize()
	CALLEE: org.objectweb.asm.FieldWriter#putFieldInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.SymbolTable#putBootstrapMethods(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.SymbolTable#putConstantPool(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.SymbolTable#getClassName()
	CALLEE: org.objectweb.asm.SymbolTable#getConstantPoolCount()
	CALLEE: org.objectweb.asm.SymbolTable#getConstantPoolLength()
	CALLEE: org.objectweb.asm.SymbolTable#computeBootstrapMethodsSize()
	CALLEE: org.objectweb.asm.MethodWriter#putMethodInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.MethodWriter#hasAsmInstructions()
	CALLEE: org.objectweb.asm.MethodWriter#hasFrames()
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)
CALLER: com.artemis.weaver.CommonClassWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.pooled.PooledComponentWeaver#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator#generateMutator(com.artemis.meta.FieldDescriptor,java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: static com.artemis.ClassUtil#writeClass(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: com.artemis.weaver.WeaverException#<init>(java.lang.Throwable)
	CALLEE: static com.artemis.Weaver#toClassReader(java.lang.Class)
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#getMutatorName(com.artemis.meta.FieldDescriptor)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.2#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.3#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.5#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor,org.objectweb.asm.ClassReader)
	CALLEE: static com.artemis.Weaver#scan(java.lang.Class)
	CALLEE: com.artemis.weaver.transplant.ClassTransplantVisitor#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata,java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator.1#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,java.util.List)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.ProfilerTransmuter#injectProfilerStubs(com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[])
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.ClassWriter#<init>(int)
	CALLEE: org.objectweb.asm.ClassWriter#toByteArray()
	CALLEE: org.objectweb.asm.ClassWriter#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: static com.artemis.ClassUtil#injectMethodStub(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: org.objectweb.asm.FieldWriter#visitEnd()
CALLER: com.artemis.weaver.profile.ProfileVisitor#<init>(org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.ProfileAnnotationRemoverWeaver#<init>(org.objectweb.asm.ClassVisitor)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: org.objectweb.asm.ClassWriter#<init>(org.objectweb.asm.ClassReader,int)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
	CALLEE: org.objectweb.asm.SymbolTable#<init>(org.objectweb.asm.ClassWriter)
	CALLEE: org.objectweb.asm.SymbolTable#<init>(org.objectweb.asm.ClassWriter,org.objectweb.asm.ClassReader)
CALLER: static com.artemis.weaver.OptimizationTransmuter.2#<clinit>()
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#values()
	CALLEE: static com.artemis.meta.ClassMetadata.OptimizationType#values()
CALLER: static com.artemis.Weaver#toClassReader(java.lang.Class)
	CALLEE: org.objectweb.asm.ClassReader#<init>(java.io.InputStream)
	CALLEE: com.artemis.weaver.WeaverException#<init>(java.lang.String,java.lang.Throwable)
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.meta.MethodDescriptor#<init>(java.lang.String,java.lang.String)
	CALLEE: com.artemis.meta.MethodDescriptor#<init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.MethodWriter#<init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int)
CALLER: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: static org.objectweb.asm.AnnotationWriter#putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#putAnnotations(int,org.objectweb.asm.ByteVector)
CALLER: org.objectweb.asm.ClassWriter#replaceAsmInstructions(byte[],boolean)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[],int,boolean)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,org.objectweb.asm.Attribute[],int)
	CALLEE: org.objectweb.asm.ClassWriter#toByteArray()
	CALLEE: org.objectweb.asm.ClassWriter#getAttributePrototypes()
CALLER: com.artemis.weaver.EntityLinkGenerator.2#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator.3#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator.4#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator.5#<init>(com.artemis.weaver.EntityLinkGenerator,int,org.objectweb.asm.ClassVisitor,com.artemis.meta.FieldDescriptor,org.objectweb.asm.ClassReader)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: static com.artemis.Weaver#scan(java.lang.Class)
	CALLEE: static com.artemis.Weaver#scan(org.objectweb.asm.ClassReader)
	CALLEE: static com.artemis.Weaver#toClassReader(java.lang.Class)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int,org.objectweb.asm.ClassVisitor)
CALLER: org.objectweb.asm.ClassWriter#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.FieldWriter#<init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: static com.artemis.ClassUtil#injectMethodStub(org.objectweb.asm.ClassWriter,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.MethodWriter#visitCode()
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitEnd()
CALLER: org.objectweb.asm.SymbolTable#<init>(org.objectweb.asm.ClassWriter)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
CALLER: org.objectweb.asm.SymbolTable#<init>(org.objectweb.asm.ClassWriter,org.objectweb.asm.ClassReader)
	CALLEE: org.objectweb.asm.ByteVector#<init>(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMemberReference(int,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantNameAndType(int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantLongOrDouble(int,int,long)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#copyBootstrapMethods(org.objectweb.asm.ClassReader,char[])
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#<init>(org.objectweb.asm.ClassReader,org.objectweb.asm.ClassVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: org.objectweb.asm.MethodWriter#<init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],int)
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getArgumentsAndReturnSizes(java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.ClassWriter#getAttributePrototypes()
	CALLEE: org.objectweb.asm.Attribute.Set#<init>()
	CALLEE: org.objectweb.asm.Attribute.Set#addAttributes(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.MethodWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
	CALLEE: org.objectweb.asm.Attribute.Set#toArray()
	CALLEE: org.objectweb.asm.FieldWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
	CALLEE: org.objectweb.asm.RecordComponentWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
CALLER: org.objectweb.asm.FieldWriter#<init>(org.objectweb.asm.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.FieldVisitor#<init>(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstant(java.lang.Object)
CALLER: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.MethodWriter#endCurrentBasicBlockWithNoSuccessor()
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.SymbolTable#addConstantMemberReference(int,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
CALLER: org.objectweb.asm.SymbolTable#addConstantIntegerOrFloat(int,int,int)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantNameAndType(int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantLongOrDouble(int,int,long)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,long)
CALLER: org.objectweb.asm.SymbolTable#addConstantUtf8(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#copyBootstrapMethods(org.objectweb.asm.ClassReader,char[])
	CALLEE: org.objectweb.asm.ByteVector#<init>(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#add(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
CALLER: org.objectweb.asm.MethodVisitor#<init>(int)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.ByteVector#putUTF8(java.lang.String)
CALLER: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Label#resolve(byte[],int)
	CALLEE: org.objectweb.asm.MethodWriter#addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#<init>(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.Attribute.Set#addAttributes(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.Attribute.Set#contains(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.Attribute.Set#add(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.MethodWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
	CALLEE: org.objectweb.asm.Attribute.Set#addAttributes(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.FieldVisitor#<init>(int)
	CALLEE: org.objectweb.asm.FieldVisitor#<init>(int,org.objectweb.asm.FieldVisitor)
CALLER: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.MethodWriter#endCurrentBasicBlockWithNoSuccessor()
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.Label#resolve(byte[],int)
	CALLEE: org.objectweb.asm.Frame#<init>(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.Symbol#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)
CALLER: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: org.objectweb.asm.Symbol#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)
CALLER: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.Symbol#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)
CALLER: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.Symbol#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)
CALLER: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
CALLER: org.objectweb.asm.MethodWriter#addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Edge#<init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)
CALLER: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.ClassWriter#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitPermittedSubclass(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitNestMember(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.ClassWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.ClassWriter#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantNameAndType(java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitNestHost(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#encodeUtf8(java.lang.String,int,int)
CALLER: org.objectweb.asm.ClassWriter#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#setMajorVersionAndClassName(int,java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.Attribute#isCodeAttribute()
CALLER: org.objectweb.asm.MethodWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.MethodWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.MethodWriter#visitAnnotationDefault()
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.MethodWriter#visitParameter(java.lang.String,int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#computeAllFrames()
	CALLEE: org.objectweb.asm.MethodWriter#computeMaxStackAndLocal()
CALLER: org.objectweb.asm.MethodWriter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
	CALLEE: static org.objectweb.asm.TypePath#put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)
CALLER: org.objectweb.asm.MethodWriter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.MethodWriter#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Symbol#getArgumentsAndReturnSizes()
CALLER: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Symbol#getArgumentsAndReturnSizes()
CALLER: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstant(java.lang.Object)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.MethodWriter#endCurrentBasicBlockWithNoSuccessor()
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.Label#put(org.objectweb.asm.ByteVector,int,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.MethodWriter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.Label#put(org.objectweb.asm.ByteVector,int,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.MethodWriter#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.MethodWriter#endCurrentBasicBlockWithNoSuccessor()
	CALLEE: org.objectweb.asm.MethodWriter#addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Label#put(org.objectweb.asm.ByteVector,int,boolean)
	CALLEE: org.objectweb.asm.Label#getCanonicalInstance()
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.Label#<init>()
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: static org.objectweb.asm.Type#getArgumentsAndReturnSizes(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.Frame#<init>(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.CurrentFrame#<init>(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.Frame#accept(org.objectweb.asm.MethodWriter)
	CALLEE: org.objectweb.asm.Frame#setInputFrameFromApiFormat(org.objectweb.asm.SymbolTable,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameStart(int,int,int)
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromApiFormat(org.objectweb.asm.SymbolTable,java.lang.Object)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameEnd()
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: org.objectweb.asm.MethodWriter#putFrameType(java.lang.Object)
CALLER: org.objectweb.asm.MethodWriter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.Handler#<init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#visitTryCatchAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.MethodWriter#visitParameterAnnotation(int,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
	CALLEE: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#canCopyMethodAttributes(org.objectweb.asm.ClassReader,boolean,boolean,int,int,int)
	CALLEE: org.objectweb.asm.ClassReader#readUnsignedShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: org.objectweb.asm.SymbolTable#getSource()
CALLER: org.objectweb.asm.FieldWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.FieldWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.ClassWriter#visitRecordComponent(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.RecordComponentWriter#<init>(org.objectweb.asm.SymbolTable,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.ClassWriter#visitModule(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantModule(java.lang.String)
	CALLEE: org.objectweb.asm.ModuleWriter#<init>(org.objectweb.asm.SymbolTable,int,int,int)
CALLER: com.artemis.weaver.OptimizationTransmuter.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.artemis.weaver.OptimizationTransmuter#access$000(com.artemis.weaver.OptimizationTransmuter)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#<init>(com.artemis.meta.ClassMetadata,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.profile.ProfileVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.profile.ProfileBeginWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.profile.ProfileEndWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.profile.ProfileInitializeWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator.2#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.Class,org.objectweb.asm.Type,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator.3#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.Class,org.objectweb.asm.Type,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.EntityLinkGenerator.4#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.Class)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#<init>(com.artemis.weaver.EntityLinkGenerator.4,int,org.objectweb.asm.MethodVisitor,java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator.5#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#getClassName()
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.CommonClassWeaver#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
CALLER: com.artemis.weaver.CommonClassWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.CommonClassWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.artemis.meta.ClassMetadataUtil#superName(com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.EntityLinkGenerator.4#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.Class)
CALLER: org.objectweb.asm.MethodWriter#visitLineNumber(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
CALLER: org.objectweb.asm.FieldWriter#computeFieldInfoSize()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: static org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,int,int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.MethodWriter#computeMethodInfoSize()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#getClassName()
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: static org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,int,int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.MethodTooLargeException#<init>(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: static org.objectweb.asm.Handler#getExceptionTableSize(org.objectweb.asm.Handler)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,byte[],int,int,int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#computeParameterAnnotationsSize(java.lang.String,org.objectweb.asm.AnnotationWriter[],int)
CALLER: org.objectweb.asm.FieldWriter#putFieldInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: org.objectweb.asm.Attribute#getAttributeCount()
	CALLEE: static org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)
CALLER: com.artemis.weaver.EntityLinkGenerator.1#visitEnd()
	CALLEE: org.objectweb.asm.ClassVisitor#visitEnd()
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#injectMutators()
CALLER: com.artemis.weaver.EntityLinkGenerator.1#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#injectMutators()
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitAttribute(org.objectweb.asm.Attribute)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAttribute(org.objectweb.asm.Attribute)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
CALLER: com.artemis.weaver.ProfileAnnotationRemoverWeaver#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitSource(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visitSource(java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#resolve(com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.CommonClassWeaver#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: com.artemis.weaver.profile.ProfileVisitor#visitEnd()
	CALLEE: org.objectweb.asm.ClassVisitor#visitEnd()
CALLER: com.artemis.weaver.optimizer.OptimizingSystemWeaver#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.OptimizationTransmuter.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.profile.ProfileVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.2#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.3#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.5#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.optimizer.OptimizingSystemWeaver#isProcessMethod(java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.optimizer.SystemMethodVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.pooled.PooledComponentWeaver#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassWriter#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.OptimizationTransmuter.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.profile.ProfileVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.2#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.3#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.5#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.pooled.ResetMethodVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
CALLER: com.artemis.weaver.EntityLinkGenerator.1#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#injectMutators()
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: com.artemis.weaver.EntityLinkGenerator.1#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.1#injectMutators()
CALLER: com.artemis.weaver.transplant.ClassTransplantVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: org.objectweb.asm.SymbolTable#putBootstrapMethods(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.SymbolTable#putConstantPool(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
CALLER: org.objectweb.asm.SymbolTable#computeBootstrapMethodsSize()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#putMethodInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: org.objectweb.asm.SymbolTable#getSource()
	CALLEE: static org.objectweb.asm.Handler#getExceptionTableSize(org.objectweb.asm.Handler)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,byte[],int,int,int)
	CALLEE: org.objectweb.asm.Attribute#getAttributeCount()
	CALLEE: static org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)
	CALLEE: static org.objectweb.asm.Handler#putExceptionTable(org.objectweb.asm.Handler,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.AnnotationWriter#putAnnotations(int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)
	CALLEE: static org.objectweb.asm.AnnotationWriter#putParameterAnnotations(int,org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector)
CALLER: org.objectweb.asm.SymbolTable#addConstant(java.lang.Object)
	CALLEE: org.objectweb.asm.ConstantDynamic#getDescriptor()
	CALLEE: org.objectweb.asm.ConstantDynamic#getBootstrapMethod()
	CALLEE: org.objectweb.asm.ConstantDynamic#getBootstrapMethodArgumentsUnsafe()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.Type#getSort()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantInteger(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantFloat(float)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantLong(long)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDouble(double)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantString(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodType(java.lang.String)
	CALLEE: org.objectweb.asm.Handle#getTag()
	CALLEE: org.objectweb.asm.Handle#getOwner()
	CALLEE: org.objectweb.asm.Handle#getName()
	CALLEE: org.objectweb.asm.Handle#getDesc()
	CALLEE: org.objectweb.asm.Handle#isInterface()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ConstantDynamic#getName()
CALLER: org.objectweb.asm.FieldWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
	CALLEE: org.objectweb.asm.Attribute.Set#addAttributes(org.objectweb.asm.Attribute)
CALLER: org.objectweb.asm.ByteVector#putUTF8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
	CALLEE: org.objectweb.asm.ByteVector#encodeUtf8(java.lang.String,int,int)
CALLER: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Frame#push(int)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: org.objectweb.asm.Frame#push(org.objectweb.asm.SymbolTable,java.lang.String)
	CALLEE: org.objectweb.asm.Frame#getLocal(int)
	CALLEE: org.objectweb.asm.Frame#pop(int)
	CALLEE: org.objectweb.asm.Frame#pop()
	CALLEE: org.objectweb.asm.Frame#setLocal(int,int)
	CALLEE: org.objectweb.asm.Frame#pop(java.lang.String)
	CALLEE: org.objectweb.asm.Frame#addInitializedType(int)
	CALLEE: org.objectweb.asm.SymbolTable#addUninitializedType(java.lang.String,int)
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantAdapter#visitEnd()
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassVisitor#visitEnd()
CALLER: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
	CALLEE: static org.objectweb.asm.TypePath#put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)
	CALLEE: static org.objectweb.asm.TypeReference#putTarget(int,org.objectweb.asm.ByteVector)
CALLER: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.SymbolTable#addConstantNameAndType(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.ByteVector#put122(int,int,int)
CALLER: org.objectweb.asm.ByteVector#encodeUtf8(java.lang.String,int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.SymbolTable#setMajorVersionAndClassName(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int)
CALLER: org.objectweb.asm.MethodWriter#computeAllFrames()
	CALLEE: org.objectweb.asm.Edge#<init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)
	CALLEE: org.objectweb.asm.Label#getCanonicalInstance()
	CALLEE: org.objectweb.asm.Frame#setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.Frame#accept(org.objectweb.asm.MethodWriter)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameStart(int,int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameEnd()
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromInternalName(org.objectweb.asm.SymbolTable,java.lang.String)
	CALLEE: org.objectweb.asm.Frame#getInputStackSize()
	CALLEE: org.objectweb.asm.Frame#merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int)
	CALLEE: static org.objectweb.asm.Handler#removeRange(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)
CALLER: org.objectweb.asm.MethodWriter#computeMaxStackAndLocal()
	CALLEE: org.objectweb.asm.Edge#<init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)
	CALLEE: org.objectweb.asm.Label#markSubroutine(short)
	CALLEE: org.objectweb.asm.Label#addSubroutineRetSuccessors(org.objectweb.asm.Label)
CALLER: static org.objectweb.asm.TypePath#put(org.objectweb.asm.TypePath,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
CALLER: org.objectweb.asm.ByteVector#put11(int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.SymbolTable#addConstantInvokeDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.SymbolTable#addBootstrapMethod(org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.SymbolTable#addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.Label#put(org.objectweb.asm.ByteVector,int,boolean)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.Label#addForwardReference(int,int,int)
CALLER: org.objectweb.asm.MethodWriter#visitSwitchInsn(org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodWriter#endCurrentBasicBlockWithNoSuccessor()
	CALLEE: org.objectweb.asm.MethodWriter#addSuccessorToCurrentBasicBlock(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Label#getCanonicalInstance()
	CALLEE: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.CurrentFrame#<init>(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#<init>(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.Frame#setInputFrameFromDescriptor(org.objectweb.asm.SymbolTable,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.SymbolTable#getClassName()
	CALLEE: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int)
CALLER: org.objectweb.asm.Frame#accept(org.objectweb.asm.MethodWriter)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameStart(int,int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitFrameEnd()
	CALLEE: org.objectweb.asm.MethodWriter#visitAbstractType(int,int)
CALLER: org.objectweb.asm.Frame#setInputFrameFromApiFormat(org.objectweb.asm.SymbolTable,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromApiFormat(org.objectweb.asm.SymbolTable,java.lang.Object)
CALLER: static org.objectweb.asm.Frame#getAbstractTypeFromApiFormat(org.objectweb.asm.SymbolTable,java.lang.Object)
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.SymbolTable#addUninitializedType(java.lang.String,int)
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int)
CALLER: org.objectweb.asm.MethodWriter#visitFrameEnd()
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.MethodWriter#putFrame()
CALLER: org.objectweb.asm.MethodWriter#putFrameType(java.lang.Object)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
CALLER: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getTypeInternal(java.lang.String,int,int)
CALLER: org.objectweb.asm.RecordComponentWriter#<init>(org.objectweb.asm.SymbolTable,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.RecordComponentVisitor#<init>(int)
CALLER: org.objectweb.asm.SymbolTable#addConstantModule(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#<init>(org.objectweb.asm.SymbolTable,int,int,int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.ModuleVisitor#<init>(int)
CALLER: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#<init>(com.artemis.meta.ClassMetadata,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: static org.objectweb.asm.commons.GeneratorAdapter#<clinit>()
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: static org.objectweb.asm.commons.Method#getMethod(java.lang.String)
CALLER: static org.objectweb.asm.commons.LocalVariablesSorter#<clinit>()
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
CALLER: com.artemis.weaver.profile.ProfileBeginWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.profile.ProfileEndWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.profile.ProfileInitializeWeaver#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata,int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.Class,org.objectweb.asm.Type,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.Class)
CALLER: static org.objectweb.asm.Type#getType(java.lang.Class)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getDescriptor(java.lang.Class)
CALLER: com.artemis.weaver.EntityLinkGenerator.4.1#<init>(com.artemis.weaver.EntityLinkGenerator.4,int,org.objectweb.asm.MethodVisitor,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.MethodVisitor)
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: static org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
CALLER: static org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
CALLER: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,byte[],int,int,int)
CALLER: static org.objectweb.asm.Handler#getExceptionTableSize(org.objectweb.asm.Handler)
	CALLEE: static org.objectweb.asm.Handler#getExceptionTableLength(org.objectweb.asm.Handler)
CALLER: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,byte[],int,int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#write(org.objectweb.asm.ClassWriter,byte[],int,int,int)
CALLER: static org.objectweb.asm.AnnotationWriter#computeParameterAnnotationsSize(java.lang.String,org.objectweb.asm.AnnotationWriter[],int)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
CALLER: static org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
CALLER: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)
CALLER: com.artemis.weaver.EntityLinkGenerator.1#injectMutators()
	CALLEE: org.objectweb.asm.ClassVisitor#visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#getMutatorName(com.artemis.meta.FieldDescriptor)
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
CALLER: com.artemis.weaver.optimizer.SystemMethodVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.ConstructorInvocationVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.pooled.ResetMethodVisitor#<init>(org.objectweb.asm.MethodVisitor,com.artemis.meta.ClassMetadata)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
CALLER: static org.objectweb.asm.Handler#putExceptionTable(org.objectweb.asm.Handler,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: static org.objectweb.asm.Handler#getExceptionTableLength(org.objectweb.asm.Handler)
CALLER: org.objectweb.asm.AnnotationWriter#putAnnotations(int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnd()
CALLER: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,byte[],int,int,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.Attribute#write(org.objectweb.asm.ClassWriter,byte[],int,int,int)
CALLER: static org.objectweb.asm.AnnotationWriter#putParameterAnnotations(int,org.objectweb.asm.AnnotationWriter[],int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(java.lang.String)
	CALLEE: org.objectweb.asm.AnnotationWriter#visitEnd()
CALLER: org.objectweb.asm.SymbolTable#addConstantInteger(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantIntegerOrFloat(int,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantFloat(float)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantIntegerOrFloat(int,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantLong(long)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantLongOrDouble(int,long)
CALLER: org.objectweb.asm.SymbolTable#addConstantDouble(double)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantLongOrDouble(int,long)
CALLER: org.objectweb.asm.SymbolTable#addConstantString(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
CALLER: org.objectweb.asm.SymbolTable#addConstantMethodType(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
CALLER: org.objectweb.asm.SymbolTable#addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put112(int,int,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantDynamic(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.SymbolTable#addBootstrapMethod(org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)
CALLER: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#addTypeInternal(org.objectweb.asm.SymbolTable.Entry)
CALLER: org.objectweb.asm.Frame#push(org.objectweb.asm.SymbolTable,java.lang.String)
	CALLEE: org.objectweb.asm.Frame#push(int)
	CALLEE: static org.objectweb.asm.Frame#getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int)
	CALLEE: static org.objectweb.asm.Type#getReturnTypeOffset(java.lang.String)
CALLER: org.objectweb.asm.Frame#pop(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getArgumentsAndReturnSizes(java.lang.String)
	CALLEE: org.objectweb.asm.Frame#pop(int)
CALLER: org.objectweb.asm.SymbolTable#addUninitializedType(java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#addTypeInternal(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,long,int)
CALLER: static org.objectweb.asm.TypeReference#putTarget(int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
CALLER: org.objectweb.asm.ByteVector#put122(int,int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: static org.objectweb.asm.Frame#getAbstractTypeFromInternalName(org.objectweb.asm.SymbolTable,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
CALLER: org.objectweb.asm.Frame#merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int)
	CALLEE: org.objectweb.asm.Frame#getConcreteOutputType(int,int)
	CALLEE: org.objectweb.asm.Frame#getInitializedType(org.objectweb.asm.SymbolTable,int)
	CALLEE: static org.objectweb.asm.Frame#merge(org.objectweb.asm.SymbolTable,int,int[],int)
CALLER: static org.objectweb.asm.Handler#removeRange(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)
	CALLEE: static org.objectweb.asm.Handler#removeRange(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Handler#<init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)
CALLER: org.objectweb.asm.Label#markSubroutine(short)
	CALLEE: org.objectweb.asm.Label#pushSuccessors(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.Label#addSubroutineRetSuccessors(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Edge#<init>(int,org.objectweb.asm.Label,org.objectweb.asm.Edge)
	CALLEE: org.objectweb.asm.Label#pushSuccessors(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.SymbolTable#addBootstrapMethod(org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.Type#hashCode()
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#<init>()
	CALLEE: org.objectweb.asm.SymbolTable#addConstant(java.lang.Object)
	CALLEE: org.objectweb.asm.Handle#getTag()
	CALLEE: org.objectweb.asm.Handle#getOwner()
	CALLEE: org.objectweb.asm.Handle#getName()
	CALLEE: org.objectweb.asm.Handle#getDesc()
	CALLEE: org.objectweb.asm.Handle#isInterface()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.Handle#hashCode()
	CALLEE: org.objectweb.asm.ConstantDynamic#hashCode()
	CALLEE: org.objectweb.asm.SymbolTable#addBootstrapMethod(int,int,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantNameAndType(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put122(int,int,int)
CALLER: org.objectweb.asm.SymbolTable#addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantNameAndType(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put122(int,int,int)
CALLER: org.objectweb.asm.CurrentFrame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Frame#<init>(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Frame#execute(int,int,org.objectweb.asm.Symbol,org.objectweb.asm.SymbolTable)
	CALLEE: org.objectweb.asm.Frame#merge(org.objectweb.asm.SymbolTable,org.objectweb.asm.Frame,int)
	CALLEE: org.objectweb.asm.Frame#copyFrom(org.objectweb.asm.Frame)
CALLER: static org.objectweb.asm.Frame#getAbstractTypeFromDescriptor(org.objectweb.asm.SymbolTable,java.lang.String,int)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
CALLER: org.objectweb.asm.MethodWriter#putFrame()
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.SymbolTable#getMajorVersion()
	CALLEE: org.objectweb.asm.MethodWriter#putAbstractTypes(int,int)
CALLER: org.objectweb.asm.RecordComponentVisitor#<init>(int)
	CALLEE: org.objectweb.asm.RecordComponentVisitor#<init>(int,org.objectweb.asm.RecordComponentVisitor)
CALLER: org.objectweb.asm.ModuleVisitor#<init>(int)
	CALLEE: org.objectweb.asm.ModuleVisitor#<init>(int,org.objectweb.asm.ModuleVisitor)
CALLER: static org.objectweb.asm.commons.Method#getMethod(java.lang.String)
	CALLEE: static org.objectweb.asm.commons.Method#getMethod(java.lang.String,boolean)
CALLER: org.objectweb.asm.commons.AdviceAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.GeneratorAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
CALLER: static org.objectweb.asm.Type#getDescriptor(java.lang.Class)
	CALLEE: static org.objectweb.asm.Type#appendDescriptor(java.lang.Class,java.lang.StringBuilder)
CALLER: static com.artemis.meta.ClassMetadataUtil.1#<clinit>()
	CALLEE: static com.artemis.meta.ClassMetadata.WeaverType#values()
CALLER: org.objectweb.asm.Attribute#write(org.objectweb.asm.ClassWriter,byte[],int,int,int)
	CALLEE: org.objectweb.asm.ByteVector#<init>(byte[])
CALLER: org.objectweb.asm.SymbolTable#addConstantIntegerOrFloat(int,int)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
CALLER: org.objectweb.asm.SymbolTable#addConstantLongOrDouble(int,long)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,long)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.ByteVector#putLong(long)
CALLER: org.objectweb.asm.ByteVector#put112(int,int,int)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: org.objectweb.asm.SymbolTable#addTypeInternal(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
CALLER: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,java.lang.String,long,int)
	CALLEE: org.objectweb.asm.Symbol#<init>(int,int,java.lang.String,java.lang.String,java.lang.String,long)
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#lambda$findEcsTypes$1(net.onedaybeard.ecs.model.scan.ClassData)
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#ecsTypeData(net.onedaybeard.ecs.model.scan.ClassData)
CALLER: net.onedaybeard.ecs.model.scan.ClassData#<init>(java.nio.file.Path)
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#getClassName()
	CALLEE: static net.onedaybeard.ecs.model.scan.ClassData#toBytes(java.nio.file.Path)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#classReader()
CALLER: org.objectweb.asm.Frame#getInitializedType(org.objectweb.asm.SymbolTable,int)
	CALLEE: org.objectweb.asm.SymbolTable#getClassName()
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#getType(int)
CALLER: static org.objectweb.asm.Frame#merge(org.objectweb.asm.SymbolTable,int,int[],int)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addMergedType(int,int)
CALLER: org.objectweb.asm.Handler#<init>(org.objectweb.asm.Handler,org.objectweb.asm.Label,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.Handler#<init>(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,int,java.lang.String)
CALLER: org.objectweb.asm.ConstantDynamic#hashCode()
	CALLEE: org.objectweb.asm.Handle#hashCode()
CALLER: org.objectweb.asm.SymbolTable#addBootstrapMethod(int,int,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
CALLER: org.objectweb.asm.MethodWriter#putAbstractTypes(int,int)
	CALLEE: static org.objectweb.asm.Frame#putAbstractType(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.ByteVector)
CALLER: org.objectweb.asm.RecordComponentVisitor#<init>(int,org.objectweb.asm.RecordComponentVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: org.objectweb.asm.ModuleVisitor#<init>(int,org.objectweb.asm.ModuleVisitor)
	CALLEE: static org.objectweb.asm.Constants#checkAsmExperimental(java.lang.Object)
CALLER: static org.objectweb.asm.commons.Method#getMethod(java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.commons.Method#getDescriptorInternal(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.Method#<init>(java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.commons.GeneratorAdapter#<init>(int,org.objectweb.asm.MethodVisitor,int,java.lang.String,java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#<init>(int,int,java.lang.String,org.objectweb.asm.MethodVisitor)
	CALLEE: static org.objectweb.asm.Type#getReturnType(java.lang.String)
CALLER: static org.objectweb.asm.Type#appendDescriptor(java.lang.Class,java.lang.StringBuilder)
	CALLEE: static org.objectweb.asm.Type#getInternalName(java.lang.Class)
CALLER: org.objectweb.asm.ByteVector#putLong(long)
	CALLEE: org.objectweb.asm.ByteVector#enlarge(int)
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#ecsTypeData(net.onedaybeard.ecs.model.scan.ClassData)
	CALLEE: net.onedaybeard.ecs.model.scan.ClassData#classReader()
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#ecsTypeData(org.objectweb.asm.ClassReader)
CALLER: net.onedaybeard.ecs.model.scan.ClassData#classReader()
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[])
CALLER: org.objectweb.asm.SymbolTable#addMergedType(int,int)
	CALLEE: static org.objectweb.asm.SymbolTable#hash(int,int)
	CALLEE: org.objectweb.asm.SymbolTable.Entry#<init>(int,int,long,int)
	CALLEE: org.objectweb.asm.SymbolTable#get(int)
	CALLEE: org.objectweb.asm.SymbolTable#put(org.objectweb.asm.SymbolTable.Entry)
	CALLEE: org.objectweb.asm.SymbolTable#addType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#getCommonSuperClass(java.lang.String,java.lang.String)
CALLER: static org.objectweb.asm.Frame#putAbstractType(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putByte(int)
	CALLEE: org.objectweb.asm.SymbolTable#getType(int)
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#<init>(int,int,java.lang.String,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
	CALLEE: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getSize()
CALLER: static org.objectweb.asm.Type#getReturnType(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getTypeInternal(java.lang.String,int,int)
	CALLEE: static org.objectweb.asm.Type#getReturnTypeOffset(java.lang.String)
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#ecsTypeData(org.objectweb.asm.ClassReader)
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
	CALLEE: org.objectweb.asm.ClassReader#getClassName()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#<init>()
	CALLEE: net.onedaybeard.ecs.model.scan.EcsScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
CALLER: org.objectweb.asm.ClassWriter#getCommonSuperClass(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ClassWriter#getClassLoader()
CALLER: net.onedaybeard.ecs.model.scan.EcsScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.ClassVisitor#<init>(int)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.ConstantDynamic#getSize()
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#endConstructorBasicBlockWithoutSuccessor()
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#endConstructorBasicBlockWithoutSuccessor()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#onMethodExit(int)
	CALLEE: com.artemis.weaver.profile.ProfileEndWeaver#onMethodExit(int)
	CALLEE: com.artemis.weaver.profile.ProfileInitializeWeaver#onMethodExit(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#peekValue()
CALLER: org.objectweb.asm.AnnotationWriter#visitArray(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.AnnotationWriter#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstant(java.lang.Object)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantInteger(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantFloat(float)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantLong(long)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantDouble(double)
CALLER: org.objectweb.asm.AnnotationWriter#visitAnnotation(java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
	CALLEE: org.objectweb.asm.AnnotationWriter#<init>(org.objectweb.asm.SymbolTable,boolean,org.objectweb.asm.ByteVector,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.AnnotationWriter#visitEnum(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#put12(int,int)
CALLER: org.objectweb.asm.RecordComponentWriter#visitTypeAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,int,org.objectweb.asm.TypePath,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.RecordComponentWriter#visitAnnotation(java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.AnnotationWriter#create(org.objectweb.asm.SymbolTable,java.lang.String,org.objectweb.asm.AnnotationWriter)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitCode()
	CALLEE: org.objectweb.asm.MethodVisitor#visitCode()
	CALLEE: com.artemis.weaver.profile.ProfileBeginWeaver#onMethodEnter()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#onMethodEnter()
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitMaxs(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMaxs(int,int)
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariableAnnotation(int,org.objectweb.asm.TypePath,org.objectweb.asm.Label[],org.objectweb.asm.Label[],int[],java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.MethodVisitor#visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMultiANewArrayInsn(java.lang.String,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIincInsn(int,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitLabel(org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLabel(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#endConstructorBasicBlockWithoutSuccessor()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#addForwardJumps(org.objectweb.asm.Label,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#updateNewLocals(java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#setFrameLocal(int,java.lang.Object)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)
CALLER: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: static com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#invocation(com.artemis.meta.ClassMetadata.OptimizationType)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#doVisitMethodInsn(int,java.lang.String,java.lang.String)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: static com.artemis.weaver.EntityLinkGenerator#access$000(com.artemis.weaver.EntityLinkGenerator)
CALLER: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: static com.artemis.weaver.ConstructorInvocationVisitor#owner(com.artemis.meta.ClassMetadata,java.lang.String)
CALLER: com.artemis.weaver.pooled.ResetMethodVisitor#visitCode()
	CALLEE: org.objectweb.asm.MethodVisitor#visitCode()
	CALLEE: com.artemis.meta.FieldDescriptor#isResettable()
	CALLEE: org.objectweb.asm.MethodWriter#visitCode()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitCode()
	CALLEE: static com.artemis.meta.ClassMetadataUtil#instanceFields(com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.weaver.pooled.ResetMethodVisitor#resetField(com.artemis.meta.FieldDescriptor)
	CALLEE: com.artemis.weaver.pooled.ResetMethodVisitor#clearCollection(com.artemis.meta.FieldDescriptor,int)
	CALLEE: com.artemis.weaver.pooled.ResetMethodVisitor#isClearable(com.artemis.meta.FieldDescriptor)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#doVisitMethodInsn(int,java.lang.String,java.lang.String)
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.MethodVisitor#visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#endConstructorBasicBlockWithoutSuccessor()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#addForwardJumps(org.objectweb.asm.Label,org.objectweb.asm.Label[])
CALLER: org.objectweb.asm.commons.AdviceAdapter#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.MethodVisitor#visitJumpInsn(int,org.objectweb.asm.Label)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#endConstructorBasicBlockWithoutSuccessor()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#addForwardJump(org.objectweb.asm.Label)
CALLER: com.artemis.weaver.optimizer.SystemMethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: static com.artemis.weaver.optimizer.EntitySystemType#resolve(java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: org.objectweb.asm.RecordComponentWriter#putRecordComponentInfo(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#putAnnotations(org.objectweb.asm.SymbolTable,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#getAttributeCount()
	CALLEE: static org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,int,int,org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.Attribute#putAttributes(org.objectweb.asm.SymbolTable,org.objectweb.asm.ByteVector)
CALLER: org.objectweb.asm.ModuleWriter#putAttributes(org.objectweb.asm.ByteVector)
	CALLEE: org.objectweb.asm.ByteVector#putInt(int)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.ByteVector#putByteArray(byte[],int,int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.RecordComponentWriter#computeRecordComponentInfoSize()
	CALLEE: static org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable,int,int)
	CALLEE: static org.objectweb.asm.AnnotationWriter#computeAnnotationsSize(org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter,org.objectweb.asm.AnnotationWriter)
	CALLEE: org.objectweb.asm.Attribute#computeAttributesSize(org.objectweb.asm.SymbolTable)
CALLER: org.objectweb.asm.ModuleWriter#computeAttributesSize()
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
CALLER: org.objectweb.asm.RecordComponentWriter#collectAttributePrototypes(org.objectweb.asm.Attribute.Set)
	CALLEE: org.objectweb.asm.Attribute.Set#addAttributes(org.objectweb.asm.Attribute)
CALLER: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ClassReader#getClassName()
	CALLEE: org.objectweb.asm.ClassVisitor#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: com.artemis.weaver.transplant.ClassMethodTransplantVisitor#contains(java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.String,com.artemis.meta.ClassMetadata,org.objectweb.asm.MethodVisitor)
CALLER: net.onedaybeard.ecs.model.scan.ClassData#accept(org.objectweb.asm.ClassVisitor)
	CALLEE: org.objectweb.asm.ClassReader#<init>(byte[])
	CALLEE: org.objectweb.asm.ClassReader#accept(org.objectweb.asm.ClassVisitor,int)
CALLER: net.onedaybeard.ecs.model.scan.EcsScanner#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.ClassVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: static net.onedaybeard.ecs.model.scan.BindVisitor#accepts(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.BindVisitor#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
CALLER: net.onedaybeard.ecs.model.scan.EcsScanner#visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.ConstructorScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: net.onedaybeard.ecs.model.scan.MethodScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
CALLER: net.onedaybeard.ecs.model.scan.EcsScanner#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#equals(java.lang.Object)
	CALLEE: org.objectweb.asm.ClassVisitor#visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
CALLER: org.objectweb.asm.Symbol#getArgumentsAndReturnSizes()
	CALLEE: static org.objectweb.asm.Type#getArgumentsAndReturnSizes(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitProvide(java.lang.String,java.lang.String[])
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitUse(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitOpen(java.lang.String,int,java.lang.String[])
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantModule(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantPackage(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitExport(java.lang.String,int,java.lang.String[])
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantModule(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantPackage(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitRequire(java.lang.String,int,java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantModule(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitPackage(java.lang.String)
	CALLEE: org.objectweb.asm.ByteVector#putShort(int)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantPackage(java.lang.String)
CALLER: org.objectweb.asm.ModuleWriter#visitMainClass(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantClass(java.lang.String)
CALLER: net.onedaybeard.ecs.model.scan.EcsTypeData#compareTo(java.lang.Object)
	CALLEE: net.onedaybeard.ecs.model.scan.EcsTypeData#compareTo(net.onedaybeard.ecs.model.scan.EcsTypeData)
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
CALLER: com.artemis.weaver.profile.ProfileEndWeaver#onMethodExit(int)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: com.artemis.weaver.profile.ProfileInitializeWeaver#onMethodExit(int)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.MethodVisitor#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitTypeInsn(int,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInsn(int)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitTypeInsn(int,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitTypeInsn(int,java.lang.String)
CALLER: com.artemis.weaver.profile.ProfileBeginWeaver#onMethodEnter()
	CALLEE: org.objectweb.asm.Type#getDescriptor()
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#remap(int,org.objectweb.asm.Type)
	CALLEE: org.objectweb.asm.Type#getSize()
	CALLEE: org.objectweb.asm.commons.LocalVariablesSorter#newLocalMapping(org.objectweb.asm.Type)
	CALLEE: org.objectweb.asm.commons.GeneratorAdapter#setLocalType(int,org.objectweb.asm.Type)
CALLER: org.objectweb.asm.commons.AdviceAdapter#addForwardJumps(org.objectweb.asm.Label,org.objectweb.asm.Label[])
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#addForwardJump(org.objectweb.asm.Label)
CALLER: org.objectweb.asm.commons.AdviceAdapter#doVisitMethodInsn(int,java.lang.String,java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getArgumentTypes(java.lang.String)
	CALLEE: static org.objectweb.asm.Type#getReturnType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getSize()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#pushValue(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#popValue()
	CALLEE: com.artemis.weaver.profile.ProfileBeginWeaver#onMethodEnter()
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#onMethodEnter()
CALLER: static com.artemis.weaver.ConstructorInvocationVisitor#owner(com.artemis.meta.ClassMetadata,java.lang.String)
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: static com.artemis.meta.ClassMetadataUtil#instanceFields(com.artemis.meta.ClassMetadata)
	CALLEE: com.artemis.meta.ClassMetadata#fields()
	CALLEE: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#<init>(com.artemis.meta.ClassMetadataUtil.1)
CALLER: com.artemis.weaver.pooled.ResetMethodVisitor#resetField(com.artemis.meta.FieldDescriptor)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.tree.InsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.tree.LdcInsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.tree.IntInsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.tree.VarInsnNode#accept(org.objectweb.asm.MethodVisitor)
CALLER: com.artemis.weaver.pooled.ResetMethodVisitor#clearCollection(com.artemis.meta.FieldDescriptor,int)
	CALLEE: static org.objectweb.asm.Type#getType(java.lang.String)
	CALLEE: org.objectweb.asm.Type#getInternalName()
	CALLEE: org.objectweb.asm.MethodVisitor#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: com.artemis.weaver.OptimizationTransmuter.ProcessInvocationOptimizer#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.transplant.MethodBodyTransplanter#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.EntityLinkGenerator.4.1#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
	CALLEE: com.artemis.weaver.ConstructorInvocationVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)
CALLER: com.artemis.weaver.transplant.MethodBodyTransplanter#<init>(java.lang.String,com.artemis.meta.ClassMetadata,org.objectweb.asm.MethodVisitor)
	CALLEE: static org.objectweb.asm.Type#getObjectType(java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int,org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.Type#getInternalName()
CALLER: net.onedaybeard.ecs.model.scan.BindVisitor#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int)
CALLER: net.onedaybeard.ecs.model.scan.ConstructorScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int)
CALLER: net.onedaybeard.ecs.model.scan.MethodScanner#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.MethodVisitor#<init>(int)
CALLER: org.objectweb.asm.SymbolTable#addConstantPackage(java.lang.String)
	CALLEE: org.objectweb.asm.SymbolTable#addConstantUtf8Reference(int,java.lang.String)
CALLER: net.onedaybeard.ecs.model.scan.EcsTypeData#compareTo(net.onedaybeard.ecs.model.scan.EcsTypeData)
	CALLEE: org.objectweb.asm.Type#toString()
CALLER: org.objectweb.asm.commons.LocalVariablesSorter#newLocalMapping(org.objectweb.asm.Type)
	CALLEE: org.objectweb.asm.Type#getSize()
CALLER: static com.artemis.weaver.ConstructorInvocationVisitor.1#<clinit>()
	CALLEE: static com.artemis.meta.ClassMetadata.WeaverType#values()
CALLER: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#<init>(com.artemis.meta.ClassMetadataUtil.1)
	CALLEE: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#<init>()
CALLER: net.onedaybeard.ecs.model.EcsTypeInspector#lambda$findEcsTypes$0(net.onedaybeard.ecs.model.scan.ClassData)
	CALLEE: net.onedaybeard.ecs.model.EcsTypeInspector#isEcsType(org.objectweb.asm.Type)
CALLER: net.onedaybeard.ecs.model.scan.SurfaceTypeCollector#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static net.onedaybeard.ecs.model.scan.TypeConfiguration#type(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.onedaybeard.ecs.model.scan.ParentChainFinder#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static net.onedaybeard.ecs.model.scan.TypeConfiguration#type(java.lang.String)
	CALLEE: org.objectweb.asm.ClassVisitor#visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.onedaybeard.ecs.model.scan.ParentChainFinder#addToMap(org.objectweb.asm.Type,org.objectweb.asm.Type)
CALLER: net.onedaybeard.ecs.model.scan.BindVisitor#visitArray(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.BindVisitor.BindValueVisitor#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
CALLER: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#compare(java.lang.Object,java.lang.Object)
	CALLEE: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#compare(com.artemis.meta.FieldDescriptor,com.artemis.meta.FieldDescriptor)
CALLER: org.objectweb.asm.tree.InsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsn(int)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsn(int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitInsn(int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#acceptAnnotations(org.objectweb.asm.MethodVisitor)
CALLER: org.objectweb.asm.tree.LdcInsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodWriter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#acceptAnnotations(org.objectweb.asm.MethodVisitor)
CALLER: org.objectweb.asm.tree.IntInsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitIntInsn(int,int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#acceptAnnotations(org.objectweb.asm.MethodVisitor)
CALLER: org.objectweb.asm.tree.VarInsnNode#accept(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.MethodWriter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.commons.AdviceAdapter#visitVarInsn(int,int)
	CALLEE: org.objectweb.asm.tree.AbstractInsnNode#acceptAnnotations(org.objectweb.asm.MethodVisitor)
CALLER: net.onedaybeard.ecs.model.scan.MethodScanner#visitAnnotation(java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodVisitor#visitAnnotation(java.lang.String,boolean)
	CALLEE: static net.onedaybeard.ecs.model.scan.BindVisitor#accepts(java.lang.String)
	CALLEE: net.onedaybeard.ecs.model.scan.BindVisitor#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
CALLER: net.onedaybeard.ecs.model.scan.ConstructorScanner#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
CALLER: net.onedaybeard.ecs.model.scan.MethodScanner#visitLdcInsn(java.lang.Object)
	CALLEE: org.objectweb.asm.MethodVisitor#visitLdcInsn(java.lang.Object)
CALLER: net.onedaybeard.ecs.model.scan.ConstructorScanner#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.objectweb.asm.MethodVisitor#visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)
CALLER: net.onedaybeard.ecs.model.scan.BindVisitor.BindValueVisitor#<init>(net.onedaybeard.ecs.model.scan.EcsTypeData,net.onedaybeard.ecs.model.scan.ConfigurationResolver)
	CALLEE: org.objectweb.asm.AnnotationVisitor#<init>(int)
CALLER: com.artemis.meta.ClassMetadataUtil.PrimitiveSizeComparator#compare(com.artemis.meta.FieldDescriptor,com.artemis.meta.FieldDescriptor)
	CALLEE: static com.artemis.meta.ClassMetadataUtil#sizeOf(com.artemis.meta.FieldDescriptor)
CALLER: org.objectweb.asm.tree.AbstractInsnNode#acceptAnnotations(org.objectweb.asm.MethodVisitor)
	CALLEE: org.objectweb.asm.MethodVisitor#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
	CALLEE: org.objectweb.asm.MethodWriter#visitInsnAnnotation(int,org.objectweb.asm.TypePath,java.lang.String,boolean)
CALLER: org.objectweb.asm.ConstantDynamic#equals(java.lang.Object)
	CALLEE: org.objectweb.asm.Handle#equals(java.lang.Object)
CALLER: net.onedaybeard.ecs.model.scan.BindVisitor.BindValueVisitor#visit(java.lang.String,java.lang.Object)
	CALLEE: org.objectweb.asm.AnnotationVisitor#visit(java.lang.String,java.lang.Object)
