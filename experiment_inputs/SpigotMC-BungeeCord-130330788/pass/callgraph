CALLER: static net.md_5.bungee.Bootstrap#main(java.lang.String[])
	CALLEE: static net.md_5.bungee.BungeeCordLauncher#main(java.lang.String[])
CALLER: static net.md_5.bungee.BungeeCordLauncher#main(java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: static net.md_5.bungee.command.ConsoleCommandSender#getInstance()
	CALLEE: net.md_5.bungee.BungeeCord#getConsole()
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#color(net.md_5.bungee.api.ChatColor)
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(net.md_5.bungee.api.chat.BaseComponent[])
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#create()
	CALLEE: jline.console.ConsoleReader#readLine(java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String)
	CALLEE: joptsimple.OptionSet#has(java.lang.String)
	CALLEE: joptsimple.OptionParser#<init>()
	CALLEE: joptsimple.OptionParser#allowsUnrecognizedOptions()
	CALLEE: joptsimple.OptionParser#acceptsAll(java.util.List,java.lang.String)
	CALLEE: joptsimple.OptionParser#parse(java.lang.String[])
	CALLEE: joptsimple.OptionParser#printHelpOn(java.io.OutputStream)
	CALLEE: net.md_5.bungee.BungeeCord#<init>()
	CALLEE: static net.md_5.bungee.api.ProxyServer#setInstance(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: net.md_5.bungee.BungeeCord#start()
	CALLEE: net.md_5.bungee.BungeeCord#getConsoleReader()
CALLER: joptsimple.OptionParser#<init>()
	CALLEE: joptsimple.OptionParser#<init>(boolean)
CALLER: joptsimple.OptionParser#acceptsAll(java.util.List,java.lang.String)
	CALLEE: static joptsimple.ParserRules#ensureLegalOptions(java.util.List)
	CALLEE: joptsimple.OptionSpecBuilder#<init>(joptsimple.OptionParser,java.util.List,java.lang.String)
CALLER: joptsimple.OptionParser#parse(java.lang.String[])
	CALLEE: joptsimple.ArgumentList#<init>(java.lang.String[])
	CALLEE: joptsimple.OptionSet#<init>(java.util.Map)
	CALLEE: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.ArgumentList#hasMore()
	CALLEE: joptsimple.OptionParser#reset()
	CALLEE: joptsimple.OptionParser#ensureRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#ensureAllowedOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.SimpleOptionNameMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
	CALLEE: joptsimple.internal.SimpleOptionNameMap#get(java.lang.String)
	CALLEE: joptsimple.OptionParserState.2#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParserState.1#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: joptsimple.OptionParser#printHelpOn(java.io.OutputStream)
	CALLEE: joptsimple.OptionParser#printHelpOn(java.io.Writer)
CALLER: net.md_5.bungee.BungeeCord#<init>()
	CALLEE: net.md_5.bungee.command.CommandEnd#<init>()
	CALLEE: net.md_5.bungee.command.CommandIP#<init>()
	CALLEE: net.md_5.bungee.command.CommandBungee#<init>()
	CALLEE: net.md_5.bungee.command.CommandPerms#<init>()
	CALLEE: net.md_5.bungee.jni.NativeCode#load()
	CALLEE: com.google.gson.GsonBuilder#create()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#registerCommand(net.md_5.bungee.api.plugin.Plugin,net.md_5.bungee.api.plugin.Command)
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: net.md_5.bungee.api.ProxyServer#<init>()
	CALLEE: net.md_5.bungee.conf.Configuration#<init>()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: net.md_5.bungee.conf.YamlConfig#<init>()
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#<init>()
	CALLEE: com.google.gson.GsonBuilder#<init>()
	CALLEE: net.md_5.bungee.chat.ComponentSerializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.KeybindComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.ScoreComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.SelectorComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.PlayerInfoSerializer#<init>()
	CALLEE: static net.md_5.bungee.api.Favicon#getFaviconTypeAdapter()
	CALLEE: net.md_5.bungee.module.ModuleManager#<init>()
	CALLEE: net.md_5.bungee.BungeeCord#registerChannel(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeCord#reloadMessages()
	CALLEE: static org.fusesource.jansi.AnsiConsole#systemInstall()
	CALLEE: jline.console.ConsoleReader#<init>()
	CALLEE: jline.console.ConsoleReader#setExpandEvents(boolean)
	CALLEE: net.md_5.bungee.command.ConsoleCommandCompleter#<init>(net.md_5.bungee.api.ProxyServer)
	CALLEE: jline.console.ConsoleReader#addCompleter(jline.console.completer.Completer)
	CALLEE: net.md_5.bungee.log.BungeeLogger#<init>(java.lang.String,java.lang.String,jline.console.ConsoleReader)
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#<init>(java.util.logging.Logger,java.util.logging.Level)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#<init>(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.command.CommandReload#<init>()
CALLER: static net.md_5.bungee.api.ProxyServer#setInstance(net.md_5.bungee.api.ProxyServer)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: net.md_5.bungee.BungeeCord#start()
	CALLEE: net.md_5.bungee.BungeeCord.1#<init>(net.md_5.bungee.BungeeCord)
	CALLEE: net.md_5.bungee.Metrics#<init>()
	CALLEE: net.md_5.bungee.BungeeCord.2#<init>(net.md_5.bungee.BungeeCord)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#build()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.BungeeCord#registerChannel(java.lang.String)
	CALLEE: static io.netty.util.ResourceLeakDetector#setLevel(io.netty.util.ResourceLeakDetector.Level)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#<init>()
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder#setNameFormat(java.lang.String)
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#newEventLoopGroup(int,java.util.concurrent.ThreadFactory)
	CALLEE: net.md_5.bungee.module.ModuleManager#load(net.md_5.bungee.api.ProxyServer,java.io.File)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#detectPlugins(java.io.File)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#loadPlugins()
	CALLEE: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.conf.Configuration#isForgeSupport()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugins()
	CALLEE: net.md_5.bungee.conf.Configuration#getThrottle()
	CALLEE: net.md_5.bungee.conf.Configuration#getThrottleLimit()
	CALLEE: net.md_5.bungee.ConnectionThrottle#<init>(int,int)
	CALLEE: net.md_5.bungee.BungeeCord#startListeners()
CALLER: static net.md_5.bungee.command.ConsoleCommandSender#<clinit>()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#<init>()
CALLER: net.md_5.bungee.BungeeCord#getConsole()
	CALLEE: static net.md_5.bungee.command.ConsoleCommandSender#getInstance()
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#<init>(net.md_5.bungee.api.chat.BaseComponent)
CALLER: static net.md_5.bungee.api.ChatColor#<clinit>()
	CALLEE: net.md_5.bungee.api.ChatColor#<init>(char,java.lang.String,java.awt.Color)
	CALLEE: net.md_5.bungee.api.ChatColor#<init>(char,java.lang.String)
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#color(net.md_5.bungee.api.ChatColor)
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#getCurrentComponent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setColor(net.md_5.bungee.api.ChatColor)
CALLER: joptsimple.OptionParser#<init>(boolean)
	CALLEE: joptsimple.BuiltinHelpFormatter#<init>()
	CALLEE: static joptsimple.OptionParserState#moreOptions(boolean)
	CALLEE: joptsimple.internal.AbbreviationMap#<init>()
	CALLEE: joptsimple.internal.SimpleOptionNameMap#<init>()
	CALLEE: joptsimple.NonOptionArgumentSpec#<init>()
	CALLEE: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
CALLER: static joptsimple.ParserRules#ensureLegalOptions(java.util.List)
	CALLEE: static joptsimple.ParserRules#ensureLegalOption(java.lang.String)
CALLER: joptsimple.OptionSpecBuilder#<init>(joptsimple.OptionParser,java.util.List,java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.OptionSpecBuilder#attachToParser()
CALLER: joptsimple.OptionSet#<init>(java.util.Map)
	CALLEE: static joptsimple.OptionSet#defaultValues(java.util.Map)
CALLER: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
CALLER: joptsimple.OptionParser#reset()
	CALLEE: static joptsimple.OptionParserState#moreOptions(boolean)
CALLER: joptsimple.OptionParser#ensureRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#missingRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#isHelpOptionPresent(joptsimple.OptionSet)
	CALLEE: joptsimple.MissingRequiredOptionsException#<init>(java.util.List)
CALLER: joptsimple.OptionParser#ensureAllowedOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#isHelpOptionPresent(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#unavailableOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.UnavailableOptionException#<init>(java.util.List)
CALLER: joptsimple.OptionParser#printHelpOn(java.io.Writer)
	CALLEE: joptsimple.OptionParser#_recognizedOptions()
	CALLEE: joptsimple.BuiltinHelpFormatter#format(java.util.Map)
CALLER: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy)
CALLER: net.md_5.bungee.conf.YamlConfig#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
CALLER: net.md_5.bungee.scheduler.BungeeScheduler#<init>()
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap#<init>()
	CALLEE: static gnu.trove.TCollections#synchronizedMap(gnu.trove.map.TIntObjectMap)
	CALLEE: static com.google.common.collect.HashMultimap#create()
	CALLEE: static com.google.common.collect.Multimaps#synchronizedMultimap(com.google.common.collect.Multimap)
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler.1#<init>(net.md_5.bungee.scheduler.BungeeScheduler)
CALLER: static net.md_5.bungee.chat.ComponentSerializer#<clinit>()
	CALLEE: com.google.gson.GsonBuilder#<init>()
	CALLEE: net.md_5.bungee.chat.ComponentSerializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.KeybindComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.ScoreComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.SelectorComponentSerializer#<init>()
	CALLEE: com.google.gson.JsonParser#<init>()
	CALLEE: net.md_5.bungee.api.chat.hover.content.EntitySerializer#<init>()
	CALLEE: net.md_5.bungee.api.chat.hover.content.TextSerializer#<init>()
	CALLEE: net.md_5.bungee.api.chat.hover.content.ItemSerializer#<init>()
	CALLEE: net.md_5.bungee.api.chat.ItemTag.Serializer#<init>()
	CALLEE: com.google.gson.GsonBuilder#create()
CALLER: com.google.gson.GsonBuilder#registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.reflect.TypeToken#get(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal.bind.TreeTypeAdapter#newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
CALLER: net.md_5.bungee.chat.TextComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: net.md_5.bungee.chat.TranslatableComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: net.md_5.bungee.chat.KeybindComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: net.md_5.bungee.chat.ScoreComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: net.md_5.bungee.chat.SelectorComponentSerializer#<init>()
	CALLEE: net.md_5.bungee.chat.BaseComponentSerializer#<init>()
CALLER: static net.md_5.bungee.api.ServerPing.PlayerInfo#<clinit>()
	CALLEE: static net.md_5.bungee.Util#getUUID(java.lang.String)
CALLER: static net.md_5.bungee.api.Favicon#<clinit>()
	CALLEE: net.md_5.bungee.api.Favicon.1#<init>()
CALLER: net.md_5.bungee.module.ModuleManager#<init>()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#<init>()
CALLER: net.md_5.bungee.BungeeCord#reloadMessages()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
CALLER: static org.fusesource.jansi.AnsiConsole#<clinit>()
	CALLEE: static org.fusesource.jansi.AnsiConsole#wrapOutputStream(java.io.OutputStream)
CALLER: static jline.console.ConsoleReader#<clinit>()
	CALLEE: static jline.internal.Configuration#getLineSeparator()
CALLER: jline.console.ConsoleReader#<init>()
	CALLEE: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal)
CALLER: net.md_5.bungee.log.BungeeLogger#<init>(java.lang.String,java.lang.String,jline.console.ConsoleReader)
	CALLEE: net.md_5.bungee.log.LogDispatcher#<init>(net.md_5.bungee.log.BungeeLogger)
	CALLEE: net.md_5.bungee.log.ConciseFormatter#<init>(boolean)
	CALLEE: net.md_5.bungee.log.ColouredWriter#<init>(jline.console.ConsoleReader)
CALLER: net.md_5.bungee.api.plugin.PluginManager#<init>(net.md_5.bungee.api.ProxyServer)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.graph.GraphBuilder#directed()
	CALLEE: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor)
	CALLEE: net.md_5.bungee.event.EventBus#<init>(java.util.logging.Logger)
	CALLEE: net.md_5.bungee.api.plugin.LibraryLoader#<init>(java.util.logging.Logger)
	CALLEE: com.google.common.graph.GraphBuilder#build()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#setSkipMissingProperties(boolean)
CALLER: net.md_5.bungee.command.CommandReload#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandEnd#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandIP#<init>()
	CALLEE: net.md_5.bungee.command.PlayerCommand#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.command.CommandBungee#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
CALLER: net.md_5.bungee.command.CommandPerms#<init>()
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
CALLER: static net.md_5.bungee.EncryptionUtil#<clinit>()
	CALLEE: net.md_5.bungee.jni.NativeCode#<init>(java.lang.String,java.util.function.Supplier,java.util.function.Supplier)
CALLER: static net.md_5.bungee.compress.CompressFactory#<clinit>()
	CALLEE: net.md_5.bungee.jni.NativeCode#<init>(java.lang.String,java.util.function.Supplier,java.util.function.Supplier)
CALLER: static io.netty.util.ResourceLeakDetector.Level#<clinit>()
	CALLEE: io.netty.util.ResourceLeakDetector.Level#<init>(java.lang.String,int)
CALLER: static io.netty.util.ResourceLeakDetector#setLevel(io.netty.util.ResourceLeakDetector.Level)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.ResourceLeakDetector#<clinit>()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.ResourceLeakDetector.Level#parseLevel(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: com.google.common.util.concurrent.ThreadFactoryBuilder#setNameFormat(java.lang.String)
	CALLEE: static com.google.common.util.concurrent.ThreadFactoryBuilder#format(java.lang.String,java.lang.Object[])
CALLER: static net.md_5.bungee.netty.PipelineUtils#newEventLoopGroup(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
CALLER: static net.md_5.bungee.netty.PipelineUtils#<clinit>()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static io.netty.util.AttributeKey#valueOf(java.lang.String)
	CALLEE: net.md_5.bungee.netty.PipelineUtils.1#<init>()
	CALLEE: net.md_5.bungee.netty.PipelineUtils.Base#<init>()
	CALLEE: net.md_5.bungee.protocol.KickStringWriter#<init>()
	CALLEE: net.md_5.bungee.protocol.Varint21LengthFieldPrepender#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static io.netty.channel.epoll.Epoll#isAvailable()
	CALLEE: static io.netty.channel.epoll.Epoll#unavailabilityCause()
	CALLEE: static net.md_5.bungee.Util#exception(java.lang.Throwable)
	CALLEE: io.netty.channel.WriteBufferWaterMark#<init>(int,int)
CALLER: net.md_5.bungee.module.ModuleManager#load(net.md_5.bungee.api.ProxyServer,java.io.File)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#retrieve(net.md_5.bungee.module.ModuleSpec,net.md_5.bungee.module.ModuleVersion)
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
	CALLEE: net.md_5.bungee.module.ModuleSpec#<init>(java.lang.String,java.io.File,net.md_5.bungee.module.ModuleSource)
	CALLEE: net.md_5.bungee.module.ModuleManager#getVersion(java.io.File)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleVersion#equals(java.lang.Object)
CALLER: net.md_5.bungee.api.plugin.PluginManager#detectPlugins(java.io.File)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.api.plugin.PluginManager#loadPlugins()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
CALLER: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getName()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.Favicon#create(java.awt.image.BufferedImage)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveSet#<init>(java.util.Collection)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsValue(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object,int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: net.md_5.bungee.BungeeCord#getConfigurationAdapter()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getServers()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getList(java.lang.String,java.util.Collection)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getBoolean(java.lang.String,boolean)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getInt(java.lang.String,int)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getString(java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#getListeners()
	CALLEE: net.md_5.bungee.conf.YamlConfig#load()
CALLER: net.md_5.bungee.api.plugin.PluginManager#enablePlugins()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: net.md_5.bungee.ConnectionThrottle#<init>(int,int)
	CALLEE: static com.google.common.base.Ticker#systemTicker()
	CALLEE: net.md_5.bungee.ConnectionThrottle#<init>(com.google.common.base.Ticker,int,int)
CALLER: net.md_5.bungee.BungeeCord#startListeners()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#localAddress(java.net.SocketAddress)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getHost()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isProxyProtocol()
	CALLEE: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.Configuration#getListeners()
	CALLEE: net.md_5.bungee.BungeeCord.3#<init>(net.md_5.bungee.BungeeCord,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: io.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#getServerChannel(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: net.md_5.bungee.BungeeCord.4#<init>(net.md_5.bungee.BungeeCord,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: net.md_5.bungee.query.RemoteQuery#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: static net.md_5.bungee.netty.PipelineUtils#getDatagramChannel()
	CALLEE: net.md_5.bungee.query.RemoteQuery#start(java.lang.Class,java.net.InetSocketAddress,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelFutureListener)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#option(io.netty.channel.ChannelOption,java.lang.Object)
	CALLEE: io.netty.bootstrap.ServerBootstrap#childAttr(io.netty.util.AttributeKey,java.lang.Object)
	CALLEE: io.netty.bootstrap.ServerBootstrap#childHandler(io.netty.channel.ChannelHandler)
CALLER: net.md_5.bungee.api.chat.TextComponent#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#<init>()
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#<init>(net.md_5.bungee.api.chat.BaseComponent)
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#<init>(net.md_5.bungee.api.chat.BaseComponent[])
CALLER: net.md_5.bungee.api.ChatColor#<init>(char,java.lang.String)
	CALLEE: net.md_5.bungee.api.ChatColor#<init>(char,java.lang.String,java.awt.Color)
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#getCurrentComponent()
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#getDummy()
CALLER: jline.console.ConsoleReader#finalize()
	CALLEE: jline.console.ConsoleReader#shutdown()
CALLER: joptsimple.BuiltinHelpFormatter#<init>()
	CALLEE: joptsimple.BuiltinHelpFormatter#<init>(int,int)
CALLER: static joptsimple.OptionParserState#moreOptions(boolean)
	CALLEE: joptsimple.OptionParserState.2#<init>(boolean)
CALLER: joptsimple.NonOptionArgumentSpec#<init>()
	CALLEE: joptsimple.NonOptionArgumentSpec#<init>(java.lang.String)
CALLER: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#options()
	CALLEE: joptsimple.internal.AbbreviationMap#putAll(java.lang.Iterable,java.lang.Object)
	CALLEE: joptsimple.internal.SimpleOptionNameMap#putAll(java.lang.Iterable,java.lang.Object)
CALLER: static joptsimple.ParserRules#ensureLegalOption(java.lang.String)
	CALLEE: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: static joptsimple.ParserRules#ensureLegalOptionCharacter(char)
CALLER: joptsimple.NoArgumentOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
CALLER: joptsimple.OptionSpecBuilder#attachToParser()
	CALLEE: joptsimple.OptionParser#recognize(joptsimple.AbstractOptionSpec)
CALLER: static joptsimple.OptionSet#defaultValues(java.util.Map)
	CALLEE: joptsimple.OptionSpecBuilder#defaultValues()
	CALLEE: joptsimple.NonOptionArgumentSpec#defaultValues()
CALLER: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#options()
CALLER: joptsimple.OptionParser#missingRequiredOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.NonOptionArgumentSpec#isRequired()
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.SimpleOptionNameMap#toJavaUtilMap()
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#optionsHasAnyOf(joptsimple.OptionSet,java.util.Collection)
	CALLEE: joptsimple.OptionSpecBuilder#isRequired()
CALLER: joptsimple.OptionParser#isHelpOptionPresent(joptsimple.OptionSet)
	CALLEE: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.SimpleOptionNameMap#toJavaUtilMap()
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#isForHelp()
CALLER: joptsimple.MissingRequiredOptionsException#<init>(java.util.List)
	CALLEE: joptsimple.OptionException#<init>(java.util.Collection)
CALLER: joptsimple.OptionParser#unavailableOptions(joptsimple.OptionSet)
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#optionsHasAnyOf(joptsimple.OptionSet,java.util.Collection)
CALLER: joptsimple.UnavailableOptionException#<init>(java.util.List)
	CALLEE: joptsimple.OptionException#<init>(java.util.Collection)
CALLER: joptsimple.OptionParser#_recognizedOptions()
	CALLEE: joptsimple.AbstractOptionSpec#options()
CALLER: joptsimple.BuiltinHelpFormatter#format(java.util.Map)
	CALLEE: joptsimple.BuiltinHelpFormatter.1#<init>(joptsimple.BuiltinHelpFormatter)
	CALLEE: joptsimple.BuiltinHelpFormatter#addRows(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#formattedHelpOutput()
	CALLEE: joptsimple.internal.Rows#reset()
CALLER: static net.md_5.bungee.util.CaseInsensitiveHashingStrategy#<clinit>()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#<init>()
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy)
CALLER: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.serializer.NumberAnchorGenerator#<init>(int)
CALLER: static org.yaml.snakeyaml.DumperOptions.FlowStyle#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.FlowStyle#<init>(java.lang.String,int,java.lang.Boolean)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
CALLER: gnu.trove.map.hash.TIntObjectHashMap#<init>()
	CALLEE: gnu.trove.impl.hash.TIntHash#<init>()
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap.1#<init>(gnu.trove.map.hash.TIntObjectHashMap)
CALLER: static gnu.trove.TCollections#synchronizedMap(gnu.trove.map.TIntObjectMap)
	CALLEE: gnu.trove.impl.sync.TSynchronizedIntObjectMap#<init>(gnu.trove.map.TIntObjectMap)
CALLER: static com.google.common.collect.HashMultimap#create()
	CALLEE: com.google.common.collect.HashMultimap#<init>()
CALLER: static com.google.common.collect.Multimaps#synchronizedMultimap(com.google.common.collect.Multimap)
	CALLEE: static com.google.common.collect.Synchronized#multimap(com.google.common.collect.Multimap,java.lang.Object)
CALLER: static com.google.gson.internal.Excluder#<clinit>()
	CALLEE: com.google.gson.internal.Excluder#<init>()
CALLER: static com.google.gson.LongSerializationPolicy#<clinit>()
	CALLEE: com.google.gson.LongSerializationPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy.2#<init>(java.lang.String,int)
CALLER: static com.google.gson.FieldNamingPolicy#<clinit>()
	CALLEE: com.google.gson.FieldNamingPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.3#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.4#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy.5#<init>(java.lang.String,int)
CALLER: static com.google.gson.reflect.TypeToken#get(java.lang.reflect.Type)
	CALLEE: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
CALLER: static com.google.gson.internal.bind.TreeTypeAdapter#newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
	CALLEE: com.google.gson.reflect.TypeToken#getRawType()
	CALLEE: com.google.gson.reflect.TypeToken#getType()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.31#<init>(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
CALLER: static com.google.gson.internal.bind.TypeAdapters#<clinit>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.19#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.20#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.21#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.22#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.23#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.24#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.25#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.26#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.27#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.28#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.29#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.30#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.1#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.2#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.3#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.4#<init>()
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.5#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.6#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.7#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.8#<init>()
	CALLEE: com.google.gson.TypeAdapter#nullSafe()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.9#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.10#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.11#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.12#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.13#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.14#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.15#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.16#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.17#<init>()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.18#<init>()
CALLER: static net.md_5.bungee.Util#getUUID(java.lang.String)
	CALLEE: static com.google.common.primitives.UnsignedLongs#parseUnsignedLong(java.lang.String,int)
CALLER: net.md_5.bungee.api.Favicon.1#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static org.fusesource.jansi.AnsiConsole#wrapOutputStream(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: static org.fusesource.jansi.internal.CLibrary#isatty(int)
	CALLEE: org.fusesource.jansi.AnsiConsole.1#<init>(java.io.OutputStream)
CALLER: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal)
	CALLEE: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal,java.lang.String)
CALLER: static net.md_5.bungee.log.ColouredWriter#<clinit>()
	CALLEE: static org.fusesource.jansi.Ansi#ansi()
	CALLEE: static net.md_5.bungee.log.ColouredWriter#compile(net.md_5.bungee.api.ChatColor,java.lang.String)
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi#toString()
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi#bold()
	CALLEE: org.fusesource.jansi.Ansi#boldOff()
CALLER: static com.google.common.graph.GraphBuilder#directed()
	CALLEE: com.google.common.graph.GraphBuilder#<init>(boolean)
CALLER: static com.google.common.collect.ArrayListMultimap#create()
	CALLEE: com.google.common.collect.ArrayListMultimap#<init>()
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor#<clinit>()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#<init>()
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#maxLen(int,int)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#maxLen(long,int)
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#<init>()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.TypeDescription#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor)
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)
CALLER: net.md_5.bungee.api.plugin.LibraryLoader#<init>(java.util.logging.Logger)
	CALLEE: static org.apache.maven.repository.internal.MavenRepositorySystemUtils#newServiceLocator()
	CALLEE: static org.apache.maven.repository.internal.MavenRepositorySystemUtils#newSession()
	CALLEE: org.eclipse.aether.repository.LocalRepository#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.LibraryLoader.1#<init>(net.md_5.bungee.api.plugin.LibraryLoader,java.util.logging.Logger)
	CALLEE: org.eclipse.aether.repository.RemoteRepository.Builder#<init>(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.aether.repository.RemoteRepository.Builder#build()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#addService(java.lang.Class,java.lang.Class)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#getService(java.lang.Class)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setReadOnly()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setTransferListener(org.eclipse.aether.transfer.TransferListener)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setChecksumPolicy(java.lang.String)
CALLER: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: net.md_5.bungee.command.PlayerCommand#<init>(java.lang.String,java.lang.String,java.lang.String[])
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.Command#<init>(java.lang.String,java.lang.String,java.lang.String[])
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: static io.netty.util.internal.SystemPropertyUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
CALLER: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNonEmpty(java.lang.String,java.lang.String)
	CALLEE: io.netty.util.internal.SystemPropertyUtil.1#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.util.ResourceLeakDetector.Level#parseLevel(java.lang.String)
	CALLEE: static io.netty.util.ResourceLeakDetector.Level#values()
	CALLEE: static io.netty.util.ResourceLeakDetector#access$000()
CALLER: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
CALLER: static io.netty.channel.MultithreadEventLoopGroup#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.NettyRuntime#availableProcessors()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int)
CALLER: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
CALLER: static io.netty.util.AttributeKey#valueOf(java.lang.String)
	CALLEE: io.netty.util.ConstantPool#valueOf(java.lang.String)
CALLER: static io.netty.util.AttributeKey#<clinit>()
	CALLEE: io.netty.util.AttributeKey.1#<init>()
CALLER: static io.netty.channel.ChannelInitializer#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: net.md_5.bungee.netty.PipelineUtils.1#<init>()
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: net.md_5.bungee.netty.PipelineUtils.Base#<init>()
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: net.md_5.bungee.protocol.KickStringWriter#<init>()
	CALLEE: io.netty.handler.codec.MessageToByteEncoder#<init>()
CALLER: net.md_5.bungee.protocol.Varint21LengthFieldPrepender#<init>()
	CALLEE: io.netty.handler.codec.MessageToByteEncoder#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#<clinit>()
	CALLEE: io.netty.util.internal.PlatformDependent.4#<init>(java.io.File,java.util.Set,java.util.Set,java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent#unsafeUnavailabilityCause0()
	CALLEE: static io.netty.util.internal.PlatformDependent#maxDirectMemory0()
	CALLEE: static io.netty.util.internal.PlatformDependent#byteArrayBaseOffset0()
	CALLEE: static io.netty.util.internal.PlatformDependent#tmpdir0()
	CALLEE: static io.netty.util.internal.PlatformDependent#bitMode0()
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizeArch(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizeOs(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isOsx0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isJ9Jvm0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isIkvmDotNet0()
	CALLEE: static io.netty.util.internal.PlatformDependent#addressSize0()
	CALLEE: io.netty.util.internal.PlatformDependent.1#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
	CALLEE: io.netty.util.internal.PlatformDependent.2#<init>()
	CALLEE: io.netty.util.internal.PlatformDependent.3#<init>()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasDirectBufferNoCleanerConstructor()
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasAllocateArrayMethod()
	CALLEE: static io.netty.util.internal.PlatformDependent#maybeSuperUser0()
	CALLEE: static io.netty.util.internal.CleanerJava9#isSupported()
	CALLEE: io.netty.util.internal.CleanerJava9#<init>()
	CALLEE: static io.netty.util.internal.CleanerJava6#isSupported()
	CALLEE: io.netty.util.internal.CleanerJava6#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent0#isExplicitNoUnsafe()
CALLER: static io.netty.channel.epoll.Epoll#<clinit>()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
CALLER: static io.netty.channel.WriteBufferWaterMark#<clinit>()
	CALLEE: io.netty.channel.WriteBufferWaterMark#<init>(int,int,boolean)
CALLER: io.netty.channel.WriteBufferWaterMark#<init>(int,int)
	CALLEE: io.netty.channel.WriteBufferWaterMark#<init>(int,int,boolean)
CALLER: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: net.md_5.bungee.module.ModuleVersion#<init>(java.lang.String,java.lang.String)
CALLER: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#<init>(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#<init>(java.io.Reader)
	CALLEE: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
CALLER: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,java.util.Map)
CALLER: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#doPut(java.lang.Object,int)
CALLER: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
	CALLEE: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)
CALLER: net.md_5.bungee.module.ModuleManager#getVersion(java.io.File)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static net.md_5.bungee.module.ModuleVersion#parse(java.lang.String)
	CALLEE: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>()
CALLER: org.yaml.snakeyaml.Yaml#loadAs(java.io.InputStream,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#<init>(java.io.InputStream)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#<init>(java.io.Reader)
	CALLEE: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
CALLER: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
	CALLEE: com.google.common.graph.ConfigurableMutableGraph#putEdge(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#enablePlugin(java.util.Map,java.util.Stack,net.md_5.bungee.api.plugin.PluginDescription)
	CALLEE: net.md_5.bungee.api.plugin.LibraryLoader#createLoader(net.md_5.bungee.api.plugin.PluginDescription)
CALLER: static net.md_5.bungee.api.Favicon#create(java.awt.image.BufferedImage)
	CALLEE: static com.google.common.io.BaseEncoding#base64()
	CALLEE: net.md_5.bungee.api.Favicon#<init>(java.lang.String)
	CALLEE: com.google.common.io.BaseEncoding#encode(byte[])
CALLER: net.md_5.bungee.util.CaseInsensitiveSet#<init>(java.util.Collection)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,java.util.Collection)
CALLER: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: gnu.trove.map.hash.TCustomHashMap#containsValue(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static com.google.common.base.Ticker#<clinit>()
	CALLEE: com.google.common.base.Ticker.1#<init>()
CALLER: net.md_5.bungee.ConnectionThrottle#<init>(com.google.common.base.Ticker,int,int)
	CALLEE: static com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: net.md_5.bungee.ConnectionThrottle.1#<init>(net.md_5.bungee.ConnectionThrottle)
	CALLEE: com.google.common.cache.CacheBuilder#expireAfterWrite(long,java.util.concurrent.TimeUnit)
	CALLEE: com.google.common.cache.CacheBuilder#ticker(com.google.common.base.Ticker)
	CALLEE: com.google.common.cache.CacheBuilder#concurrencyLevel(int)
	CALLEE: com.google.common.cache.CacheBuilder#initialCapacity(int)
	CALLEE: com.google.common.cache.CacheBuilder#build(com.google.common.cache.CacheLoader)
CALLER: static io.netty.bootstrap.ServerBootstrap#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.bootstrap.ServerBootstrap#<init>()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#<init>()
	CALLEE: io.netty.bootstrap.ServerBootstrapConfig#<init>(io.netty.bootstrap.ServerBootstrap)
CALLER: static net.md_5.bungee.netty.PipelineUtils#getServerChannel(java.net.SocketAddress)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.ReflectiveChannelFactory#<init>(java.lang.Class)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channelFactory(io.netty.channel.ChannelFactory)
CALLER: static io.netty.channel.ChannelOption#<clinit>()
	CALLEE: io.netty.channel.ChannelOption.1#<init>()
	CALLEE: static io.netty.channel.ChannelOption#valueOf(java.lang.String)
CALLER: net.md_5.bungee.query.RemoteQuery#start(java.lang.Class,java.net.InetSocketAddress,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelFutureListener)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channel(java.lang.Class)
	CALLEE: io.netty.bootstrap.Bootstrap#<init>()
	CALLEE: net.md_5.bungee.query.QueryHandler#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#handler(io.netty.channel.ChannelHandler)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#localAddress(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#<init>(net.md_5.bungee.api.chat.BaseComponent[])
	CALLEE: net.md_5.bungee.api.chat.TextComponent#duplicate()
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder#resetCursor()
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#getDummy()
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder.1#<init>(net.md_5.bungee.api.chat.ComponentBuilder)
CALLER: jline.console.ConsoleReader#shutdown()
	CALLEE: jline.internal.NonBlockingInputStream#shutdown()
CALLER: joptsimple.BuiltinHelpFormatter#<init>(int,int)
	CALLEE: joptsimple.internal.Rows#<init>(int,int)
CALLER: joptsimple.OptionParserState.2#<init>(boolean)
	CALLEE: joptsimple.OptionParserState#<init>()
CALLER: joptsimple.NonOptionArgumentSpec#<init>(java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
CALLER: joptsimple.internal.AbbreviationMap#putAll(java.lang.Iterable,java.lang.Object)
	CALLEE: joptsimple.internal.AbbreviationMap#put(java.lang.String,java.lang.Object)
CALLER: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: joptsimple.OptionException#<init>(java.util.List)
CALLER: static joptsimple.ParserRules#ensureLegalOptionCharacter(char)
	CALLEE: joptsimple.IllegalOptionSpecificationException#<init>(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isAllowedPunctuation(char)
CALLER: joptsimple.AbstractOptionSpec#<init>(java.util.List,java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#arrangeOptions(java.util.List)
CALLER: joptsimple.internal.AbbreviationMap#toJavaUtilMap()
	CALLEE: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
CALLER: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
	CALLEE: joptsimple.internal.SimpleOptionNameMap#get(java.lang.String)
CALLER: joptsimple.OptionParser#optionsHasAnyOf(joptsimple.OptionSet,java.util.Collection)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#hasNext()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#hasNext()
	CALLEE: joptsimple.OptionSet#has(joptsimple.OptionSpec)
CALLER: joptsimple.OptionException#<init>(java.util.Collection)
	CALLEE: joptsimple.OptionException#specsToStrings(java.util.Collection)
CALLER: joptsimple.BuiltinHelpFormatter#addRows(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#addNonOptionsDescription(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#message(java.lang.String,java.lang.Object[])
	CALLEE: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#addHeaders(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#addOptions(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#fitRowsToWidth()
CALLER: joptsimple.BuiltinHelpFormatter#formattedHelpOutput()
	CALLEE: joptsimple.BuiltinHelpFormatter#nonOptionOutput()
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#optionOutput()
CALLER: net.md_5.bungee.log.LogDispatcher#run()
	CALLEE: net.md_5.bungee.log.BungeeLogger#doLog(java.util.logging.LogRecord)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy)
	CALLEE: gnu.trove.impl.hash.TObjectHash#<init>()
CALLER: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.ScalarStyle#<init>(java.lang.String,int,java.lang.Character)
CALLER: static org.yaml.snakeyaml.DumperOptions.LineBreak#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.LineBreak#<init>(java.lang.String,int,java.lang.String)
CALLER: static org.yaml.snakeyaml.DumperOptions.NonPrintableStyle#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.NonPrintableStyle#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.representer.Representer#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#<init>(org.yaml.snakeyaml.representer.Representer)
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.LoaderOptions#<init>()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)
CALLER: gnu.trove.impl.hash.TIntHash#<init>()
	CALLEE: gnu.trove.impl.hash.TPrimitiveHash#<init>()
CALLER: com.google.common.collect.HashMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
CALLER: static com.google.common.collect.Synchronized#multimap(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#<init>(com.google.common.collect.Multimap,java.lang.Object)
CALLER: com.google.gson.LongSerializationPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
CALLER: com.google.gson.LongSerializationPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.1#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.2#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.3#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.4#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.FieldNamingPolicy.5#<init>(java.lang.String,int)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
CALLER: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
CALLER: com.google.gson.internal.bind.TypeAdapters.1#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#<init>(java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.2#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.3#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.4#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#<init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.5#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.6#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.7#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.8#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.TypeAdapter#nullSafe()
	CALLEE: com.google.gson.TypeAdapter.1#<init>(com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.9#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.10#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.11#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.12#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.13#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.14#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.15#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.16#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.17#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.18#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.19#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.20#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.21#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.22#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.23#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#<init>(java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.24#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.25#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.27#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.gson.internal.bind.TypeAdapters#newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#<init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
CALLER: com.google.gson.internal.bind.TypeAdapters.28#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.internal.bind.TypeAdapters.29#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.common.primitives.UnsignedLongs#parseUnsignedLong(java.lang.String,int)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.primitives.UnsignedLongs#overflowInParse(long,int,int)
CALLER: static com.google.common.primitives.UnsignedLongs#<clinit>()
	CALLEE: static com.google.common.primitives.UnsignedLongs#divide(long,long)
	CALLEE: static com.google.common.primitives.UnsignedLongs#remainder(long,long)
CALLER: static org.fusesource.jansi.AnsiOutputStream#<clinit>()
	CALLEE: static org.fusesource.jansi.AnsiOutputStream#resetCode()
CALLER: static org.fusesource.jansi.WindowsAnsiOutputStream#<clinit>()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetStdHandle(int)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
	CALLEE: org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<init>()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
CALLER: static org.fusesource.jansi.internal.CLibrary#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.CLibrary#init()
CALLER: jline.console.ConsoleReader#<init>(java.lang.String,java.io.InputStream,java.io.OutputStream,jline.Terminal,java.lang.String)
	CALLEE: jline.console.CursorBuffer#<init>()
	CALLEE: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
	CALLEE: jline.console.KillRing#<init>()
	CALLEE: jline.console.completer.CandidateListCompletionHandler#<init>()
	CALLEE: static jline.internal.Configuration#getInteger(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#<init>()
	CALLEE: static jline.internal.Configuration#getEncoding()
	CALLEE: static jline.TerminalFactory#get()
	CALLEE: jline.console.ConsoleReader#setInput(java.io.InputStream)
	CALLEE: jline.console.ConsoleReader#getInputRc()
	CALLEE: jline.console.ConsoleKeys#<init>(java.lang.String,java.net.URL)
	CALLEE: jline.TerminalSupport#wrapOutIfNeeded(java.io.OutputStream)
	CALLEE: jline.TerminalSupport#getOutputEncoding()
CALLER: static org.fusesource.jansi.Ansi#ansi()
	CALLEE: static org.fusesource.jansi.Ansi#isEnabled()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#<init>(org.fusesource.jansi.Ansi.1)
CALLER: static org.fusesource.jansi.Ansi#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.1#<init>()
	CALLEE: org.fusesource.jansi.Ansi.2#<init>()
CALLER: static org.fusesource.jansi.Ansi.Attribute#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.Attribute#<init>(java.lang.String,int,int,java.lang.String)
CALLER: static org.fusesource.jansi.Ansi.Color#<clinit>()
	CALLEE: org.fusesource.jansi.Ansi.Color#<init>(java.lang.String,int,int,java.lang.String)
CALLER: static net.md_5.bungee.log.ColouredWriter#compile(net.md_5.bungee.api.ChatColor,java.lang.String)
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.log.ColouredWriter.ReplacementSpecification#<init>(java.util.regex.Pattern,java.lang.String)
CALLER: com.google.common.graph.GraphBuilder#<init>(boolean)
	CALLEE: com.google.common.graph.AbstractGraphBuilder#<init>(boolean)
CALLER: com.google.common.collect.ArrayListMultimap#<init>()
	CALLEE: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>(java.lang.Class)
	CALLEE: static org.yaml.snakeyaml.constructor.Constructor#checkRoot(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#<init>()
	CALLEE: org.yaml.snakeyaml.util.PlatformFeatureDetector#<init>()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#<init>(org.yaml.snakeyaml.util.PlatformFeatureDetector)
CALLER: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#<init>(org.yaml.snakeyaml.representer.Representer)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#<init>()
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer)
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: static org.yaml.snakeyaml.Yaml#initDumperOptions(org.yaml.snakeyaml.representer.Representer)
CALLER: static org.apache.maven.repository.internal.MavenRepositorySystemUtils#newServiceLocator()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#<init>()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#addService(java.lang.Class,java.lang.Class)
CALLER: static org.apache.maven.repository.internal.MavenRepositorySystemUtils#newSession()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setArtifactTypeRegistry(org.eclipse.aether.artifact.ArtifactTypeRegistry)
	CALLEE: org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy#<init>(boolean,boolean)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setArtifactDescriptorPolicy(org.eclipse.aether.resolution.ArtifactDescriptorPolicy)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setSystemProperties(java.util.Map)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setConfigProperties(java.util.Map)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#<init>()
	CALLEE: org.eclipse.aether.util.graph.traverser.FatArtifactTraverser#<init>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyTraverser(org.eclipse.aether.collection.DependencyTraverser)
	CALLEE: org.eclipse.aether.util.graph.manager.ClassicDependencyManager#<init>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyManager(org.eclipse.aether.collection.DependencyManager)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#<init>(java.lang.String[])
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.selector.AndDependencySelector#<init>(org.eclipse.aether.collection.DependencySelector[])
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setDependencySelector(org.eclipse.aether.collection.DependencySelector)
	CALLEE: org.eclipse.aether.util.graph.transformer.NearestVersionSelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.JavaScopeSelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.SimpleOptionalitySelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.JavaScopeDeriver#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ConflictResolver#<init>(org.eclipse.aether.util.graph.transformer.ConflictResolver.VersionSelector,org.eclipse.aether.util.graph.transformer.ConflictResolver.ScopeSelector,org.eclipse.aether.util.graph.transformer.ConflictResolver.OptionalitySelector,org.eclipse.aether.util.graph.transformer.ConflictResolver.ScopeDeriver)
	CALLEE: org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer#<init>(org.eclipse.aether.collection.DependencyGraphTransformer[])
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyGraphTransformer(org.eclipse.aether.collection.DependencyGraphTransformer)
	CALLEE: org.eclipse.aether.util.artifact.DefaultArtifactTypeRegistry#<init>()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String)
	CALLEE: org.eclipse.aether.util.artifact.DefaultArtifactTypeRegistry#add(org.eclipse.aether.artifact.ArtifactType)
CALLER: org.eclipse.aether.repository.LocalRepository#<init>(java.lang.String)
	CALLEE: org.eclipse.aether.repository.LocalRepository#<init>(java.io.File,java.lang.String)
CALLER: net.md_5.bungee.api.plugin.LibraryLoader.1#<init>(net.md_5.bungee.api.plugin.LibraryLoader,java.util.logging.Logger)
	CALLEE: org.eclipse.aether.transfer.AbstractTransferListener#<init>()
CALLER: static org.eclipse.aether.repository.RemoteRepository.Builder#<clinit>()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#<init>()
CALLER: org.eclipse.aether.repository.RemoteRepository.Builder#build()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#<init>(org.eclipse.aether.repository.RemoteRepository.Builder)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getDefaultFactory()
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4J2LoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
CALLER: static io.netty.util.internal.ObjectUtil#checkNonEmpty(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.NettyRuntime#availableProcessors()
	CALLEE: io.netty.util.NettyRuntime.AvailableProcessorsHolder#availableProcessors()
CALLER: static io.netty.util.NettyRuntime#<clinit>()
	CALLEE: io.netty.util.NettyRuntime.AvailableProcessorsHolder#<init>()
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int)
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int,io.netty.channel.SelectStrategyFactory)
CALLER: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider,io.netty.channel.SelectStrategyFactory)
CALLER: io.netty.util.AttributeKey.1#<init>()
	CALLEE: io.netty.util.ConstantPool#<init>()
CALLER: io.netty.channel.ChannelInitializer#<init>()
	CALLEE: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
CALLER: io.netty.handler.codec.MessageToByteEncoder#<init>()
	CALLEE: io.netty.handler.codec.MessageToByteEncoder#<init>(boolean)
CALLER: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent0#isAndroid()
CALLER: static io.netty.util.internal.PlatformDependent#unsafeUnavailabilityCause0()
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: static io.netty.util.internal.PlatformDependent#isIkvmDotNet()
	CALLEE: static io.netty.util.internal.PlatformDependent0#getUnsafeUnavailabilityCause()
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasUnsafe()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Throwable)
CALLER: static io.netty.util.internal.PlatformDependent#maxDirectMemory0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#byteArrayBaseOffset0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#byteArrayBaseOffset()
CALLER: static io.netty.util.internal.PlatformDependent#tmpdir0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
	CALLEE: static io.netty.util.internal.PlatformDependent#toDirectory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#bitMode0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent#normalizeArch(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#normalize(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#normalizeOs(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#normalize(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#isWindows0()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#isOsx0()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#isJ9Jvm0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#isIkvmDotNet0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#addressSize0()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#addressSize()
CALLER: static io.netty.util.internal.PlatformDependent#javaVersion()
	CALLEE: static io.netty.util.internal.PlatformDependent0#javaVersion()
CALLER: static io.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
CALLER: static io.netty.util.internal.PlatformDependent0#<clinit>()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent0#javaVersion()
	CALLEE: static io.netty.util.internal.PlatformDependent0#explicitNoUnsafeCause0()
	CALLEE: static io.netty.util.internal.PlatformDependent0#javaVersion0()
	CALLEE: static io.netty.util.internal.PlatformDependent0#isAndroid0()
	CALLEE: static io.netty.util.internal.PlatformDependent0#explicitTryReflectionSetAccessible0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: io.netty.util.internal.PlatformDependent0.1#<init>()
	CALLEE: io.netty.util.internal.PlatformDependent0.2#<init>(sun.misc.Unsafe)
	CALLEE: io.netty.util.internal.PlatformDependent0.3#<init>(sun.misc.Unsafe,java.nio.ByteBuffer)
	CALLEE: io.netty.util.internal.PlatformDependent0.4#<init>(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#objectFieldOffset(java.lang.reflect.Field)
	CALLEE: io.netty.util.internal.PlatformDependent0.5#<init>()
	CALLEE: io.netty.util.internal.PlatformDependent0.6#<init>()
	CALLEE: io.netty.util.internal.PlatformDependent0.7#<init>(java.lang.Object)
	CALLEE: io.netty.util.internal.PlatformDependent0.8#<init>()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isTraceEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isTraceEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isTraceEnabled()
CALLER: static io.netty.util.internal.PlatformDependent#maybeSuperUser0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
CALLER: static io.netty.util.internal.CleanerJava9#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasUnsafe()
	CALLEE: io.netty.util.internal.CleanerJava9.1#<init>(java.nio.ByteBuffer)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: static io.netty.util.internal.CleanerJava6#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#objectFieldOffset(java.lang.reflect.Field)
	CALLEE: io.netty.util.internal.CleanerJava6.1#<init>(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getObject(java.lang.Object,long)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#epollCreate()
	CALLEE: io.netty.channel.unix.FileDescriptor#<init>(int)
CALLER: static io.netty.channel.epoll.Native#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.ClassInitializerUtil#tryLoadClasses(java.lang.Class,java.lang.Class[])
	CALLEE: static io.netty.channel.epoll.Native#offsetofEpollData()
	CALLEE: static io.netty.channel.epoll.Native#loadNativeLibrary()
	CALLEE: io.netty.channel.epoll.Native.1#<init>()
	CALLEE: static io.netty.channel.unix.Unix#registerInternal(java.lang.Runnable)
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#epollin()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#epollout()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#epollrdhup()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#epollet()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#epollerr()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#isSupportingSendmmsg()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#isSupportingRecvmmsg()
	CALLEE: static io.netty.channel.epoll.Native#isSupportingUdpSegment()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#tcpFastopenMode()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#tcpMd5SigMaxKeyLen()
	CALLEE: static io.netty.channel.epoll.NativeStaticallyReferencedJniMethods#kernelVersion()
CALLER: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#<init>(int)
	CALLEE: static io.netty.channel.epoll.Native#eventFd()
CALLER: io.netty.channel.WriteBufferWaterMark#<init>(int,int,boolean)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(int,java.lang.String)
CALLER: org.yaml.snakeyaml.Yaml#loadFromReader(org.yaml.snakeyaml.reader.StreamReader,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.composer.Composer#<init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getSingleData(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setComposer(org.yaml.snakeyaml.composer.Composer)
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#putAll(java.util.Map)
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#indexForNull()
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#indexRehashed(java.lang.Object,int,int,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKeyForNull()
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKeyRehash(java.lang.Object,int,int,java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#doPut(java.lang.Object,int)
	CALLEE: gnu.trove.impl.hash.THash#postInsertHook(boolean)
CALLER: org.yaml.snakeyaml.Yaml#dumpAll(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#<init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#<init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#open()
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serialize(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#close()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#represent(java.lang.Object)
CALLER: org.yaml.snakeyaml.Yaml#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>()
	CALLEE: org.yaml.snakeyaml.representer.Representer#<init>()
	CALLEE: org.yaml.snakeyaml.LoaderOptions#<init>()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)
CALLER: net.md_5.bungee.api.plugin.LibraryLoader#createLoader(net.md_5.bungee.api.plugin.PluginDescription)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#<init>(java.lang.String)
	CALLEE: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String)
	CALLEE: org.eclipse.aether.collection.CollectRequest#<init>(org.eclipse.aether.graph.Dependency,java.util.List,java.util.List)
	CALLEE: org.eclipse.aether.resolution.DependencyRequest#<init>(org.eclipse.aether.collection.CollectRequest,org.eclipse.aether.graph.DependencyFilter)
CALLER: static com.google.common.io.BaseEncoding#<clinit>()
	CALLEE: com.google.common.io.BaseEncoding.Base64Encoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.Base16Encoding#<init>(java.lang.String,java.lang.String)
CALLER: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,java.util.Collection)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#addAll(java.util.Collection)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#size()
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView#<init>(gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
CALLER: com.google.common.base.Ticker.1#<init>()
	CALLEE: com.google.common.base.Ticker#<init>()
CALLER: static com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: com.google.common.cache.CacheBuilder#<init>()
CALLER: static com.google.common.cache.CacheBuilder#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.1#<init>()
	CALLEE: static com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: com.google.common.cache.CacheBuilder.2#<init>()
	CALLEE: com.google.common.cache.CacheBuilder.3#<init>()
CALLER: net.md_5.bungee.ConnectionThrottle.1#<init>(net.md_5.bungee.ConnectionThrottle)
	CALLEE: com.google.common.cache.CacheLoader#<init>()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#<init>(io.netty.bootstrap.ServerBootstrap)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#<init>(io.netty.bootstrap.AbstractBootstrap)
CALLER: static io.netty.channel.epoll.EpollServerDomainSocketChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.channel.epoll.AbstractEpollServerChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean,int)
CALLER: static io.netty.channel.epoll.AbstractEpollChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
CALLER: static io.netty.channel.AbstractChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.channel.socket.nio.NioServerSocketChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean,int)
CALLER: static io.netty.channel.nio.AbstractNioChannel#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.channel.ReflectiveChannelFactory#<init>(java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: io.netty.bootstrap.AbstractBootstrap#channelFactory(io.netty.channel.ChannelFactory)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channelFactory(io.netty.bootstrap.ChannelFactory)
CALLER: io.netty.channel.ChannelOption.1#<init>()
	CALLEE: io.netty.util.ConstantPool#<init>()
CALLER: static io.netty.channel.ChannelOption#valueOf(java.lang.String)
	CALLEE: io.netty.util.ConstantPool#valueOf(java.lang.String)
CALLER: static io.netty.channel.epoll.EpollDatagramChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static io.netty.channel.socket.nio.NioDatagramChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: static io.netty.bootstrap.Bootstrap#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.bootstrap.Bootstrap#<init>()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#<init>()
	CALLEE: io.netty.bootstrap.BootstrapConfig#<init>(io.netty.bootstrap.Bootstrap)
CALLER: net.md_5.bungee.query.QueryHandler#<init>(net.md_5.bungee.api.ProxyServer,net.md_5.bungee.api.config.ListenerInfo)
	CALLEE: static com.google.common.cache.CacheBuilder#newBuilder()
	CALLEE: io.netty.channel.SimpleChannelInboundHandler#<init>()
	CALLEE: com.google.common.cache.CacheBuilder#expireAfterWrite(long,java.util.concurrent.TimeUnit)
	CALLEE: com.google.common.cache.CacheBuilder#build()
CALLER: net.md_5.bungee.api.chat.TextComponent#duplicate()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#duplicate()
CALLER: net.md_5.bungee.api.chat.ComponentBuilder.1#<init>(net.md_5.bungee.api.chat.ComponentBuilder)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#<init>()
CALLER: joptsimple.internal.AbbreviationMap#put(java.lang.String,java.lang.Object)
	CALLEE: static joptsimple.internal.AbbreviationMap#charsOf(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
CALLER: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
	CALLEE: joptsimple.internal.AbbreviationMap#addToMappings(java.util.Map)
CALLER: joptsimple.internal.AbbreviationMap#get(java.lang.String)
	CALLEE: static joptsimple.internal.AbbreviationMap#charsOf(java.lang.String)
CALLER: joptsimple.OptionException#specsToStrings(java.util.Collection)
	CALLEE: joptsimple.OptionException#specToString(joptsimple.OptionSpec)
CALLER: joptsimple.BuiltinHelpFormatter#addNonOptionsDescription(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#message(java.lang.String,java.lang.Object[])
	CALLEE: joptsimple.BuiltinHelpFormatter#findAndRemoveNonOptionsSpec(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#shouldShowNonOptionArgumentDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#addNonOptionRow(java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#createNonOptionArgumentsDisplay(joptsimple.OptionDescriptor)
CALLER: joptsimple.BuiltinHelpFormatter#message(java.lang.String,java.lang.Object[])
	CALLEE: static joptsimple.internal.Messages#message(java.util.Locale,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[])
CALLER: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String,java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#addHeaders(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#message(java.lang.String,java.lang.Object[])
	CALLEE: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String,java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#hasRequiredOption(java.util.Collection)
CALLER: joptsimple.BuiltinHelpFormatter#addOptions(java.util.Collection)
	CALLEE: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String,java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#createOptionDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#createDescriptionDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.AbstractOptionSpec#representsNonOptions()
	CALLEE: joptsimple.NonOptionArgumentSpec#representsNonOptions()
CALLER: joptsimple.BuiltinHelpFormatter#fitRowsToWidth()
	CALLEE: joptsimple.internal.Rows#fitToWidth()
CALLER: joptsimple.BuiltinHelpFormatter#nonOptionOutput()
	CALLEE: joptsimple.internal.Rows#render()
CALLER: joptsimple.BuiltinHelpFormatter#optionOutput()
	CALLEE: joptsimple.internal.Rows#render()
CALLER: gnu.trove.impl.hash.TObjectHash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter#<init>(org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentUuid#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#<init>(org.yaml.snakeyaml.representer.SafeRepresenter)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getNonPrintableStyle()
CALLER: org.yaml.snakeyaml.resolver.Resolver#<init>()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolvers()
CALLER: org.yaml.snakeyaml.Yaml#<init>(org.yaml.snakeyaml.constructor.BaseConstructor,org.yaml.snakeyaml.representer.Representer,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.LoaderOptions,org.yaml.snakeyaml.resolver.Resolver)
	CALLEE: org.yaml.snakeyaml.representer.Representer#setTimeZone(java.util.TimeZone)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#setAllowReadOnlyProperties(boolean)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#isExplicitPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#isExplicitPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.Representer#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.LoaderOptions#isAllowDuplicateKeys()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setAllowDuplicateKeys(boolean)
	CALLEE: org.yaml.snakeyaml.LoaderOptions#isWrappedToRootException()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#setWrappedToRootException(boolean)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndentWithIndicator()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndent()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndicatorIndent()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getDefaultFlowStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getDefaultScalarStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions#isAllowReadOnlyProperties()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getTimeZone()
CALLER: gnu.trove.impl.hash.TPrimitiveHash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>()
CALLER: com.google.common.collect.AbstractSetMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#<init>(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int,com.google.gson.LongSerializationPolicy.1)
	CALLEE: com.google.gson.LongSerializationPolicy#<init>(java.lang.String,int)
CALLER: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int,com.google.gson.FieldNamingPolicy.1)
	CALLEE: com.google.gson.FieldNamingPolicy#<init>(java.lang.String,int)
CALLER: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#<init>(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getLowerBounds()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getUpperBounds()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#getGenericComponentType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getActualTypeArguments()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getRawType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getOwnerType()
CALLER: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#getUpperBounds()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#getGenericComponentType()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#getRawType()
CALLER: com.google.gson.TypeAdapter.1#<init>(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: static com.google.common.primitives.UnsignedLongs#divide(long,long)
	CALLEE: static com.google.common.primitives.UnsignedLongs#compare(long,long)
CALLER: static com.google.common.primitives.UnsignedLongs#remainder(long,long)
	CALLEE: static com.google.common.primitives.UnsignedLongs#compare(long,long)
CALLER: net.md_5.bungee.log.BungeeLogger#log(java.util.logging.LogRecord)
	CALLEE: net.md_5.bungee.log.LogDispatcher#queue(java.util.logging.LogRecord)
CALLER: static org.fusesource.jansi.AnsiOutputStream#resetCode()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#reset()
	CALLEE: org.fusesource.jansi.Ansi#toString()
CALLER: static org.fusesource.jansi.internal.Kernel32#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#init()
CALLER: static org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#init()
CALLER: org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#<init>()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetConsoleScreenBufferInfo(long,org.fusesource.jansi.internal.Kernel32.CONSOLE_SCREEN_BUFFER_INFO)
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#invertAttributeColors(short)
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
CALLER: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.Class)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#version(java.lang.Class)
	CALLEE: org.fusesource.hawtjni.runtime.Library#<init>(java.lang.String,java.lang.String,java.lang.ClassLoader)
CALLER: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: org.fusesource.hawtjni.runtime.Library#doLoad()
CALLER: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: jline.console.KillRing#<init>()
	CALLEE: jline.console.KillRing#<init>(int)
CALLER: static jline.console.ConsoleReader.State#<clinit>()
	CALLEE: jline.console.ConsoleReader.State#<init>(java.lang.String,int)
CALLER: static jline.internal.Configuration#getInteger(java.lang.String,int)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: static jline.internal.Configuration#getEncoding()
	CALLEE: static jline.internal.Configuration#extractEncodingFromCtype(java.lang.String)
CALLER: static jline.TerminalFactory#get()
	CALLEE: static jline.TerminalFactory#create()
CALLER: static jline.TerminalFactory#<clinit>()
	CALLEE: static jline.TerminalFactory#registerFlavor(jline.TerminalFactory.Flavor,java.lang.Class)
CALLER: jline.console.ConsoleReader#setInput(java.io.InputStream)
	CALLEE: static jline.internal.Configuration#getLong(java.lang.String,long)
	CALLEE: jline.internal.NonBlockingInputStream#<init>(java.io.InputStream,boolean)
	CALLEE: jline.internal.InputStreamReader#<init>(java.io.InputStream,java.lang.String)
	CALLEE: jline.internal.NonBlockingInputStream#shutdown()
	CALLEE: jline.TerminalSupport#wrapInIfNeeded(java.io.InputStream)
	CALLEE: jline.TerminalSupport#isSupported()
CALLER: jline.console.ConsoleReader#getInputRc()
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
	CALLEE: static jline.internal.Configuration#getUserHome()
	CALLEE: static jline.internal.Urls#create(java.lang.String)
CALLER: jline.console.ConsoleKeys#<init>(java.lang.String,java.net.URL)
	CALLEE: static jline.console.KeyMap#keyMaps()
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
CALLER: org.fusesource.jansi.Ansi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#<init>(java.lang.StringBuilder)
CALLER: org.fusesource.jansi.Ansi.NoAnsi#<init>(org.fusesource.jansi.Ansi.1)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#<init>()
CALLER: com.google.common.graph.AbstractGraphBuilder#<init>(boolean)
	CALLEE: static com.google.common.graph.ElementOrder#insertion()
	CALLEE: static com.google.common.base.Optional#absent()
CALLER: com.google.common.collect.AbstractListMultimap#<init>(java.util.Map)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
CALLER: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription)
	CALLEE: org.yaml.snakeyaml.LoaderOptions#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#<init>(org.yaml.snakeyaml.util.PlatformFeatureDetector)
	CALLEE: org.yaml.snakeyaml.util.PlatformFeatureDetector#isRunningOnAndroid()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#<init>(org.yaml.snakeyaml.DumperOptions)
CALLER: static org.yaml.snakeyaml.Yaml#initDumperOptions(org.yaml.snakeyaml.representer.Representer)
	CALLEE: org.yaml.snakeyaml.DumperOptions#<init>()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getDefaultFlowStyle()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getDefaultScalarStyle()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.DumperOptions#setAllowReadOnlyProperties(boolean)
	CALLEE: org.yaml.snakeyaml.representer.Representer#getTimeZone()
	CALLEE: org.yaml.snakeyaml.DumperOptions#setTimeZone(java.util.TimeZone)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#isAllowReadOnlyProperties()
CALLER: org.eclipse.aether.impl.DefaultServiceLocator#<init>()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#addService(java.lang.Class,java.lang.Class)
CALLER: org.eclipse.aether.impl.DefaultServiceLocator#addService(java.lang.Class,java.lang.Class)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#getEntry(java.lang.Class,boolean)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator.Entry#addService(java.lang.Class)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#<init>()
	CALLEE: org.eclipse.aether.DefaultSessionData#<init>()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyTraverser(org.eclipse.aether.collection.DependencyTraverser)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.util.graph.manager.ClassicDependencyManager#<init>()
	CALLEE: org.eclipse.aether.util.graph.manager.ClassicDependencyManager#<init>(int,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyManager(org.eclipse.aether.collection.DependencyManager)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#<init>(java.lang.String[])
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#<init>(java.util.Collection,java.util.Collection)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setDependencySelector(org.eclipse.aether.collection.DependencySelector)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.util.graph.transformer.NearestVersionSelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ConflictResolver.VersionSelector#<init>()
CALLER: org.eclipse.aether.util.graph.transformer.JavaScopeSelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ConflictResolver.ScopeSelector#<init>()
CALLER: org.eclipse.aether.util.graph.transformer.SimpleOptionalitySelector#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ConflictResolver.OptionalitySelector#<init>()
CALLER: org.eclipse.aether.util.graph.transformer.JavaScopeDeriver#<init>()
	CALLEE: org.eclipse.aether.util.graph.transformer.ConflictResolver.ScopeDeriver#<init>()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setDependencyGraphTransformer(org.eclipse.aether.collection.DependencyGraphTransformer)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.util.artifact.DefaultArtifactTypeRegistry#<init>()
	CALLEE: org.eclipse.aether.util.artifact.SimpleArtifactTypeRegistry#<init>()
CALLER: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)
CALLER: org.eclipse.aether.util.artifact.DefaultArtifactTypeRegistry#add(org.eclipse.aether.artifact.ArtifactType)
	CALLEE: org.eclipse.aether.util.artifact.SimpleArtifactTypeRegistry#add(org.eclipse.aether.artifact.ArtifactType)
CALLER: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)
CALLER: org.eclipse.aether.artifact.DefaultArtifactType#<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)
	CALLEE: static org.eclipse.aether.artifact.DefaultArtifactType#emptify(java.lang.String)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setArtifactTypeRegistry(org.eclipse.aether.artifact.ArtifactTypeRegistry)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy#<init>(boolean,boolean)
	CALLEE: org.eclipse.aether.util.repository.SimpleArtifactDescriptorPolicy#<init>(int)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setArtifactDescriptorPolicy(org.eclipse.aether.resolution.ArtifactDescriptorPolicy)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setSystemProperties(java.util.Map)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#copySafe(java.util.Map,java.lang.Class)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setConfigProperties(java.util.Map)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#copySafe(java.util.Map,java.lang.Class)
CALLER: org.eclipse.aether.repository.RepositoryPolicy#<init>()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#<init>(boolean,java.lang.String,java.lang.String)
CALLER: org.eclipse.aether.repository.RemoteRepository#<init>(org.eclipse.aether.repository.RemoteRepository.Builder)
	CALLEE: static org.eclipse.aether.repository.RemoteRepository#copy(java.util.List)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#getDefaultFactory()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#newDefaultFactory(java.lang.String)
CALLER: static io.netty.channel.DefaultSelectStrategyFactory#<clinit>()
	CALLEE: io.netty.channel.DefaultSelectStrategyFactory#<init>()
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,int,io.netty.channel.SelectStrategyFactory)
	CALLEE: static io.netty.util.concurrent.RejectedExecutionHandlers#reject()
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: static io.netty.channel.epoll.Epoll#ensureAvailability()
CALLER: io.netty.channel.nio.NioEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider,io.netty.channel.SelectStrategyFactory)
	CALLEE: static io.netty.util.concurrent.RejectedExecutionHandlers#reject()
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
CALLER: io.netty.util.ConstantPool#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newConcurrentHashMap()
CALLER: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
	CALLEE: io.netty.channel.ChannelHandlerAdapter#<init>()
CALLER: io.netty.handler.codec.MessageToByteEncoder#<init>(boolean)
	CALLEE: io.netty.channel.ChannelOutboundHandlerAdapter#<init>()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#getSystemClassLoader()
	CALLEE: static io.netty.util.internal.PlatformDependent0#getSystemClassLoader()
CALLER: static io.netty.util.internal.PlatformDependent0#explicitNoUnsafeCause0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent0#javaVersion0()
	CALLEE: static io.netty.util.internal.PlatformDependent0#isAndroid0()
	CALLEE: static io.netty.util.internal.PlatformDependent0#majorVersionFromJavaSpecificationVersion()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.PlatformDependent0#isAndroid0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent0#explicitTryReflectionSetAccessible0()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent0#javaVersion()
CALLER: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
CALLER: io.netty.channel.unix.FileDescriptor#<init>(int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(int,java.lang.String)
CALLER: static io.netty.channel.DefaultFileRegion#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.AbstractReferenceCounted#<clinit>()
	CALLEE: static io.netty.util.internal.ReferenceCountUpdater#getUnsafeOffset(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.AbstractReferenceCounted.1#<init>()
CALLER: static io.netty.util.internal.ClassInitializerUtil#tryLoadClasses(java.lang.Class,java.lang.Class[])
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.ClassInitializerUtil#tryLoadClass(java.lang.ClassLoader,java.lang.String)
CALLER: static io.netty.channel.epoll.Native#loadNativeLibrary()
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizedOs()
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizedArch()
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#load(java.lang.String,java.lang.ClassLoader)
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.channel.unix.Unix#registerInternal(java.lang.Runnable)
	CALLEE: io.netty.channel.epoll.Native.1#run()
	CALLEE: static io.netty.channel.unix.Socket#initialize()
CALLER: static io.netty.channel.unix.Unix#<clinit>()
	CALLEE: static io.netty.util.internal.ClassInitializerUtil#tryLoadClasses(java.lang.Class,java.lang.Class[])
CALLER: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.scanner.Scanner)
CALLER: org.yaml.snakeyaml.composer.Composer#<init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#<init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.comments.CommentType[])
CALLER: gnu.trove.map.hash.TCustomHashMap#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
CALLER: gnu.trove.map.hash.TCustomHashMap#putAll(java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
CALLER: gnu.trove.impl.hash.TCustomObjectHash#hash(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#computeHashCode(java.lang.Object)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#indexRehashed(java.lang.Object,int,int,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.TObjectHash#insertKeyRehash(java.lang.Object,int,int,java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#equals(java.lang.Object,java.lang.Object)
CALLER: gnu.trove.impl.hash.THash#postInsertHook(boolean)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#rehash(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#<init>(java.io.Writer,org.yaml.snakeyaml.DumperOptions)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndentWithIndicator()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndent()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getIndicatorIndent()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#<init>(java.util.Queue,org.yaml.snakeyaml.comments.CommentType[])
	CALLEE: org.yaml.snakeyaml.DumperOptions#getMaxSimpleKeyLength()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getSplitLines()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getLineBreak()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getWidth()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isAllowUnicode()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isPrettyFlow()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isCanonical()
	CALLEE: org.yaml.snakeyaml.DumperOptions.LineBreak#getString()
CALLER: org.yaml.snakeyaml.serializer.Serializer#<init>(org.yaml.snakeyaml.emitter.Emitable,org.yaml.snakeyaml.resolver.Resolver,org.yaml.snakeyaml.DumperOptions,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.DumperOptions#getAnchorGenerator()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getTags()
	CALLEE: org.yaml.snakeyaml.DumperOptions#getVersion()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isExplicitEnd()
	CALLEE: org.yaml.snakeyaml.DumperOptions#isExplicitStart()
CALLER: org.yaml.snakeyaml.serializer.Serializer#open()
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.serializer.Serializer#serialize(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
CALLER: org.yaml.snakeyaml.serializer.Serializer#close()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.eclipse.aether.artifact.DefaultArtifact#<init>(java.lang.String)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#<init>(java.lang.String,java.util.Map)
CALLER: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String)
	CALLEE: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean)
CALLER: org.eclipse.aether.collection.CollectRequest#<init>(org.eclipse.aether.graph.Dependency,java.util.List,java.util.List)
	CALLEE: org.eclipse.aether.collection.CollectRequest#setRoot(org.eclipse.aether.graph.Dependency)
	CALLEE: org.eclipse.aether.collection.CollectRequest#setDependencies(java.util.List)
	CALLEE: org.eclipse.aether.collection.CollectRequest#setRepositories(java.util.List)
CALLER: org.eclipse.aether.resolution.DependencyRequest#<init>(org.eclipse.aether.collection.CollectRequest,org.eclipse.aether.graph.DependencyFilter)
	CALLEE: org.eclipse.aether.resolution.DependencyRequest#setCollectRequest(org.eclipse.aether.collection.CollectRequest)
	CALLEE: org.eclipse.aether.resolution.DependencyRequest#setFilter(org.eclipse.aether.graph.DependencyFilter)
CALLER: com.google.common.io.BaseEncoding.Base64Encoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: com.google.common.io.BaseEncoding.Base64Encoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(java.lang.String,java.lang.String,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
CALLER: com.google.common.io.BaseEncoding.Base16Encoding#<init>(java.lang.String,java.lang.String)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: com.google.common.io.BaseEncoding.Base16Encoding#<init>(com.google.common.io.BaseEncoding.Alphabet)
CALLER: gnu.trove.set.hash.TCustomHashSet#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
CALLER: gnu.trove.set.hash.TCustomHashSet#addAll(java.util.Collection)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#size()
	CALLEE: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#add(java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: static com.google.common.base.Suppliers#ofInstance(java.lang.Object)
	CALLEE: com.google.common.base.Suppliers.SupplierOfInstance#<init>(java.lang.Object)
CALLER: com.google.common.cache.CacheStats#<init>(long,long,long,long,long,long)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
CALLER: com.google.common.cache.CacheBuilder.3#<init>()
	CALLEE: com.google.common.base.Ticker#<init>()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#<init>(io.netty.bootstrap.AbstractBootstrap)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.channel.ChannelMetadata#<init>(boolean,int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositive(int,java.lang.String)
CALLER: io.netty.channel.ChannelMetadata#<init>(boolean)
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean,int)
CALLER: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.internal.StringUtil#<clinit>()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
CALLER: io.netty.bootstrap.AbstractBootstrap#channelFactory(io.netty.bootstrap.ChannelFactory)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: io.netty.util.ConstantPool#valueOf(java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNonEmpty(java.lang.String,java.lang.String)
	CALLEE: io.netty.util.ConstantPool#getOrCreate(java.lang.String)
CALLER: static io.netty.resolver.DefaultAddressResolverGroup#<clinit>()
	CALLEE: io.netty.resolver.DefaultAddressResolverGroup#<init>()
CALLER: static io.netty.resolver.AddressResolverGroup#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.bootstrap.BootstrapConfig#<init>(io.netty.bootstrap.Bootstrap)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#<init>(io.netty.bootstrap.AbstractBootstrap)
CALLER: io.netty.channel.SimpleChannelInboundHandler#<init>()
	CALLEE: io.netty.channel.SimpleChannelInboundHandler#<init>(boolean)
CALLER: com.google.common.cache.CacheBuilder#expireAfterWrite(long,java.util.concurrent.TimeUnit)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,long)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,long,java.lang.Object)
CALLER: net.md_5.bungee.api.chat.TextComponent#duplicate()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#<init>(net.md_5.bungee.api.chat.TextComponent)
CALLER: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
	CALLEE: joptsimple.internal.AbbreviationMap#<init>()
	CALLEE: joptsimple.internal.AbbreviationMap#add(char[],java.lang.Object,int,int)
CALLER: joptsimple.OptionException#specToString(joptsimple.OptionSpec)
	CALLEE: joptsimple.AbstractOptionSpec#options()
	CALLEE: static joptsimple.internal.Strings#join(java.lang.Iterable,java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#findAndRemoveNonOptionsSpec(java.util.Collection)
	CALLEE: joptsimple.AbstractOptionSpec#representsNonOptions()
	CALLEE: joptsimple.NonOptionArgumentSpec#representsNonOptions()
CALLER: joptsimple.BuiltinHelpFormatter#shouldShowNonOptionArgumentDisplay(joptsimple.OptionDescriptor)
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#description()
	CALLEE: joptsimple.OptionSpecBuilder#argumentDescription()
	CALLEE: joptsimple.NonOptionArgumentSpec#argumentDescription()
	CALLEE: joptsimple.OptionSpecBuilder#argumentTypeIndicator()
	CALLEE: joptsimple.NonOptionArgumentSpec#argumentTypeIndicator()
CALLER: joptsimple.BuiltinHelpFormatter#addNonOptionRow(java.lang.String)
	CALLEE: joptsimple.internal.Rows#add(java.lang.String,java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#createNonOptionArgumentsDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#maybeAppendOptionInfo(java.lang.StringBuilder,joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#maybeAppendNonOptionsDescription(java.lang.StringBuilder,joptsimple.OptionDescriptor)
CALLER: joptsimple.BuiltinHelpFormatter#addOptionRow(java.lang.String,java.lang.String)
	CALLEE: joptsimple.internal.Rows#add(java.lang.String,java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#hasRequiredOption(java.util.Collection)
	CALLEE: joptsimple.OptionSpecBuilder#isRequired()
	CALLEE: joptsimple.NonOptionArgumentSpec#isRequired()
CALLER: joptsimple.BuiltinHelpFormatter#createOptionDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.AbstractOptionSpec#options()
	CALLEE: joptsimple.BuiltinHelpFormatter#maybeAppendOptionInfo(java.lang.StringBuilder,joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#optionLeader(java.lang.String)
	CALLEE: joptsimple.OptionSpecBuilder#isRequired()
	CALLEE: joptsimple.NonOptionArgumentSpec#isRequired()
CALLER: joptsimple.BuiltinHelpFormatter#createDescriptionDisplay(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#message(java.lang.String,java.lang.Object[])
	CALLEE: joptsimple.BuiltinHelpFormatter#createDefaultValuesDisplay(java.util.List)
	CALLEE: static joptsimple.internal.Strings#surround(java.lang.String,char,char)
	CALLEE: joptsimple.OptionSpecBuilder#defaultValues()
	CALLEE: joptsimple.NonOptionArgumentSpec#defaultValues()
	CALLEE: joptsimple.AbstractOptionSpec#description()
CALLER: joptsimple.internal.Rows#fitToWidth()
	CALLEE: joptsimple.internal.Rows#optionWidth()
	CALLEE: joptsimple.internal.Rows#descriptionWidth()
	CALLEE: joptsimple.internal.Columns#<init>(int,int)
	CALLEE: joptsimple.internal.Columns#fit(joptsimple.internal.Row)
	CALLEE: joptsimple.internal.Rows#reset()
	CALLEE: joptsimple.internal.Rows#add(joptsimple.internal.Row)
CALLER: joptsimple.internal.Rows#render()
	CALLEE: joptsimple.internal.Rows#optionWidth()
	CALLEE: joptsimple.internal.Rows#descriptionWidth()
	CALLEE: joptsimple.internal.Rows#pad(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static joptsimple.internal.Strings#repeat(char,int)
CALLER: net.md_5.bungee.BungeeCord.1#run()
	CALLEE: net.md_5.bungee.BungeeCord#getReconnectHandler()
CALLER: net.md_5.bungee.Metrics#run()
	CALLEE: net.md_5.bungee.Metrics#postPlugin(boolean)
CALLER: gnu.trove.impl.hash.THash#<init>()
	CALLEE: gnu.trove.impl.hash.THash#<init>(int,float)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#<init>()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#<init>(org.yaml.snakeyaml.representer.BaseRepresenter)
CALLER: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolvers()
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#<init>()
CALLER: org.yaml.snakeyaml.representer.Representer#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
CALLER: org.yaml.snakeyaml.representer.Representer#setTimeZone(java.util.TimeZone)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#setTimeZone(java.util.TimeZone)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.collect.AbstractMultimap#<init>()
CALLER: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#<init>(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#<init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#checkNotPrimitive(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Types#checkNotPrimitive(java.lang.reflect.Type)
CALLER: static com.google.common.primitives.UnsignedLongs#compare(long,long)
	CALLEE: static com.google.common.primitives.UnsignedLongs#flip(long)
	CALLEE: static com.google.common.primitives.Longs#compare(long,long)
CALLER: org.fusesource.jansi.Ansi#reset()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: static org.fusesource.jansi.internal.Kernel32.COORD#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.COORD#init()
CALLER: static org.fusesource.jansi.internal.Kernel32.SMALL_RECT#<clinit>()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#access$000()
	CALLEE: static org.fusesource.jansi.internal.Kernel32.SMALL_RECT#init()
CALLER: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#GetLastError()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FormatMessageW(int,long,int,int,byte[],int,long[])
CALLER: org.fusesource.hawtjni.runtime.Library#doLoad()
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#file(java.lang.String[])
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#getOperatingSystemSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getResorucePath()
CALLER: static jline.internal.Configuration#getString(java.lang.String)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
CALLER: static jline.TerminalFactory#create()
	CALLEE: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.TerminalFactory#getFlavor(jline.TerminalFactory.Flavor)
	CALLEE: jline.UnsupportedTerminal#<init>()
	CALLEE: static jline.internal.Configuration#getOsName()
	CALLEE: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: jline.TerminalSupport#init()
CALLER: static jline.TerminalFactory.Flavor#<clinit>()
	CALLEE: jline.TerminalFactory.Flavor#<init>(java.lang.String,int)
CALLER: static jline.internal.Configuration#getLong(java.lang.String,long)
	CALLEE: static jline.internal.Configuration#getString(java.lang.String)
CALLER: static jline.internal.Urls#create(java.lang.String)
	CALLEE: static jline.internal.Urls#create(java.io.File)
CALLER: static jline.console.KeyMap#keyMaps()
	CALLEE: static jline.console.KeyMap#emacs()
	CALLEE: static jline.console.KeyMap#bindArrowKeys(jline.console.KeyMap)
	CALLEE: static jline.console.KeyMap#viMovement()
	CALLEE: static jline.console.KeyMap#viInsertion()
	CALLEE: jline.console.KeyMap#getBound(java.lang.CharSequence)
CALLER: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.io.InputStream,java.lang.String)
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
CALLER: org.fusesource.jansi.Ansi.NoAnsi#<init>()
	CALLEE: org.fusesource.jansi.Ansi#<init>()
CALLER: static com.google.common.graph.ElementOrder#insertion()
	CALLEE: com.google.common.graph.ElementOrder#<init>(com.google.common.graph.ElementOrder.Type,java.util.Comparator)
CALLER: static com.google.common.base.Optional#absent()
	CALLEE: static com.google.common.base.Absent#withType()
CALLER: org.yaml.snakeyaml.constructor.Constructor#<init>(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#<init>(org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#addTypeDescription(org.yaml.snakeyaml.TypeDescription)
CALLER: static org.yaml.snakeyaml.introspector.BeanAccess#<clinit>()
	CALLEE: org.yaml.snakeyaml.introspector.BeanAccess#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.representer.Representer#getTimeZone()
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTimeZone()
CALLER: static org.eclipse.aether.internal.impl.DefaultArtifactResolver#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.collect.DefaultDependencyCollector#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultInstaller#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultRepositoryLayoutProvider#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultTransporterProvider#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultRepositoryConnectorProvider#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultRemoteRepositoryManager#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultUpdateCheckManager#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultUpdatePolicyAnalyzer#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultRepositoryEventDispatcher#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: static org.eclipse.aether.internal.impl.DefaultLocalRepositoryProvider#<clinit>()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
CALLER: org.eclipse.aether.impl.DefaultServiceLocator#getEntry(java.lang.Class,boolean)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator.Entry#<init>(org.eclipse.aether.impl.DefaultServiceLocator,java.lang.Class)
CALLER: static org.eclipse.aether.DefaultRepositorySystemSession.NullMirrorSelector#<clinit>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession.NullMirrorSelector#<init>()
CALLER: static org.eclipse.aether.DefaultRepositorySystemSession.NullProxySelector#<clinit>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession.NullProxySelector#<init>()
CALLER: static org.eclipse.aether.DefaultRepositorySystemSession.NullAuthenticationSelector#<clinit>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession.NullAuthenticationSelector#<init>()
CALLER: static org.eclipse.aether.DefaultRepositorySystemSession.NullArtifactTypeRegistry#<clinit>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession.NullArtifactTypeRegistry#<init>()
CALLER: static org.eclipse.aether.DefaultRepositorySystemSession.NullFileTransformerManager#<clinit>()
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession.NullFileTransformerManager#<init>()
CALLER: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#<init>(java.util.Collection,java.util.Collection)
	CALLEE: static org.eclipse.aether.util.graph.selector.ScopeDependencySelector#clone(java.util.Collection)
CALLER: org.eclipse.aether.util.artifact.SimpleArtifactTypeRegistry#add(org.eclipse.aether.artifact.ArtifactType)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifactType#getId()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#copySafe(java.util.Map,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#newDefaultFactory(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#useSlf4JLoggerFactory(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#useLog4J2LoggerFactory(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#useLog4JLoggerFactory(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#useJdkLoggerFactory(java.lang.String)
CALLER: static io.netty.util.concurrent.RejectedExecutionHandlers#<clinit>()
	CALLEE: io.netty.util.concurrent.RejectedExecutionHandlers.1#<init>()
CALLER: io.netty.channel.MultithreadEventLoopGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
CALLER: io.netty.channel.ChannelOutboundHandlerAdapter#<init>()
	CALLEE: io.netty.channel.ChannelHandlerAdapter#<init>()
CALLER: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find0(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#get(java.lang.Class)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#typeParameterMatcherFindCache()
CALLER: static io.netty.util.internal.TypeParameterMatcher#<clinit>()
	CALLEE: io.netty.util.internal.TypeParameterMatcher.1#<init>()
CALLER: static io.netty.util.internal.PlatformDependent0#getSystemClassLoader()
	CALLEE: io.netty.util.internal.PlatformDependent0.11#<init>()
CALLER: static io.netty.util.internal.PlatformDependent0#majorVersionFromJavaSpecificationVersion()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent0#majorVersion(java.lang.String)
CALLER: static io.netty.util.internal.ReferenceCountUpdater#getUnsafeOffset(java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent#objectFieldOffset(java.lang.reflect.Field)
CALLER: io.netty.util.AbstractReferenceCounted.1#<init>()
	CALLEE: io.netty.util.internal.ReferenceCountUpdater#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getClassLoader(java.lang.Class)
CALLER: static io.netty.util.internal.NativeLibraryLoader#load(java.lang.String,java.lang.ClassLoader)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#calculatePackagePrefix()
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#loadLibrary(java.lang.ClassLoader,java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#isOsx()
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressedAndClear(java.lang.Throwable,java.util.List)
	CALLEE: static io.netty.util.internal.PlatformDependent#createTempFile(java.lang.String,java.lang.String,java.io.File)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#shouldShadedLibraryIdBePatched(java.lang.String)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#closeQuietly(java.io.Closeable)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader.NoexecVolumeDetector#access$000(java.io.File)
CALLER: static io.netty.util.internal.NativeLibraryLoader#<clinit>()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#tmpdir()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.ThrowableUtil#haveSuppressed()
CALLER: io.netty.channel.epoll.Native.1#run()
	CALLEE: static io.netty.channel.epoll.Native#access$000()
CALLER: static io.netty.channel.unix.Socket#initialize()
	CALLEE: static io.netty.util.NetUtil#isIpV4StackPreferred()
	CALLEE: static io.netty.channel.unix.Socket#initialize(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#<init>(org.yaml.snakeyaml.reader.StreamReader)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamStart()
CALLER: org.yaml.snakeyaml.parser.ParserImpl#<init>(org.yaml.snakeyaml.scanner.Scanner)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#<init>(int)
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: static org.yaml.snakeyaml.comments.CommentType#<clinit>()
	CALLEE: org.yaml.snakeyaml.comments.CommentType#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector#<init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.comments.CommentType[])
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector.1#<init>(org.yaml.snakeyaml.comments.CommentEventsCollector,org.yaml.snakeyaml.parser.Parser)
CALLER: gnu.trove.impl.hash.TCustomObjectHash#<init>(gnu.trove.strategy.HashingStrategy,int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#<init>(int)
CALLER: gnu.trove.impl.hash.THash#ensureCapacity(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: static gnu.trove.impl.hash.THash#fastCeil(double)
	CALLEE: static gnu.trove.impl.hash.THash#saturatedCast(long)
	CALLEE: gnu.trove.set.hash.TCustomHashSet#rehash(int)
CALLER: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#needMoreEvents()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#expect()
CALLER: org.yaml.snakeyaml.serializer.SerializerException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#anchorNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.serializer.NumberAnchorGenerator#nextAnchor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getAnchor()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getRealNode()
CALLER: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#getFlowStyle()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getScalarStyle()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getRealNode()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.serializer.Serializer#serializeComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getEndComments()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getInLineComments()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getBlockComments()
CALLER: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.eclipse.aether.artifact.DefaultArtifact#<init>(java.lang.String,java.util.Map)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#<init>()
	CALLEE: static org.eclipse.aether.artifact.DefaultArtifact#get(java.lang.String,java.lang.String)
	CALLEE: static org.eclipse.aether.artifact.AbstractArtifact#copyProperties(java.util.Map)
CALLER: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean)
	CALLEE: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean,java.util.Collection)
CALLER: static com.google.common.base.CharMatcher#<clinit>()
	CALLEE: static com.google.common.base.CharMatcher#whitespace()
	CALLEE: static com.google.common.base.CharMatcher#breakingWhitespace()
	CALLEE: static com.google.common.base.CharMatcher#ascii()
	CALLEE: static com.google.common.base.CharMatcher#digit()
	CALLEE: static com.google.common.base.CharMatcher#javaDigit()
	CALLEE: static com.google.common.base.CharMatcher#javaLetter()
	CALLEE: static com.google.common.base.CharMatcher#javaLetterOrDigit()
	CALLEE: static com.google.common.base.CharMatcher#javaUpperCase()
	CALLEE: static com.google.common.base.CharMatcher#javaLowerCase()
	CALLEE: static com.google.common.base.CharMatcher#javaIsoControl()
	CALLEE: static com.google.common.base.CharMatcher#invisible()
	CALLEE: static com.google.common.base.CharMatcher#singleWidth()
	CALLEE: static com.google.common.base.CharMatcher#any()
	CALLEE: static com.google.common.base.CharMatcher#none()
CALLER: com.google.common.io.BaseEncoding.Alphabet#<init>(java.lang.String,char[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.CharMatcher#ascii()
	CALLEE: com.google.common.base.CharMatcher#<init>()
	CALLEE: static com.google.common.math.IntMath#log2(int,java.math.RoundingMode)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,char)
	CALLEE: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
	CALLEE: com.google.common.base.CharMatcher.Ascii#matches(char)
CALLER: com.google.common.io.BaseEncoding.Base64Encoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.io.BaseEncoding.Alphabet#access$000(com.google.common.io.BaseEncoding.Alphabet)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding#<init>()
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#matches(char)
CALLER: com.google.common.io.BaseEncoding.Base16Encoding#<init>(com.google.common.io.BaseEncoding.Alphabet)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#<init>(com.google.common.io.BaseEncoding.Alphabet,java.lang.Character)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.io.BaseEncoding.Alphabet#access$000(com.google.common.io.BaseEncoding.Alphabet)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#encode(int)
CALLER: gnu.trove.set.hash.TCustomHashSet#add(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#postInsertHook(boolean)
CALLER: io.netty.util.ConstantPool#getOrCreate(java.lang.String)
	CALLEE: io.netty.util.ConstantPool#nextId()
	CALLEE: io.netty.channel.ChannelOption.1#newConstant(int,java.lang.String)
	CALLEE: io.netty.util.AttributeKey.1#newConstant(int,java.lang.String)
CALLER: io.netty.resolver.DefaultAddressResolverGroup#<init>()
	CALLEE: io.netty.resolver.AddressResolverGroup#<init>()
CALLER: io.netty.channel.SimpleChannelInboundHandler#<init>(boolean)
	CALLEE: io.netty.channel.ChannelInboundHandlerAdapter#<init>()
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#find(java.lang.Object,java.lang.Class,java.lang.String)
CALLER: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,long)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,long,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.api.chat.TextComponent#<init>(net.md_5.bungee.api.chat.TextComponent)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#<init>(net.md_5.bungee.api.chat.BaseComponent)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#getText()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#setText(java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: joptsimple.BuiltinHelpFormatter.1#compare(joptsimple.OptionDescriptor,joptsimple.OptionDescriptor)
CALLER: joptsimple.internal.Rows#add(java.lang.String,java.lang.String)
	CALLEE: joptsimple.internal.Rows#add(joptsimple.internal.Row)
	CALLEE: joptsimple.internal.Row#<init>(java.lang.String,java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#maybeAppendOptionInfo(java.lang.StringBuilder,joptsimple.OptionDescriptor)
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
	CALLEE: joptsimple.BuiltinHelpFormatter#extractTypeIndicator(joptsimple.OptionDescriptor)
	CALLEE: joptsimple.BuiltinHelpFormatter#appendOptionHelp(java.lang.StringBuilder,java.lang.String,java.lang.String,boolean)
	CALLEE: joptsimple.OptionSpecBuilder#acceptsArguments()
	CALLEE: joptsimple.NonOptionArgumentSpec#acceptsArguments()
	CALLEE: joptsimple.AbstractOptionSpec#representsNonOptions()
	CALLEE: joptsimple.NonOptionArgumentSpec#representsNonOptions()
	CALLEE: joptsimple.OptionSpecBuilder#requiresArgument()
	CALLEE: joptsimple.NonOptionArgumentSpec#requiresArgument()
	CALLEE: joptsimple.OptionSpecBuilder#argumentDescription()
	CALLEE: joptsimple.NonOptionArgumentSpec#argumentDescription()
CALLER: joptsimple.BuiltinHelpFormatter#maybeAppendNonOptionsDescription(java.lang.StringBuilder,joptsimple.OptionDescriptor)
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
	CALLEE: joptsimple.AbstractOptionSpec#description()
CALLER: joptsimple.internal.Rows#descriptionWidth()
	CALLEE: joptsimple.internal.Rows#optionWidth()
CALLER: joptsimple.internal.Columns#fit(joptsimple.internal.Row)
	CALLEE: joptsimple.internal.Row#<init>(java.lang.String,java.lang.String)
	CALLEE: joptsimple.internal.Columns#piecesOf(java.lang.String,int)
	CALLEE: static joptsimple.internal.Columns#itemOrEmpty(java.util.List,int)
CALLER: joptsimple.internal.Rows#pad(java.lang.StringBuilder,java.lang.String,int)
	CALLEE: static joptsimple.internal.Strings#repeat(char,int)
CALLER: net.md_5.bungee.Metrics#postPlugin(boolean)
	CALLEE: net.md_5.bungee.conf.Configuration#getUuid()
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: static net.md_5.bungee.Metrics#encode(java.lang.String)
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: static net.md_5.bungee.Metrics#encodeDataPair(java.lang.StringBuilder,java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getOnlineCount()
CALLER: gnu.trove.impl.hash.THash#<init>(int,float)
	CALLEE: static gnu.trove.impl.hash.THash#fastCeil(double)
	CALLEE: static gnu.trove.impl.hash.THash#saturatedCast(long)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#setUp(int)
	CALLEE: gnu.trove.map.hash.TIntObjectHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#setUp(int)
CALLER: static org.yaml.snakeyaml.nodes.Tag#<clinit>()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.resolver.Resolver#addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern)
CALLER: static com.google.gson.internal..Gson.Types#checkNotPrimitive(java.lang.reflect.Type)
	CALLEE: static com.google.gson.internal..Gson.Preconditions#checkArgument(boolean)
CALLER: static com.google.common.primitives.Longs#<clinit>()
	CALLEE: static com.google.common.primitives.Longs#createAsciiDigits()
CALLER: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.Attribute#value()
CALLER: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getPlatform()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
CALLER: org.fusesource.hawtjni.runtime.Library#exractAndLoad(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#file(java.lang.String[])
	CALLEE: org.fusesource.hawtjni.runtime.Library#load(java.util.ArrayList,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: org.fusesource.hawtjni.runtime.Library#extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)
CALLER: org.fusesource.hawtjni.runtime.Library#getOperatingSystemSpecifcResourcePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getOperatingSystem()
CALLER: org.fusesource.hawtjni.runtime.Library#getResorucePath()
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
CALLER: static jline.internal.Configuration#getString(java.lang.String,java.lang.String)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jline.internal.Configuration#getProperties()
CALLER: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: jline.UnsupportedTerminal#<init>()
	CALLEE: jline.TerminalSupport#<init>(boolean)
	CALLEE: jline.TerminalSupport#setAnsiSupported(boolean)
	CALLEE: jline.TerminalSupport#setEchoEnabled(boolean)
CALLER: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: jline.TerminalSupport#init()
	CALLEE: static jline.internal.ShutdownHooks#remove(jline.internal.ShutdownHooks.Task)
	CALLEE: jline.TerminalSupport.1#<init>(jline.TerminalSupport)
	CALLEE: static jline.internal.ShutdownHooks#add(jline.internal.ShutdownHooks.Task)
CALLER: static jline.console.KeyMap#emacs()
	CALLEE: static jline.console.KeyMap#emacsCtrlX()
	CALLEE: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#bindArrowKeys(jline.console.KeyMap)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object)
CALLER: static jline.console.KeyMap#viMovement()
	CALLEE: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#viInsertion()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: jline.console.ConsoleKeys#loadKeys(java.io.InputStream,java.lang.String)
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
	CALLEE: jline.console.ConsoleKeys#getKeyFromName(java.lang.String)
	CALLEE: static jline.console.Operation#valueOf(java.lang.String)
	CALLEE: static jline.internal.Log#info(java.lang.Object[])
	CALLEE: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
	CALLEE: jline.console.ConsoleKeys#isViEditMode()
	CALLEE: jline.console.ConsoleKeys#setVar(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleKeys#translateQuoted(java.lang.String)
CALLER: static jline.internal.Log#warn(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: static com.google.common.graph.ElementOrder.Type#<clinit>()
	CALLEE: com.google.common.graph.ElementOrder.Type#<init>(java.lang.String,int)
CALLER: com.google.common.graph.ElementOrder#<init>(com.google.common.graph.ElementOrder.Type,java.util.Comparator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
CALLER: static com.google.common.base.Absent#<clinit>()
	CALLEE: com.google.common.base.Absent#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#<init>(org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#<init>(org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
CALLER: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
CALLER: static org.yaml.snakeyaml.nodes.NodeId#<clinit>()
	CALLEE: org.yaml.snakeyaml.nodes.NodeId#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#<init>(org.yaml.snakeyaml.constructor.Constructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#addTypeDescription(org.yaml.snakeyaml.TypeDescription)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getTag()
	CALLEE: org.yaml.snakeyaml.TypeDescription#setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
CALLER: static org.slf4j.LoggerFactory#getLogger(java.lang.Class)
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#getCallingClass()
	CALLEE: static org.slf4j.LoggerFactory#nonMatchingClasses(java.lang.Class,java.lang.Class)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.helpers.NOPLogger#getName()
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#getName()
CALLER: static org.slf4j.LoggerFactory#<clinit>()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#<init>()
	CALLEE: org.slf4j.helpers.NOPLoggerFactory#<init>()
	CALLEE: static org.slf4j.helpers.Util#safeGetBooleanSystemProperty(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#useSlf4JLoggerFactory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#useLog4J2LoggerFactory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4J2LoggerFactory#newInstance(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#useLog4JLoggerFactory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.logging.InternalLoggerFactory#useJdkLoggerFactory(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.ThreadPerTaskExecutor#<init>(java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.Executor,java.lang.Object[])
CALLER: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#fastGet(io.netty.util.concurrent.FastThreadLocalThread)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#slowGet()
CALLER: static io.netty.util.internal.InternalThreadLocalMap#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.TypeParameterMatcher#find0(java.lang.Object,java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.TypeParameterMatcher#fail(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.TypeParameterMatcher#get(java.lang.Class)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.internal.TypeParameterMatcher.ReflectiveMatcher#<init>(java.lang.Class)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#typeParameterMatcherGetCache()
CALLER: io.netty.util.internal.TypeParameterMatcher.1#<init>()
	CALLEE: io.netty.util.internal.TypeParameterMatcher#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#objectFieldOffset(java.lang.reflect.Field)
	CALLEE: static io.netty.util.internal.PlatformDependent0#objectFieldOffset(java.lang.reflect.Field)
CALLER: static io.netty.util.internal.PlatformDependent0#getClassLoader(java.lang.Class)
	CALLEE: io.netty.util.internal.PlatformDependent0.9#<init>(java.lang.Class)
CALLER: static io.netty.util.internal.NativeLibraryLoader#loadLibrary(java.lang.ClassLoader,java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#tryToLoadClass(java.lang.ClassLoader,java.lang.Class)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.NativeLibraryUtil#loadLibrary(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#rethrowWithMoreDetailsIfPossible(java.lang.String,java.lang.NoSuchMethodError)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.ThrowableUtil#addSuppressedAndClear(java.lang.Throwable,java.util.List)
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.util.List)
CALLER: static io.netty.util.internal.PlatformDependent#createTempFile(java.lang.String,java.lang.String,java.io.File)
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
CALLER: static io.netty.util.internal.NativeLibraryLoader#shouldShadedLibraryIdBePatched(java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#isOsx()
CALLER: static io.netty.util.internal.NativeLibraryLoader#patchShadedLibraryId(java.io.InputStream,java.io.OutputStream,java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizedOs()
	CALLEE: static io.netty.util.internal.PlatformDependent#normalizedArch()
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#patchShadedLibraryId(byte[],java.lang.String,java.lang.String)
CALLER: static io.netty.util.internal.NativeLibraryLoader.NoexecVolumeDetector#access$000(java.io.File)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader.NoexecVolumeDetector#canExecuteExecutable(java.io.File)
CALLER: static io.netty.util.internal.ThrowableUtil#haveSuppressed()
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
CALLER: static io.netty.channel.epoll.Native#access$000()
	CALLEE: static io.netty.channel.epoll.Native#registerUnix()
CALLER: static io.netty.util.NetUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.NetUtilInitializations#createLocalhost4()
	CALLEE: static io.netty.util.NetUtilInitializations#createLocalhost6()
	CALLEE: static io.netty.util.NetUtilInitializations#determineLoopback(java.net.Inet4Address,java.net.Inet6Address)
	CALLEE: io.netty.util.NetUtil.1#<init>()
	CALLEE: io.netty.util.NetUtilInitializations.NetworkIfaceAndInetAddress#address()
	CALLEE: io.netty.util.NetUtilInitializations.NetworkIfaceAndInetAddress#iface()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamStart()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: gnu.trove.impl.hash.TObjectHash#<init>(int)
	CALLEE: gnu.trove.impl.hash.THash#<init>(int)
CALLER: gnu.trove.set.hash.TCustomHashSet#rehash(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#insertKey(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
CALLER: gnu.trove.impl.hash.TObjectHash#throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.impl.hash.TObjectHash#dumpExtraInfo(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.TObjectHash#buildObjectContractViolation(java.lang.Object,java.lang.Object,java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#needMoreEvents()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#needEvents(java.util.Iterator,int)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectStreamStart#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeStreamStart()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: static org.yaml.snakeyaml.serializer.Serializer.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.serializer.Serializer#serializeComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#emit(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getValue()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getCommentType()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getStartMark()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getEndMark()
CALLER: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.lang.Boolean,java.util.Collection)
	CALLEE: static org.eclipse.aether.graph.Dependency.Exclusions#copy(java.util.Collection)
	CALLEE: org.eclipse.aether.graph.Dependency#<init>(org.eclipse.aether.artifact.Artifact,java.lang.String,java.util.Set,java.lang.Boolean)
CALLER: static com.google.common.math.IntMath#log2(int,java.math.RoundingMode)
	CALLEE: static com.google.common.math.MathPreconditions#checkPositive(java.lang.String,int)
	CALLEE: static com.google.common.math.IntMath#isPowerOfTwo(int)
	CALLEE: static com.google.common.math.MathPreconditions#checkRoundingUnnecessary(boolean)
	CALLEE: static com.google.common.math.IntMath#lessThanBranchFree(int,int)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,char)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.math.MathPreconditions#checkRoundingUnnecessary(boolean)
CALLER: com.google.common.io.BaseEncoding.Alphabet#matches(char)
	CALLEE: static com.google.common.base.CharMatcher#ascii()
	CALLEE: com.google.common.base.CharMatcher.Ascii#matches(char)
CALLER: io.netty.channel.ChannelOption.1#newConstant(int,java.lang.String)
	CALLEE: io.netty.channel.ChannelOption.1#newConstant(int,java.lang.String)
CALLER: net.md_5.bungee.api.chat.BaseComponent#<init>(net.md_5.bungee.api.chat.BaseComponent)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#duplicate()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#copyFormatting(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention,boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getExtra()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#addExtra(net.md_5.bungee.api.chat.BaseComponent)
CALLER: joptsimple.BuiltinHelpFormatter.1#compare(joptsimple.OptionDescriptor,joptsimple.OptionDescriptor)
	CALLEE: joptsimple.AbstractOptionSpec#options()
CALLER: joptsimple.BuiltinHelpFormatter#extractTypeIndicator(joptsimple.OptionDescriptor)
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
	CALLEE: static joptsimple.internal.Classes#shortNameOf(java.lang.String)
	CALLEE: joptsimple.OptionSpecBuilder#argumentTypeIndicator()
	CALLEE: joptsimple.NonOptionArgumentSpec#argumentTypeIndicator()
CALLER: joptsimple.BuiltinHelpFormatter#appendOptionHelp(java.lang.StringBuilder,java.lang.String,java.lang.String,boolean)
	CALLEE: joptsimple.BuiltinHelpFormatter#appendTypeIndicator(java.lang.StringBuilder,java.lang.String,java.lang.String,char,char)
CALLER: joptsimple.internal.Columns#piecesOf(java.lang.String,int)
	CALLEE: joptsimple.internal.Columns#piecesOfEmbeddedLine(java.lang.String,int)
CALLER: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: static net.md_5.bungee.Metrics#encodeDataPair(java.lang.StringBuilder,java.lang.String,java.lang.String)
	CALLEE: static net.md_5.bungee.Metrics#encode(java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getOnlineCount()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.map.hash.TCustomHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#setUp(int)
CALLER: gnu.trove.map.hash.TIntObjectHashMap#setUp(int)
	CALLEE: gnu.trove.impl.hash.TIntHash#setUp(int)
CALLER: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
CALLER: org.fusesource.jansi.Ansi.2#initialValue()
	CALLEE: org.fusesource.jansi.Ansi.2#initialValue()
CALLER: static org.fusesource.hawtjni.runtime.Library#getPlatform()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getBitModel()
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getOperatingSystem()
CALLER: org.fusesource.hawtjni.runtime.Library#getPlatformSpecifcResourcePath(java.lang.String)
	CALLEE: org.fusesource.hawtjni.runtime.Library#map(java.lang.String)
CALLER: org.fusesource.hawtjni.runtime.Library#extract(java.util.ArrayList,java.net.URL,java.lang.String,java.lang.String,java.io.File)
	CALLEE: org.fusesource.hawtjni.runtime.Library#chmod(java.lang.String,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#close(java.io.Closeable)
CALLER: static jline.internal.Configuration#getProperties()
	CALLEE: static jline.internal.Configuration#initProperties()
CALLER: static jline.internal.Log.Level#<clinit>()
	CALLEE: jline.internal.Log.Level#<init>(java.lang.String,int)
CALLER: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
	CALLEE: static jline.internal.Log#render(java.io.PrintStream,java.lang.Object)
CALLER: jline.TerminalSupport#setAnsiSupported(boolean)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: jline.TerminalSupport#setEchoEnabled(boolean)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.internal.ShutdownHooks#remove(jline.internal.ShutdownHooks.Task)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static jline.internal.ShutdownHooks#removeHook(java.lang.Thread)
CALLER: static jline.internal.ShutdownHooks#<clinit>()
	CALLEE: static jline.internal.Configuration#getBoolean(java.lang.String,boolean)
CALLER: static jline.internal.ShutdownHooks#add(jline.internal.ShutdownHooks.Task)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.internal.ShutdownHooks.1#<init>(java.lang.String)
	CALLEE: static jline.internal.ShutdownHooks#addHook(java.lang.Thread)
CALLER: static jline.console.Operation#<clinit>()
	CALLEE: jline.console.Operation#<init>(java.lang.String,int)
CALLER: static jline.console.KeyMap#emacsCtrlX()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#emacsMeta()
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
CALLER: jline.console.ConsoleKeys#isViEditMode()
	CALLEE: jline.console.KeyMap#isViKeyMap()
CALLER: jline.console.ConsoleKeys#setVar(java.lang.String,java.lang.String)
	CALLEE: jline.console.KeyMap#setBlinkMatchingParen(boolean)
CALLER: static jline.internal.Log#info(java.lang.Object[])
	CALLEE: static jline.internal.Log#log(jline.internal.Log.Level,java.lang.Object[])
CALLER: com.google.common.base.Absent#<init>()
	CALLEE: com.google.common.base.Optional#<init>()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#<init>(org.yaml.snakeyaml.LoaderOptions)
	CALLEE: org.yaml.snakeyaml.TypeDescription#<init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#<init>()
CALLER: static org.yaml.snakeyaml.util.UriEncoder#encode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(java.lang.String)
CALLER: static org.yaml.snakeyaml.util.UriEncoder#<clinit>()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#<init>(java.lang.String,boolean)
CALLER: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#getILoggerFactory()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerFactory#getLogger(java.lang.String)
CALLER: static org.slf4j.helpers.Util#getCallingClass()
	CALLEE: static org.slf4j.helpers.Util#getSecurityManager()
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#getClassContext()
CALLER: static org.slf4j.helpers.Util#safeGetBooleanSystemProperty(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#safeGetSystemProperty(java.lang.String)
CALLER: static io.netty.util.internal.logging.Slf4JLoggerFactory#<clinit>()
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>(boolean)
CALLER: static io.netty.util.internal.logging.Log4J2LoggerFactory#<clinit>()
	CALLEE: io.netty.util.internal.logging.Log4J2LoggerFactory#<init>()
CALLER: static io.netty.util.internal.logging.Log4JLoggerFactory#<clinit>()
	CALLEE: io.netty.util.internal.logging.Log4JLoggerFactory#<init>()
CALLER: static io.netty.util.internal.logging.JdkLoggerFactory#<clinit>()
	CALLEE: io.netty.util.internal.logging.JdkLoggerFactory#<init>()
CALLER: io.netty.util.concurrent.ThreadPerTaskExecutor#<init>(java.util.concurrent.ThreadFactory)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutorChooserFactory,java.lang.Object[])
CALLER: static io.netty.util.internal.InternalThreadLocalMap#fastGet(io.netty.util.concurrent.FastThreadLocalThread)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#<init>()
CALLER: static io.netty.util.internal.InternalThreadLocalMap#slowGet()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#<init>()
CALLER: io.netty.util.internal.TypeParameterMatcher.ReflectiveMatcher#<init>(java.lang.Class)
	CALLEE: io.netty.util.internal.TypeParameterMatcher#<init>()
CALLER: static io.netty.util.internal.NativeLibraryLoader#tryToLoadClass(java.lang.ClassLoader,java.lang.Class)
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#classToByteArray(java.lang.Class)
	CALLEE: io.netty.util.internal.NativeLibraryLoader.2#<init>(java.lang.ClassLoader,java.lang.Class,byte[])
CALLER: static io.netty.util.internal.NativeLibraryLoader#loadLibraryByHelper(java.lang.Class,java.lang.String,boolean)
	CALLEE: io.netty.util.internal.NativeLibraryLoader.1#<init>(java.lang.Class,java.lang.String,boolean)
CALLER: static io.netty.util.internal.NativeLibraryLoader#rethrowWithMoreDetailsIfPossible(java.lang.String,java.lang.NoSuchMethodError)
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
CALLER: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.util.List)
	CALLEE: static io.netty.util.internal.ThrowableUtil#addSuppressed(java.lang.Throwable,java.lang.Throwable)
CALLER: static io.netty.util.internal.NativeLibraryLoader#patchShadedLibraryId(byte[],java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.PlatformDependent#threadLocalRandom()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object[])
CALLER: static io.netty.util.internal.NativeLibraryLoader.NoexecVolumeDetector#canExecuteExecutable(java.io.File)
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
CALLER: static io.netty.util.NetUtilInitializations#createLocalhost4()
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
CALLER: static io.netty.util.NetUtilInitializations#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.NetUtilInitializations#createLocalhost6()
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
CALLER: static io.netty.util.NetUtilInitializations#determineLoopback(java.net.Inet4Address,java.net.Inet6Address)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.SocketUtils#addressesFromNetworkInterface(java.net.NetworkInterface)
	CALLEE: io.netty.util.NetUtilInitializations.NetworkIfaceAndInetAddress#<init>(java.net.NetworkInterface,java.net.InetAddress)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object[])
CALLER: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.error.Mark#<init>(java.lang.String,int,int,int,int[],int)
CALLER: org.yaml.snakeyaml.tokens.StreamStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: gnu.trove.impl.hash.THash#<init>(int)
	CALLEE: gnu.trove.impl.hash.THash#<init>(int,float)
CALLER: gnu.trove.impl.hash.TObjectHash#dumpExtraInfo(java.lang.Object,java.lang.Object,int,int,java.lang.Object[])
	CALLEE: gnu.trove.impl.hash.TObjectHash#dumpKeyTypes(java.lang.Object,java.lang.Object)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#reportPotentialConcurrentMod(int,int)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#detectKeyLoss(java.lang.Object[],int)
CALLER: gnu.trove.impl.hash.TObjectHash#buildObjectContractViolation(java.lang.Object,java.lang.Object,java.lang.String)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#objectInfo(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.CommentEvent#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.CollectionStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.events.CollectionEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: static org.eclipse.aether.graph.Dependency.Exclusions#copy(java.util.Collection)
	CALLEE: org.eclipse.aether.graph.Dependency.Exclusions#<init>(java.util.Collection)
CALLER: static com.google.common.base.CharMatcher.Whitespace#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.Whitespace#<init>()
CALLER: static com.google.common.base.CharMatcher.BreakingWhitespace#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.BreakingWhitespace#<init>()
CALLER: static com.google.common.base.CharMatcher.Ascii#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.Ascii#<init>()
CALLER: static com.google.common.base.CharMatcher.Digit#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.Digit#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaDigit#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaDigit#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaLetter#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaLetter#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaLetterOrDigit#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaLetterOrDigit#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaUpperCase#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaUpperCase#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaLowerCase#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaLowerCase#<init>()
CALLER: static com.google.common.base.CharMatcher.JavaIsoControl#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.JavaIsoControl#<init>()
CALLER: static com.google.common.base.CharMatcher.Invisible#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.Invisible#<init>()
CALLER: static com.google.common.base.CharMatcher.SingleWidth#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.SingleWidth#<init>()
CALLER: static com.google.common.base.CharMatcher.Any#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.Any#<init>()
CALLER: static com.google.common.base.CharMatcher.None#<clinit>()
	CALLEE: com.google.common.base.CharMatcher.None#<init>()
CALLER: io.netty.channel.ChannelOption.1#newConstant(int,java.lang.String)
	CALLEE: io.netty.channel.ChannelOption#<init>(int,java.lang.String,io.netty.channel.ChannelOption.1)
CALLER: static net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention#<clinit>()
	CALLEE: net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention#<init>(java.lang.String,int)
CALLER: net.md_5.bungee.api.chat.BaseComponent#copyFormatting(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention,boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getClickEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setClickEvent(net.md_5.bungee.api.chat.ClickEvent)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getHoverEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setHoverEvent(net.md_5.bungee.api.chat.HoverEvent)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColorRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setColor(net.md_5.bungee.api.ChatColor)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getFontRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setFont(java.lang.String)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isBoldRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setBold(java.lang.Boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isItalicRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setItalic(java.lang.Boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isUnderlinedRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setUnderlined(java.lang.Boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isStrikethroughRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setStrikethrough(java.lang.Boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isObfuscatedRaw()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setObfuscated(java.lang.Boolean)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getInsertion()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#setInsertion(java.lang.String)
CALLER: joptsimple.BuiltinHelpFormatter#appendTypeIndicator(java.lang.StringBuilder,java.lang.String,java.lang.String,char,char)
	CALLEE: static joptsimple.internal.Strings#isNullOrEmpty(java.lang.String)
CALLER: joptsimple.internal.Columns#piecesOfEmbeddedLine(java.lang.String,int)
	CALLEE: joptsimple.internal.Columns#processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)
CALLER: gnu.trove.impl.hash.TObjectHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.THash#setUp(int)
CALLER: gnu.trove.impl.hash.TIntHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.TPrimitiveHash#setUp(int)
CALLER: org.fusesource.jansi.Ansi.2#initialValue()
	CALLEE: static org.fusesource.jansi.Ansi#isDetected()
CALLER: org.fusesource.hawtjni.runtime.Library#chmod(java.lang.String,java.io.File)
	CALLEE: static org.fusesource.hawtjni.runtime.Library#getPlatform()
CALLER: static jline.internal.Configuration#initProperties()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Configuration#determineUrl()
	CALLEE: static jline.internal.Configuration#loadProperties(java.net.URL,java.util.Properties)
CALLER: static jline.internal.ShutdownHooks#removeHook(java.lang.Thread)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.internal.ShutdownHooks#addHook(java.lang.Thread)
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,boolean)
CALLER: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#<clinit>()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#<init>()
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#<init>(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#<init>()
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#createSafeOctets(java.lang.String)
CALLER: static org.slf4j.LoggerFactory#getILoggerFactory()
	CALLEE: static org.slf4j.LoggerFactory#performInitialization()
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: org.slf4j.impl.StaticLoggerBinder#getLoggerFactory()
CALLER: static org.slf4j.helpers.Util#getSecurityManager()
	CALLEE: static org.slf4j.helpers.Util#safeCreateSecurityManager()
CALLER: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.Slf4JLoggerFactory#<init>(boolean)
	CALLEE: static org.slf4j.LoggerFactory#getILoggerFactory()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.Log4J2LoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.Log4JLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: io.netty.util.internal.logging.JdkLoggerFactory#<init>()
	CALLEE: io.netty.util.internal.logging.InternalLoggerFactory#<init>()
CALLER: static io.netty.util.concurrent.DefaultEventExecutorChooserFactory#<clinit>()
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory#<init>()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#<init>(int,java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutorChooserFactory,java.lang.Object[])
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositive(int,java.lang.String)
	CALLEE: io.netty.util.concurrent.ThreadPerTaskExecutor#<init>(java.util.concurrent.ThreadFactory)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutorGroup#<init>()
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#newDefaultThreadFactory()
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#<init>(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#terminationFuture()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory#newChooser(io.netty.util.concurrent.EventExecutor[])
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: io.netty.util.internal.InternalThreadLocalMap#<init>()
	CALLEE: io.netty.util.internal.UnpaddedInternalThreadLocalMap#<init>()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#newIndexedVariableTable()
CALLER: static io.netty.util.internal.NativeLibraryLoader#classToByteArray(java.lang.Class)
	CALLEE: static io.netty.util.internal.NativeLibraryLoader#closeQuietly(java.io.Closeable)
CALLER: static io.netty.util.internal.PlatformDependent#threadLocalRandom()
	CALLEE: io.netty.util.internal.PlatformDependent.2#current()
	CALLEE: io.netty.util.internal.PlatformDependent.3#current()
CALLER: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException0(java.lang.Throwable)
CALLER: static io.netty.util.internal.SocketUtils#addressesFromNetworkInterface(java.net.NetworkInterface)
	CALLEE: io.netty.util.internal.SocketUtils.11#<init>(java.net.NetworkInterface)
	CALLEE: static io.netty.util.internal.SocketUtils#empty()
CALLER: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: gnu.trove.impl.hash.TObjectHash#dumpKeyTypes(java.lang.Object,java.lang.Object)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#equalsSymmetryInfo(java.lang.Object,java.lang.Object)
CALLER: static gnu.trove.impl.hash.TObjectHash#detectKeyLoss(java.lang.Object[],int)
	CALLEE: static gnu.trove.impl.hash.TObjectHash#makeKeySet(java.lang.Object[])
CALLER: static gnu.trove.impl.hash.TObjectHash#objectInfo(java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
CALLER: com.google.common.base.CharMatcher.Whitespace#<init>()
	CALLEE: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.BreakingWhitespace#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.Ascii#<init>()
	CALLEE: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.Digit#<init>()
	CALLEE: static com.google.common.base.CharMatcher.Digit#zeroes()
	CALLEE: static com.google.common.base.CharMatcher.Digit#nines()
	CALLEE: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
CALLER: com.google.common.base.CharMatcher.JavaDigit#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.JavaLetter#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.JavaLetterOrDigit#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.JavaUpperCase#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.JavaLowerCase#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.JavaIsoControl#<init>()
	CALLEE: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.Invisible#<init>()
	CALLEE: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
CALLER: com.google.common.base.CharMatcher.SingleWidth#<init>()
	CALLEE: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
CALLER: com.google.common.base.CharMatcher.Any#<init>()
	CALLEE: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
CALLER: com.google.common.base.CharMatcher.None#<init>()
	CALLEE: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
CALLER: io.netty.channel.ChannelOption#<init>(int,java.lang.String,io.netty.channel.ChannelOption.1)
	CALLEE: io.netty.channel.ChannelOption#<init>(int,java.lang.String)
CALLER: joptsimple.internal.Columns#processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)
	CALLEE: static joptsimple.internal.Strings#repeat(char,int)
CALLER: gnu.trove.impl.hash.THash#setUp(int)
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#computeNextAutoCompactionAmount(int)
CALLER: gnu.trove.impl.hash.TPrimitiveHash#setUp(int)
	CALLEE: gnu.trove.impl.hash.THash#setUp(int)
CALLER: static org.fusesource.jansi.Ansi#isDetected()
	CALLEE: org.fusesource.jansi.Ansi.1#call()
CALLER: static jline.internal.Configuration#determineUrl()
	CALLEE: static jline.internal.Configuration#getUserHome()
	CALLEE: static jline.internal.Urls#create(java.lang.String)
	CALLEE: static jline.internal.Urls#create(java.io.File)
CALLER: static jline.internal.Configuration#loadProperties(java.net.URL,java.util.Properties)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
CALLER: jline.console.KeyMap#<init>(java.lang.String,boolean)
	CALLEE: jline.console.KeyMap#<init>(java.lang.String,java.lang.Object[],boolean)
CALLER: static org.slf4j.LoggerFactory#performInitialization()
	CALLEE: static org.slf4j.LoggerFactory#bind()
	CALLEE: static org.slf4j.LoggerFactory#versionSanityCheck()
CALLER: static org.slf4j.impl.StaticLoggerBinder#<clinit>()
	CALLEE: org.slf4j.impl.StaticLoggerBinder#<init>()
CALLER: static org.slf4j.helpers.Util#safeCreateSecurityManager()
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>(org.slf4j.helpers.Util.1)
CALLER: static io.netty.util.concurrent.DefaultPromise#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.String)
	CALLEE: static io.netty.util.concurrent.DefaultPromise.StacklessCancellationException#newInstance(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise.CauseHolder#<init>(java.lang.Throwable)
CALLER: static io.netty.util.concurrent.GlobalEventExecutor#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#<init>()
CALLER: static io.netty.util.concurrent.AbstractScheduledEventExecutor#<clinit>()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#<init>()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.2#<init>()
CALLER: static io.netty.util.concurrent.AbstractEventExecutor#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: io.netty.channel.MultithreadEventLoopGroup#newDefaultThreadFactory()
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,int)
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
CALLER: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
CALLER: io.netty.util.internal.PlatformDependent.3#current()
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#current()
CALLER: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static gnu.trove.impl.hash.TObjectHash#equalsSymmetryInfo(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.graph.Dependency#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: joptsimple.internal.Row#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
CALLER: com.google.common.base.CharMatcher.NamedFastMatcher#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.CharMatcher.FastMatcher#<init>()
CALLER: com.google.common.base.CharMatcher.RangesMatcher#<init>(java.lang.String,char[],char[])
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: io.netty.channel.ChannelOption#<init>(int,java.lang.String)
	CALLEE: io.netty.util.AbstractConstant#<init>(int,java.lang.String)
CALLER: org.fusesource.jansi.Ansi.1#call()
	CALLEE: org.fusesource.jansi.Ansi.1#call()
CALLER: static org.slf4j.LoggerFactory#bind()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: static org.slf4j.LoggerFactory#isAndroid()
	CALLEE: static org.slf4j.LoggerFactory#findPossibleStaticLoggerBinderPathSet()
	CALLEE: static org.slf4j.LoggerFactory#reportMultipleBindingAmbiguity(java.util.Set)
	CALLEE: static org.slf4j.LoggerFactory#reportActualBinding(java.util.Set)
	CALLEE: static org.slf4j.LoggerFactory#postBindCleanUp()
	CALLEE: static org.slf4j.LoggerFactory#messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#failedBinding(java.lang.Throwable)
CALLER: static org.slf4j.LoggerFactory#versionSanityCheck()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.StaticLoggerBinder#<init>()
	CALLEE: org.slf4j.impl.JDK14LoggerFactory#<init>()
CALLER: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>(org.slf4j.helpers.Util.1)
	CALLEE: org.slf4j.helpers.Util.ClassContextSecurityManager#<init>()
CALLER: static io.netty.util.concurrent.DefaultPromise.StacklessCancellationException#newInstance(java.lang.Class,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise.StacklessCancellationException#<init>()
	CALLEE: static io.netty.util.internal.ThrowableUtil#unknownStackTrace(java.lang.Throwable,java.lang.Class,java.lang.String)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.1#<init>(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos(long)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#<init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#<init>(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: io.netty.util.concurrent.FailedFuture#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduledTaskQueue()
	CALLEE: static io.netty.util.concurrent.DefaultThreadFactory#toPoolName(java.lang.Class)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int,java.lang.ThreadGroup)
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#apply(java.util.concurrent.ThreadFactory,io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,int)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,boolean,int)
CALLER: io.netty.channel.epoll.EpollEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.channel.epoll.EpollEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,int,io.netty.channel.SelectStrategy,io.netty.util.concurrent.RejectedExecutionHandler,io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: io.netty.channel.DefaultSelectStrategyFactory#newSelectStrategy()
CALLER: io.netty.channel.nio.NioEventLoopGroup#newChild(java.util.concurrent.Executor,java.lang.Object[])
	CALLEE: io.netty.channel.nio.NioEventLoop#<init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.Executor,java.nio.channels.spi.SelectorProvider,io.netty.channel.SelectStrategy,io.netty.util.concurrent.RejectedExecutionHandler,io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: io.netty.channel.DefaultSelectStrategyFactory#newSelectStrategy()
CALLER: static io.netty.util.internal.ThreadLocalRandom#current()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#random()
CALLER: static io.netty.util.internal.ThreadLocalRandom#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: io.netty.util.internal.ThreadLocalRandom.1#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.ThreadLocalRandom.2#<init>()
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#mix64(long)
CALLER: com.google.common.base.CharMatcher.FastMatcher#<init>()
	CALLEE: com.google.common.base.CharMatcher#<init>()
CALLER: static org.slf4j.LoggerFactory#isAndroid()
	CALLEE: static org.slf4j.helpers.Util#safeGetSystemProperty(java.lang.String)
CALLER: static org.slf4j.LoggerFactory#findPossibleStaticLoggerBinderPathSet()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: static org.slf4j.LoggerFactory#reportMultipleBindingAmbiguity(java.util.Set)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#isAmbiguousStaticLoggerBinderPathSet(java.util.Set)
CALLER: static org.slf4j.LoggerFactory#reportActualBinding(java.util.Set)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: static org.slf4j.impl.StaticLoggerBinder#getSingleton()
	CALLEE: static org.slf4j.LoggerFactory#isAmbiguousStaticLoggerBinderPathSet(java.util.Set)
	CALLEE: org.slf4j.impl.StaticLoggerBinder#getLoggerFactoryClassStr()
CALLER: static org.slf4j.LoggerFactory#postBindCleanUp()
	CALLEE: static org.slf4j.LoggerFactory#fixSubstituteLoggers()
	CALLEE: static org.slf4j.LoggerFactory#replayEvents()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#clear()
CALLER: static org.slf4j.LoggerFactory#failedBinding(java.lang.Throwable)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#<init>()
CALLER: static io.netty.util.concurrent.PromiseTask#<clinit>()
	CALLEE: io.netty.util.concurrent.PromiseTask.SentinelRunnable#<init>(java.lang.String)
CALLER: static io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#<init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)
	CALLEE: io.netty.util.concurrent.PromiseTask#<init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.Callable)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#validatePeriod(long)
CALLER: io.netty.util.concurrent.FailedFuture#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.CompleteFuture#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduledTaskQueue()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#<init>(java.util.Comparator,int)
CALLER: static io.netty.util.concurrent.DefaultThreadFactory#toPoolName(java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int,java.lang.ThreadGroup)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.internal.ThreadExecutorMap#apply(java.util.concurrent.ThreadFactory,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.3#<init>(java.util.concurrent.ThreadFactory,io.netty.util.concurrent.EventExecutor)
CALLER: static io.netty.util.internal.ThreadExecutorMap#<clinit>()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.Class,boolean,int)
	CALLEE: static io.netty.util.concurrent.DefaultThreadFactory#toPoolName(java.lang.Class)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int)
CALLER: static io.netty.channel.epoll.EpollEventLoop#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.channel.epoll.Epoll#ensureAvailability()
CALLER: static io.netty.channel.SingleThreadEventLoop#<clinit>()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
CALLER: static io.netty.util.concurrent.SingleThreadEventExecutor#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.1#<init>()
CALLER: io.netty.channel.epoll.EpollEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,int,io.netty.channel.SelectStrategy,io.netty.util.concurrent.RejectedExecutionHandler,io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.channel.epoll.Native#newEpollCreate()
	CALLEE: static io.netty.channel.epoll.Native#newEventFd()
	CALLEE: static io.netty.channel.epoll.EpollEventLoop#newTaskQueue(io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean,java.util.Queue,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)
	CALLEE: io.netty.util.collection.IntObjectHashMap#<init>(int)
	CALLEE: io.netty.channel.epoll.EpollEventLoop.1#<init>(io.netty.channel.epoll.EpollEventLoop)
	CALLEE: io.netty.channel.epoll.EpollEventArray#<init>(int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.epoll.Native#epollCtlAdd(int,int,int)
	CALLEE: static io.netty.channel.epoll.Native#newTimerFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
CALLER: static io.netty.channel.nio.NioEventLoop#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.channel.nio.NioEventLoop.2#<init>()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.nio.NioEventLoop#<init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.Executor,java.nio.channels.spi.SelectorProvider,io.netty.channel.SelectStrategy,io.netty.util.concurrent.RejectedExecutionHandler,io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean,java.util.Queue,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)
	CALLEE: static io.netty.channel.nio.NioEventLoop#newTaskQueue(io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: io.netty.channel.nio.NioEventLoop.1#<init>(io.netty.channel.nio.NioEventLoop)
	CALLEE: io.netty.channel.nio.NioEventLoop#openSelector()
CALLER: static org.slf4j.LoggerFactory#fixSubstituteLoggers()
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#postInitialization()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getLoggers()
	CALLEE: org.slf4j.helpers.SubstituteLogger#setDelegate(org.slf4j.Logger)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
CALLER: static org.slf4j.LoggerFactory#replayEvents()
	CALLEE: org.slf4j.helpers.SubstituteLoggerFactory#getEventQueue()
	CALLEE: static org.slf4j.LoggerFactory#replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent)
	CALLEE: static org.slf4j.LoggerFactory#emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int)
CALLER: io.netty.util.concurrent.AbstractEventExecutor#<init>()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup)
CALLER: io.netty.util.concurrent.PromiseTask#<init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.Callable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.CompleteFuture#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: io.netty.util.internal.DefaultPriorityQueue#<init>(java.util.Comparator,int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.concurrent.FastThreadLocal#<clinit>()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#nextVariableIndex()
CALLER: io.netty.util.concurrent.FastThreadLocal#<init>()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#nextVariableIndex()
CALLER: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#<init>(java.lang.String,boolean,int,java.lang.ThreadGroup)
CALLER: static io.netty.channel.epoll.EpollEventLoop#newTaskQueue(io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: static io.netty.channel.epoll.EpollEventLoop#newTaskQueue0(int)
CALLER: io.netty.channel.SingleThreadEventLoop#<init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean,java.util.Queue,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.Executor,boolean,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)
CALLER: io.netty.util.collection.IntObjectHashMap#<init>(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#<init>(int,float)
CALLER: static io.netty.channel.epoll.EpollEventArray#<clinit>()
	CALLEE: static io.netty.channel.epoll.Native#offsetofEpollData()
	CALLEE: static io.netty.channel.epoll.Native#sizeofEpollEvent()
CALLER: io.netty.channel.epoll.EpollEventArray#<init>(int)
	CALLEE: static io.netty.channel.epoll.EpollEventArray#calculateBufferCapacity(int)
	CALLEE: static io.netty.channel.unix.Buffer#allocateDirectWithNativeOrder(int)
	CALLEE: static io.netty.channel.unix.Buffer#memoryAddress(java.nio.ByteBuffer)
CALLER: static io.netty.channel.epoll.Native#epollCtlAdd(int,int,int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlAdd0(int,int,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
CALLER: static io.netty.channel.epoll.Native#newTimerFd()
	CALLEE: io.netty.channel.unix.FileDescriptor#<init>(int)
	CALLEE: static io.netty.channel.epoll.Native#timerFd()
CALLER: io.netty.channel.unix.FileDescriptor#close()
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#markClosed()
	CALLEE: static io.netty.channel.unix.FileDescriptor#close(int)
CALLER: static io.netty.channel.nio.NioEventLoop#newTaskQueue(io.netty.channel.EventLoopTaskQueueFactory)
	CALLEE: static io.netty.channel.nio.NioEventLoop#newTaskQueue0(int)
CALLER: io.netty.channel.nio.NioEventLoop#openSelector()
	CALLEE: io.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.nio.NioEventLoop.SelectorTuple#<init>(java.nio.channels.Selector)
	CALLEE: io.netty.channel.nio.NioEventLoop.3#<init>(io.netty.channel.nio.NioEventLoop)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#<init>()
	CALLEE: io.netty.channel.nio.NioEventLoop.4#<init>(io.netty.channel.nio.NioEventLoop,java.lang.Class,java.nio.channels.Selector,io.netty.channel.nio.SelectedSelectionKeySet)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#<init>(java.nio.channels.Selector,io.netty.channel.nio.SelectedSelectionKeySet)
	CALLEE: io.netty.channel.nio.NioEventLoop.SelectorTuple#<init>(java.nio.channels.Selector,java.nio.channels.Selector)
	CALLEE: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static org.slf4j.LoggerFactory#replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#getLogger()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNOP()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
	CALLEE: org.slf4j.helpers.SubstituteLogger#log(org.slf4j.event.LoggingEvent)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNull()
CALLER: static org.slf4j.LoggerFactory#emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int)
	CALLEE: static org.slf4j.LoggerFactory#emitReplayWarning(int)
	CALLEE: static org.slf4j.LoggerFactory#emitSubstitutionWarning()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#getLogger()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateNOP()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
CALLER: static io.netty.channel.epoll.EpollEventLoop#newTaskQueue0(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue()
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue(int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.Executor,boolean,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup)
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#apply(java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.collection.IntObjectHashMap#<init>(int,float)
	CALLEE: io.netty.util.collection.IntObjectHashMap.KeySet#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.EntrySet#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.1#<init>(io.netty.util.collection.IntObjectHashMap)
	CALLEE: static io.netty.util.internal.MathUtil#safeFindNextPositivePowerOfTwo(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#calcMaxSize(int)
CALLER: static io.netty.channel.unix.Buffer#memoryAddress(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent#directBufferAddress(java.nio.ByteBuffer)
	CALLEE: static io.netty.channel.unix.Buffer#memoryAddress0(java.nio.ByteBuffer)
CALLER: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.unix.Errors.NativeIoException#<init>(java.lang.String,int)
CALLER: static io.netty.channel.unix.Errors#<clinit>()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoENOENT()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoENOTCONN()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoEBADF()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoEPIPE()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoECONNRESET()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoEAGAIN()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoEWOULDBLOCK()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errnoEINPROGRESS()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errorECONNREFUSED()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errorEISCONN()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errorEALREADY()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#errorENETUNREACH()
	CALLEE: static io.netty.channel.unix.ErrorsStaticallyReferencedJniMethods#strError(int)
CALLER: io.netty.channel.unix.FileDescriptor#markClosed()
	CALLEE: static io.netty.channel.unix.FileDescriptor#isClosed(int)
	CALLEE: io.netty.channel.unix.FileDescriptor#casState(int,int)
CALLER: static io.netty.channel.nio.NioEventLoop#newTaskQueue0(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue()
	CALLEE: static io.netty.util.internal.PlatformDependent#newMpscQueue(int)
CALLER: static org.slf4j.LoggerFactory#emitReplayWarning(int)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
CALLER: static org.slf4j.LoggerFactory#emitSubstitutionWarning()
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent#newMpscQueue()
	CALLEE: static io.netty.util.internal.PlatformDependent.Mpsc#newMpscQueue()
CALLER: static io.netty.util.internal.PlatformDependent#newMpscQueue(int)
	CALLEE: static io.netty.util.internal.PlatformDependent.Mpsc#newMpscQueue(int)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#<init>(io.netty.util.concurrent.EventExecutorGroup)
CALLER: static io.netty.util.internal.ThreadExecutorMap#apply(java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.1#<init>(java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.collection.IntObjectHashMap.KeySet#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.KeySet#<init>(io.netty.util.collection.IntObjectHashMap)
CALLER: io.netty.util.collection.IntObjectHashMap.EntrySet#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.EntrySet#<init>(io.netty.util.collection.IntObjectHashMap)
CALLER: static io.netty.util.internal.MathUtil#safeFindNextPositivePowerOfTwo(int)
	CALLEE: static io.netty.util.internal.MathUtil#findNextPositivePowerOfTwo(int)
CALLER: static io.netty.util.internal.PlatformDependent#directBufferAddress(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#directBufferAddress(java.nio.ByteBuffer)
CALLER: io.netty.channel.unix.Errors.NativeIoException#<init>(java.lang.String,int)
	CALLEE: io.netty.channel.unix.Errors.NativeIoException#<init>(java.lang.String,int,boolean)
CALLER: static io.netty.util.internal.PlatformDependent.Mpsc#newMpscQueue()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#<init>(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#<init>(int)
CALLER: static io.netty.util.internal.PlatformDependent.Mpsc#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: io.netty.util.internal.PlatformDependent.Mpsc.1#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#access$200()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
CALLER: static io.netty.util.internal.PlatformDependent.Mpsc#newMpscQueue(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#<init>(int,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#<init>(int,int)
CALLER: static io.netty.util.internal.PlatformDependent0#directBufferAddress(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getLong(java.lang.Object,long)
CALLER: io.netty.channel.unix.Errors.NativeIoException#<init>(java.lang.String,int,boolean)
	CALLEE: static io.netty.channel.unix.Errors#access$000()
CALLER: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#<clinit>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#fieldOffset(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#<clinit>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#fieldOffset(java.lang.Class,java.lang.String)
CALLER: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#<clinit>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#fieldOffset(java.lang.Class,java.lang.String)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#<init>(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#<init>(int)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#<init>(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#<init>(int)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#<init>(int,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields#<init>(int,int)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#<init>(int,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueueColdProducerFields#<init>(int,int)
CALLER: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#<clinit>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#getUnsafe()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#hasGetAndSetSupport()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess#hasGetAndAddLongSupport()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#<init>(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#<init>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkGreaterThanOrEqual(int,int,java.lang.String)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#roundToPowerOfTwo(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#allocateRefArray(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#soProducerLimit(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#<init>(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkGreaterThanOrEqual(int,int,java.lang.String)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#roundToPowerOfTwo(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#<init>()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#allocateRefArray(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#soProducerLimit(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields#<init>(int,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#<init>(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkGreaterThanOrEqual(int,int,java.lang.String)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#roundToPowerOfTwo(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkLessThan(int,int,java.lang.String)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueueColdProducerFields#<init>(int,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#<init>(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkGreaterThanOrEqual(int,int,java.lang.String)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#roundToPowerOfTwo(int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkLessThan(int,int,java.lang.String)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad3#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad3#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad3#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad2#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad2#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad2#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueuePad1#<init>()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#<init>()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueuePad1#<init>()
CALLER: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
CALLER: jline.internal.NonBlockingInputStream#run()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
CALLER: io.netty.util.internal.DefaultPriorityQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#offer(io.netty.util.internal.PriorityQueueNode)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
CALLER: io.netty.util.concurrent.AbstractEventExecutor#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
CALLER: io.netty.util.concurrent.DefaultEventExecutorChooserFactory#newChooser(io.netty.util.concurrent.EventExecutor[])
	CALLEE: static io.netty.util.concurrent.DefaultEventExecutorChooserFactory#isPowerOfTwo(int)
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory.PowerOfTwoEventExecutorChooser#<init>(io.netty.util.concurrent.EventExecutor[])
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory.GenericEventExecutorChooser#<init>(io.netty.util.concurrent.EventExecutor[])
CALLER: org.slf4j.helpers.SubstituteLoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#<init>(java.lang.String,java.util.Queue,boolean)
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(java.lang.String)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#escapeSlow(java.lang.String,int)
CALLER: io.netty.util.internal.logging.JdkLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#<init>(java.util.logging.Logger)
CALLER: io.netty.util.internal.logging.Log4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#<init>(org.apache.log4j.Logger)
CALLER: io.netty.util.internal.logging.Slf4JLoggerFactory#newInstance(java.lang.String)
	CALLEE: static org.slf4j.LoggerFactory#getLogger(java.lang.String)
	CALLEE: static io.netty.util.internal.logging.Slf4JLoggerFactory#wrapLogger(org.slf4j.Logger)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
CALLER: org.fusesource.jansi.Ansi#toString()
	CALLEE: org.fusesource.jansi.Ansi#flushAtttributes()
CALLER: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#getTag()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#getRegexp()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#represent(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#ticker(com.google.common.base.Ticker)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
CALLER: com.google.common.io.BaseEncoding#encode(byte[])
	CALLEE: com.google.common.io.BaseEncoding#encode(byte[],int,int)
CALLER: io.netty.util.AttributeKey.1#newConstant(int,java.lang.String)
	CALLEE: io.netty.util.AttributeKey.1#newConstant(int,java.lang.String)
CALLER: org.fusesource.jansi.Ansi#fg(org.fusesource.jansi.Ansi.Color)
	CALLEE: org.fusesource.jansi.Ansi.Color#fg()
CALLER: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.graph.Dependency#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: joptsimple.internal.Row#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#equals(java.lang.Object)
CALLER: net.md_5.bungee.jni.NativeCode#load()
	CALLEE: static net.md_5.bungee.jni.NativeCode#isSupported()
	CALLEE: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
CALLER: com.google.gson.GsonBuilder#create()
	CALLEE: com.google.gson.GsonBuilder#addTypeAdaptersForDate(java.lang.String,int,int,java.util.List)
	CALLEE: com.google.gson.Gson#<init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List)
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
	CALLEE: static com.google.gson.internal..Gson.Types#hashCodeOrZero(java.lang.Object)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: joptsimple.OptionParserState.2#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.ArgumentList#next()
	CALLEE: static joptsimple.ParserRules#isOptionTerminator(java.lang.String)
	CALLEE: joptsimple.OptionParser#noMoreOptions()
	CALLEE: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleLongOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: static joptsimple.ParserRules#isShortOptionToken(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleShortOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#doesAllowsUnrecognizedOptions()
	CALLEE: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(net.md_5.bungee.api.chat.BaseComponent[])
	CALLEE: static net.md_5.bungee.api.chat.BaseComponent#toLegacyText(net.md_5.bungee.api.chat.BaseComponent[])
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
CALLER: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getValue()
CALLER: com.google.common.graph.GraphBuilder#build()
	CALLEE: com.google.common.graph.ConfigurableMutableGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView.1#<init>(gnu.trove.map.hash.TCustomHashMap.ValueView,gnu.trove.impl.hash.TObjectHash)
CALLER: io.netty.util.internal.InternalThreadLocalMap#random()
	CALLEE: io.netty.util.internal.ThreadLocalRandom#<init>()
CALLER: net.md_5.bungee.api.chat.ComponentBuilder#create()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#duplicate()
CALLER: jline.console.ConsoleReader#readLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#readLine(java.lang.String,java.lang.Character)
CALLER: io.netty.bootstrap.AbstractBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: io.netty.bootstrap.AbstractBootstrap#option(io.netty.channel.ChannelOption,java.lang.Object)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: net.md_5.bungee.module.ModuleVersion#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleVersion#canEqual(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String,java.util.List)
CALLER: io.netty.util.internal.ThreadLocalRandom.1#run()
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#access$002(long)
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#access$100()
CALLER: io.netty.util.NettyRuntime.AvailableProcessorsHolder#availableProcessors()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.util.NettyRuntime.AvailableProcessorsHolder#setAvailableProcessors(int)
CALLER: net.md_5.bungee.module.ModuleVersion#toString()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.1#<init>(gnu.trove.map.hash.TCustomHashMap,java.lang.StringBuilder)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
CALLER: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#getArtifact()
	CALLEE: org.eclipse.aether.graph.Dependency#getScope()
	CALLEE: org.eclipse.aether.graph.Dependency#isOptional()
CALLER: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#toString()
CALLER: com.google.common.cache.CacheBuilder#build()
	CALLEE: com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: com.google.common.cache.CacheBuilder#checkNonLoadingCache()
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.CacheBuilder)
CALLER: org.eclipse.aether.impl.DefaultServiceLocator#getService(java.lang.Class)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#getEntry(java.lang.Class,boolean)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator.Entry#getInstance()
CALLER: com.google.common.util.concurrent.ThreadFactoryBuilder#build()
	CALLEE: static com.google.common.util.concurrent.ThreadFactoryBuilder#build(com.google.common.util.concurrent.ThreadFactoryBuilder)
CALLER: net.md_5.bungee.api.plugin.PluginManager#registerCommand(net.md_5.bungee.api.plugin.Plugin,net.md_5.bungee.api.plugin.Command)
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
CALLER: net.md_5.bungee.BungeeCord.2#run()
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: static net.md_5.bungee.BungeeCord#access$000(net.md_5.bungee.BungeeCord,java.lang.String,boolean)
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setTransferListener(org.eclipse.aether.transfer.TransferListener)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setLocalRepositoryManager(org.eclipse.aether.repository.LocalRepositoryManager)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: org.eclipse.aether.DefaultRepositorySystemSession#setChecksumPolicy(java.lang.String)
	CALLEE: org.eclipse.aether.DefaultRepositorySystemSession#failIfReadOnly()
CALLER: jline.console.KeyMap#setBlinkMatchingParen(boolean)
	CALLEE: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
CALLER: jline.console.KeyMap#bind(java.lang.CharSequence,java.lang.Object)
	CALLEE: static jline.console.KeyMap#bind(jline.console.KeyMap,java.lang.CharSequence,java.lang.Object,boolean)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getSingleData(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructDocument(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.composer.Composer#getSingleNode()
CALLER: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getArtifactId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getGroupId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getVersion()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getExtension()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getClassifier()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getFile()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getProperties()
CALLER: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getArtifactId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getGroupId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getVersion()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getExtension()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getClassifier()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getFile()
	CALLEE: static org.eclipse.aether.artifact.AbstractArtifact#hash(java.lang.Object)
CALLER: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: com.google.gson.internal..Gson.Types.WildcardTypeImpl#toString()
	CALLEE: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
CALLER: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#getHashCode()
CALLER: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
CALLER: net.md_5.bungee.module.ModuleVersion#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getGit()
CALLER: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency.Exclusions#size()
CALLER: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#getText()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#hashCode()
CALLER: io.netty.util.internal.DefaultPriorityQueue#offer(io.netty.util.internal.PriorityQueueNode)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#bubbleUp(int,io.netty.util.internal.PriorityQueueNode)
CALLER: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#inEventLoop(java.lang.Thread)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#inEventLoop(java.lang.Thread)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#terminationFuture()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(long,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#ensureThreadStarted(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
CALLER: static org.slf4j.helpers.NOPLogger#<clinit>()
	CALLEE: org.slf4j.helpers.NOPLogger#<init>()
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#escapeSlow(java.lang.String,int)
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#codePointAt(java.lang.CharSequence,int,int)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#escape(int)
	CALLEE: static org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper#growBuffer(char[],int,int)
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.PercentEscaper#nextEscapeIndex(java.lang.CharSequence,int,int)
CALLER: io.netty.util.internal.logging.JdkLogger#<init>(java.util.logging.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
CALLER: io.netty.util.internal.logging.Log4JLogger#<init>(org.apache.log4j.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceCapable()
CALLER: static io.netty.util.internal.logging.Slf4JLoggerFactory#wrapLogger(org.slf4j.Logger)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#<init>(org.slf4j.spi.LocationAwareLogger)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#<init>(org.slf4j.Logger)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#expect()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getTags()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getVersion()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getExplicit()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$500(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeVersionDirective(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$700()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$602(org.yaml.snakeyaml.emitter.Emitter,java.util.Map)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$800(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$900(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeTagDirective(java.lang.String,java.lang.String)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeStreamEnd()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.fusesource.jansi.Ansi#flushAtttributes()
	CALLEE: org.fusesource.jansi.Ansi#_appendEscapeSequence(char,java.lang.Object[])
CALLER: static org.yaml.snakeyaml.resolver.Resolver.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentUuid#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#representData(java.lang.Object)
CALLER: com.google.common.io.BaseEncoding#encode(byte[],int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#maxEncodedSize(int)
	CALLEE: com.google.common.io.BaseEncoding.Base64Encoding#encodeTo(java.lang.Appendable,byte[],int,int)
CALLER: io.netty.util.AttributeKey.1#newConstant(int,java.lang.String)
	CALLEE: io.netty.util.AttributeKey#<init>(int,java.lang.String,io.netty.util.AttributeKey.1)
CALLER: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.io.ByteStreams#createBuffer()
CALLER: static com.google.common.io.ByteStreams#<clinit>()
	CALLEE: com.google.common.io.ByteStreams.1#<init>()
CALLER: com.google.gson.GsonBuilder#addTypeAdaptersForDate(java.lang.String,int,int,java.util.List)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.lang.String)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(int,int)
	CALLEE: static com.google.gson.reflect.TypeToken#get(java.lang.Class)
	CALLEE: static com.google.gson.internal.bind.TreeTypeAdapter#newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
CALLER: static com.google.gson.Gson#<clinit>()
	CALLEE: com.google.gson.Gson.1#<init>()
CALLER: com.google.gson.Gson#<init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: static com.google.gson.internal.bind.TypeAdapters#newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.ConstructorConstructor#<init>(java.util.Map)
	CALLEE: static com.google.gson.Gson#longAdapter(com.google.gson.LongSerializationPolicy)
	CALLEE: com.google.gson.Gson#doubleAdapter(boolean)
	CALLEE: com.google.gson.Gson#floatAdapter(boolean)
	CALLEE: static com.google.gson.Gson#atomicLongAdapter(com.google.gson.TypeAdapter)
	CALLEE: static com.google.gson.Gson#atomicLongArrayAdapter(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.internal.bind.CollectionTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor)
	CALLEE: com.google.gson.internal.bind.MapTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor,boolean)
	CALLEE: com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor)
	CALLEE: com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#<init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory)
CALLER: static com.google.gson.internal..Gson.Types#hashCodeOrZero(java.lang.Object)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
CALLER: joptsimple.OptionParser#noMoreOptions()
	CALLEE: static joptsimple.OptionParserState#noMoreOptions()
CALLER: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isOptionTerminator(java.lang.String)
CALLER: joptsimple.OptionParser#handleLongOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: static joptsimple.OptionParser#parseLongOptionWithArgument(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
CALLER: static joptsimple.ParserRules#isShortOptionToken(java.lang.String)
	CALLEE: static joptsimple.ParserRules#isLongOptionToken(java.lang.String)
CALLER: joptsimple.OptionParser#handleShortOptionToken(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: static joptsimple.OptionParser#parseShortOptionWithArgument(java.lang.String)
	CALLEE: joptsimple.OptionParser#handleShortOptionCluster(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
CALLER: static net.md_5.bungee.api.chat.BaseComponent#toLegacyText(net.md_5.bungee.api.chat.BaseComponent[])
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#toLegacyText()
CALLER: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
CALLER: com.google.common.graph.ConfigurableMutableGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
	CALLEE: com.google.common.graph.ForwardingGraph#<init>()
	CALLEE: com.google.common.graph.ConfigurableMutableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
CALLER: gnu.trove.map.hash.TCustomHashMap.ValueView.1#<init>(gnu.trove.map.hash.TCustomHashMap.ValueView,gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: static io.netty.channel.DefaultSelectStrategy#<clinit>()
	CALLEE: io.netty.channel.DefaultSelectStrategy#<init>()
CALLER: io.netty.util.internal.ThreadLocalRandom#<init>()
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#newSeed()
CALLER: jline.console.ConsoleReader#readLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.KeyMap#getBound(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#viPut(int)
	CALLEE: jline.console.ConsoleReader#viCharSearch(int,int,int)
	CALLEE: jline.console.ConsoleReader#viChangeCase(int)
	CALLEE: jline.console.ConsoleReader#viChangeChar(int,int)
	CALLEE: jline.console.ConsoleReader#viDeleteTo(int,int,boolean)
	CALLEE: jline.console.ConsoleReader#viYankTo(int,int)
	CALLEE: jline.console.KeyMap#getAnotherKey()
	CALLEE: jline.console.ConsoleKeys#loadKeys(java.lang.String,java.net.URL)
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: jline.TerminalSupport#isSupported()
	CALLEE: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getPrompt()
	CALLEE: jline.console.ConsoleReader#beforeReadLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.ConsoleReader#readLineSimple()
	CALLEE: jline.console.ConsoleReader#afterReadLine()
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.ConsoleReader#getKeys()
	CALLEE: jline.console.KillRing#resetLastYank()
	CALLEE: jline.console.KillRing#resetLastKill()
	CALLEE: jline.internal.NonBlockingInputStream#isNonBlockingEnabled()
	CALLEE: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#moveTo(int)
	CALLEE: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printForwardSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#restoreLine(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#viDeleteChangeYankToRemap(jline.console.Operation)
	CALLEE: jline.console.ConsoleReader#complete()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#printCompletionCandidates()
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#yank()
	CALLEE: jline.console.ConsoleReader#yankPop()
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#clearScreen()
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.CursorBuffer#isOverTyping()
	CALLEE: jline.console.CursorBuffer#setOverTyping(boolean)
	CALLEE: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleReader#abort()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.UserInterruptException#<init>(java.lang.String)
	CALLEE: jline.console.ConsoleKeys#setKeyMap(java.lang.String)
	CALLEE: jline.console.ConsoleReader#previousWord()
	CALLEE: jline.console.ConsoleReader#nextWord()
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean)
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean,int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#deleteCurrentCharacter()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#resetLine()
	CALLEE: jline.console.ConsoleReader#unixWordRubout(int)
	CALLEE: jline.console.ConsoleReader#deletePreviousWord()
	CALLEE: jline.console.ConsoleReader#deleteNextWord()
	CALLEE: jline.console.history.MemoryHistory#moveToFirst()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#moveToLast()
	CALLEE: jline.console.CursorBuffer#upToCursor()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#capitalizeWord()
	CALLEE: jline.console.ConsoleReader#upCaseWord()
	CALLEE: jline.console.ConsoleReader#downCaseWord()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#transposeChars(int)
	CALLEE: jline.console.ConsoleReader#insertComment(boolean)
	CALLEE: jline.console.ConsoleReader#insertClose(java.lang.String)
	CALLEE: jline.console.ConsoleReader#viMatch()
	CALLEE: jline.console.ConsoleReader#viSearch(char)
	CALLEE: jline.console.ConsoleReader#viNextWord(int)
	CALLEE: jline.console.ConsoleReader#viPreviousWord(int)
	CALLEE: jline.console.ConsoleReader#viEndWord(int)
	CALLEE: jline.console.ConsoleReader#viRubout(int)
	CALLEE: jline.console.ConsoleReader#viDelete(int)
CALLER: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String,java.util.List)
	CALLEE: net.md_5.bungee.command.CommandBungee#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandPerms#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermissionMessage()
	CALLEE: net.md_5.bungee.api.plugin.Command#hasPermission(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.command.PlayerCommand#onTabComplete(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: com.google.common.collect.Iterables.6#iterator()
	CALLEE: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#getCommandIfEnabled(java.lang.String,net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.BungeeCord#getConfig()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#getName()
	CALLEE: net.md_5.bungee.conf.Configuration#isLogCommands()
	CALLEE: net.md_5.bungee.command.CommandReload#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandEnd#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.command.CommandIP#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
CALLER: io.netty.util.NettyRuntime.AvailableProcessorsHolder#setAvailableProcessors(int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositive(int,java.lang.String)
CALLER: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.1#execute(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EqProcedure#execute(java.lang.Object,java.lang.Object)
CALLER: net.md_5.bungee.api.chat.BaseComponent#toString()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getExtra()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getClickEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getHoverEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getInsertion()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColor()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getFont()
CALLER: com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#checkNonLoadingCache()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.Object)
CALLER: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.CacheBuilder)
	CALLEE: com.google.common.cache.LocalCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.LocalCache)
CALLER: org.eclipse.aether.impl.DefaultServiceLocator.Entry#getInstance()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator.Entry#getInstances()
CALLER: static com.google.common.util.concurrent.ThreadFactoryBuilder#build(com.google.common.util.concurrent.ThreadFactoryBuilder)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder.1#<init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread.UncaughtExceptionHandler)
CALLER: com.google.common.collect.ArrayListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
CALLER: static net.md_5.bungee.BungeeCord#access$000(net.md_5.bungee.BungeeCord,java.lang.String,boolean)
	CALLEE: net.md_5.bungee.BungeeCord#independentThreadStop(java.lang.String,boolean)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructDocument(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#fillRecursive()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$000()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$100(org.yaml.snakeyaml.constructor.SafeConstructor,int,java.lang.String,int)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[])
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$200()
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#access$300()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newList(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultMap(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: static com.google.gson.internal..Gson.Types#typeToString(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#toString()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#toString()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#toString()
CALLER: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.HashProcedure#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: net.md_5.bungee.api.chat.BaseComponent#hashCode()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getExtra()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getClickEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getHoverEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getInsertion()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColor()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getFont()
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
CALLER: io.netty.util.internal.DefaultPriorityQueue#bubbleUp(int,io.netty.util.internal.PriorityQueueNode)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#ensureThreadStarted(int)
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread()
	CALLEE: io.netty.util.concurrent.DefaultPromise#tryFailure(java.lang.Throwable)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#offer(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#offer(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#offer(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#offer(java.lang.Object)
CALLER: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.epoll.Native#eventFdWrite(int,long)
CALLER: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#wakeup()
CALLER: org.slf4j.helpers.NOPLogger#<init>()
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#<init>()
CALLER: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#<init>(org.slf4j.spi.LocationAwareLogger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#getName()
CALLER: io.netty.util.internal.logging.Slf4JLogger#<init>(org.slf4j.Logger)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#<init>(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
	CALLEE: org.slf4j.helpers.NOPLogger#getName()
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#getName()
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeWhitespace(int)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$500(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareVersion(org.yaml.snakeyaml.DumperOptions.Version)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeVersionDirective(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$800(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTagHandle(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$900(org.yaml.snakeyaml.emitter.Emitter,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTagPrefix(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeTagDirective(java.lang.String,java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$1100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyDocument()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeStreamEnd()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#flushStream()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeBlockComment()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNull#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
CALLER: org.yaml.snakeyaml.representer.Representer.RepresentJavaBean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.Representer#representJavaBean(java.util.Set,java.lang.Object)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentString#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
	CALLEE: static org.yaml.snakeyaml.representer.SafeRepresenter#access$000()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentBoolean#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentUuid#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentByteArray#representData(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asByteList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asShortList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asIntList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asLongList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asFloatList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asDoubleList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asCharList(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentPrimitiveArray#asBooleanList(java.lang.Object)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentNumber#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentList#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentMap#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentSet#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentIterator#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.IteratorWrapper#<init>(java.util.Iterator)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentArray#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentDate#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer#getTimeZone()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
CALLER: org.yaml.snakeyaml.representer.SafeRepresenter.RepresentEnum#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter#getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)
CALLER: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#maxEncodedSize(int)
	CALLEE: static com.google.common.math.IntMath#divide(int,int,java.math.RoundingMode)
CALLER: com.google.common.io.BaseEncoding.Base64Encoding#encodeTo(java.lang.Appendable,byte[],int,int)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#encode(int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
	CALLEE: com.google.common.io.BaseEncoding.StandardBaseEncoding#encodeChunkTo(java.lang.Appendable,byte[],int,int)
CALLER: io.netty.util.AttributeKey#<init>(int,java.lang.String,io.netty.util.AttributeKey.1)
	CALLEE: io.netty.util.AttributeKey#<init>(int,java.lang.String)
CALLER: com.google.gson.DefaultDateTypeAdapter#<init>(java.lang.String)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.text.DateFormat,java.text.DateFormat)
CALLER: com.google.gson.DefaultDateTypeAdapter#<init>(int,int)
	CALLEE: com.google.gson.DefaultDateTypeAdapter#<init>(java.text.DateFormat,java.text.DateFormat)
CALLER: static com.google.gson.reflect.TypeToken#get(java.lang.Class)
	CALLEE: com.google.gson.reflect.TypeToken#<init>(java.lang.reflect.Type)
CALLER: static com.google.gson.internal.bind.TreeTypeAdapter#newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
	CALLEE: com.google.gson.internal.bind.TreeTypeAdapter.SingleTypeFactory#<init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
CALLER: com.google.gson.Gson.1#<init>()
	CALLEE: com.google.gson.reflect.TypeToken#<init>()
CALLER: static com.google.gson.internal.bind.ObjectTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.ObjectTypeAdapter.1#<init>()
CALLER: static com.google.gson.Gson#longAdapter(com.google.gson.LongSerializationPolicy)
	CALLEE: com.google.gson.Gson.4#<init>()
CALLER: com.google.gson.Gson#doubleAdapter(boolean)
	CALLEE: com.google.gson.Gson.2#<init>(com.google.gson.Gson)
CALLER: com.google.gson.Gson#floatAdapter(boolean)
	CALLEE: com.google.gson.Gson.3#<init>(com.google.gson.Gson)
CALLER: static com.google.gson.Gson#atomicLongAdapter(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.TypeAdapter#nullSafe()
	CALLEE: com.google.gson.Gson.5#<init>(com.google.gson.TypeAdapter)
CALLER: static com.google.gson.Gson#atomicLongArrayAdapter(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.TypeAdapter#nullSafe()
	CALLEE: com.google.gson.Gson.6#<init>(com.google.gson.TypeAdapter)
CALLER: static com.google.gson.internal.bind.DateTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.DateTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.TimeTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.TimeTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.SqlDateTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.SqlDateTypeAdapter.1#<init>()
CALLER: static com.google.gson.internal.bind.ArrayTypeAdapter#<clinit>()
	CALLEE: com.google.gson.internal.bind.ArrayTypeAdapter.1#<init>()
CALLER: static joptsimple.OptionParserState#noMoreOptions()
	CALLEE: joptsimple.OptionParserState.1#<init>()
CALLER: static joptsimple.OptionParser#parseLongOptionWithArgument(java.lang.String)
	CALLEE: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
CALLER: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#contains(java.lang.String)
	CALLEE: joptsimple.internal.SimpleOptionNameMap#contains(java.lang.String)
CALLER: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.UnrecognizedOptionException#<init>(java.lang.String)
CALLER: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.OptionSet#add(joptsimple.AbstractOptionSpec)
CALLER: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.OptionSet#addWithArgument(joptsimple.AbstractOptionSpec,java.lang.String)
CALLER: static joptsimple.OptionParser#parseShortOptionWithArgument(java.lang.String)
	CALLEE: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
CALLER: joptsimple.OptionParser#handleShortOptionCluster(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.NoArgumentOptionSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: joptsimple.NonOptionArgumentSpec#handleOption(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet,java.lang.String)
	CALLEE: static joptsimple.OptionParser#extractShortOptionsFrom(java.lang.String)
	CALLEE: joptsimple.OptionParser#validateOptionCharacters(char[])
	CALLEE: joptsimple.OptionParser#specFor(char)
	CALLEE: joptsimple.OptionSpecBuilder#acceptsArguments()
	CALLEE: joptsimple.NonOptionArgumentSpec#acceptsArguments()
CALLER: com.google.common.graph.ForwardingGraph#<init>()
	CALLEE: com.google.common.graph.AbstractGraph#<init>()
CALLER: com.google.common.graph.ConfigurableMutableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
	CALLEE: com.google.common.graph.ConfigurableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
CALLER: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.impl.hash.THashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: static io.netty.util.internal.ThreadLocalRandom#newSeed()
	CALLEE: static io.netty.util.internal.ThreadLocalRandom#getInitialSeedUniquifier()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
CALLER: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#lastLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#stripAnsi(java.lang.String)
CALLER: jline.console.ConsoleReader#beforeReadLine(java.lang.String,java.lang.Character)
	CALLEE: jline.console.ConsoleReader.1#<init>(jline.console.ConsoleReader,java.lang.String)
CALLER: jline.console.ConsoleReader#readLineSimple()
	CALLEE: jline.console.ConsoleReader#readCharacter()
CALLER: jline.console.ConsoleReader#readCharacter()
	CALLEE: static jline.internal.Log#trace(java.lang.Object[])
	CALLEE: jline.TerminalSupport#isSupported()
	CALLEE: jline.internal.InputStreamReader#read()
	CALLEE: jline.console.ConsoleReader#clearEcho(int)
CALLER: jline.console.ConsoleReader#getKeys()
	CALLEE: jline.console.ConsoleKeys#getKeys()
CALLER: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.internal.NonBlockingInputStream#read(long,boolean)
CALLER: static jline.console.ConsoleReader.2#<clinit>()
	CALLEE: static jline.console.Operation#values()
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#index()
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#searchForwards(java.lang.String,int)
	CALLEE: jline.console.history.MemoryHistory#index()
CALLER: jline.console.history.MemoryHistory#moveTo(int)
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
CALLER: jline.console.ConsoleReader#printForwardSearchStatus(java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
CALLER: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(int)
CALLER: jline.console.ConsoleReader#restoreLine(java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#lastLine(java.lang.String)
	CALLEE: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
CALLER: jline.console.ConsoleReader#complete()
	CALLEE: jline.console.ConsoleReader#getCompletionHandler()
	CALLEE: jline.console.completer.CandidateListCompletionHandler#complete(jline.console.ConsoleReader,java.util.List,int)
	CALLEE: net.md_5.bungee.command.ConsoleCommandCompleter#complete(java.lang.String,int,java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.CursorBuffer#write(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
CALLER: jline.console.ConsoleReader#printCompletionCandidates()
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: jline.console.ConsoleReader#drawLine()
	CALLEE: net.md_5.bungee.command.ConsoleCommandCompleter#complete(java.lang.String,int,java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
CALLER: jline.console.ConsoleReader#yank()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.KillRing#yank()
CALLER: jline.console.ConsoleReader#yankPop()
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.KillRing#yank()
	CALLEE: jline.console.KillRing#lastYank()
	CALLEE: jline.console.ConsoleReader#backspace(int)
	CALLEE: jline.console.KillRing#yankPop()
CALLER: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.console.KillRing#add(java.lang.String)
CALLER: jline.console.ConsoleReader#clearScreen()
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
CALLER: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#drawLine()
CALLER: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#finishBuffer()
CALLER: jline.console.ConsoleReader#abort()
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#println()
CALLER: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#previousWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#nextWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#nextChar()
CALLER: jline.console.ConsoleReader#moveHistory(boolean)
	CALLEE: jline.console.history.MemoryHistory#current()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#next()
	CALLEE: jline.console.history.MemoryHistory#previous()
CALLER: jline.console.ConsoleReader#moveHistory(boolean,int)
	CALLEE: jline.console.ConsoleReader#moveHistory(boolean)
CALLER: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: jline.console.ConsoleReader#deleteCurrentCharacter()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#moveInternal(int)
CALLER: jline.console.ConsoleReader#resetLine()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
CALLER: jline.console.ConsoleReader#unixWordRubout(int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isWhitespace(char)
CALLER: jline.console.ConsoleReader#deletePreviousWord()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.CursorBuffer#current()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.KillRing#addBackwards(java.lang.String)
CALLER: jline.console.ConsoleReader#deleteNextWord()
	CALLEE: jline.console.KillRing#add(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#nextChar()
	CALLEE: jline.console.ConsoleReader#delete()
CALLER: jline.console.history.MemoryHistory#moveToFirst()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#setBuffer(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
CALLER: jline.console.history.MemoryHistory#moveToLast()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#hasPrevious()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#index()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#value()
CALLER: jline.console.ConsoleReader#setBufferKeepPos(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
CALLER: jline.console.ConsoleReader#setBufferKeepPos(java.lang.String)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
CALLER: jline.console.ConsoleReader#searchForwards(java.lang.String,int,boolean)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#hasNext()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#index()
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#value()
CALLER: jline.console.ConsoleReader#capitalizeWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#upCaseWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#downCaseWord()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#length()
CALLER: jline.console.ConsoleReader#transposeChars(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#moveInternal(int)
CALLER: jline.console.ConsoleReader#insertComment(boolean)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#accept()
	CALLEE: jline.console.ConsoleKeys#setKeyMap(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getCommentBegin()
CALLER: jline.console.ConsoleReader#insertClose(java.lang.String)
	CALLEE: jline.internal.NonBlockingInputStream#isNonBlockingEnabled()
	CALLEE: jline.internal.NonBlockingInputStream#peek(long)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#viMatch()
CALLER: jline.console.ConsoleReader#viMatch()
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#getBracketType(char)
	CALLEE: jline.console.ConsoleReader#isInViMoveOperationState()
CALLER: jline.console.ConsoleReader#viSearch(char)
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.CursorBuffer#copy()
CALLER: jline.console.ConsoleReader#viNextWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#viPreviousWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
	CALLEE: jline.console.ConsoleReader#isWhitespace(char)
CALLER: jline.console.ConsoleReader#viEndWord(int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#isDelimiter(char)
CALLER: jline.console.ConsoleReader#viRubout(int)
	CALLEE: jline.console.ConsoleReader#backspace()
CALLER: jline.console.ConsoleReader#viDelete(int)
	CALLEE: jline.console.ConsoleReader#deleteCurrentCharacter()
CALLER: jline.console.ConsoleReader#viPut(int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
CALLER: jline.console.ConsoleReader#viCharSearch(int,int,int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#isInViMoveOperationState()
	CALLEE: jline.console.ConsoleReader#switchCase(char)
CALLER: jline.console.ConsoleReader#viChangeCase(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viChangeChar(int,int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viDeleteTo(int,int,boolean)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#viYankTo(int,int)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
CALLER: net.md_5.bungee.api.plugin.PluginManager#getCommandIfEnabled(java.lang.String,net.md_5.bungee.api.CommandSender)
	CALLEE: gnu.trove.impl.hash.TObjectHash#contains(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeCord#getDisabledCommands()
CALLER: net.md_5.bungee.BungeeCord#getConfig()
	CALLEE: net.md_5.bungee.BungeeCord#getConfig()
CALLER: gnu.trove.map.hash.TCustomHashMap.HashProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: static gnu.trove.impl.HashFunctions#hash(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
CALLER: net.md_5.bungee.api.chat.BaseComponent#getColor()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColor()
CALLER: net.md_5.bungee.api.chat.BaseComponent#getFont()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getFont()
CALLER: static com.google.common.cache.LocalCache#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.1#<init>()
	CALLEE: com.google.common.cache.LocalCache.2#<init>()
CALLER: com.google.common.cache.LocalCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.CacheBuilder#getInitialCapacity()
	CALLEE: com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: com.google.common.cache.LocalCache#customWeigher()
	CALLEE: com.google.common.cache.LocalCache#newSegmentArray(int)
	CALLEE: com.google.common.cache.LocalCache#createSegment(int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: com.google.common.base.Suppliers.SupplierOfInstance#get()
	CALLEE: com.google.common.cache.CacheBuilder#getConcurrencyLevel()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getMaximumWeight()
	CALLEE: com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: com.google.common.cache.CacheBuilder#getExpireAfterAccessNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getExpireAfterWriteNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getRefreshNanos()
	CALLEE: com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: com.google.common.cache.LocalCache#recordsTime()
	CALLEE: com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: static com.google.common.cache.LocalCache.EntryFactory#getFactory(com.google.common.cache.LocalCache.Strength,boolean,boolean)
	CALLEE: com.google.common.cache.CacheBuilder#getStatsCounterSupplier()
CALLER: org.eclipse.aether.impl.DefaultServiceLocator.Entry#getInstances()
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator.Entry#newInstance(java.lang.Class)
CALLER: com.google.common.collect.AbstractListMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
CALLER: net.md_5.bungee.BungeeCord#independentThreadStop(java.lang.String,boolean)
	CALLEE: net.md_5.bungee.BungeeCord#getScheduler()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutorGroup#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.plugin.Plugin)
	CALLEE: com.google.common.collect.Lists.ReverseList#iterator()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#getPlugins()
	CALLEE: static com.google.common.collect.Lists#reverse(java.util.List)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#fillRecursive()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#_2()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#_1()
CALLER: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#getClassForNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor#access$100(org.yaml.snakeyaml.constructor.SafeConstructor,int,java.lang.String,int)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#createNumber(int,java.lang.String,int)
CALLER: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[])
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#decode(char[],int,int)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newSet(org.yaml.snakeyaml.nodes.CollectionNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newList(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultList(int)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newList(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newMap(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(io.netty.util.concurrent.ScheduledFutureTask,io.netty.util.concurrent.ScheduledFutureTask)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.4#<init>(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.1#execute(java.lang.Runnable)
CALLER: io.netty.util.concurrent.DefaultPromise#tryFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure0(java.lang.Throwable)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#lvProducerLimit()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#offerSlowPath(long,long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#resize(long,java.lang.Object[],long,java.lang.Object,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue.Supplier)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#casProducerIndex(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#soRefElement(java.lang.Object[],long,java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#lvProducerLimit()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#offerSlowPath(long,long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#resize(long,java.util.concurrent.atomic.AtomicReferenceArray,long,java.lang.Object,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue.Supplier)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#casProducerIndex(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)
CALLER: org.slf4j.helpers.MarkerIgnoringBase#<init>()
	CALLEE: org.slf4j.helpers.NamedLoggerBase#<init>()
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareVersion(org.yaml.snakeyaml.DumperOptions.Version)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#getRepresentation()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#major()
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTagHandle(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTagPrefix(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#checkEmptyDocument()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeBlockComment()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeCommentLines(java.util.List)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: org.yaml.snakeyaml.representer.Representer#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class)
CALLER: org.yaml.snakeyaml.representer.Representer#representJavaBean(java.util.Set,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#isPlain()
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.Representer#representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
CALLER: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(int)
CALLER: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[])
	CALLEE: static org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder#encode(byte[],int,int)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.SafeRepresenter.IteratorWrapper#iterator()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#isPlain()
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter#representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#isPlain()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
CALLER: static com.google.common.base.Preconditions#badPositionIndexes(int,int,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: com.google.common.io.BaseEncoding.StandardBaseEncoding#encodeChunkTo(java.lang.Appendable,byte[],int,int)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#encode(int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndexes(int,int,int)
CALLER: io.netty.util.AttributeKey#<init>(int,java.lang.String)
	CALLEE: io.netty.util.AbstractConstant#<init>(int,java.lang.String)
CALLER: com.google.gson.reflect.TypeToken#<init>()
	CALLEE: static com.google.gson.internal..Gson.Types#getRawType(java.lang.reflect.Type)
	CALLEE: com.google.gson.internal..Gson.Types.GenericArrayTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.ParameterizedTypeImpl#hashCode()
	CALLEE: com.google.gson.internal..Gson.Types.WildcardTypeImpl#hashCode()
	CALLEE: static com.google.gson.reflect.TypeToken#getSuperclassTypeParameter(java.lang.Class)
CALLER: com.google.gson.Gson.4#<init>()
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.2#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.3#<init>(com.google.gson.Gson)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.5#<init>(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: com.google.gson.Gson.6#<init>(com.google.gson.TypeAdapter)
	CALLEE: com.google.gson.TypeAdapter#<init>()
CALLER: joptsimple.OptionParserState.1#<init>()
	CALLEE: joptsimple.OptionParserState#<init>()
CALLER: static joptsimple.util.KeyValuePair#valueOf(java.lang.String)
	CALLEE: joptsimple.util.KeyValuePair#<init>(java.lang.String,java.lang.String)
CALLER: joptsimple.internal.AbbreviationMap#contains(java.lang.String)
	CALLEE: joptsimple.internal.AbbreviationMap#get(java.lang.String)
CALLER: joptsimple.UnrecognizedOptionException#<init>(java.lang.String)
	CALLEE: joptsimple.OptionException#<init>(java.util.List)
CALLER: joptsimple.OptionParser#validateOptionCharacters(char[])
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
	CALLEE: joptsimple.OptionParser#isRecognized(java.lang.String)
	CALLEE: static joptsimple.OptionException#unrecognizedOption(java.lang.String)
	CALLEE: joptsimple.OptionSpecBuilder#acceptsArguments()
	CALLEE: joptsimple.NonOptionArgumentSpec#acceptsArguments()
CALLER: joptsimple.OptionParser#specFor(char)
	CALLEE: joptsimple.OptionParser#specFor(java.lang.String)
CALLER: com.google.common.graph.ConfigurableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder)
	CALLEE: com.google.common.base.Absent#or(java.lang.Object)
	CALLEE: com.google.common.graph.ElementOrder#createMap(int)
	CALLEE: com.google.common.graph.ConfigurableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)
CALLER: gnu.trove.impl.hash.THashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: static io.netty.util.internal.ThreadLocalRandom#getInitialSeedUniquifier()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
CALLER: jline.console.ConsoleReader#stripAnsi(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#<init>(java.io.OutputStream)
CALLER: jline.internal.InputStreamReader#read()
	CALLEE: jline.internal.InputStreamReader#isOpen()
	CALLEE: jline.internal.InputStreamReader#read(char[],int,int)
CALLER: jline.console.ConsoleReader#clearEcho(int)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.TerminalSupport#isEchoEnabled()
	CALLEE: jline.console.ConsoleReader#countEchoCharacters(int)
	CALLEE: jline.console.ConsoleReader#back(int)
CALLER: jline.console.ConsoleReader#printSearchStatus(java.lang.String,java.lang.String,java.lang.String)
	CALLEE: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
CALLER: jline.console.ConsoleReader#resetPromptLine(java.lang.String,java.lang.String,int)
	CALLEE: jline.console.ConsoleReader#setPrompt(java.lang.String)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#redrawLine()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#setBuffer(java.lang.String)
	CALLEE: jline.console.ConsoleReader#backspaceAll()
CALLER: jline.console.CursorBuffer#write(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.CursorBuffer#isOverTyping()
CALLER: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#getAutoprintThreshold()
	CALLEE: jline.console.ConsoleReader#readCharacter(char[])
	CALLEE: jline.console.ConsoleReader#printColumns(java.util.Collection)
	CALLEE: jline.console.completer.CandidateListCompletionHandler.Messages#format(java.lang.Object[])
CALLER: jline.console.ConsoleReader#drawLine()
	CALLEE: jline.console.ConsoleReader#getPrompt()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#drawBuffer()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#back(int)
CALLER: jline.console.ConsoleReader#backspace(int)
	CALLEE: jline.console.ConsoleReader#moveCursor(int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#yankPop()
	CALLEE: jline.console.KillRing#prev()
CALLER: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#add(java.lang.String)
	CALLEE: jline.console.KillRing#next()
CALLER: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.ConsoleReader#finishBuffer()
	CALLEE: static jline.internal.Log#error(java.lang.Object[])
	CALLEE: jline.console.CursorBuffer#clear()
	CALLEE: jline.console.ConsoleReader#beep()
	CALLEE: jline.console.history.MemoryHistory#moveToEnd()
	CALLEE: jline.console.ConsoleReader#expandEvents(java.lang.String)
	CALLEE: jline.console.ConsoleReader#isHistoryEnabled()
	CALLEE: jline.console.history.MemoryHistory#add(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#next()
	CALLEE: jline.console.history.MemoryHistory#size()
CALLER: jline.console.ConsoleReader#drawBuffer(int)
	CALLEE: jline.console.ConsoleReader#print(int)
	CALLEE: jline.console.ConsoleReader#clearAhead(int,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.CursorBuffer#length()
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
	CALLEE: jline.TerminalSupport#hasWeirdWrap()
CALLER: jline.console.ConsoleReader#moveInternal(int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char[])
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.KillRing#addBackwards(java.lang.String)
	CALLEE: jline.console.KillRing#next()
CALLER: jline.console.ConsoleReader#delete()
	CALLEE: jline.console.ConsoleReader#drawBuffer(int)
CALLER: jline.console.ConsoleReader#setBuffer(java.lang.String)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#killLine()
	CALLEE: jline.console.ConsoleReader#moveToEnd()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: jline.console.history.MemoryHistory#entries(int)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int,jline.console.history.MemoryHistory.1)
CALLER: jline.console.ConsoleReader#getCommentBegin()
	CALLEE: jline.console.ConsoleKeys#getVariable(java.lang.String)
CALLER: jline.console.CursorBuffer#copy()
	CALLEE: jline.console.CursorBuffer#<init>()
	CALLEE: jline.console.CursorBuffer#toString()
CALLER: net.md_5.bungee.BungeeCord#getDisabledCommands()
	CALLEE: net.md_5.bungee.conf.Configuration#getDisabledCommands()
CALLER: static gnu.trove.impl.HashFunctions#hash(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
CALLER: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getKeyEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getKeyStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: com.google.common.cache.CacheBuilder#getValueEquivalence()
	CALLEE: com.google.common.cache.CacheBuilder#getValueStrength()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
CALLER: com.google.common.cache.CacheBuilder#getWeigher()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.cache.CacheBuilder#getRemovalListener()
	CALLEE: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
CALLER: static com.google.common.cache.CacheBuilder.NullListener#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.NullListener#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#recordsTime()
	CALLEE: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#recordsAccess()
CALLER: com.google.common.cache.CacheBuilder#getTicker(boolean)
	CALLEE: static com.google.common.base.Ticker#systemTicker()
CALLER: com.google.common.cache.LocalCache#usesAccessEntries()
	CALLEE: com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: com.google.common.cache.LocalCache#usesAccessQueue()
CALLER: com.google.common.cache.LocalCache#usesWriteEntries()
	CALLEE: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#usesWriteQueue()
CALLER: static com.google.common.cache.LocalCache.EntryFactory#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#createSegment(int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: com.google.common.cache.LocalCache.Segment#<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache.StatsCounter)
CALLER: org.eclipse.aether.impl.DefaultServiceLocator.Entry#newInstance(java.lang.Class)
	CALLEE: static org.eclipse.aether.impl.DefaultServiceLocator#access$000(org.eclipse.aether.impl.DefaultServiceLocator,java.lang.Class,java.lang.Class,java.lang.Throwable)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
CALLER: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: io.netty.channel.AbstractChannel#close()
	CALLEE: io.netty.channel.DefaultChannelPromise#syncUninterruptibly()
CALLER: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#nextIndex()
CALLER: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.impl.hash.THashIterator#moveToNextIndex()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView.1#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
CALLER: static com.google.common.collect.Lists#reverse(java.util.List)
	CALLEE: com.google.common.collect.Lists.RandomAccessReverseList#<init>(java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
CALLER: io.netty.util.concurrent.AbstractEventExecutorGroup#shutdownGracefully()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#isTerminated()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#finalizeConstruction(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
CALLER: org.yaml.snakeyaml.constructor.Constructor#getClassForNode(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor#getClassForName(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#getClassName()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#createNumber(int,java.lang.String,int)
	CALLEE: static org.yaml.snakeyaml.constructor.SafeConstructor#createLongOrBigInteger(java.lang.String,int)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newSet(org.yaml.snakeyaml.nodes.CollectionNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultSet(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node,boolean)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newMap(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createDefaultMap(int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(io.netty.util.concurrent.ScheduledFutureTask,io.netty.util.concurrent.ScheduledFutureTask)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.util.concurrent.Delayed)
CALLER: io.netty.util.internal.ThreadExecutorMap.1#execute(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#apply(java.lang.Runnable,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.ThreadPerTaskExecutor#execute(java.lang.Runnable)
CALLER: io.netty.util.concurrent.DefaultPromise#setFailure0(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise.CauseHolder#<init>(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setValue0(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#offerSlowPath(long,long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#casProducerIndex(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#getCurrentBufferCapacity(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#getCurrentBufferCapacity(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#casProducerLimit(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#availableInQueue(long,long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#resize(long,java.lang.Object[],long,java.lang.Object,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue.Supplier)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#allocateRefArray(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields#soProducerLimit(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#soRefElement(java.lang.Object[],long,java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#getNextBufferSize(java.lang.Object[])
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#getNextBufferSize(java.lang.Object[])
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#soProducerIndex(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#nextArrayOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkPositive(long,java.lang.String)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#offerSlowPath(long,long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#casProducerIndex(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#getCurrentBufferCapacity(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#getCurrentBufferCapacity(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#casProducerLimit(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#availableInQueue(long,long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#resize(long,java.util.concurrent.atomic.AtomicReferenceArray,long,java.lang.Object,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue.Supplier)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#allocateRefArray(int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields#soProducerLimit(long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.RangeUtil#checkPositive(long,java.lang.String)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#availableInQueue(long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#getNextBufferSize(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#getNextBufferSize(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#soProducerIndex(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#nextArrayOffset(long)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeCommentLines(java.util.List)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeWhitespace(int)
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getValue()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getCommentType()
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.representer.Representer#representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.representer.BaseRepresenter#representData(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.representer.Representer#checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#<init>(gnu.trove.map.hash.TCustomHashMap)
CALLER: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static com.google.gson.reflect.TypeToken#getSuperclassTypeParameter(java.lang.Class)
	CALLEE: static com.google.gson.internal..Gson.Types#canonicalize(java.lang.reflect.Type)
CALLER: joptsimple.OptionSpecBuilder#acceptsArguments()
	CALLEE: joptsimple.NoArgumentOptionSpec#acceptsArguments()
CALLER: com.google.common.base.Absent#or(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
CALLER: com.google.common.graph.ElementOrder#createMap(int)
	CALLEE: static com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#newLinkedHashMapWithExpectedSize(int)
	CALLEE: com.google.common.graph.ElementOrder#comparator()
	CALLEE: static com.google.common.collect.Maps#newTreeMap(java.util.Comparator)
CALLER: com.google.common.graph.ConfigurableValueGraph#<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)
	CALLEE: com.google.common.graph.AbstractValueGraph#<init>()
	CALLEE: com.google.common.graph.ElementOrder#cast()
	CALLEE: com.google.common.graph.MapRetrievalCache#<init>(java.util.Map)
	CALLEE: com.google.common.graph.MapIteratorCache#<init>(java.util.Map)
	CALLEE: static com.google.common.graph.Graphs#checkNonNegative(long)
CALLER: jline.internal.InputStreamReader#read(char[],int,int)
	CALLEE: jline.internal.InputStreamReader#isOpen()
	CALLEE: jline.internal.NonBlockingInputStream#read(byte[],int,int)
CALLER: jline.console.ConsoleReader#countEchoCharacters(int)
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.console.ConsoleReader#getPrintableCharacters(int)
CALLER: jline.console.ConsoleReader#back(int)
	CALLEE: jline.console.ConsoleReader#print(char,int)
	CALLEE: jline.TerminalSupport#isAnsiSupported()
	CALLEE: jline.console.ConsoleReader#printAnsiSequence(java.lang.String)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#getCursorPosition()
	CALLEE: jline.TerminalSupport#getWidth()
CALLER: jline.console.ConsoleReader#backspaceAll()
	CALLEE: jline.console.ConsoleReader#backspace(int)
CALLER: static jline.console.completer.CandidateListCompletionHandler.Messages#<clinit>()
	CALLEE: jline.console.completer.CandidateListCompletionHandler.Messages#<init>(java.lang.String,int)
CALLER: jline.console.ConsoleReader#readCharacter(char[])
	CALLEE: jline.console.ConsoleReader#readCharacter()
CALLER: jline.console.ConsoleReader#printColumns(java.util.Collection)
	CALLEE: jline.console.ConsoleReader#readCharacter()
	CALLEE: jline.console.ConsoleReader#back(int)
	CALLEE: jline.TerminalSupport#getWidth()
	CALLEE: jline.TerminalSupport#getHeight()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#getTerminal()
	CALLEE: jline.console.ConsoleReader#isPaginationEnabled()
	CALLEE: jline.console.ConsoleReader#println(java.lang.CharSequence)
CALLER: jline.console.ConsoleReader#expandEvents(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String)
	CALLEE: jline.console.history.MemoryHistory#get(int)
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#flush()
	CALLEE: jline.console.history.MemoryHistory#index()
	CALLEE: jline.console.ConsoleReader#searchBackwards(java.lang.String,int,boolean)
	CALLEE: jline.console.ConsoleReader#print(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory#add(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.history.MemoryHistory#isAutoTrim()
	CALLEE: jline.console.history.MemoryHistory#isIgnoreDuplicates()
	CALLEE: jline.console.history.MemoryHistory#internalAdd(java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int,jline.console.history.MemoryHistory.1)
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int)
CALLER: static com.google.common.cache.LocalCache.Strength#<clinit>()
	CALLEE: com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
CALLER: static com.google.common.base.MoreObjects#firstNonNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.cache.CacheBuilder.OneWeigher#<clinit>()
	CALLEE: com.google.common.cache.CacheBuilder.OneWeigher#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache#recordsWrite()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterWrite()
	CALLEE: com.google.common.cache.LocalCache#refreshes()
CALLER: com.google.common.cache.LocalCache#recordsAccess()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: com.google.common.cache.LocalCache#evictsBySize()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterAccess()
CALLER: com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: com.google.common.cache.LocalCache#expiresAfterWrite()
CALLER: com.google.common.cache.LocalCache.EntryFactory.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.4#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.5#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.6#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.7#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory.8#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Segment#<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache.StatsCounter)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.cache.LocalCache#discardingQueue()
	CALLEE: com.google.common.cache.LocalCache#usesAccessQueue()
	CALLEE: com.google.common.cache.LocalCache#usesWriteQueue()
	CALLEE: com.google.common.cache.LocalCache.Segment#newEntryArray(int)
	CALLEE: com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: com.google.common.cache.LocalCache#usesKeyReferences()
	CALLEE: com.google.common.cache.LocalCache#usesValueReferences()
	CALLEE: com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.AccessQueue#<init>()
CALLER: static org.eclipse.aether.impl.DefaultServiceLocator#access$000(org.eclipse.aether.impl.DefaultServiceLocator,java.lang.Class,java.lang.Class,java.lang.Throwable)
	CALLEE: org.eclipse.aether.impl.DefaultServiceLocator#serviceCreationFailed(java.lang.Class,java.lang.Class,java.lang.Throwable)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: gnu.trove.impl.hash.THashIterator#nextIndex()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.impl.hash.THashIterator#moveToNextIndex()
	CALLEE: gnu.trove.impl.hash.THashIterator#nextIndex()
CALLER: com.google.common.collect.Lists.RandomAccessReverseList#<init>(java.util.List)
	CALLEE: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
CALLER: com.google.common.collect.Lists.ReverseList#<init>(java.util.List)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#shutdownGracefully(long,long,java.util.concurrent.TimeUnit)
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#terminationFuture()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#isTerminated()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isTerminated()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#startsWith(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#useClassConstructor()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#finalizeConstruction(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.TypeDescription#finalizeConstruction(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setValue(java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#isMerged()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#postponeSetFilling(java.util.Set,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node,boolean)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.TypeDescription#newInstance(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: org.yaml.snakeyaml.LoaderOptions#getAllowRecursiveKeys()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#postponeMapFilling(java.util.Map,java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.util.concurrent.Delayed)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
CALLER: static io.netty.util.internal.ThreadExecutorMap#apply(java.lang.Runnable,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.2#<init>(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
CALLER: io.netty.util.concurrent.ThreadPerTaskExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
	CALLEE: com.google.common.util.concurrent.ThreadFactoryBuilder.1#newThread(java.lang.Runnable)
CALLER: io.netty.util.concurrent.DefaultPromise#setValue0(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#checkNotifyWaiters()
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListeners()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#getNextBufferSize(java.lang.Object[])
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#length(java.lang.Object[])
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#getNextBufferSize(java.lang.Object[])
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#length(java.lang.Object[])
CALLER: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#nextArrayOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#getNextBufferSize(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#length(java.util.concurrent.atomic.AtomicReferenceArray)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#getNextBufferSize(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#length(java.util.concurrent.atomic.AtomicReferenceArray)
CALLER: static io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#nextArrayOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#createPropertySet(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: org.yaml.snakeyaml.representer.BaseRepresenter.1#put(java.lang.Object,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#<init>(org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.representer.Representer#checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.representer.Representer#resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView#<init>(gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.MapBackedView#<init>(gnu.trove.map.hash.TCustomHashMap,gnu.trove.map.hash.TCustomHashMap.1)
CALLER: static com.google.common.graph.ElementOrder.1#<clinit>()
	CALLEE: static com.google.common.graph.ElementOrder.Type#values()
CALLER: static com.google.common.collect.Maps#newHashMapWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: static com.google.common.collect.Maps#<clinit>()
	CALLEE: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
CALLER: static com.google.common.collect.Maps#newLinkedHashMapWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: com.google.common.graph.AbstractValueGraph#<init>()
	CALLEE: com.google.common.graph.AbstractGraph#<init>()
CALLER: com.google.common.graph.MapRetrievalCache#<init>(java.util.Map)
	CALLEE: com.google.common.graph.MapIteratorCache#<init>(java.util.Map)
CALLER: com.google.common.graph.MapIteratorCache#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.graph.Graphs#checkNonNegative(long)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,long)
CALLER: jline.internal.NonBlockingInputStream#read(byte[],int,int)
	CALLEE: jline.internal.NonBlockingInputStream#read(long)
CALLER: jline.console.ConsoleReader#println(java.lang.CharSequence)
	CALLEE: static jline.internal.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: jline.console.ConsoleReader#println()
	CALLEE: jline.console.ConsoleReader#print(char[])
CALLER: jline.console.history.MemoryHistory#internalAdd(java.lang.CharSequence)
	CALLEE: jline.console.history.MemoryHistory#maybeResize()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#<init>(jline.console.history.MemoryHistory,int)
	CALLEE: static jline.console.history.MemoryHistory#access$100(jline.console.history.MemoryHistory)
CALLER: com.google.common.cache.LocalCache.Strength.1#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Strength.2#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.Strength.3#<init>(java.lang.String,int)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
CALLER: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
	CALLEE: com.google.common.cache.LocalCache.EntryFactory#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache.Segment#initTable(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: com.google.common.cache.LocalCache#customWeigher()
CALLER: com.google.common.cache.LocalCache.WriteQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.WriteQueue.1#<init>(com.google.common.cache.LocalCache.WriteQueue)
CALLER: com.google.common.cache.LocalCache.AccessQueue#<init>()
	CALLEE: com.google.common.cache.LocalCache.AccessQueue.1#<init>(com.google.common.cache.LocalCache.AccessQueue)
CALLER: com.google.common.collect.ArrayListMultimap#createCollection()
	CALLEE: com.google.common.collect.ArrayListMultimap#createCollection()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#isAllowDuplicateKeys()
	CALLEE: org.yaml.snakeyaml.constructor.DuplicateKeyException#<init>(org.yaml.snakeyaml.error.Mark,java.lang.Object,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#postponeSetFilling(java.util.Set,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#<init>(java.lang.Object,java.lang.Object)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#postponeMapFilling(java.util.Map,java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor.RecursiveTuple#<init>(java.lang.Object,java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
	CALLEE: static io.netty.util.concurrent.FastThreadLocalRunnable#wrap(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable,java.lang.String)
CALLER: io.netty.util.concurrent.DefaultPromise#notifyListeners()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#futureListenerStackDepth()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setFutureListenerStackDepth(int)
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListenersNow()
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#<init>(io.netty.util.concurrent.DefaultPromise)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#executor()
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#createPropertySet(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.ValueView#iterator()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.Property#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.Property#isReadable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isReadable()
CALLER: org.yaml.snakeyaml.nodes.CollectionNode#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.nodes.AnchorNode#<init>(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getEndMark()
CALLER: org.yaml.snakeyaml.representer.Representer#resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#matches(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.Node#<init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTag(org.yaml.snakeyaml.nodes.Tag)
CALLER: static com.google.common.collect.Maps#capacity(int)
	CALLEE: static com.google.common.collect.CollectPreconditions#checkNonnegative(int,java.lang.String)
CALLER: static com.google.common.collect.Collections2#<clinit>()
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#useForNull(java.lang.String)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,long)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#reset(boolean)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEscapeCommand(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processOperatingSystemCommand(java.util.ArrayList)
CALLER: jline.internal.NonBlockingInputStream#read(long)
	CALLEE: jline.internal.NonBlockingInputStream#read(long,boolean)
CALLER: jline.console.history.MemoryHistory#maybeResize()
	CALLEE: jline.console.history.MemoryHistory#size()
	CALLEE: jline.console.history.MemoryHistory#getMaxSize()
CALLER: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int,com.google.common.cache.LocalCache.1)
	CALLEE: com.google.common.cache.LocalCache.Strength#<init>(java.lang.String,int)
CALLER: com.google.common.cache.LocalCache.WriteQueue.1#<init>(com.google.common.cache.LocalCache.WriteQueue)
	CALLEE: com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: com.google.common.cache.LocalCache.AccessQueue.1#<init>(com.google.common.cache.LocalCache.AccessQueue)
	CALLEE: com.google.common.cache.LocalCache.AbstractReferenceEntry#<init>()
CALLER: org.yaml.snakeyaml.constructor.DuplicateKeyException#<init>(org.yaml.snakeyaml.error.Mark,java.lang.Object,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: static org.yaml.snakeyaml.constructor.SafeConstructor.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.nodes.NodeId#values()
CALLER: static io.netty.util.concurrent.FastThreadLocalRunnable#wrap(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.FastThreadLocalRunnable#<init>(java.lang.Runnable)
CALLER: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable,java.lang.String)
	CALLEE: io.netty.util.concurrent.FastThreadLocalThread#<init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)
CALLER: io.netty.util.concurrent.DefaultPromise#notifyListenersNow()
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListeners0(io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
CALLER: static io.netty.util.concurrent.DefaultPromise#safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#<init>(java.lang.reflect.Field)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#isTransient(java.beans.FeatureDescriptor)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#<init>(java.beans.PropertyDescriptor)
CALLER: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: org.fusesource.jansi.AnsiOutputStream#processEscapeCommand(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorDown(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorDownLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorUpLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processScrollUp(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processScrollDown(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processDefaultTextColor()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processDefaultBackgroundColor()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processRestoreCursorPosition()
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processUnknownExtension(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processRestoreCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorDown(int)
CALLER: org.fusesource.jansi.AnsiOutputStream#processOperatingSystemCommand(java.util.ArrayList)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#optionInt(java.util.ArrayList,int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconNameAndWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconName(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processUnknownOperatingSystemCommand(int,java.lang.String)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
CALLER: io.netty.util.concurrent.FastThreadLocalRunnable#<init>(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.util.concurrent.FastThreadLocalThread#<init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)
	CALLEE: static io.netty.util.concurrent.FastThreadLocalRunnable#wrap(java.lang.Runnable)
CALLER: io.netty.util.concurrent.DefaultPromise#notifyListeners0(io.netty.util.concurrent.DefaultFutureListeners)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#size()
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#listeners()
CALLER: static io.netty.util.concurrent.DefaultPromise#notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.4#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.5#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.channel.ChannelFutureListener.2#operationComplete(io.netty.util.concurrent.Future)
CALLER: static org.yaml.snakeyaml.introspector.PropertyUtils.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.introspector.BeanAccess#values()
CALLER: org.yaml.snakeyaml.introspector.FieldProperty#<init>(java.lang.reflect.Field)
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
CALLER: org.yaml.snakeyaml.introspector.MethodProperty#<init>(java.beans.PropertyDescriptor)
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
	CALLEE: static org.yaml.snakeyaml.introspector.MethodProperty#discoverGenericType(java.beans.PropertyDescriptor)
CALLER: com.google.common.base.Joiner#<init>(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: org.fusesource.jansi.AnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
CALLER: org.fusesource.jansi.AnsiOutputStream#processCursorDownLine(int)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#write(int)
CALLER: org.fusesource.jansi.AnsiOutputStream#processChangeIconNameAndWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeIconName(java.lang.String)
	CALLEE: org.fusesource.jansi.AnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.GenericProperty#<init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)
	CALLEE: org.yaml.snakeyaml.introspector.Property#<init>(java.lang.String,java.lang.Class)
CALLER: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getType()
	CALLEE: org.yaml.snakeyaml.TypeDescription#getTag()
CALLER: com.google.common.base.Joiner#useForNull(java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
CALLER: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.plugin.Plugin)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#hasNext()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#get(java.lang.Object)
	CALLEE: net.md_5.bungee.scheduler.BungeeScheduler#cancel(net.md_5.bungee.api.scheduler.ScheduledTask)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#next()
CALLER: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: jline.console.history.MemoryHistory.EntriesIterator#previous()
CALLER: jline.console.completer.CandidateListCompletionHandler#complete(jline.console.ConsoleReader,java.util.List,int)
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#printCandidates(jline.console.ConsoleReader,java.util.Collection)
	CALLEE: jline.console.ConsoleReader#drawLine()
	CALLEE: jline.console.CursorBuffer#toString()
	CALLEE: jline.console.ConsoleReader#getCursorBuffer()
	CALLEE: static jline.console.completer.CandidateListCompletionHandler#setBuffer(jline.console.ConsoleReader,java.lang.CharSequence,int)
	CALLEE: jline.console.completer.CandidateListCompletionHandler#getUnambiguousCompletions(java.util.List)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#<init>(gnu.trove.map.hash.TCustomHashMap.EntryView,gnu.trove.map.hash.TCustomHashMap)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String)
CALLER: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String)
CALLER: net.md_5.bungee.api.chat.BaseComponent#toLegacyText()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toLegacyText(java.lang.StringBuilder)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentRoot#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectNothing#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#initialValue()
	CALLEE: org.yaml.snakeyaml.external.com.google.gdata.util.common.base.UnicodeEscaper.2#initialValue()
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEventExpected(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#<init>(org.yaml.snakeyaml.events.CommentEvent)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector.1#poll()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector.1#peek()
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node,boolean)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newSet(org.yaml.snakeyaml.nodes.CollectionNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newMap(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newList(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createArray(java.lang.Class,int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArray(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#wrapIfPrimitive(java.lang.Class)
CALLER: org.slf4j.impl.JDK14LoggerFactory#getLogger(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#<init>(java.util.logging.Logger)
CALLER: com.google.common.cache.CacheBuilder#concurrencyLevel(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,int)
CALLER: io.netty.util.internal.logging.JdkLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isErrorEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String,java.lang.Throwable)
CALLER: org.fusesource.jansi.Ansi#bold()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: org.fusesource.jansi.Ansi#boldOff()
	CALLEE: org.fusesource.jansi.Ansi#a(org.fusesource.jansi.Ansi.Attribute)
	CALLEE: org.fusesource.jansi.Ansi.NoAnsi#a(org.fusesource.jansi.Ansi.Attribute)
CALLER: org.yaml.snakeyaml.composer.Composer#getSingleNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.Composer#getNode()
	CALLEE: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
CALLER: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: joptsimple.OptionSpecBuilder#isRequired()
	CALLEE: joptsimple.NoArgumentOptionSpec#isRequired()
CALLER: io.netty.bootstrap.ServerBootstrap#childAttr(io.netty.util.AttributeKey,java.lang.Object)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.bootstrap.AbstractBootstrap#handler(io.netty.channel.ChannelHandler)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: net.md_5.bungee.conf.YamlConfig#getServers()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: gnu.trove.impl.hash.THashIterator#hasNext()
	CALLEE: gnu.trove.impl.hash.THashIterator#next()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#entrySet()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView#iterator()
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: static net.md_5.bungee.api.ChatColor#translateAlternateColorCodes(char,java.lang.String)
	CALLEE: static net.md_5.bungee.Util#getAddr(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#constructServerInfo(java.lang.String,java.net.SocketAddress,java.lang.String,boolean)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
CALLER: net.md_5.bungee.conf.YamlConfig#getList(java.lang.String,java.util.Collection)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getBoolean(java.lang.String,boolean)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getInt(java.lang.String,int)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getString(java.lang.String,java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getListeners()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#hasNext()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#hasNext()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: static net.md_5.bungee.api.ChatColor#translateAlternateColorCodes(char,java.lang.String)
	CALLEE: static net.md_5.bungee.Util#getAddr(java.lang.String)
	CALLEE: static net.md_5.bungee.conf.YamlConfig.DefaultTabList#valueOf(java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#<init>(java.net.SocketAddress,java.lang.String,int,int,java.util.List,boolean,java.util.Map,java.lang.String,boolean,boolean,int,boolean,boolean)
CALLER: net.md_5.bungee.conf.YamlConfig#load()
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>()
	CALLEE: org.yaml.snakeyaml.Yaml#load(java.io.InputStream)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveMap#<init>(java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceEnabled()
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isTraceEnabled()
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
CALLER: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isTraceEnabled()
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isTraceEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
CALLER: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isDebugEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isDebugEnabled()
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
CALLER: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String)
CALLER: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String)
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isWarnEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isWarnEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isWarnEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isWarnEnabled()
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.JdkLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isInfoEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isTraceEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isTraceEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#isTraceEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isTraceEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isTraceEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isTraceEnabled()
CALLER: io.netty.util.internal.logging.JdkLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isTraceEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.Slf4JLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isInfoEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String)
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getThrowable()
	CALLEE: io.netty.util.internal.logging.FormattingTuple#getMessage()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: com.google.common.graph.ConfigurableMutableGraph#putEdge(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.ConfigurableMutableValueGraph#putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)
CALLER: jline.console.ConsoleReader.1#run()
	CALLEE: jline.console.ConsoleReader#getOutput()
CALLER: io.netty.util.internal.ThreadExecutorMap.2#run()
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#access$000(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.4#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
CALLER: io.netty.util.concurrent.FastThreadLocalRunnable#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.4#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.2#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.4#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.5#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.2#run()
	CALLEE: io.netty.util.internal.ThreadExecutorMap.2#run()
	CALLEE: io.netty.util.concurrent.FastThreadLocalRunnable#run()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.4#run()
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#removeAll()
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: io.netty.channel.nio.NioEventLoop.6#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.11#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.1#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.9#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.7#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.8#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.3#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.8#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.1#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.5#run()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processChangeWindowTitle(java.lang.String)
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleTitle(java.lang.String)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processRestoreCursorPosition()
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSaveCursorPosition()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processAttributeRest()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetAttribute(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetBackgroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processSetForegroundColor(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseLine(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FillConsoleOutputCharacterW(long,char,int,org.fusesource.jansi.internal.Kernel32.COORD,int[])
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processEraseScreen(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#FillConsoleOutputCharacterW(long,char,int,org.fusesource.jansi.internal.Kernel32.COORD,int[])
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#height()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorTo(int,int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorToColumn(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorLeft(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorRight(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: org.fusesource.jansi.internal.Kernel32.SMALL_RECT#width()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorDown(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#processCursorUp(int)
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#getConsoleInfo()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
CALLER: joptsimple.OptionParserState.1#handleArgument(joptsimple.OptionParser,joptsimple.ArgumentList,joptsimple.OptionSet)
	CALLEE: joptsimple.ArgumentList#next()
	CALLEE: joptsimple.OptionParser#handleNonOptionArgument(java.lang.String,joptsimple.ArgumentList,joptsimple.OptionSet)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.lang.Object)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#compareTo(java.util.concurrent.Delayed)
CALLER: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermissionMessage()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
CALLER: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getArtifactId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getGroupId()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getVersion()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getExtension()
	CALLEE: org.eclipse.aether.artifact.DefaultArtifact#getClassifier()
CALLER: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#getArguments()
CALLER: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
CALLER: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
CALLER: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#getId()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#getUrl()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#getContentType()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#getPolicy(boolean)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#isRepositoryManager()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#isBlocked()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#isEnabled()
CALLER: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#canEqual(java.lang.Object)
CALLER: com.google.common.cache.LocalCache.Strength.1#defaultEquivalence()
	CALLEE: static com.google.common.base.Equivalence#equals()
CALLER: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermissionMessage()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
CALLER: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
CALLER: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#getConstructor(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.constructor.AbstractConstruct#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)
	CALLEE: org.yaml.snakeyaml.nodes.Node#isTwoStepsConstruction()
CALLER: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#getName()
	CALLEE: net.md_5.bungee.api.plugin.Command#getAliases()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermissionMessage()
	CALLEE: net.md_5.bungee.api.plugin.Command#getPermission()
	CALLEE: net.md_5.bungee.api.plugin.Command#canEqual(java.lang.Object)
CALLER: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#forEachEntry(gnu.trove.procedure.TObjectObjectProcedure)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EqProcedure#<init>(java.util.Map)
CALLER: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getProvider()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#canEqual(java.lang.Object)
CALLER: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#toString()
CALLER: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#getText()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#canEqual(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#equals(java.lang.Object)
CALLER: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: static org.eclipse.aether.repository.RemoteRepository#hash(java.lang.Object)
CALLER: joptsimple.OptionException#getMessage()
	CALLEE: joptsimple.OptionException#localizedMessage(java.util.Locale)
CALLER: net.md_5.bungee.module.JenkinsModuleSource#retrieve(net.md_5.bungee.module.ModuleSpec,net.md_5.bungee.module.ModuleVersion)
	CALLEE: static net.md_5.bungee.Util#exception(java.lang.Throwable)
	CALLEE: net.md_5.bungee.module.ModuleSpec#getFile()
	CALLEE: net.md_5.bungee.module.ModuleSpec#getName()
	CALLEE: net.md_5.bungee.module.ModuleVersion#getBuild()
	CALLEE: static com.google.common.io.ByteStreams#toByteArray(java.io.InputStream)
	CALLEE: static com.google.common.io.Files#write(byte[],java.io.File)
CALLER: io.netty.util.AbstractConstant#compareTo(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#compareTo(io.netty.util.AbstractConstant)
CALLER: io.netty.util.AbstractConstant#toString()
	CALLEE: io.netty.util.AbstractConstant#name()
CALLER: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: net.md_5.bungee.command.CommandReload#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: net.md_5.bungee.BungeeCord#reloadMessages()
	CALLEE: net.md_5.bungee.conf.Configuration#load()
	CALLEE: net.md_5.bungee.BungeeCord#startListeners()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#stopListeners()
	CALLEE: net.md_5.bungee.api.event.ProxyReloadEvent#<init>(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#callEvent(net.md_5.bungee.api.plugin.Event)
CALLER: net.md_5.bungee.command.CommandEnd#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.BungeeCord#getInstance()
	CALLEE: static net.md_5.bungee.api.ChatColor#translateAlternateColorCodes(char,java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#stop()
	CALLEE: static com.google.common.base.Joiner#on(char)
	CALLEE: net.md_5.bungee.BungeeCord#stop(java.lang.String)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Object[])
CALLER: net.md_5.bungee.command.CommandIP#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.BungeeCord#getPlayer(java.lang.String)
CALLER: net.md_5.bungee.command.CommandBungee#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: net.md_5.bungee.BungeeCord#getVersion()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
CALLER: net.md_5.bungee.command.CommandPerms#execute(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.BungeeCord#getConfigurationAdapter()
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#sendMessage(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#getGroups()
	CALLEE: net.md_5.bungee.conf.YamlConfig#getPermissions(java.lang.String)
	CALLEE: static net.md_5.bungee.Util#csv(java.lang.Iterable)
CALLER: net.md_5.bungee.api.plugin.Command#hasPermission(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.command.ConsoleCommandSender#hasPermission(java.lang.String)
CALLER: net.md_5.bungee.command.PlayerCommand#onTabComplete(net.md_5.bungee.api.CommandSender,java.lang.String[])
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.BungeeCord#getPlayers()
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#<init>(net.md_5.bungee.command.PlayerCommand,java.lang.String)
	CALLEE: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#<init>(net.md_5.bungee.command.PlayerCommand)
	CALLEE: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
CALLER: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: org.yaml.snakeyaml.introspector.Property#compareTo(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#compareTo(org.yaml.snakeyaml.introspector.Property)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
CALLER: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: org.yaml.snakeyaml.introspector.FieldProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.MethodProperty#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#getColumn()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#getLine()
	CALLEE: org.yaml.snakeyaml.error.Mark#getName()
CALLER: io.netty.util.concurrent.GlobalEventExecutor#execute(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#addTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#startThread()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#wakesUpForTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable,boolean)
CALLER: com.google.common.util.concurrent.ThreadFactoryBuilder.1#newThread(java.lang.Runnable)
	CALLEE: static com.google.common.util.concurrent.ThreadFactoryBuilder#access$000(java.lang.String,java.lang.Object[])
CALLER: net.md_5.bungee.command.ConsoleCommandCompleter#complete(java.lang.String,int,java.util.List)
	CALLEE: net.md_5.bungee.BungeeCord#getPluginManager()
	CALLEE: net.md_5.bungee.BungeeCord#getConsole()
	CALLEE: net.md_5.bungee.api.plugin.PluginManager#dispatchCommand(net.md_5.bungee.api.CommandSender,java.lang.String,java.util.List)
CALLER: com.google.common.base.Joiner.1#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
CALLER: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#get(java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedMultimap#delegate()
	CALLEE: static com.google.common.collect.Synchronized#access$400(java.util.Collection,java.lang.Object)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#next()
	CALLEE: static jline.console.history.MemoryHistory#access$200(jline.console.history.MemoryHistory)
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#<init>(int,java.lang.CharSequence)
CALLER: jline.console.history.MemoryHistory.EntriesIterator#previous()
	CALLEE: static jline.console.history.MemoryHistory#access$200(jline.console.history.MemoryHistory)
	CALLEE: jline.console.history.MemoryHistory.EntryImpl#<init>(int,java.lang.CharSequence)
CALLER: static jline.console.completer.CandidateListCompletionHandler#setBuffer(jline.console.ConsoleReader,java.lang.CharSequence,int)
	CALLEE: jline.console.ConsoleReader#putString(java.lang.CharSequence)
	CALLEE: jline.console.ConsoleReader#setCursorPosition(int)
	CALLEE: jline.console.ConsoleReader#backspace()
	CALLEE: jline.console.ConsoleReader#getCursorBuffer()
CALLER: jline.console.completer.CandidateListCompletionHandler#getUnambiguousCompletions(java.util.List)
	CALLEE: jline.console.completer.CandidateListCompletionHandler#startsWith(java.lang.String,java.lang.String[])
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#<init>(gnu.trove.map.hash.TCustomHashMap.EntryView,gnu.trove.map.hash.TCustomHashMap)
	CALLEE: gnu.trove.iterator.hash.TObjectHashIterator#<init>(gnu.trove.impl.hash.TObjectHash)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String)
CALLER: net.md_5.bungee.api.chat.TextComponent#toLegacyText(java.lang.StringBuilder)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#addFormat(java.lang.StringBuilder)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#toLegacyText(java.lang.StringBuilder)
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentEnd#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectDocumentStart#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#flushStream()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#getExplicit()
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectNode(boolean,boolean,boolean)
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector#isEventExpected(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.events.Event#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#getCommentType()
CALLER: org.yaml.snakeyaml.comments.CommentLine#<init>(org.yaml.snakeyaml.events.CommentEvent)
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#getCommentType()
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#getValue()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.comments.CommentType)
CALLER: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.AbstractInternalLogger#name()
	CALLEE: static io.netty.util.internal.logging.JdkLogger#fillCallerData(java.lang.String,java.util.logging.LogRecord)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructScalar#constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode)
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#<init>(org.yaml.snakeyaml.constructor.SafeConstructor)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#<init>()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructUndefined#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructYamlObject#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlNull#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBool#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlInt#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlFloat#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlBinary#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlOmap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlPairs#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSet#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlStr#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlSeq#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlMap#construct(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getValue()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.LoaderOptions#isEnumCaseSensitive()
	CALLEE: static org.yaml.snakeyaml.util.EnumUtils#findEnumInsensitiveCase(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor.ConstructYamlTimestamp#getCalendar()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#getMessage()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.nodes.AnchorNode#getNodeId()
	CALLEE: org.yaml.snakeyaml.introspector.Property#getType()
	CALLEE: org.yaml.snakeyaml.introspector.GenericProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.introspector.Property#isWritable()
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#isWritable()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#setListType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setUseClassConstructor(java.lang.Boolean)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setOnlyKeyType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setTypes(java.lang.Class,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.introspector.FieldProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MethodProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#getActualTypeArguments()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.ConstructorException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)
	CALLEE: org.yaml.snakeyaml.constructor.SafeConstructor#flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.nodes.Node#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#getProperty(java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#setupPropertyType(java.lang.String,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#newInstance(org.yaml.snakeyaml.TypeDescription,java.lang.String,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.TypeDescription#setProperty(java.lang.Object,java.lang.String,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructSet(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#newSet(org.yaml.snakeyaml.nodes.CollectionNode)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructArray(org.yaml.snakeyaml.nodes.SequenceNode)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#createArray(java.lang.Class,int)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#wrapIfPrimitive(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#<init>(java.util.logging.Logger)
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#<init>()
CALLER: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isErrorEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isErrorEnabled()
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
CALLER: static org.yaml.snakeyaml.events.Event.ID#<clinit>()
	CALLEE: org.yaml.snakeyaml.events.Event.ID#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.Event#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
CALLER: org.yaml.snakeyaml.composer.Composer#getNode()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setBlockComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node,java.util.List)
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getStartMark()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setEndComments(java.util.List)
CALLER: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListeners()
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener0(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
CALLER: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
CALLER: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#save()
CALLER: static net.md_5.bungee.Util#getAddr(java.lang.String)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#<init>(java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#constructServerInfo(java.lang.String,java.net.SocketAddress,java.lang.String,boolean)
	CALLEE: net.md_5.bungee.BungeeServerInfo#<init>(java.lang.String,java.net.SocketAddress,java.lang.String,boolean)
CALLER: static net.md_5.bungee.conf.YamlConfig.DefaultTabList#<clinit>()
	CALLEE: net.md_5.bungee.conf.YamlConfig.DefaultTabList#<init>(java.lang.String,int)
CALLER: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
	CALLEE: net.md_5.bungee.conf.YamlConfig#save()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#remove(java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object)
	CALLEE: net.md_5.bungee.conf.YamlConfig#set(java.lang.String,java.lang.Object,java.util.Map)
CALLER: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,org.slf4j.helpers.FormattingTuple)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getArgArray()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
CALLER: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Object)
CALLER: static io.netty.util.internal.logging.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isDebugEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isDebugEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isDebugEnabled()
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#isWarnEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isWarnEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isWarnEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isWarnEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isWarnEnabled()
CALLER: static io.netty.util.internal.logging.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.FormattingTuple#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Set)
CALLER: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#getThrowableCandidate(java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#trimmedCopy(java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isInfoEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isInfoEnabled()
CALLER: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#isTraceEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isTraceEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isTraceEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isTraceEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isTraceEnabled()
CALLER: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.NOPLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#info(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#info(java.lang.String)
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object[])
CALLER: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.NOPLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static com.google.common.graph.GraphConstants.Presence#<clinit>()
	CALLEE: com.google.common.graph.GraphConstants.Presence#<init>(java.lang.String,int)
CALLER: com.google.common.graph.ConfigurableMutableValueGraph#putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,java.lang.Object)
	CALLEE: com.google.common.graph.ConfigurableValueGraph#allowsSelfLoops()
	CALLEE: com.google.common.graph.MapRetrievalCache#get(java.lang.Object)
	CALLEE: com.google.common.graph.MapIteratorCache#get(java.lang.Object)
	CALLEE: com.google.common.graph.ConfigurableMutableValueGraph#addNodeInternal(java.lang.Object)
	CALLEE: static com.google.common.graph.Graphs#checkPositive(long)
	CALLEE: com.google.common.graph.UndirectedGraphConnections#addSuccessor(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.UndirectedGraphConnections#addPredecessor(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.DirectedGraphConnections#addSuccessor(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.DirectedGraphConnections#addPredecessor(java.lang.Object,java.lang.Object)
CALLER: static io.netty.util.internal.ThreadExecutorMap#access$000(io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor.4#run()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isErrorEnabled()
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#removeAll()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$102(io.netty.util.concurrent.SingleThreadEventExecutor,java.lang.Thread)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$200(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$100(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#updateLastExecutionTime()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#run()
	CALLEE: io.netty.channel.nio.NioEventLoop#run()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$400(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$500()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$600(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$300()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#cleanup()
	CALLEE: io.netty.channel.nio.NioEventLoop#cleanup()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$700(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#drainTasks()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#access$800(io.netty.util.concurrent.SingleThreadEventExecutor)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isErrorEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isErrorEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isErrorEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#error(java.lang.String)
CALLER: static io.netty.util.concurrent.FastThreadLocal#removeAll()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#getIfSet()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#remove()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#indexedVariable(int)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#applyCursorPosition()
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleCursorPosition(long,org.fusesource.jansi.internal.Kernel32.COORD)
CALLER: org.fusesource.jansi.WindowsAnsiOutputStream#applyAttribute()
	CALLEE: static org.fusesource.jansi.internal.WindowsSupport#getLastErrorMessage()
	CALLEE: org.fusesource.jansi.WindowsAnsiOutputStream#invertAttributeColors(short)
	CALLEE: net.md_5.bungee.log.LoggingOutputStream#flush()
	CALLEE: static org.fusesource.jansi.internal.Kernel32#SetConsoleTextAttribute(long,short)
CALLER: org.fusesource.jansi.internal.Kernel32.COORD#copy()
	CALLEE: org.fusesource.jansi.internal.Kernel32.COORD#<init>()
CALLER: org.yaml.snakeyaml.events.ScalarEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
CALLER: org.yaml.snakeyaml.events.CollectionStartEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getArguments()
CALLER: org.yaml.snakeyaml.events.CommentEvent#getArguments()
	CALLEE: org.yaml.snakeyaml.events.Event#getArguments()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.PromiseTask#toStringBuilder()
CALLER: org.yaml.snakeyaml.constructor.BaseConstructor#constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#getValue()
CALLER: net.md_5.bungee.api.chat.BaseComponent#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getExtra()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getClickEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getHoverEvent()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getInsertion()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColor()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getFont()
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#canEqual(java.lang.Object)
CALLER: static org.eclipse.aether.repository.RemoteRepository#hash(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#hashCode()
CALLER: joptsimple.OptionException#localizedMessage(java.util.Locale)
	CALLEE: joptsimple.OptionException#formattedMessage(java.util.Locale)
CALLER: static com.google.common.io.ByteStreams#toByteArray(java.io.InputStream)
	CALLEE: static com.google.common.io.ByteStreams#copy(java.io.InputStream,java.io.OutputStream)
CALLER: static com.google.common.io.Files#write(byte[],java.io.File)
	CALLEE: static com.google.common.io.Files#asByteSink(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: com.google.common.io.ByteSink#write(byte[])
CALLER: static com.google.common.io.Files#<clinit>()
	CALLEE: com.google.common.io.Files.2#<init>()
CALLER: io.netty.util.AbstractConstant#compareTo(io.netty.util.AbstractConstant)
	CALLEE: io.netty.util.AbstractConstant#hashCode()
CALLER: net.md_5.bungee.api.event.ProxyReloadEvent#<init>(net.md_5.bungee.api.CommandSender)
	CALLEE: net.md_5.bungee.api.plugin.Event#<init>()
CALLER: net.md_5.bungee.api.plugin.PluginManager#callEvent(net.md_5.bungee.api.plugin.Event)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object,java.lang.Object)
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: net.md_5.bungee.event.EventBus#post(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Event#postCall()
CALLER: net.md_5.bungee.BungeeCord#stop()
	CALLEE: net.md_5.bungee.BungeeCord#getTranslation(java.lang.String,java.lang.Object[])
	CALLEE: net.md_5.bungee.BungeeCord#stop(java.lang.String)
CALLER: static com.google.common.base.Joiner#on(char)
	CALLEE: com.google.common.base.Joiner#<init>(java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#stop(java.lang.String)
	CALLEE: net.md_5.bungee.BungeeCord.5#<init>(net.md_5.bungee.BungeeCord,java.lang.String,java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getPlayer(java.lang.String)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#getPermissions(java.lang.String)
	CALLEE: net.md_5.bungee.conf.YamlConfig#get(java.lang.String,java.lang.Object)
CALLER: static net.md_5.bungee.Util#csv(java.lang.Iterable)
	CALLEE: static net.md_5.bungee.Util#format(java.lang.Iterable,java.lang.String)
CALLER: net.md_5.bungee.BungeeCord#getPlayers()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#values()
CALLER: static com.google.common.collect.Iterables#filter(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.4#<init>(java.lang.Iterable,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterables#transform(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Function)
CALLER: org.yaml.snakeyaml.introspector.Property#compareTo(org.yaml.snakeyaml.introspector.Property)
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: io.netty.util.concurrent.GlobalEventExecutor#addTask(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#startThread()
	CALLEE: io.netty.util.internal.ThreadExecutorMap.3#newThread(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.2#<init>(io.netty.util.concurrent.GlobalEventExecutor,java.lang.Thread)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable,boolean)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#wakeup(boolean)
	CALLEE: io.netty.channel.nio.NioEventLoop#wakeup(boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#addTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#startThread()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#removeTask(java.lang.Runnable)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#reject()
CALLER: static com.google.common.util.concurrent.ThreadFactoryBuilder#access$000(java.lang.String,java.lang.Object[])
	CALLEE: static com.google.common.util.concurrent.ThreadFactoryBuilder#format(java.lang.String,java.lang.Object[])
CALLER: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner#<init>(com.google.common.base.Joiner)
CALLER: com.google.common.collect.HashMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedMultimap#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#delegate()
CALLER: static com.google.common.collect.Synchronized#access$400(java.util.Collection,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#typePreservingCollection(java.util.Collection,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.helpers.SubstituteLogger#getEventRecordingLogger()
CALLER: net.md_5.bungee.api.chat.BaseComponent#addFormat(java.lang.StringBuilder)
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#getColor()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isBold()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isItalic()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isUnderlined()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isStrikethrough()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isObfuscated()
CALLER: net.md_5.bungee.api.chat.BaseComponent#toLegacyText(java.lang.StringBuilder)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toLegacyText(java.lang.StringBuilder)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectNode(boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectAlias()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectScalar()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#isFlow()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptySequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectFlowSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectBlockSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectFlowMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#expectBlockMapping()
CALLER: org.yaml.snakeyaml.events.Event#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#getEventId()
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#getEventId()
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#getPropertyUtils()
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String)
CALLER: org.yaml.snakeyaml.TypeDescription#getProperty(java.lang.String)
	CALLEE: org.yaml.snakeyaml.TypeDescription#checkDelegates()
	CALLEE: org.yaml.snakeyaml.TypeDescription#discoverProperty(java.lang.String)
CALLER: org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#newInstance(org.yaml.snakeyaml.TypeDescription,java.lang.String,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObject(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.constructor.BaseConstructor#constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.TypeDescription#newInstance(java.lang.String,org.yaml.snakeyaml.nodes.Node)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#produce()
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
CALLER: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node,java.util.List)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.composer.ComposerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setBlockComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.LoaderOptions#getMaxAliasesForCollections()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setTwoStepsConstruction(boolean)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeScalarNode(java.lang.String,java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeSequenceNode(java.lang.String,java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeMappingNode(java.lang.String,java.util.List)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.concurrent.DefaultPromise#addListener0(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#<init>(io.netty.util.concurrent.GenericFutureListener,io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultFutureListeners#add(io.netty.util.concurrent.GenericFutureListener)
CALLER: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isDone0(java.lang.Object)
CALLER: net.md_5.bungee.conf.YamlConfig#save()
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: static net.md_5.bungee.api.ProxyServer#getInstance()
	CALLEE: org.yaml.snakeyaml.Yaml#dump(java.lang.Object,java.io.Writer)
CALLER: io.netty.channel.unix.DomainSocketAddress#<init>(java.lang.String)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Set)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Set)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#booleanArrayAppend(java.lang.StringBuilder,boolean[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#byteArrayAppend(java.lang.StringBuilder,byte[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#charArrayAppend(java.lang.StringBuilder,char[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#shortArrayAppend(java.lang.StringBuilder,short[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#intArrayAppend(java.lang.StringBuilder,int[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#longArrayAppend(java.lang.StringBuilder,long[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#floatArrayAppend(java.lang.StringBuilder,float[])
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#doubleArrayAppend(java.lang.StringBuilder,double[])
CALLER: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
	CALLEE: static org.slf4j.helpers.MessageFormatter#isEscapedDelimeter(java.lang.String,int)
	CALLEE: static org.slf4j.helpers.MessageFormatter#isDoubleEscaped(java.lang.String,int)
	CALLEE: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
CALLER: com.google.common.graph.MapRetrievalCache#get(java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#getIfCached(java.lang.Object)
	CALLEE: com.google.common.graph.MapIteratorCache#getWithoutCaching(java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#addToCache(java.lang.Object,java.lang.Object)
CALLER: com.google.common.graph.MapIteratorCache#get(java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#getIfCached(java.lang.Object)
	CALLEE: com.google.common.graph.MapIteratorCache#getWithoutCaching(java.lang.Object)
	CALLEE: com.google.common.graph.MapIteratorCache#getIfCached(java.lang.Object)
CALLER: com.google.common.graph.ConfigurableMutableValueGraph#addNodeInternal(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: com.google.common.graph.ConfigurableMutableValueGraph#newConnections()
	CALLEE: com.google.common.graph.MapIteratorCache#put(java.lang.Object,java.lang.Object)
CALLER: static com.google.common.graph.Graphs#checkPositive(long)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,long)
CALLER: static io.netty.util.internal.ThreadExecutorMap#setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#set(java.lang.Object)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#updateLastExecutionTime()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.channel.epoll.EpollEventLoop#run()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: io.netty.channel.epoll.EpollEventArray#increase()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.channel.SingleThreadEventLoop#hasTasks()
	CALLEE: io.netty.channel.DefaultSelectStrategy#calculateStrategy(io.netty.util.IntSupplier,boolean)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#closeAll()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#handleLoopException(java.lang.Throwable)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollBusyWait()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWaitTimeboxed()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#nextScheduledTaskDeadlineNanos()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWaitNoTimerChange()
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWait(long)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#processReady(io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
CALLER: io.netty.channel.nio.NioEventLoop#run()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.nio.NioEventLoop#unexpectedSelectorWakeup(int)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: io.netty.channel.SingleThreadEventLoop#hasTasks()
	CALLEE: io.netty.channel.DefaultSelectStrategy#calculateStrategy(io.netty.util.IntSupplier,boolean)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#nextScheduledTaskDeadlineNanos()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: io.netty.channel.nio.NioEventLoop#closeAll()
	CALLEE: static io.netty.channel.nio.NioEventLoop#handleLoopException(java.lang.Throwable)
	CALLEE: io.netty.channel.nio.NioEventLoop#select(long)
	CALLEE: io.netty.channel.nio.NioEventLoop#rebuildSelector0()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeys()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#confirmShutdown()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShuttingDown()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#cancelScheduledTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runShutdownHooks()
CALLER: io.netty.channel.epoll.EpollEventLoop#cleanup()
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.channel.unix.FileDescriptor#close()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWaitTimeboxed()
	CALLEE: io.netty.channel.epoll.EpollEventArray#fd(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#free()
CALLER: io.netty.channel.nio.NioEventLoop#cleanup()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#close()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#drainTasks()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#poll()
CALLER: io.netty.util.concurrent.PromiseTask#toStringBuilder()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
CALLER: static com.google.common.base.Equivalence.Equals#<clinit>()
	CALLEE: com.google.common.base.Equivalence.Equals#<init>()
CALLER: joptsimple.OptionException#formattedMessage(java.util.Locale)
	CALLEE: static joptsimple.internal.Messages#message(java.util.Locale,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[])
	CALLEE: joptsimple.MissingRequiredOptionsException#messageArguments()
	CALLEE: joptsimple.UnavailableOptionException#messageArguments()
	CALLEE: joptsimple.IllegalOptionSpecificationException#messageArguments()
	CALLEE: joptsimple.UnrecognizedOptionException#messageArguments()
CALLER: static com.google.common.io.Files#asByteSink(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files.1)
CALLER: com.google.common.io.Files.2#<init>()
	CALLEE: com.google.common.collect.TreeTraverser#<init>()
CALLER: static net.md_5.bungee.Util#format(java.lang.Iterable,java.lang.String)
	CALLEE: static com.google.common.base.Joiner#on(java.lang.String)
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: com.google.common.collect.Iterables.4#<init>(java.lang.Iterable,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: com.google.common.collect.Iterables.6#<init>(java.lang.Iterable,com.google.common.base.Function)
	CALLEE: com.google.common.collect.FluentIterable#<init>()
CALLER: io.netty.util.internal.ThreadExecutorMap.3#newThread(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ThreadExecutorMap#apply(java.lang.Runnable,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.util.concurrent.DefaultThreadFactory#newThread(java.lang.Runnable)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#addTask(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#offerTask(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#reject(java.lang.Runnable)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#startThread()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#removeTask(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: com.google.common.collect.AbstractSetMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#typePreservingCollection(java.util.Collection,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#sortedSet(java.util.SortedSet,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#set(java.util.Set,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#list(java.util.List,java.lang.Object)
	CALLEE: static com.google.common.collect.Synchronized#collection(java.util.Collection,java.lang.Object)
CALLER: org.slf4j.helpers.SubstituteLogger#getEventRecordingLogger()
	CALLEE: org.slf4j.event.EventRecodingLogger#<init>(org.slf4j.helpers.SubstituteLogger,java.util.Queue)
CALLER: net.md_5.bungee.api.chat.BaseComponent#isBold()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isBold()
CALLER: net.md_5.bungee.api.chat.BaseComponent#isItalic()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isItalic()
CALLER: net.md_5.bungee.api.chat.BaseComponent#isUnderlined()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isUnderlined()
CALLER: net.md_5.bungee.api.chat.BaseComponent#isStrikethrough()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isStrikethrough()
CALLER: net.md_5.bungee.api.chat.BaseComponent#isObfuscated()
	CALLEE: net.md_5.bungee.api.chat.BaseComponent#isObfuscated()
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectAlias()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
CALLER: org.yaml.snakeyaml.emitter.Emitter#processAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#processTag()
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInNonPlainScalar()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectScalar()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#processScalar()
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectFlowSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectBlockSequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectFlowMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter#expectBlockMapping()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.TypeDescription#checkDelegates()
	CALLEE: org.yaml.snakeyaml.TypeDescription#discoverProperty(java.lang.String)
CALLER: org.yaml.snakeyaml.TypeDescription#discoverProperty(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#produce()
	CALLEE: org.yaml.snakeyaml.events.StreamStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
CALLER: org.yaml.snakeyaml.composer.Composer#composeScalarNode(java.lang.String,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setBlockComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setInLineComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getScalarStyle()
CALLER: org.yaml.snakeyaml.composer.Composer#composeSequenceNode(java.lang.String,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setBlockComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node,java.util.List)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setInLineComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setEndMark(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getFlowStyle()
CALLER: org.yaml.snakeyaml.composer.Composer#composeMappingNode(java.lang.String,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.resolver.Resolver#resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#<init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#checkEvent(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.Event#getStartMark()
	CALLEE: org.yaml.snakeyaml.events.Event#getEndMark()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setBlockComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setInLineComments(java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.CollectionNode#setEndMark(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeMappingChildren(java.util.List,org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getFlowStyle()
CALLER: static io.netty.util.internal.logging.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
CALLER: static io.netty.util.internal.logging.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Set)
	CALLEE: static io.netty.util.internal.logging.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Set)
CALLER: static org.slf4j.helpers.FormattingTuple#<clinit>()
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
CALLER: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String)
	CALLEE: org.slf4j.helpers.FormattingTuple#<init>(java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
	CALLEE: static org.slf4j.helpers.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#booleanArrayAppend(java.lang.StringBuilder,boolean[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#byteArrayAppend(java.lang.StringBuilder,byte[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#charArrayAppend(java.lang.StringBuilder,char[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#shortArrayAppend(java.lang.StringBuilder,short[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#intArrayAppend(java.lang.StringBuilder,int[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#longArrayAppend(java.lang.StringBuilder,long[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#floatArrayAppend(java.lang.StringBuilder,float[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#doubleArrayAppend(java.lang.StringBuilder,double[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)
CALLER: com.google.common.graph.MapRetrievalCache#getIfCached(java.lang.Object)
	CALLEE: com.google.common.graph.MapIteratorCache#getIfCached(java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#addToCache(com.google.common.graph.MapRetrievalCache.CacheEntry)
CALLER: com.google.common.graph.MapIteratorCache#getWithoutCaching(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
CALLER: com.google.common.graph.MapRetrievalCache#addToCache(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#addToCache(com.google.common.graph.MapRetrievalCache.CacheEntry)
	CALLEE: com.google.common.graph.MapRetrievalCache.CacheEntry#<init>(java.lang.Object,java.lang.Object)
CALLER: com.google.common.graph.ConfigurableMutableValueGraph#newConnections()
	CALLEE: com.google.common.graph.ConfigurableValueGraph#isDirected()
	CALLEE: static com.google.common.graph.DirectedGraphConnections#of()
	CALLEE: static com.google.common.graph.UndirectedGraphConnections#of()
CALLER: com.google.common.graph.MapIteratorCache#put(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.MapRetrievalCache#clearCache()
	CALLEE: com.google.common.graph.MapIteratorCache#clearCache()
CALLER: io.netty.util.concurrent.FastThreadLocal#set(java.lang.Object)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#setKnownNotUnset(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#remove()
CALLER: io.netty.channel.SingleThreadEventLoop#hasTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#isEmpty()
CALLER: io.netty.channel.DefaultSelectStrategy#calculateStrategy(io.netty.util.IntSupplier,boolean)
	CALLEE: io.netty.channel.epoll.EpollEventLoop.1#get()
	CALLEE: io.netty.channel.nio.NioEventLoop.1#get()
CALLER: io.netty.channel.epoll.EpollEventLoop#closeAll()
	CALLEE: io.netty.util.collection.IntObjectHashMap#values()
CALLER: io.netty.channel.epoll.EpollEventLoop#handleLoopException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.epoll.EpollEventLoop#epollBusyWait()
	CALLEE: static io.netty.channel.epoll.Native#epollBusyWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray)
CALLER: io.netty.channel.epoll.EpollEventLoop#epollWaitTimeboxed()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,int)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#nextScheduledTaskDeadlineNanos()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
CALLER: io.netty.channel.epoll.EpollEventLoop#epollWaitNoTimerChange()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,boolean)
CALLER: io.netty.channel.epoll.EpollEventLoop#epollWait(long)
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,io.netty.channel.unix.FileDescriptor,int,int)
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#deadlineToDelayNanos(long)
CALLER: io.netty.channel.epoll.EpollEventLoop#processReady(io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: io.netty.channel.epoll.EpollEventArray#fd(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#events(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#get(int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlDel(int,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasksFrom(java.util.Queue)
	CALLEE: io.netty.channel.SingleThreadEventLoop#afterRunningAllTasks()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasks(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.channel.SingleThreadEventLoop#afterRunningAllTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: static io.netty.util.concurrent.AbstractEventExecutor#safeExecute(java.lang.Runnable)
CALLER: io.netty.channel.epoll.EpollEventArray#increase()
	CALLEE: static io.netty.channel.epoll.EpollEventArray#calculateBufferCapacity(int)
	CALLEE: static io.netty.channel.unix.Buffer#allocateDirectWithNativeOrder(int)
	CALLEE: static io.netty.channel.unix.Buffer#memoryAddress(java.nio.ByteBuffer)
	CALLEE: static io.netty.channel.unix.Buffer#free(java.nio.ByteBuffer)
CALLER: io.netty.channel.nio.NioEventLoop#closeAll()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#keys()
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
CALLER: static io.netty.channel.nio.NioEventLoop#handleLoopException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.nio.NioEventLoop#select(long)
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#deadlineToDelayNanos(long)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#select()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectNow()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#select(long)
CALLER: io.netty.channel.nio.NioEventLoop#rebuildSelector0()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#info(java.lang.String)
	CALLEE: io.netty.channel.nio.NioEventLoop#openSelector()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#info(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isInfoEnabled()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#close()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#keys()
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isInfoEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isInfoEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isInfoEnabled()
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeys()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeysOptimized()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectedKeys()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKeysPlain(java.util.Set)
CALLER: io.netty.channel.nio.NioEventLoop#unexpectedSelectorWakeup(int)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.nio.NioEventLoop#rebuildSelector()
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#cancelScheduledTasks()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#isNullOrEmpty(java.util.Queue)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#clearIgnoringIndexes()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#toArray(java.lang.Object[])
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runShutdownHooks()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.11#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.1#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.9#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.7#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.8#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.3#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.8#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.1#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.5#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.4#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.2#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.4#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.5#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.2#run()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: net.md_5.bungee.BungeeCord.2#run()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.2#run()
	CALLEE: io.netty.util.concurrent.FastThreadLocalRunnable#run()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.4#run()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: io.netty.channel.nio.NioEventLoop.6#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
	CALLEE: jline.internal.ShutdownHooks.1#run()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.2#run()
CALLER: io.netty.channel.epoll.EpollEventArray#fd(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#getInt(int,int)
CALLER: io.netty.channel.epoll.EpollEventArray#free()
	CALLEE: static io.netty.channel.unix.Buffer#free(java.nio.ByteBuffer)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#poll()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#poll()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#poll()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#poll()
CALLER: io.netty.util.concurrent.DefaultPromise#toStringBuilder()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
CALLER: com.google.common.base.Equivalence.Equals#<init>()
	CALLEE: com.google.common.base.Equivalence#<init>()
CALLER: joptsimple.MissingRequiredOptionsException#messageArguments()
	CALLEE: joptsimple.OptionException#multipleOptionString()
CALLER: joptsimple.UnavailableOptionException#messageArguments()
	CALLEE: joptsimple.OptionException#multipleOptionString()
CALLER: joptsimple.IllegalOptionSpecificationException#messageArguments()
	CALLEE: joptsimple.OptionException#singleOptionString()
CALLER: joptsimple.UnrecognizedOptionException#messageArguments()
	CALLEE: joptsimple.OptionException#singleOptionString()
CALLER: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files.1)
	CALLEE: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[])
CALLER: com.google.common.base.Joiner#join(java.lang.Iterable)
	CALLEE: com.google.common.base.Joiner#join(java.util.Iterator)
CALLER: com.google.common.collect.FluentIterable#<init>()
	CALLEE: static com.google.common.base.Optional#absent()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#offerTask(java.lang.Runnable)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#reject()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#reject(java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.RejectedExecutionHandlers.1#rejected(java.lang.Runnable,io.netty.util.concurrent.SingleThreadEventExecutor)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#get(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createCollection(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
CALLER: static com.google.common.collect.Synchronized#sortedSet(java.util.SortedSet,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#<init>(java.util.SortedSet,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#set(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#list(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedRandomAccessList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
CALLER: static com.google.common.collect.Synchronized#collection(java.util.Collection,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: org.slf4j.event.EventRecodingLogger#<init>(org.slf4j.helpers.SubstituteLogger,java.util.Queue)
	CALLEE: org.slf4j.helpers.SubstituteLogger#getName()
CALLER: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getImplicit()
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#canOmitTagInPlainScalar()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#isPlain()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getScalarStyle()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isEmpty()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isMultiline()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isAllowFlowPlain()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isAllowBlockPlain()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isAllowBlock()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isAllowSingleQuoted()
CALLER: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.EmitterException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter#processScalar()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#chooseScalarStyle()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writePlain(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeDoubleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeSingleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeFolded(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLiteral(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#getScalar()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.introspector.PropertyUtils#getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)
	CALLEE: org.yaml.snakeyaml.introspector.MissingProperty#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.composer.Composer#composeMappingChildren(java.util.List,org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#<init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getTag()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeKeyNode(org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#setMerged(boolean)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeValueNode(org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
CALLER: static org.slf4j.helpers.MessageFormatter#safeObjectAppend(java.lang.StringBuilder,java.lang.Object)
	CALLEE: static org.slf4j.helpers.Util#report(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
CALLER: static org.slf4j.helpers.MessageFormatter#objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)
	CALLEE: static org.slf4j.helpers.MessageFormatter#deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)
CALLER: static com.google.common.graph.DirectedGraphConnections#of()
	CALLEE: com.google.common.graph.DirectedGraphConnections#<init>(java.util.Map,int,int)
CALLER: static com.google.common.graph.UndirectedGraphConnections#of()
	CALLEE: com.google.common.graph.UndirectedGraphConnections#<init>(java.util.Map)
CALLER: com.google.common.graph.MapRetrievalCache#clearCache()
	CALLEE: com.google.common.graph.MapIteratorCache#clearCache()
CALLER: io.netty.util.concurrent.FastThreadLocal#setKnownNotUnset(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setIndexedVariable(int,java.lang.Object)
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)
CALLER: io.netty.util.concurrent.FastThreadLocal#remove()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#getIfSet()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#remove(io.netty.util.internal.InternalThreadLocalMap)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#hasTasks()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#isEmpty()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#isEmpty()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#isEmpty()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#isEmpty()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#isEmpty()
CALLER: io.netty.channel.epoll.EpollEventLoop.1#get()
	CALLEE: static io.netty.channel.epoll.EpollEventLoop#access$000(io.netty.channel.epoll.EpollEventLoop)
CALLER: io.netty.channel.nio.NioEventLoop.1#get()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectNow()
CALLER: io.netty.util.collection.IntObjectHashMap#values()
	CALLEE: io.netty.util.collection.IntObjectHashMap.2#<init>(io.netty.util.collection.IntObjectHashMap)
CALLER: static io.netty.channel.epoll.Native#epollBusyWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: io.netty.channel.epoll.EpollEventArray#memoryAddress()
	CALLEE: static io.netty.channel.epoll.Native#epollBusyWait0(int,long,int)
CALLER: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: io.netty.channel.epoll.EpollEventArray#memoryAddress()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(int,long,int,int)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#peek()
CALLER: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,boolean)
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,int)
CALLER: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,io.netty.channel.unix.FileDescriptor,int,int)
	CALLEE: io.netty.channel.unix.FileDescriptor#intValue()
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#length()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#memoryAddress()
	CALLEE: static io.netty.channel.epoll.Native#epollWait0(int,long,int,int,int,int)
CALLER: static io.netty.util.concurrent.AbstractScheduledEventExecutor#deadlineToDelayNanos(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#deadlineToDelayNanos(long)
CALLER: io.netty.channel.epoll.EpollEventArray#events(int)
	CALLEE: io.netty.channel.epoll.EpollEventArray#getInt(int,int)
CALLER: io.netty.util.collection.IntObjectHashMap#get(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#indexOf(int)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#toExternal(java.lang.Object)
CALLER: static io.netty.channel.epoll.Native#epollCtlDel(int,int)
	CALLEE: static io.netty.channel.unix.Errors#newIOException(java.lang.String,int)
	CALLEE: static io.netty.channel.epoll.Native#epollCtlDel0(int,int)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#offer(java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#offer(java.lang.Object)
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#isEmpty()
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasksFrom(java.util.Queue)
	CALLEE: static io.netty.util.concurrent.AbstractEventExecutor#safeExecute(java.lang.Runnable)
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#pollTaskFrom(java.util.Queue)
CALLER: io.netty.channel.SingleThreadEventLoop#afterRunningAllTasks()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#runAllTasksFrom(java.util.Queue)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#pollTask()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: static io.netty.util.concurrent.SingleThreadEventExecutor#pollTaskFrom(java.util.Queue)
CALLER: static io.netty.util.concurrent.AbstractEventExecutor#safeExecute(java.lang.Runnable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.channel.unix.Buffer#free(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent#freeDirectBuffer(java.nio.ByteBuffer)
CALLER: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectNow()
CALLER: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.nio.SelectedSelectionKeySetSelector#select()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#reset()
CALLER: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectNow()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#reset()
CALLER: io.netty.channel.nio.SelectedSelectionKeySetSelector#select(long)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#reset()
CALLER: io.netty.util.internal.logging.Slf4JLogger#isInfoEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isInfoEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isInfoEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isInfoEnabled()
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeysOptimized()
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#reset(int)
CALLER: io.netty.channel.nio.NioEventLoop#processSelectedKeysPlain(java.util.Set)
	CALLEE: io.netty.channel.nio.NioEventLoop#selectAgain()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectedKeys()
	CALLEE: io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)
	CALLEE: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
CALLER: io.netty.channel.nio.NioEventLoop#rebuildSelector()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.nio.NioEventLoop#rebuildSelector0()
	CALLEE: io.netty.channel.nio.NioEventLoop.6#<init>(io.netty.channel.nio.NioEventLoop)
CALLER: static io.netty.util.concurrent.AbstractScheduledEventExecutor#isNullOrEmpty(java.util.Queue)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#isEmpty()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#run()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduledTaskQueue()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#isShutdown()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#delayNanos()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isCancelled()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#scheduledExecutor()
	CALLEE: io.netty.util.concurrent.PromiseTask#setUncancellableInternal()
	CALLEE: io.netty.util.concurrent.PromiseTask#runTask()
	CALLEE: io.netty.util.concurrent.PromiseTask#setSuccessInternal(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#setFailureInternal(java.lang.Throwable)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#removeTyped(java.lang.Object)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduleFromEventLoop(io.netty.util.concurrent.ScheduledFutureTask)
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#isShutdown()
CALLER: io.netty.channel.epoll.EpollEventArray#getInt(int,int)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent#getInt(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#soRefElement(java.lang.Object[],long,java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lpConsumerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#lvRefElement(java.lang.Object[],long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#nextBuffer(java.lang.Object[],long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#newBufferPoll(java.lang.Object[],long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#soConsumerIndex(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lpConsumerIndex()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#nextBuffer(java.util.concurrent.atomic.AtomicReferenceArray,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#soConsumerIndex(long)
CALLER: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: joptsimple.OptionException#multipleOptionString()
	CALLEE: joptsimple.OptionException#singleOptionString(java.lang.String)
CALLER: joptsimple.OptionException#singleOptionString()
	CALLEE: joptsimple.OptionException#singleOptionString(java.lang.String)
CALLER: com.google.common.io.Files.FileByteSink#<init>(java.io.File,com.google.common.io.FileWriteMode[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.io.ByteSink#<init>()
	CALLEE: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Object[])
CALLER: com.google.common.base.Joiner#join(java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#iterator()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#iterator()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#iterator()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#iterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapCollection(java.lang.Object,java.util.Collection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedNavigableSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.NavigableSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#<init>(java.util.SortedSet,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#<init>(java.util.Set,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: com.google.common.collect.Synchronized.SynchronizedRandomAccessList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
CALLER: com.google.common.collect.Synchronized.SynchronizedList#<init>(java.util.List,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized.1)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#<init>(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writePlain(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: static org.yaml.snakeyaml.emitter.Emitter.1#<clinit>()
	CALLEE: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#values()
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeDoubleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeSingleQuoted(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeFolded(java.lang.String,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeInlineComments()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeLiteral(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeLineBreak(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeInlineComments()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.introspector.MissingProperty#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.Property#<init>(java.lang.String,java.lang.Class)
CALLER: org.yaml.snakeyaml.composer.Composer#composeKeyNode(org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node,java.util.List)
CALLER: org.yaml.snakeyaml.composer.Composer#composeValueNode(org.yaml.snakeyaml.nodes.MappingNode,java.util.List)
	CALLEE: org.yaml.snakeyaml.composer.Composer#composeNode(org.yaml.snakeyaml.nodes.Node,java.util.List)
CALLER: com.google.common.graph.DirectedGraphConnections#<init>(java.util.Map,int,int)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: static com.google.common.graph.Graphs#checkNonNegative(int)
CALLER: com.google.common.graph.UndirectedGraphConnections#<init>(java.util.Map)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: io.netty.util.internal.InternalThreadLocalMap#setIndexedVariable(int,java.lang.Object)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#expandIndexedVariableTableAndSet(int,java.lang.Object)
CALLER: static io.netty.util.concurrent.FastThreadLocal#addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setIndexedVariable(int,java.lang.Object)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#indexedVariable(int)
CALLER: io.netty.util.concurrent.FastThreadLocal#remove(io.netty.util.internal.InternalThreadLocalMap)
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#removeIndexedVariable(int)
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#onRemoval(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lvConsumerIndex()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lvConsumerIndex()
CALLER: static io.netty.channel.epoll.EpollEventLoop#access$000(io.netty.channel.epoll.EpollEventLoop)
	CALLEE: io.netty.channel.epoll.EpollEventLoop#epollWaitNow()
CALLER: io.netty.channel.nio.NioEventLoop#selectNow()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySetSelector#selectNow()
CALLER: static io.netty.util.concurrent.ScheduledFutureTask#deadlineToDelayNanos(long)
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.util.collection.IntObjectHashMap#indexOf(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#hashIndex(int)
	CALLEE: io.netty.util.collection.IntObjectHashMap#probeNext(int)
CALLER: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#setConsumed()
CALLER: static io.netty.util.concurrent.SingleThreadEventExecutor#pollTaskFrom(java.util.Queue)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#poll()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#poll()
CALLER: static io.netty.util.internal.PlatformDependent#freeDirectBuffer(java.nio.ByteBuffer)
	CALLEE: io.netty.util.internal.PlatformDependent.1#freeDirectBuffer(java.nio.ByteBuffer)
	CALLEE: io.netty.util.internal.CleanerJava9#freeDirectBuffer(java.nio.ByteBuffer)
	CALLEE: io.netty.util.internal.CleanerJava6#freeDirectBuffer(java.nio.ByteBuffer)
CALLER: io.netty.channel.nio.SelectedSelectionKeySet#reset()
	CALLEE: io.netty.channel.nio.SelectedSelectionKeySet#reset(int)
CALLER: org.slf4j.helpers.SubstituteLogger#isInfoEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isInfoEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isInfoEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isInfoEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isInfoEnabled()
CALLER: static io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)
	CALLEE: static io.netty.channel.nio.NioEventLoop#invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#executor()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#delayNanos()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#deadlineNanos()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#deadlineToDelayNanos(long)
CALLER: io.netty.util.concurrent.DefaultPromise#isCancelled()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isCancelled0(java.lang.Object)
CALLER: io.netty.util.concurrent.ScheduledFutureTask#scheduledExecutor()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#executor()
CALLER: io.netty.util.concurrent.PromiseTask#setUncancellableInternal()
	CALLEE: io.netty.util.concurrent.DefaultPromise#setUncancellable()
CALLER: io.netty.util.concurrent.PromiseTask#runTask()
	CALLEE: io.netty.util.concurrent.PromiseTask.SentinelRunnable#run()
CALLER: io.netty.util.concurrent.PromiseTask#setSuccessInternal(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#clearTaskAfterCompletion(boolean,java.lang.Runnable)
CALLER: io.netty.util.concurrent.PromiseTask#setFailureInternal(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.PromiseTask#clearTaskAfterCompletion(boolean,java.lang.Runnable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
CALLER: static io.netty.util.internal.PlatformDependent#getInt(long)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getInt(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#nextBuffer(java.lang.Object[],long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#soRefElement(java.lang.Object[],long,java.lang.Object)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#nextArrayOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#length(java.lang.Object[])
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#lvRefElement(java.lang.Object[],long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#newBufferPoll(java.lang.Object[],long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#soRefElement(java.lang.Object[],long,java.lang.Object)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#lvRefElement(java.lang.Object[],long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#soConsumerIndex(long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#nextBuffer(java.util.concurrent.atomic.AtomicReferenceArray,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#nextArrayOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#length(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#modifiedCalcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#soConsumerIndex(long)
CALLER: static com.google.common.collect.ImmutableSet#copyOf(java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
CALLER: com.google.common.base.Joiner#appendTo(java.lang.StringBuilder,java.util.Iterator)
	CALLEE: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#<init>(java.lang.Object[],long,long)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lvConsumerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#<init>(java.util.concurrent.atomic.AtomicReferenceArray,long,long)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedNavigableSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.NavigableSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedSet#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap#wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#<init>(java.util.Collection,java.lang.Object)
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#<init>(java.lang.Object,java.lang.Object)
CALLER: static org.yaml.snakeyaml.scanner.Constant#<clinit>()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.emitter.Emitter#determineBlockHints(java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#writeInlineComments()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#consume()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeCommentLines(java.util.List)
CALLER: static com.google.common.graph.Graphs#checkNonNegative(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,int)
CALLER: static io.netty.util.concurrent.FastThreadLocal#removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#indexedVariable(int)
CALLER: io.netty.channel.epoll.EpollEventLoop#epollWaitNow()
	CALLEE: static io.netty.channel.epoll.Native#epollWait(io.netty.channel.unix.FileDescriptor,io.netty.channel.epoll.EpollEventArray,boolean)
CALLER: io.netty.util.collection.IntObjectHashMap#hashIndex(int)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#hashCode(int)
CALLER: io.netty.util.internal.CleanerJava9#freeDirectBuffer(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.CleanerJava9#freeDirectBufferPrivileged(java.nio.ByteBuffer)
CALLER: io.netty.util.internal.CleanerJava6#freeDirectBuffer(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: static io.netty.util.internal.CleanerJava6#freeDirectBuffer0(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.CleanerJava6#freeDirectBufferPrivileged(java.nio.ByteBuffer)
CALLER: io.netty.util.concurrent.DefaultPromise#setUncancellable()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isDone0(java.lang.Object)
	CALLEE: static io.netty.util.concurrent.DefaultPromise#isCancelled0(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess0(java.lang.Object)
CALLER: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure0(java.lang.Throwable)
CALLER: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
CALLER: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#of()
	CALLEE: static com.google.common.collect.ImmutableSet#of(java.lang.Object)
	CALLEE: static com.google.common.collect.ImmutableSet#construct(int,java.lang.Object[])
	CALLEE: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.collect.ObjectArrays#checkElementNotNull(java.lang.Object,int)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
	CALLEE: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
CALLER: com.google.common.base.Joiner#appendTo(java.lang.Appendable,java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.base.Joiner#toString(java.lang.Object)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#<init>(java.lang.Object[],long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#setBuffer(java.lang.Object[])
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#getNext()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#<init>(java.util.concurrent.atomic.AtomicReferenceArray,long,long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#setBuffer(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#getNext()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedList#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,int)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: static io.netty.util.internal.CleanerJava9#freeDirectBufferPrivileged(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.CleanerJava9.2#<init>(java.nio.ByteBuffer)
CALLER: static io.netty.util.internal.CleanerJava6#freeDirectBuffer0(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#getObject(java.lang.Object,long)
CALLER: static io.netty.util.internal.CleanerJava6#freeDirectBufferPrivileged(java.nio.ByteBuffer)
	CALLEE: static io.netty.util.internal.PlatformDependent0#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.CleanerJava6.2#<init>(java.nio.ByteBuffer)
CALLER: io.netty.util.concurrent.DefaultPromise#setSuccess0(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setValue0(java.lang.Object)
CALLER: static com.google.common.collect.RegularImmutableSet#<clinit>()
	CALLEE: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: static com.google.common.collect.ImmutableSet#chooseTableSize(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.Object)
CALLER: com.google.common.collect.SingletonImmutableSet#<init>(java.lang.Object,int)
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: com.google.common.collect.RegularImmutableSet#<init>(java.lang.Object[],int,java.lang.Object[],int)
	CALLEE: com.google.common.collect.ImmutableSet.Indexed#<init>()
CALLER: com.google.common.base.Joiner#toString(java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#toString()
	CALLEE: net.md_5.bungee.module.ModuleSpec#toString()
	CALLEE: joptsimple.AbstractOptionSpec#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#toString()
	CALLEE: org.eclipse.aether.graph.Dependency#toString()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#toString()
	CALLEE: org.yaml.snakeyaml.resolver.ResolverTuple#toString()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#toString()
	CALLEE: org.yaml.snakeyaml.TypeDescription#toString()
	CALLEE: net.md_5.bungee.api.plugin.Command#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.32#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.33#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.35#toString()
	CALLEE: com.google.gson.internal.bind.TypeAdapters.34#toString()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#toString()
	CALLEE: org.yaml.snakeyaml.events.Event#toString()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#toString()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#toString()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#toString()
	CALLEE: io.netty.util.AbstractConstant#toString()
	CALLEE: org.yaml.snakeyaml.introspector.Property#toString()
	CALLEE: org.yaml.snakeyaml.nodes.MappingNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.ScalarNode#toString()
	CALLEE: org.yaml.snakeyaml.nodes.SequenceNode#toString()
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#toString()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#toString()
	CALLEE: io.netty.buffer.PoolArena#toString()
	CALLEE: io.netty.buffer.PoolChunkList#toString()
	CALLEE: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#toString()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#setBuffer(java.lang.Object[])
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.LinkedArrayQueueUtil#length(java.lang.Object[])
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#getNext()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#lvRefElement(java.lang.Object[],long)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#setBuffer(java.lang.Object[])
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#calcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#access$000()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess#calcRefElementOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#access$100()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#setBuffer(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#length(java.util.concurrent.atomic.AtomicReferenceArray)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#getNext()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#setBuffer(java.util.concurrent.atomic.AtomicReferenceArray)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#calcCircularRefElementOffset(long,long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#access$000()
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil#calcRefElementOffset(long)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#access$100()
CALLER: com.google.common.collect.ImmutableSet#<init>()
	CALLEE: com.google.common.collect.ImmutableCollection#<init>()
CALLER: com.google.common.collect.ImmutableSet.Indexed#<init>()
	CALLEE: com.google.common.collect.ImmutableSet#<init>()
CALLER: gnu.trove.map.hash.TCustomHashMap.EqProcedure#execute(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#containsKey(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.graph.Dependency#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: joptsimple.internal.Row#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
CALLER: com.google.common.collect.Lists.ReverseList#listIterator(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#reversePosition(int)
	CALLEE: com.google.common.collect.Lists.ReverseList.1#<init>(com.google.common.collect.Lists.ReverseList,java.util.ListIterator)
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector.1#poll()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector.1#poll()
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector.1#peek()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector.1#peek()
CALLER: gnu.trove.map.hash.TCustomHashMap.MapBackedView#size()
	CALLEE: gnu.trove.impl.hash.THash#size()
CALLER: gnu.trove.map.hash.TCustomHashMap#remove(java.lang.Object)
	CALLEE: gnu.trove.impl.hash.TObjectHash#index(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#removeAt(int)
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: com.google.common.collect.HashMultimap#createCollection()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$000(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$100(io.netty.util.concurrent.MultithreadEventExecutorGroup)
	CALLEE: static io.netty.util.concurrent.MultithreadEventExecutorGroup#access$200(io.netty.util.concurrent.MultithreadEventExecutorGroup)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2210(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2800(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockSequenceItem#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstFlowMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2210(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2800(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFirstBlockMappingKey#expect()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
CALLER: net.md_5.bungee.api.event.ProxyReloadEvent#hashCode()
	CALLEE: net.md_5.bungee.api.event.ProxyReloadEvent#getSender()
CALLER: com.google.common.base.Joiner#withKeyValueSeparator(java.lang.String)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
CALLER: org.slf4j.helpers.MarkerIgnoringBase#getName()
	CALLEE: org.slf4j.helpers.NamedLoggerBase#getName()
CALLER: com.google.common.cache.CacheBuilder#initialCapacity(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean)
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean,java.lang.String,int)
CALLER: joptsimple.OptionSpecBuilder#defaultValues()
	CALLEE: joptsimple.NoArgumentOptionSpec#defaultValues()
CALLER: io.netty.bootstrap.ServerBootstrap#childHandler(io.netty.channel.ChannelHandler)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.bootstrap.AbstractBootstrap#localAddress(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: net.md_5.bungee.BungeeCord.5#run()
	CALLEE: static net.md_5.bungee.BungeeCord#access$000(net.md_5.bungee.BungeeCord,java.lang.String,boolean)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: joptsimple.OptionSpecBuilder#requiresArgument()
	CALLEE: joptsimple.NoArgumentOptionSpec#requiresArgument()
CALLER: joptsimple.OptionSpecBuilder#argumentDescription()
	CALLEE: joptsimple.NoArgumentOptionSpec#argumentDescription()
CALLER: joptsimple.OptionSpecBuilder#argumentTypeIndicator()
	CALLEE: joptsimple.NoArgumentOptionSpec#argumentTypeIndicator()
CALLER: joptsimple.NonOptionArgumentSpec#argumentTypeIndicator()
	CALLEE: joptsimple.AbstractOptionSpec#argumentTypeIndicatorFrom(joptsimple.ValueConverter)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#info(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$200(io.netty.util.concurrent.DefaultPromise)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static org.slf4j.helpers.MessageFormatter#format(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.base.Joiner#join(java.lang.Object[])
	CALLEE: com.google.common.base.Joiner#join(java.lang.Iterable)
CALLER: com.google.common.collect.Iterables.6#iterator()
	CALLEE: com.google.common.collect.Iterables.4#iterator()
	CALLEE: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#slf4jLevelIntToJULLevel(int)
CALLER: org.yaml.snakeyaml.nodes.Node#useClassConstructor()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#getType()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#isSecondary()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#isCompatible(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.Tag#getClassName()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#decode(java.lang.String)
CALLER: org.yaml.snakeyaml.nodes.SequenceNode#setListType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#setOnlyKeyType(java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: org.yaml.snakeyaml.nodes.MappingNode#setTypes(java.lang.Class,java.lang.Class)
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getValueNode()
	CALLEE: org.yaml.snakeyaml.nodes.NodeTuple#getKeyNode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#setType(java.lang.Class)
CALLER: io.netty.channel.nio.NioEventLoop.6#run()
	CALLEE: static io.netty.channel.nio.NioEventLoop#access$100(io.netty.channel.nio.NioEventLoop)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
CALLER: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.9#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.7#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.8#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.3#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.8#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.1#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.3#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.5#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.4#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.2#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.4#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline.5#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.2#run()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.ThreadExecutorMap.2#run()
	CALLEE: io.netty.util.concurrent.FastThreadLocalRunnable#run()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor.4#run()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#run()
	CALLEE: io.netty.util.concurrent.DefaultPromise.1#run()
	CALLEE: io.netty.channel.nio.NioEventLoop.6#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor.TaskRunner#run()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#takeTask()
	CALLEE: static io.netty.util.concurrent.GlobalEventExecutor#access$000()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#size()
	CALLEE: static io.netty.util.concurrent.GlobalEventExecutor#access$100(io.netty.util.concurrent.GlobalEventExecutor)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.2#run()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.11#run()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.1#run()
CALLER: io.netty.util.internal.logging.Slf4JLogger#isErrorEnabled()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isErrorEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isErrorEnabled()
CALLER: io.netty.util.internal.logging.JdkLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: io.netty.util.internal.logging.LocationAwareSlf4JLogger#error(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#log(int,java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isErrorEnabled()
CALLER: io.netty.util.internal.logging.Slf4JLogger#error(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$500()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$402(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.VersionTagsTuple)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#iterator()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: org.yaml.snakeyaml.introspector.MethodProperty#set(java.lang.Object,java.lang.Object)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.introspector.Property#getName()
CALLER: io.netty.util.collection.IntObjectHashMap.2#iterator()
	CALLEE: io.netty.util.collection.IntObjectHashMap.2.1#<init>(io.netty.util.collection.IntObjectHashMap.2)
CALLER: io.netty.util.collection.IntObjectHashMap.2#size()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$300(io.netty.util.collection.IntObjectHashMap)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#getNext()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#getNext()
CALLER: io.netty.util.internal.DefaultPriorityQueue#removeTyped(java.lang.Object)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#removeTyped(io.netty.util.internal.PriorityQueueNode)
CALLER: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduleFromEventLoop(io.netty.util.concurrent.ScheduledFutureTask)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#scheduledTaskQueue()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#setId(long)
CALLER: io.netty.util.internal.DefaultPriorityQueue#peek()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#peek()
CALLER: com.google.common.graph.UndirectedGraphConnections#addSuccessor(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
CALLER: com.google.common.graph.UndirectedGraphConnections#addPredecessor(java.lang.Object,java.lang.Object)
	CALLEE: com.google.common.graph.UndirectedGraphConnections#addSuccessor(java.lang.Object,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.eclipse.aether.graph.Dependency.Exclusions#iterator()
	CALLEE: org.eclipse.aether.graph.Dependency.Exclusions.1#<init>(org.eclipse.aether.graph.Dependency.Exclusions)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#warn(java.lang.String,java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#arrayFormat(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.helpers.FormattingTuple#getThrowable()
	CALLEE: org.slf4j.helpers.FormattingTuple#getMessage()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.io.ByteSink#write(byte[])
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.io.Closer#create()
	CALLEE: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.io.Closer#close()
	CALLEE: com.google.common.io.Closer#rethrow(java.lang.Throwable)
	CALLEE: com.google.common.io.Closer#register(java.io.Closeable)
CALLER: org.yaml.snakeyaml.comments.CommentLine#toString()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getValue()
	CALLEE: org.yaml.snakeyaml.comments.CommentLine#getCommentType()
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#info(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEventArgArray(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[])
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_1Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_1Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#warn(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#debug(java.lang.String,java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEventArgArray(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[])
CALLER: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_1Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object)
CALLER: org.slf4j.event.EventRecodingLogger#trace(java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#info(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.graph.DirectedGraphConnections#addSuccessor(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.graph.Graphs#checkPositive(int)
	CALLEE: com.google.common.graph.DirectedGraphConnections.PredAndSucc#<init>(java.lang.Object)
	CALLEE: static com.google.common.graph.DirectedGraphConnections.PredAndSucc#access$500(com.google.common.graph.DirectedGraphConnections.PredAndSucc)
CALLER: com.google.common.graph.DirectedGraphConnections#addPredecessor(java.lang.Object,java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static com.google.common.graph.Graphs#checkPositive(int)
	CALLEE: com.google.common.graph.DirectedGraphConnections.PredAndSucc#<init>(java.lang.Object)
CALLER: io.netty.bootstrap.AbstractBootstrap#toString()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: io.netty.bootstrap.ServerBootstrap#config()
	CALLEE: io.netty.bootstrap.Bootstrap#config()
CALLER: io.netty.channel.ReflectiveChannelFactory#toString()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#toString()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#toString()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#toString()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#toString()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#toString()
CALLER: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isProxyProtocol()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#canEqual(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
CALLER: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isProxyProtocol()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
CALLER: net.md_5.bungee.api.config.ListenerInfo#toString()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getQueryPort()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isQueryEnabled()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isProxyProtocol()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getForcedHosts()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getServerPriority()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMaxPlayers()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListSize()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isForceDefault()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isSetLocalAddress()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#isPingPassthrough()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getMotd()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getTabListType()
CALLER: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
CALLER: net.md_5.bungee.BungeeServerInfo#toString()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getName()
	CALLEE: net.md_5.bungee.BungeeServerInfo#getSocketAddress()
	CALLEE: net.md_5.bungee.BungeeServerInfo#isRestricted()
CALLER: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#getAddress()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#size()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#size()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#size()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#size()
CALLER: com.google.common.collect.Lists.ReverseList#reversePosition(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#size()
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector.1#poll()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#getEvent()
CALLER: org.yaml.snakeyaml.comments.CommentEventsCollector.1#peek()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#peekEvent()
CALLER: gnu.trove.map.hash.TCustomHashMap#removeAt(int)
	CALLEE: gnu.trove.impl.hash.TObjectHash#removeAt(int)
CALLER: com.google.common.collect.HashMultimap#createCollection()
	CALLEE: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeInlineComments()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3800(org.yaml.snakeyaml.emitter.Emitter,int)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2000(org.yaml.snakeyaml.emitter.Emitter)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$3100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkSimpleKey()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner.1)
	CALLEE: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
CALLER: gnu.trove.map.hash.TCustomHashMap.EntryView.EntryIterator#objectAtIndex(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#<init>(gnu.trove.map.hash.TCustomHashMap,java.lang.Object,java.lang.Object,int)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
	CALLEE: net.md_5.bungee.log.BungeeLogger#log(java.util.logging.LogRecord)
	CALLEE: org.slf4j.helpers.MarkerIgnoringBase#getName()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#fillCallerData(java.lang.String,java.util.logging.LogRecord)
CALLER: static io.netty.util.concurrent.DefaultPromise#access$200(io.netty.util.concurrent.DefaultPromise)
	CALLEE: io.netty.util.concurrent.DefaultPromise#notifyListenersNow()
CALLER: com.google.common.collect.Iterables.4#iterator()
	CALLEE: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
CALLER: static com.google.common.collect.Iterators#transform(java.util.Iterator,com.google.common.base.Function)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Function)
CALLER: static com.google.common.collect.Iterators#<clinit>()
	CALLEE: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.Iterators.2#<init>()
CALLER: static org.yaml.snakeyaml.util.UriEncoder#decode(java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
CALLER: static io.netty.channel.nio.NioEventLoop#access$100(io.netty.channel.nio.NioEventLoop)
	CALLEE: io.netty.channel.nio.NioEventLoop#rebuildSelector0()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#isEmpty()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#isEmpty()
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$000(com.google.common.collect.AbstractMapBasedMultimap)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#<init>(com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection)
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#access$100(java.util.Collection)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#takeTask()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#peekScheduledTask()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#delayNanos()
	CALLEE: io.netty.util.concurrent.GlobalEventExecutor#fetchFromScheduledTaskQueue()
CALLER: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#isErrorEnabled()
	CALLEE: org.slf4j.helpers.SubstituteLogger#isErrorEnabled()
	CALLEE: org.slf4j.helpers.NOPLogger#isErrorEnabled()
	CALLEE: org.slf4j.event.EventRecodingLogger#isErrorEnabled()
CALLER: org.slf4j.helpers.SubstituteLogger#error(java.lang.String)
	CALLEE: org.slf4j.helpers.SubstituteLogger#delegate()
	CALLEE: org.slf4j.helpers.SubstituteLogger#error(java.lang.String)
	CALLEE: org.slf4j.helpers.NOPLogger#error(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#error(java.lang.String)
CALLER: org.slf4j.impl.JDK14LoggerAdapter#error(java.lang.String)
	CALLEE: org.slf4j.impl.JDK14LoggerAdapter#log(java.lang.String,java.util.logging.Level,java.lang.String,java.lang.Throwable)
CALLER: static org.yaml.snakeyaml.tokens.Token.ID#<clinit>()
	CALLEE: org.yaml.snakeyaml.tokens.Token.ID#<init>(java.lang.String,int,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#produceCommentEvent(org.yaml.snakeyaml.tokens.CommentToken)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getTags()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getVersion()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.DocumentStartEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.events.StreamEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1000(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#isEmpty()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedList#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedObject#delegate()
CALLER: io.netty.util.collection.IntObjectHashMap.2.1#<init>(io.netty.util.collection.IntObjectHashMap.2)
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
CALLER: io.netty.util.internal.DefaultPriorityQueue#removeTyped(io.netty.util.internal.PriorityQueueNode)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#bubbleUp(int,io.netty.util.internal.PriorityQueueNode)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue,int)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#contains(io.netty.util.internal.PriorityQueueNode,int)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#bubbleDown(int,io.netty.util.internal.PriorityQueueNode)
CALLER: io.netty.util.internal.DefaultPriorityQueue#poll()
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#poll()
CALLER: static org.slf4j.event.Level#<clinit>()
	CALLEE: org.slf4j.event.Level#<init>(java.lang.String,int,int,java.lang.String)
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.eclipse.aether.graph.Dependency.Exclusions.1#hasNext()
	CALLEE: static org.eclipse.aether.graph.Dependency.Exclusions#access$000(org.eclipse.aether.graph.Dependency.Exclusions)
CALLER: org.eclipse.aether.graph.Dependency.Exclusions.1#next()
	CALLEE: org.eclipse.aether.graph.Dependency.Exclusions.1#next()
CALLER: static com.google.common.io.Closer#create()
	CALLEE: com.google.common.io.Closer#<init>(com.google.common.io.Closer.Suppressor)
CALLER: static com.google.common.io.Closer#<clinit>()
	CALLEE: static com.google.common.io.Closer.SuppressingSuppressor#isAvailable()
CALLER: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.io.Files.FileByteSink#openStream()
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent2Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#recordEventArgArray(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#getThrowableCandidate(java.lang.Object[])
	CALLEE: static org.slf4j.helpers.MessageFormatter#trimmedCopy(java.lang.Object[])
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent_1Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
CALLER: static com.google.common.graph.Graphs#checkPositive(int)
	CALLEE: static com.google.common.base.Preconditions#checkArgument(boolean,java.lang.String,int)
CALLER: io.netty.bootstrap.ServerBootstrap#config()
	CALLEE: io.netty.bootstrap.ServerBootstrap#config()
CALLER: io.netty.bootstrap.Bootstrap#config()
	CALLEE: io.netty.bootstrap.Bootstrap#config()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields#lvConsumerIndex()
CALLER: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue#size()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields#lvProducerIndex()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields#lvConsumerIndex()
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
CALLER: gnu.trove.impl.hash.TObjectHash#removeAt(int)
	CALLEE: gnu.trove.impl.hash.THash#removeAt(int)
CALLER: static com.google.common.collect.Sets#newHashSetWithExpectedSize(int)
	CALLEE: static com.google.common.collect.Maps#capacity(int)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$3800(org.yaml.snakeyaml.emitter.Emitter,int)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeWhitespace(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#checkSimpleKey()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getValue()
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getTag()
	CALLEE: org.yaml.snakeyaml.events.NodeEvent#getAnchor()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptySequence()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#checkEmptyMapping()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#prepareAnchor(java.lang.String)
	CALLEE: org.yaml.snakeyaml.events.CollectionStartEvent#getTag()
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#prepareTag(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#analyzeScalar(java.lang.String)
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isEmpty()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#isMultiline()
	CALLEE: org.yaml.snakeyaml.emitter.ScalarAnalysis#getScalar()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: com.google.common.base.Joiner.MapJoiner#<init>(com.google.common.base.Joiner,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.collect.Iterators#filter(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.collect.Iterators.6#<init>(java.util.Iterator,com.google.common.base.Predicate)
CALLER: com.google.common.collect.Iterators.7#<init>(java.util.Iterator,com.google.common.base.Function)
	CALLEE: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
CALLER: com.google.common.collect.Iterators.1#<init>()
	CALLEE: com.google.common.collect.UnmodifiableListIterator#<init>()
CALLER: static com.google.common.collect.AbstractMapBasedMultimap#access$100(java.util.Collection)
	CALLEE: static com.google.common.collect.AbstractMapBasedMultimap#iteratorOrListIterator(java.util.Collection)
CALLER: io.netty.util.concurrent.GlobalEventExecutor#fetchFromScheduledTaskQueue()
	CALLEE: static io.netty.util.concurrent.AbstractScheduledEventExecutor#nanoTime()
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor#pollScheduledTask(long)
CALLER: org.slf4j.event.EventRecodingLogger#error(java.lang.String)
	CALLEE: org.slf4j.event.EventRecodingLogger#recordEvent_0Args(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#needMoreTokens()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#nextPossibleSimpleKey()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchMoreTokens()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanToNextToken()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowEntry()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkValue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchValue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAlias()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAnchor()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchTag()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchLiteral()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFolded()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchSingle()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDouble()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkPlain()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchPlain()
CALLER: org.yaml.snakeyaml.parser.ParserImpl#produceCommentEvent(org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.events.CommentEvent#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getCommentType()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getValue()
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1000(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#processDirectives()
CALLER: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedSortedSet#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedSet#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: com.google.common.collect.Synchronized.SynchronizedList#delegate()
	CALLEE: com.google.common.collect.Synchronized.SynchronizedCollection#delegate()
CALLER: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#<init>(io.netty.util.collection.IntObjectHashMap,io.netty.util.collection.IntObjectHashMap.1)
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#<init>(io.netty.util.collection.IntObjectHashMap)
CALLER: io.netty.util.internal.DefaultPriorityQueue#contains(io.netty.util.internal.PriorityQueueNode,int)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
CALLER: io.netty.util.internal.DefaultPriorityQueue#bubbleDown(int,io.netty.util.internal.PriorityQueueNode)
	CALLEE: io.netty.util.concurrent.AbstractScheduledEventExecutor.1#compare(java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue,int)
CALLER: io.netty.util.internal.DefaultPriorityQueue#poll()
	CALLEE: io.netty.util.concurrent.ScheduledFutureTask#priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue,int)
	CALLEE: io.netty.util.internal.DefaultPriorityQueue#bubbleDown(int,io.netty.util.internal.PriorityQueueNode)
CALLER: org.slf4j.event.EventRecodingLogger#recordEvent(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#<init>()
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setTimeStamp(long)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLevel(org.slf4j.event.Level)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLogger(org.slf4j.helpers.SubstituteLogger)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setLoggerName(java.lang.String)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setMarker(org.slf4j.Marker)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setMessage(java.lang.String)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setThreadName(java.lang.String)
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setArgumentArray(java.lang.Object[])
	CALLEE: org.slf4j.event.SubstituteLoggingEvent#setThrowable(java.lang.Throwable)
CALLER: org.eclipse.aether.graph.Dependency.Exclusions.1#next()
	CALLEE: static org.eclipse.aether.graph.Dependency.Exclusions#access$000(org.eclipse.aether.graph.Dependency.Exclusions)
CALLER: com.google.common.io.Closer#<init>(com.google.common.io.Closer.Suppressor)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.io.Closer.SuppressingSuppressor#<clinit>()
	CALLEE: com.google.common.io.Closer.SuppressingSuppressor#<init>()
	CALLEE: static com.google.common.io.Closer.SuppressingSuppressor#getAddSuppressed()
CALLER: static com.google.common.io.Closer.LoggingSuppressor#<clinit>()
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#<init>()
CALLER: com.google.common.io.Files.FileByteSink#openStream()
	CALLEE: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
CALLER: static com.google.common.base.Preconditions#checkPositionIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badPositionIndex(int,int,java.lang.String)
CALLER: gnu.trove.impl.hash.THash#removeAt(int)
	CALLEE: gnu.trove.impl.hash.THash#compact()
CALLER: com.google.common.collect.Iterators.6#<init>(java.util.Iterator,com.google.common.base.Predicate)
	CALLEE: com.google.common.collect.AbstractIterator#<init>()
CALLER: com.google.common.collect.TransformedIterator#<init>(java.util.Iterator)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: com.google.common.collect.UnmodifiableListIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: static com.google.common.collect.AbstractMapBasedMultimap#iteratorOrListIterator(java.util.Collection)
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue#iterator()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue#iterator()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#stalePossibleSimpleKeys()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getLine()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#isRequired()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getLine()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#nextPossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getTokenNumber()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanToNextToken()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.error.Mark#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanComment(org.yaml.snakeyaml.comments.CommentType)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchStreamEnd()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDirective()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDirective()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirective()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkBlockEntry()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockEntry()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingStart()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowSequenceEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowMappingEnd()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowEntry()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkKey()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchKey()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkValue()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchValue()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getTokenNumber()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getColumn()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAlias()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchAnchor()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchTag()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTag()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchLiteral()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFolded()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchSingle()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDouble()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#checkPlain()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchPlain()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlain()
CALLER: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
CALLER: static com.google.common.io.FileWriteMode#<clinit>()
	CALLEE: com.google.common.io.FileWriteMode#<init>(java.lang.String,int)
CALLER: com.google.common.collect.SingletonImmutableSet#contains(java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.graph.Dependency#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: joptsimple.internal.Row#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#equals(java.lang.Object)
	CALLEE: com.google.common.io.BaseEncoding.Alphabet#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
CALLER: com.google.common.collect.RegularImmutableSet#contains(java.lang.Object)
	CALLEE: static com.google.common.collect.Hashing#smearedHash(java.lang.Object)
CALLER: gnu.trove.impl.hash.THash#compact()
	CALLEE: gnu.trove.impl.hash.TObjectHash#capacity()
	CALLEE: static gnu.trove.impl.PrimeFinder#nextPrime(int)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#rehash(int)
	CALLEE: gnu.trove.impl.hash.THash#computeMaxSize(int)
	CALLEE: gnu.trove.impl.hash.THash#size()
	CALLEE: static gnu.trove.impl.hash.THash#fastCeil(double)
	CALLEE: static gnu.trove.impl.hash.THash#saturatedCast(long)
	CALLEE: gnu.trove.impl.hash.THash#computeNextAutoCompactionAmount(int)
CALLER: com.google.common.collect.AbstractIterator#<init>()
	CALLEE: com.google.common.collect.UnmodifiableIterator#<init>()
CALLER: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData(int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanComment(org.yaml.snakeyaml.comments.CommentType)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
CALLER: org.yaml.snakeyaml.tokens.CommentToken#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.BlockEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#isRequired()
CALLER: org.yaml.snakeyaml.tokens.StreamEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirective()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveName(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#<init>(java.lang.String,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#makeTokenList(org.yaml.snakeyaml.tokens.Token[])
CALLER: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchDocumentIndicator(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#unwindIndent(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#addIndent(int)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
CALLER: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.BlockEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionStart(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowCollectionEnd(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowEntryToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.BlockMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.KeyToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.ValueToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getLine()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getIndex()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.SimpleKey#<init>(int,boolean,int,int,int,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanAnchor(boolean)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTag()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#<init>(java.lang.String,java.lang.String)
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#<init>(org.yaml.snakeyaml.tokens.TagTuple,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchBlockScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#removePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalar(char)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#fetchFlowScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#savePossibleSimpleKey()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalar(char)
CALLER: org.yaml.snakeyaml.scanner.Constant#hasNo(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlain()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlainSpaces()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
CALLER: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: com.google.common.collect.HashMultimap#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractSetMultimap#equals(java.lang.Object)
CALLER: static com.google.common.collect.Hashing#smearedHash(java.lang.Object)
	CALLEE: static com.google.common.collect.Hashing#smear(int)
CALLER: static com.google.common.collect.AbstractIterator.State#<clinit>()
	CALLEE: com.google.common.collect.AbstractIterator.State#<init>(java.lang.String,int)
CALLER: org.yaml.snakeyaml.reader.StreamReader#ensureEnoughData(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#update()
CALLER: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveName(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveNumber(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveValue(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveHandle(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectivePrefix(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanDirectiveIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.tokens.DirectiveToken#<init>(java.lang.String,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.DocumentStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.DocumentEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowMappingStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowMappingEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.AnchorToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.tokens.AliasToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanUriEscapes(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.tokens.TagToken#<init>(org.yaml.snakeyaml.tokens.TagTuple,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalar(char)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#makeTokenList(org.yaml.snakeyaml.tokens.Token[])
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#chompTailIsTrue()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#chompTailIsNotFalse()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#getIncrement()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#<init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndicators(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndentation()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarBreaks(int)
	CALLEE: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#createStyle(java.lang.Character)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalar(char)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#createStyle(java.lang.Character)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarNonSpaces(boolean,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarSpaces(org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanPlainSpaces()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.MarkedYAMLException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,java.lang.Throwable)
CALLER: com.google.common.collect.AbstractSetMultimap#equals(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractMultimap#equals(java.lang.Object)
CALLER: org.yaml.snakeyaml.reader.StreamReader#update()
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.Throwable)
	CALLEE: static org.yaml.snakeyaml.reader.StreamReader#isPrintable(int)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#read(char[],int,int)
	CALLEE: org.yaml.snakeyaml.reader.ReaderException#<init>(java.lang.String,int,int,java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanYamlDirectiveNumber(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectiveHandle(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagDirectivePrefix(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanUriEscapes(java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: static org.yaml.snakeyaml.util.UriEncoder#decode(java.nio.ByteBuffer)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndicators(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl.Chomping#<init>(java.lang.Boolean,int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIgnoredLine(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanComment(org.yaml.snakeyaml.comments.CommentType)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarIndentation()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanBlockScalarBreaks(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getColumn()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
CALLER: static org.yaml.snakeyaml.DumperOptions.ScalarStyle#createStyle(java.lang.Character)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.tokens.ScalarToken#<init>(java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.tokens.Token#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarNonSpaces(boolean,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#hasNo(int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarSpaces(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefixForward(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
CALLER: com.google.common.collect.AbstractMultimap#equals(java.lang.Object)
	CALLEE: static com.google.common.collect.Multimaps#equalsImpl(com.google.common.collect.Multimap,java.lang.Object)
CALLER: org.yaml.snakeyaml.reader.UnicodeReader#read(char[],int,int)
	CALLEE: org.yaml.snakeyaml.reader.UnicodeReader#init()
CALLER: org.yaml.snakeyaml.reader.ReaderException#<init>(java.lang.String,int,int,java.lang.String)
	CALLEE: org.yaml.snakeyaml.error.YAMLException#<init>(java.lang.String)
CALLER: org.yaml.snakeyaml.scanner.ScannerImpl#scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#getMark()
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#forward()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#peek(int)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#scanLineBreak()
	CALLEE: org.yaml.snakeyaml.reader.StreamReader#prefix(int)
CALLER: static com.google.common.collect.Multimaps#equalsImpl(com.google.common.collect.Multimap,java.lang.Object)
	CALLEE: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#equals(java.lang.Object)
CALLER: com.google.common.collect.HashMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractSetMultimap#asMap()
CALLER: com.google.common.collect.AbstractSetMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMultimap#asMap()
CALLER: com.google.common.collect.AbstractMultimap#asMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
CALLER: com.google.common.collect.AbstractMapBasedMultimap#createAsMap()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.NavigableAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.NavigableAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap)
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
CALLER: com.google.common.collect.AbstractMapBasedMultimap.AsMap#<init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map)
	CALLEE: com.google.common.collect.Maps.ViewCachingAbstractMap#<init>()
CALLER: com.google.common.collect.Lists.ReverseList#get(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#reverseIndex(int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1400(org.yaml.snakeyaml.parser.ParserImpl,boolean,boolean)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#produce()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
CALLER: com.google.common.cache.CacheBuilder#build(com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.CacheBuilder#checkWeightWithWeigher()
	CALLEE: com.google.common.cache.LocalCache.LocalLoadingCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
CALLER: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup)
	CALLEE: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)
CALLER: io.netty.bootstrap.AbstractBootstrap#bind()
	CALLEE: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#doBind(java.net.SocketAddress)
	CALLEE: io.netty.bootstrap.ServerBootstrap#validate()
CALLER: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#next()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#next()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#next()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#hasNext()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue.WeakIterator#hasNext()
	CALLEE: io.netty.util.internal.shaded.org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue.WeakIterator#hasNext()
	CALLEE: com.google.common.collect.Lists.ReverseList.1#hasNext()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
CALLER: io.netty.util.collection.IntObjectHashMap.2.1#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#hasNext()
CALLER: io.netty.util.collection.IntObjectHashMap.2.1#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#value()
CALLER: io.netty.util.concurrent.ScheduledFutureTask#setConsumed()
	CALLEE: static io.netty.util.concurrent.ScheduledFutureTask#nanoTime()
CALLER: com.google.common.io.Closer#close()
	CALLEE: com.google.common.io.Closer.SuppressingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
CALLER: com.google.common.io.Closer#rethrow(java.lang.Throwable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
CALLER: jline.internal.ShutdownHooks.1#run()
	CALLEE: static jline.internal.ShutdownHooks#access$000()
CALLER: org.yaml.snakeyaml.error.Mark#toString()
	CALLEE: org.yaml.snakeyaml.error.Mark#get_snippet()
CALLER: io.netty.channel.unix.DomainSocketAddress#toString()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#path()
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowSequenceItem#<init>(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2210(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2800(org.yaml.snakeyaml.emitter.Emitter)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2800(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingSimpleValue#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#isEmpty()
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$4200(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$4300(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingValue#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$102(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectBlockMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,boolean)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#processDirectives()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#<init>(org.yaml.snakeyaml.DumperOptions.Version,java.util.Map)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getName()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getValue()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#toString()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#toString()
	CALLEE: io.netty.bootstrap.ServerBootstrapConfig#childGroup()
	CALLEE: io.netty.bootstrap.ServerBootstrapConfig#childOptions()
	CALLEE: io.netty.bootstrap.ServerBootstrapConfig#childAttrs()
	CALLEE: io.netty.bootstrap.ServerBootstrapConfig#childHandler()
CALLER: io.netty.bootstrap.BootstrapConfig#toString()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#toString()
	CALLEE: io.netty.bootstrap.BootstrapConfig#resolver()
	CALLEE: io.netty.bootstrap.BootstrapConfig#remoteAddress()
CALLER: com.google.common.collect.TransformedIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.Iterators.7#transform(java.lang.Object)
CALLER: com.google.common.collect.TransformedIterator#hasNext()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
CALLER: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.util.CaseInsensitiveHashingStrategy#equals(java.lang.Object,java.lang.Object)
	CALLEE: net.md_5.bungee.BungeeServerInfo#equals(java.lang.Object)
	CALLEE: io.netty.channel.unix.DomainSocketAddress#equals(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Tag#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#equals(java.lang.Object)
	CALLEE: io.netty.util.AbstractConstant#equals(java.lang.Object)
	CALLEE: joptsimple.AbstractOptionSpec#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.ChatColor#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.plugin.Command#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.module.ModuleSpec#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.graph.Dependency#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.events.Event#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.chat.TextComponent#equals(java.lang.Object)
	CALLEE: joptsimple.internal.Row#equals(java.lang.Object)
	CALLEE: io.netty.util.concurrent.PromiseTask#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.nodes.Node#equals(java.lang.Object)
	CALLEE: org.slf4j.helpers.SubstituteLogger#equals(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.introspector.Property#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#equals(java.lang.Object)
	CALLEE: org.eclipse.aether.repository.RemoteRepository#equals(java.lang.Object)
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#equals(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#equals(java.lang.Object)
	CALLEE: static gnu.trove.map.hash.TCustomHashMap#access$600(gnu.trove.map.hash.TCustomHashMap)
CALLER: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.unix.DomainSocketAddress#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Tag#hashCode()
	CALLEE: org.eclipse.aether.artifact.AbstractArtifact#hashCode()
	CALLEE: joptsimple.AbstractOptionSpec#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap#hashCode()
	CALLEE: net.md_5.bungee.module.ModuleSpec#hashCode()
	CALLEE: org.eclipse.aether.graph.Dependency#hashCode()
	CALLEE: net.md_5.bungee.api.chat.TextComponent#hashCode()
	CALLEE: joptsimple.internal.Row#hashCode()
	CALLEE: net.md_5.bungee.module.JenkinsModuleSource#hashCode()
	CALLEE: net.md_5.bungee.api.ChatColor#hashCode()
	CALLEE: io.netty.util.AbstractConstant#hashCode()
	CALLEE: net.md_5.bungee.api.plugin.Command#hashCode()
	CALLEE: org.yaml.snakeyaml.events.Event#hashCode()
	CALLEE: io.netty.util.concurrent.PromiseTask#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ScopeDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.OptionalDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.util.graph.selector.ExclusionDependencySelector#hashCode()
	CALLEE: org.eclipse.aether.repository.RemoteRepository#hashCode()
	CALLEE: org.yaml.snakeyaml.nodes.Node#hashCode()
	CALLEE: org.slf4j.helpers.SubstituteLogger#hashCode()
	CALLEE: org.yaml.snakeyaml.introspector.Property#hashCode()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#hashCode()
	CALLEE: net.md_5.bungee.BungeeServerInfo#hashCode()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getValue()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#getKey()
	CALLEE: gnu.trove.map.hash.TCustomHashMap.Entry#hashCode()
	CALLEE: io.netty.channel.AbstractChannel#hashCode()
CALLER: com.google.common.collect.Lists.ReverseList#reverseIndex(int)
	CALLEE: com.google.common.collect.Lists.ReverseList#size()
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1400(org.yaml.snakeyaml.parser.ParserImpl,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#processEmptyScalar(org.yaml.snakeyaml.error.Mark)
CALLER: com.google.common.cache.LocalCache.LocalLoadingCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
	CALLEE: com.google.common.cache.LocalCache#<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache.1)
CALLER: io.netty.bootstrap.ServerBootstrap#group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group(io.netty.channel.EventLoopGroup)
CALLER: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.Bootstrap#validate()
CALLER: io.netty.bootstrap.AbstractBootstrap#doBind(java.net.SocketAddress)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#initAndRegister()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#<init>(io.netty.bootstrap.AbstractBootstrap,io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise,io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannel#newPromise()
CALLER: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator#validateIterator()
	CALLEE: com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection#refreshIfEmpty()
CALLER: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#scanNext()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$600(io.netty.util.collection.IntObjectHashMap)
CALLER: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#next()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#hasNext()
	CALLEE: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#scanNext()
CALLER: com.google.common.io.Closer.SuppressingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
	CALLEE: com.google.common.io.Closer.LoggingSuppressor#suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable)
CALLER: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Throwables#propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable)
CALLER: static com.google.common.base.Throwables#<clinit>()
	CALLEE: static com.google.common.base.Throwables#getJLA()
	CALLEE: static com.google.common.base.Throwables#getGetMethod()
	CALLEE: static com.google.common.base.Throwables#getSizeMethod()
CALLER: static jline.internal.ShutdownHooks#access$000()
	CALLEE: static jline.internal.ShutdownHooks#runTasks()
CALLER: org.yaml.snakeyaml.error.Mark#get_snippet()
	CALLEE: org.yaml.snakeyaml.error.Mark#get_snippet(int,int)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#<init>(org.yaml.snakeyaml.emitter.Emitter)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$4200(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#isFoldedOrLiteral(org.yaml.snakeyaml.events.Event)
CALLER: static org.yaml.snakeyaml.emitter.Emitter#access$4300(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#increaseIndent(boolean,boolean)
CALLER: static org.yaml.snakeyaml.DumperOptions.Version#<clinit>()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#<init>(java.lang.String,int,java.lang.Integer[])
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#toString()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#group()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#channelFactory()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#localAddress()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#options()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#attrs()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#handler()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#childGroup()
	CALLEE: io.netty.bootstrap.ServerBootstrap#childGroup()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#childOptions()
	CALLEE: io.netty.bootstrap.ServerBootstrap#childOptions()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#childAttrs()
	CALLEE: io.netty.bootstrap.ServerBootstrap#childAttrs()
CALLER: io.netty.bootstrap.ServerBootstrapConfig#childHandler()
	CALLEE: io.netty.bootstrap.ServerBootstrap#childHandler()
CALLER: io.netty.bootstrap.BootstrapConfig#resolver()
	CALLEE: io.netty.bootstrap.Bootstrap#resolver()
CALLER: io.netty.bootstrap.BootstrapConfig#remoteAddress()
	CALLEE: io.netty.bootstrap.Bootstrap#remoteAddress()
CALLER: com.google.common.collect.AbstractIterator#next()
	CALLEE: com.google.common.collect.AbstractIterator#hasNext()
CALLER: com.google.common.collect.Iterators.7#transform(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#apply(java.lang.Object)
CALLER: com.google.common.collect.AbstractIterator#hasNext()
	CALLEE: static com.google.common.base.Preconditions#checkState(boolean)
	CALLEE: com.google.common.collect.AbstractIterator#tryToComputeNext()
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int)
	CALLEE: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getSuffix()
	CALLEE: org.yaml.snakeyaml.tokens.TagTuple#getHandle()
	CALLEE: org.yaml.snakeyaml.events.AliasEvent#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
	CALLEE: org.yaml.snakeyaml.events.SequenceStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#produceCommentEvent(org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getValue()
	CALLEE: org.yaml.snakeyaml.parser.VersionTagsTuple#getTags()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getPlain()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getValue()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getStyle()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl#processEmptyScalar(org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.ImplicitTuple#<init>(boolean,boolean)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#<init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.ScalarStyle)
CALLER: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache.1)
	CALLEE: com.google.common.cache.LocalCache.LocalManualCache#<init>(com.google.common.cache.LocalCache)
CALLER: io.netty.bootstrap.Bootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#handler()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#validate()
CALLER: io.netty.bootstrap.AbstractBootstrap#initAndRegister()
	CALLEE: io.netty.bootstrap.ServerBootstrap#config()
	CALLEE: io.netty.bootstrap.Bootstrap#config()
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#group()
	CALLEE: io.netty.channel.ReflectiveChannelFactory#newChannel()
	CALLEE: io.netty.bootstrap.Bootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.bootstrap.FailedChannel#<init>()
	CALLEE: io.netty.bootstrap.ServerBootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel)
CALLER: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.2#<init>(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
CALLER: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
CALLER: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#scanNext()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$600(io.netty.util.collection.IntObjectHashMap)
CALLER: static com.google.common.base.Throwables#propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Throwables#throwIfInstanceOf(java.lang.Throwable,java.lang.Class)
CALLER: static com.google.common.base.Throwables#propagateIfPossible(java.lang.Throwable)
	CALLEE: static com.google.common.base.Throwables#throwIfUnchecked(java.lang.Throwable)
CALLER: static com.google.common.base.Throwables#getGetMethod()
	CALLEE: static com.google.common.base.Throwables#getJlaMethod(java.lang.String,java.lang.Class[])
CALLER: static com.google.common.base.Throwables#getSizeMethod()
	CALLEE: static com.google.common.base.Throwables#getJlaMethod(java.lang.String,java.lang.Class[])
CALLER: static jline.internal.ShutdownHooks#runTasks()
	CALLEE: static jline.internal.Log#debug(java.lang.Object[])
	CALLEE: static jline.internal.Log#warn(java.lang.Object[])
CALLER: org.yaml.snakeyaml.error.Mark#get_snippet(int,int)
	CALLEE: org.yaml.snakeyaml.error.Mark#isLineBreak(int)
CALLER: org.yaml.snakeyaml.emitter.Emitter#isFoldedOrLiteral(org.yaml.snakeyaml.events.Event)
	CALLEE: org.yaml.snakeyaml.events.Event#is(org.yaml.snakeyaml.events.Event.ID)
	CALLEE: org.yaml.snakeyaml.events.ScalarEvent#getScalarStyle()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#group()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#group()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#channelFactory()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#channelFactory()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#localAddress()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#localAddress()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#options()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#options()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#attrs()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#attrs()
CALLER: io.netty.bootstrap.AbstractBootstrapConfig#handler()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#handler()
CALLER: io.netty.bootstrap.ServerBootstrap#childOptions()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#copiedMap(java.util.Map)
CALLER: io.netty.bootstrap.ServerBootstrap#childAttrs()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#copiedMap(java.util.Map)
CALLER: net.md_5.bungee.command.PlayerCommand.1#apply(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.1#apply(net.md_5.bungee.api.connection.ProxiedPlayer)
CALLER: static com.google.common.collect.AbstractIterator.1#<clinit>()
	CALLEE: static com.google.common.collect.AbstractIterator.State#values()
CALLER: com.google.common.collect.AbstractIterator#tryToComputeNext()
	CALLEE: com.google.common.collect.Iterators.6#computeNext()
CALLER: static com.google.common.base.Preconditions#checkElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.bootstrap.AbstractBootstrap#validate()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#self()
CALLER: io.netty.channel.ReflectiveChannelFactory#newChannel()
	CALLEE: io.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
CALLER: io.netty.bootstrap.Bootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#handler()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#newOptionsArray()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#setChannelOptions(io.netty.channel.Channel,java.util.Map.Entry[],io.netty.util.internal.logging.InternalLogger)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#newAttributesArray()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#setAttributes(io.netty.channel.Channel,java.util.Map.Entry[])
CALLER: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setFailure(java.lang.Throwable)
CALLER: static io.netty.bootstrap.FailedChannel#<clinit>()
	CALLEE: io.netty.channel.ChannelMetadata#<init>(boolean)
CALLER: io.netty.bootstrap.FailedChannel#<init>()
	CALLEE: io.netty.channel.AbstractChannel#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelConfig#<init>(io.netty.channel.Channel)
CALLER: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise#<init>()
CALLER: static com.google.common.base.Throwables#throwIfInstanceOf(java.lang.Throwable,java.lang.Class)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: static com.google.common.base.Throwables#throwIfUnchecked(java.lang.Throwable)
	CALLEE: static com.google.common.base.Preconditions#checkNotNull(java.lang.Object)
CALLER: org.yaml.snakeyaml.error.Mark#isLineBreak(int)
	CALLEE: org.yaml.snakeyaml.scanner.Constant#has(int)
CALLER: io.netty.bootstrap.AbstractBootstrap#options()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#copiedMap(java.util.Map)
CALLER: io.netty.bootstrap.AbstractBootstrap#attrs()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#copiedMap(java.util.Map)
CALLER: com.google.common.collect.Iterators.6#computeNext()
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#apply(java.lang.Object)
	CALLEE: com.google.common.collect.AbstractIterator#endOfData()
CALLER: static com.google.common.base.Preconditions#badElementIndex(int,int,java.lang.String)
	CALLEE: static com.google.common.base.Preconditions#format(java.lang.String,java.lang.Object[])
CALLER: io.netty.bootstrap.AbstractBootstrap#newOptionsArray()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#newOptionsArray(java.util.Map)
CALLER: static io.netty.bootstrap.AbstractBootstrap#setChannelOptions(io.netty.channel.Channel,java.util.Map.Entry[],io.netty.util.internal.logging.InternalLogger)
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#setChannelOption(io.netty.channel.Channel,io.netty.channel.ChannelOption,java.lang.Object,io.netty.util.internal.logging.InternalLogger)
CALLER: io.netty.bootstrap.AbstractBootstrap#newAttributesArray()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#attrs0()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#newAttributesArray(java.util.Map)
CALLER: io.netty.channel.AbstractChannel#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.util.DefaultAttributeMap#<init>()
	CALLEE: io.netty.channel.VoidChannelPromise#<init>(io.netty.channel.Channel,boolean)
	CALLEE: io.netty.channel.AbstractChannel.CloseFuture#<init>(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel#newId()
	CALLEE: io.netty.bootstrap.FailedChannel#newUnsafe()
	CALLEE: io.netty.channel.AbstractChannel#newChannelPipeline()
CALLER: io.netty.channel.DefaultChannelConfig#<init>(io.netty.channel.Channel)
	CALLEE: io.netty.channel.AdaptiveRecvByteBufAllocator#<init>()
	CALLEE: io.netty.channel.DefaultChannelConfig#<init>(io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)
CALLER: io.netty.util.concurrent.DefaultPromise#<init>()
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
CALLER: net.md_5.bungee.command.PlayerCommand.2#apply(java.lang.Object)
	CALLEE: net.md_5.bungee.command.PlayerCommand.2#apply(net.md_5.bungee.api.connection.ProxiedPlayer)
CALLER: static io.netty.bootstrap.AbstractBootstrap#setChannelOption(io.netty.channel.Channel,io.netty.channel.ChannelOption,java.lang.Object,io.netty.util.internal.logging.InternalLogger)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: io.netty.channel.VoidChannelPromise#<init>(io.netty.channel.Channel,boolean)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractFuture#<init>()
	CALLEE: io.netty.channel.VoidChannelPromise.1#<init>(io.netty.channel.VoidChannelPromise)
CALLER: io.netty.channel.AbstractChannel.CloseFuture#<init>(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
CALLER: io.netty.channel.AbstractChannel#newId()
	CALLEE: static io.netty.channel.DefaultChannelId#newInstance()
CALLER: io.netty.bootstrap.FailedChannel#newUnsafe()
	CALLEE: io.netty.bootstrap.FailedChannel.FailedChannelUnsafe#<init>(io.netty.bootstrap.FailedChannel,io.netty.bootstrap.FailedChannel.1)
CALLER: io.netty.channel.AbstractChannel#newChannelPipeline()
	CALLEE: io.netty.channel.DefaultChannelPipeline#<init>(io.netty.channel.Channel)
CALLER: static io.netty.channel.DefaultMessageSizeEstimator#<clinit>()
	CALLEE: io.netty.channel.DefaultMessageSizeEstimator#<init>(int)
CALLER: static io.netty.channel.AdaptiveRecvByteBufAllocator#<clinit>()
	CALLEE: io.netty.channel.AdaptiveRecvByteBufAllocator#<init>()
CALLER: io.netty.channel.AdaptiveRecvByteBufAllocator#<init>()
	CALLEE: io.netty.channel.AdaptiveRecvByteBufAllocator#<init>(int,int,int)
CALLER: io.netty.channel.DefaultChannelConfig#<init>(io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)
	CALLEE: io.netty.bootstrap.FailedChannel#metadata()
	CALLEE: io.netty.channel.DefaultChannelConfig#setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator,io.netty.channel.ChannelMetadata)
CALLER: static io.netty.channel.DefaultChannelId#newInstance()
	CALLEE: io.netty.channel.DefaultChannelId#<init>()
CALLER: static io.netty.channel.DefaultChannelId#<clinit>()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.MacAddressUtil#defaultMachineId()
	CALLEE: static io.netty.util.internal.MacAddressUtil#formatAddress(byte[])
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.channel.DefaultChannelId#defaultProcessId()
	CALLEE: static io.netty.util.internal.MacAddressUtil#parseMAC(java.lang.String)
CALLER: io.netty.bootstrap.FailedChannel.FailedChannelUnsafe#<init>(io.netty.bootstrap.FailedChannel,io.netty.bootstrap.FailedChannel.1)
	CALLEE: io.netty.bootstrap.FailedChannel.FailedChannelUnsafe#<init>(io.netty.bootstrap.FailedChannel)
CALLER: static io.netty.channel.DefaultChannelPipeline#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.channel.DefaultChannelPipeline#generateName0(java.lang.Class)
	CALLEE: io.netty.channel.DefaultChannelPipeline.1#<init>()
CALLER: io.netty.channel.DefaultChannelPipeline#<init>(io.netty.channel.Channel)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.VoidChannelPromise#<init>(io.netty.channel.Channel,boolean)
	CALLEE: static io.netty.util.ResourceLeakDetector#isEnabled()
	CALLEE: io.netty.channel.SucceededChannelFuture#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)
CALLER: io.netty.channel.DefaultMessageSizeEstimator#<init>(int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(int,java.lang.String)
	CALLEE: io.netty.channel.DefaultMessageSizeEstimator.HandleImpl#<init>(int,io.netty.channel.DefaultMessageSizeEstimator.1)
CALLER: io.netty.channel.AdaptiveRecvByteBufAllocator#<init>(int,int,int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositive(int,java.lang.String)
	CALLEE: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#<init>()
	CALLEE: static io.netty.channel.AdaptiveRecvByteBufAllocator#getSizeTableIndex(int)
CALLER: io.netty.channel.DefaultChannelConfig#setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator,io.netty.channel.ChannelMetadata)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#maxMessagesPerRead(int)
	CALLEE: io.netty.channel.DefaultChannelConfig#setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
	CALLEE: io.netty.channel.ChannelMetadata#defaultMaxMessagesPerRead()
CALLER: io.netty.channel.DefaultChannelId#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#threadLocalRandom()
	CALLEE: io.netty.channel.DefaultChannelId#writeInt(int,int)
	CALLEE: io.netty.channel.DefaultChannelId#writeLong(int,long)
CALLER: static io.netty.channel.DefaultChannelId#defaultProcessId()
	CALLEE: static io.netty.util.internal.PlatformDependent#getClassLoader(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#threadLocalRandom()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
CALLER: static io.netty.util.internal.MacAddressUtil#parseMAC(java.lang.String)
	CALLEE: static io.netty.util.internal.MacAddressUtil#validateMacSeparator(char)
	CALLEE: static io.netty.util.internal.StringUtil#decodeHexByte(java.lang.CharSequence,int)
CALLER: static io.netty.util.internal.MacAddressUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.util.internal.MacAddressUtil#defaultMachineId()
	CALLEE: static io.netty.util.internal.PlatformDependent#threadLocalRandom()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.util.internal.MacAddressUtil#formatAddress(byte[])
	CALLEE: static io.netty.util.internal.MacAddressUtil#bestAvailableMac()
CALLER: io.netty.bootstrap.FailedChannel.FailedChannelUnsafe#<init>(io.netty.bootstrap.FailedChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#<init>(io.netty.channel.AbstractChannel)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: static io.netty.channel.DefaultChannelPipeline#generateName0(java.lang.Class)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
CALLER: io.netty.channel.DefaultChannelPipeline.1#<init>()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: static io.netty.util.ResourceLeakDetector#isEnabled()
	CALLEE: static io.netty.util.ResourceLeakDetector#getLevel()
CALLER: io.netty.channel.SucceededChannelFuture#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.CompleteChannelFuture#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.channel.DefaultChannelPipeline.TailContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$400()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,java.lang.Class)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#setAddComplete()
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,java.lang.Class)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#setAddComplete()
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$500()
	CALLEE: io.netty.channel.DefaultChannelPipeline#channel()
	CALLEE: io.netty.channel.AbstractChannel#unsafe()
CALLER: io.netty.channel.DefaultMessageSizeEstimator.HandleImpl#<init>(int,io.netty.channel.DefaultMessageSizeEstimator.1)
	CALLEE: io.netty.channel.DefaultMessageSizeEstimator.HandleImpl#<init>(int)
CALLER: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#<init>()
	CALLEE: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#<init>(int)
CALLER: static io.netty.buffer.ByteBufUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#get(java.lang.String,java.lang.String)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.internal.PlatformDependent#isAndroid()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.buffer.ByteBufUtil.1#<init>()
	CALLEE: static io.netty.util.CharsetUtil#encoder(java.nio.charset.Charset)
	CALLEE: io.netty.buffer.ByteBufUtil.2#<init>()
CALLER: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#maxMessagesPerRead(int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositive(int,java.lang.String)
CALLER: io.netty.channel.DefaultChannelConfig#setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: static io.netty.util.internal.StringUtil#decodeHexByte(java.lang.CharSequence,int)
	CALLEE: static io.netty.util.internal.StringUtil#decodeHexNibble(char)
CALLER: static io.netty.util.internal.MacAddressUtil#bestAvailableMac()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.SocketUtils#hardwareAddressFromNetworkInterface(java.net.NetworkInterface)
	CALLEE: static io.netty.util.internal.MacAddressUtil#compareAddresses(byte[],byte[])
	CALLEE: static io.netty.util.internal.MacAddressUtil#compareAddresses(java.net.InetAddress,java.net.InetAddress)
	CALLEE: static io.netty.util.internal.SocketUtils#addressesFromNetworkInterface(java.net.NetworkInterface)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#<init>(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#<init>(io.netty.channel.AbstractChannel)
CALLER: io.netty.channel.CompleteChannelFuture#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.CompleteFuture#<init>(io.netty.util.concurrent.EventExecutor)
CALLER: io.netty.channel.AbstractChannelHandlerContext#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,java.lang.Class)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.channel.ChannelHandlerMask#mask(java.lang.Class)
CALLER: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#<init>(int)
	CALLEE: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#maxMessagesPerRead(int)
CALLER: io.netty.buffer.ByteBufUtil.1#<init>()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: static io.netty.util.CharsetUtil#encoder(java.nio.charset.Charset)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#charsetEncoderCache()
	CALLEE: static io.netty.util.CharsetUtil#encoder(java.nio.charset.Charset,java.nio.charset.CodingErrorAction,java.nio.charset.CodingErrorAction)
CALLER: static io.netty.buffer.UnpooledByteBufAllocator#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#directBufferPreferred()
	CALLEE: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean)
CALLER: static io.netty.buffer.AbstractByteBufAllocator#<clinit>()
	CALLEE: static io.netty.util.ResourceLeakDetector#addExclusions(java.lang.Class,java.lang.String[])
CALLER: static io.netty.buffer.PooledByteBufAllocator#<clinit>()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.internal.PlatformDependent#directBufferPreferred()
	CALLEE: io.netty.buffer.PooledByteBufAllocator#<init>(boolean)
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getBoolean(java.lang.String,boolean)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: static io.netty.util.NettyRuntime#availableProcessors()
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getLong(java.lang.String,long)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#contains(java.lang.String)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#validateAndCalculatePageShifts(int,int)
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#validateAndCalculateChunkSize(int,int)
	CALLEE: static io.netty.util.internal.PlatformDependent#maxDirectMemory()
CALLER: static io.netty.util.internal.SocketUtils#hardwareAddressFromNetworkInterface(java.net.NetworkInterface)
	CALLEE: io.netty.util.internal.SocketUtils.13#<init>(java.net.NetworkInterface)
CALLER: static io.netty.util.internal.MacAddressUtil#compareAddresses(java.net.InetAddress,java.net.InetAddress)
	CALLEE: static io.netty.util.internal.MacAddressUtil#scoreAddress(java.net.InetAddress)
CALLER: static io.netty.channel.ChannelOutboundBuffer#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.internal.SystemPropertyUtil#getInt(java.lang.String,int)
	CALLEE: io.netty.channel.ChannelOutboundBuffer.1#<init>()
CALLER: static io.netty.channel.ChannelHandlerMask#mask(java.lang.Class)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#get(java.lang.Object)
	CALLEE: gnu.trove.map.hash.TCustomHashMap#put(java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.channel.ChannelHandlerMask#mask0(java.lang.Class)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#get()
CALLER: static io.netty.channel.ChannelHandlerMask#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: io.netty.channel.ChannelHandlerMask.1#<init>()
CALLER: static io.netty.util.CharsetUtil#encoder(java.nio.charset.Charset,java.nio.charset.CodingErrorAction,java.nio.charset.CodingErrorAction)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
CALLER: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean)
	CALLEE: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean,boolean)
CALLER: io.netty.buffer.PooledByteBufAllocator#<init>(boolean)
	CALLEE: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int)
CALLER: io.netty.channel.ChannelOutboundBuffer.1#<init>()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: static io.netty.channel.ChannelHandlerMask#mask0(java.lang.Class)
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: static io.netty.channel.ChannelHandlerMask#isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])
CALLER: io.netty.channel.ChannelHandlerMask.1#<init>()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#useDirectBufferNoCleaner()
	CALLEE: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean,boolean,boolean)
CALLER: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int)
	CALLEE: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int,int,int,int)
CALLER: static io.netty.channel.ChannelHandlerMask#isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])
	CALLEE: io.netty.channel.ChannelHandlerMask.2#<init>(java.lang.Class,java.lang.String,java.lang.Class[])
CALLER: io.netty.buffer.UnpooledByteBufAllocator#<init>(boolean,boolean,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#<init>(boolean)
	CALLEE: io.netty.buffer.UnpooledByteBufAllocator.UnpooledByteBufAllocatorMetric#<init>(io.netty.buffer.UnpooledByteBufAllocator.1)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasDirectBufferNoCleanerConstructor()
CALLER: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int,int,int,int)
	CALLEE: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int,int,int,boolean,int)
CALLER: io.netty.buffer.AbstractByteBufAllocator#<init>(boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: io.netty.buffer.EmptyByteBuf#<init>(io.netty.buffer.ByteBufAllocator)
CALLER: io.netty.buffer.UnpooledByteBufAllocator.UnpooledByteBufAllocatorMetric#<init>(io.netty.buffer.UnpooledByteBufAllocator.1)
	CALLEE: io.netty.buffer.UnpooledByteBufAllocator.UnpooledByteBufAllocatorMetric#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#hasDirectBufferNoCleanerConstructor()
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasDirectBufferNoCleanerConstructor()
CALLER: io.netty.buffer.PooledByteBufAllocator#<init>(boolean,int,int,int,int,int,int,boolean,int)
	CALLEE: io.netty.buffer.PoolArena.DirectArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
	CALLEE: io.netty.buffer.PooledByteBufAllocatorMetric#<init>(io.netty.buffer.PooledByteBufAllocator)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(int,java.lang.String)
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#validateAndCalculatePageShifts(int,int)
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#validateAndCalculateChunkSize(int,int)
	CALLEE: io.netty.buffer.AbstractByteBufAllocator#<init>(boolean)
	CALLEE: io.netty.buffer.PooledByteBufAllocator.1#<init>(io.netty.buffer.PooledByteBufAllocator)
	CALLEE: io.netty.buffer.PooledByteBufAllocator.PoolThreadLocalCache#<init>(io.netty.buffer.PooledByteBufAllocator,boolean)
	CALLEE: static io.netty.util.internal.PlatformDependent#hasAlignDirectByteBuffer()
	CALLEE: static io.netty.util.internal.PlatformDependent#align(long,int)
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#isDirectMemoryCacheAlignmentSupported()
	CALLEE: static io.netty.buffer.PooledByteBufAllocator#newArenaArray(int)
	CALLEE: io.netty.buffer.PoolArena.HeapArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
CALLER: static io.netty.buffer.EmptyByteBuf#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent#directBufferAddress(java.nio.ByteBuffer)
CALLER: io.netty.buffer.EmptyByteBuf#<init>(io.netty.buffer.ByteBufAllocator)
	CALLEE: io.netty.buffer.EmptyByteBuf#<init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)
CALLER: io.netty.buffer.UnpooledByteBufAllocator.UnpooledByteBufAllocatorMetric#<init>()
	CALLEE: static io.netty.util.internal.PlatformDependent#newLongCounter()
CALLER: io.netty.buffer.PooledByteBufAllocator.PoolThreadLocalCache#<init>(io.netty.buffer.PooledByteBufAllocator,boolean)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#hasAlignDirectByteBuffer()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
	CALLEE: static io.netty.util.internal.PlatformDependent0#hasAlignSliceMethod()
CALLER: static io.netty.util.internal.PlatformDependent#align(long,int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#align(long,int)
CALLER: static io.netty.buffer.PooledByteBufAllocator#isDirectMemoryCacheAlignmentSupported()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
CALLER: static io.netty.buffer.PoolArena#<clinit>()
	CALLEE: static io.netty.util.internal.PlatformDependent#hasUnsafe()
CALLER: io.netty.buffer.PoolArena.HeapArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
	CALLEE: io.netty.buffer.PoolArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
CALLER: io.netty.buffer.PoolArena.DirectArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
	CALLEE: io.netty.buffer.PoolArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
CALLER: io.netty.buffer.EmptyByteBuf#<init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteOrder)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
	CALLEE: io.netty.buffer.ByteBuf#<init>()
CALLER: static io.netty.util.internal.PlatformDependent#newLongCounter()
	CALLEE: static io.netty.util.internal.PlatformDependent#javaVersion()
	CALLEE: io.netty.util.internal.LongAdderCounter#<init>()
	CALLEE: io.netty.util.internal.PlatformDependent.AtomicLongCounter#<init>(io.netty.util.internal.PlatformDependent.1)
CALLER: static io.netty.util.internal.shaded.org.jctools.util.Pow2#align(long,int)
	CALLEE: static io.netty.util.internal.shaded.org.jctools.util.Pow2#isPowerOfTwo(int)
CALLER: io.netty.buffer.PoolArena#finalize()
	CALLEE: static io.netty.buffer.PoolArena#destroyPoolSubPages(io.netty.buffer.PoolSubpage[])
	CALLEE: io.netty.buffer.PoolArena#destroyPoolChunkLists(io.netty.buffer.PoolChunkList[])
CALLER: io.netty.buffer.PoolArena#<init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)
	CALLEE: static io.netty.util.internal.PlatformDependent#newLongCounter()
	CALLEE: io.netty.buffer.SizeClasses#<init>(int,int,int,int)
	CALLEE: io.netty.buffer.PoolArena#newSubpagePoolArray(int)
	CALLEE: io.netty.buffer.PoolArena#newSubpagePoolHead()
	CALLEE: io.netty.buffer.PoolChunkList#<init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)
	CALLEE: io.netty.buffer.PoolChunkList#prevList(io.netty.buffer.PoolChunkList)
CALLER: io.netty.util.internal.PlatformDependent.AtomicLongCounter#<init>(io.netty.util.internal.PlatformDependent.1)
	CALLEE: io.netty.util.internal.PlatformDependent.AtomicLongCounter#<init>()
CALLER: io.netty.buffer.SizeClasses#<init>(int,int,int,int)
	CALLEE: static io.netty.buffer.PoolThreadCache#log2(int)
	CALLEE: io.netty.buffer.SizeClasses#sizeClasses()
	CALLEE: io.netty.buffer.SizeClasses#idx2SizeTab(int[],int[])
	CALLEE: io.netty.buffer.SizeClasses#size2idxTab(int[])
CALLER: io.netty.buffer.PoolArena#newSubpagePoolHead()
	CALLEE: io.netty.buffer.PoolSubpage#<init>()
CALLER: io.netty.buffer.PoolChunkList#<init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)
	CALLEE: static io.netty.buffer.PoolChunkList#calculateMaxCapacity(int,int)
CALLER: static io.netty.buffer.PoolThreadCache#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
CALLER: io.netty.buffer.SizeClasses#sizeClasses()
	CALLEE: io.netty.buffer.SizeClasses#sizeClass(int,int,int,int)
CALLER: static io.netty.buffer.PoolChunkList#calculateMaxCapacity(int,int)
	CALLEE: static io.netty.buffer.PoolChunkList#minUsage0(int)
CALLER: io.netty.buffer.SizeClasses#sizeClass(int,int,int,int)
	CALLEE: static io.netty.buffer.PoolThreadCache#log2(int)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#produce()
	CALLEE: org.yaml.snakeyaml.events.DocumentEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
CALLER: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.util.concurrent.DefaultPromise#executor()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
CALLER: io.netty.buffer.PoolArena#toString()
	CALLEE: static io.netty.buffer.PoolArena#appendPoolSubPages(java.lang.StringBuilder,io.netty.buffer.PoolSubpage[])
CALLER: org.slf4j.helpers.SubstituteLogger#log(org.slf4j.event.LoggingEvent)
	CALLEE: org.slf4j.helpers.SubstituteLogger#isDelegateEventAware()
CALLER: io.netty.bootstrap.ServerBootstrap#validate()
	CALLEE: io.netty.bootstrap.ServerBootstrap#validate()
CALLER: io.netty.util.collection.IntObjectHashMap.PrimitiveIterator#value()
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$600(io.netty.util.collection.IntObjectHashMap)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#access$900(java.lang.Object)
CALLER: io.netty.channel.AbstractChannel#toString()
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: io.netty.channel.AbstractChannel#remoteAddress()
	CALLEE: io.netty.channel.AbstractChannel#localAddress()
	CALLEE: io.netty.channel.DefaultChannelId#asShortText()
CALLER: io.netty.buffer.AbstractByteBufAllocator#toString()
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Object)
CALLER: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: io.netty.bootstrap.ServerBootstrap#init(io.netty.channel.Channel)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#newOptionsArray()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#setChannelOptions(io.netty.channel.Channel,java.util.Map.Entry[],io.netty.util.internal.logging.InternalLogger)
	CALLEE: io.netty.bootstrap.AbstractBootstrap#newAttributesArray()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#setAttributes(io.netty.channel.Channel,java.util.Map.Entry[])
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#newOptionsArray(java.util.Map)
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#newAttributesArray(java.util.Map)
	CALLEE: io.netty.bootstrap.ServerBootstrap.1#<init>(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map.Entry[],java.util.Map.Entry[])
CALLER: io.netty.channel.AbstractChannel#compareTo(java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel#compareTo(io.netty.channel.Channel)
CALLER: io.netty.channel.AbstractChannel#hashCode()
	CALLEE: io.netty.channel.DefaultChannelId#hashCode()
CALLER: io.netty.channel.AbstractChannel#close()
	CALLEE: io.netty.channel.DefaultChannelPipeline#close()
CALLER: io.netty.util.concurrent.FastThreadLocal#get()
	CALLEE: static io.netty.util.internal.InternalThreadLocalMap#get()
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#indexedVariable(int)
	CALLEE: io.netty.util.concurrent.FastThreadLocal#initialize(io.netty.util.internal.InternalThreadLocalMap)
CALLER: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause0(java.lang.Object)
CALLER: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingKey#expect()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1800(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndicator(java.lang.String,boolean,boolean,boolean)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter#writeIndent()
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1000(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$1700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.comments.CommentEventsCollector#collectEvents()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2002(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2210(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2300(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2400(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2500(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2600(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2700(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$2800(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: static org.yaml.snakeyaml.emitter.Emitter#access$3100(org.yaml.snakeyaml.emitter.Emitter)
	CALLEE: org.yaml.snakeyaml.emitter.Emitter.ExpectFlowMappingSimpleValue#<init>(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.Emitter.1)
CALLER: io.netty.channel.MultithreadEventLoopGroup#register(io.netty.channel.Channel)
	CALLEE: io.netty.channel.MultithreadEventLoopGroup#next()
	CALLEE: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.events.MappingStartEvent#<init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions.FlowStyle)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.events.SequenceEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.tokens.StreamStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.CommentToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.StreamEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowEntryToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.BlockMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.KeyToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ValueToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DirectiveToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.DocumentEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceStartToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowMappingEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.FlowSequenceEndToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.ScalarToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.TagToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.tokens.AliasToken#getTokenId()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserException#<init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1200(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.tokens.AnchorToken#getTokenId()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.bootstrap.ServerBootstrap#validate()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.bootstrap.AbstractBootstrapConfig#group()
	CALLEE: io.netty.bootstrap.AbstractBootstrap#validate()
CALLER: static io.netty.util.collection.IntObjectHashMap#access$900(java.lang.Object)
	CALLEE: static io.netty.util.collection.IntObjectHashMap#toExternal(java.lang.Object)
CALLER: io.netty.channel.AbstractChannel#remoteAddress()
	CALLEE: io.netty.channel.AbstractChannel#unsafe()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#remoteAddress()
CALLER: io.netty.channel.AbstractChannel#localAddress()
	CALLEE: io.netty.channel.AbstractChannel#unsafe()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#localAddress()
CALLER: io.netty.channel.DefaultChannelId#asShortText()
	CALLEE: static io.netty.buffer.ByteBufUtil#hexDump(byte[],int,int)
CALLER: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
CALLER: io.netty.bootstrap.ServerBootstrap.1#<init>(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map.Entry[],java.util.Map.Entry[])
	CALLEE: io.netty.channel.ChannelInitializer#<init>()
CALLER: io.netty.channel.AbstractChannel#compareTo(io.netty.channel.Channel)
	CALLEE: io.netty.channel.AbstractChannel#id()
	CALLEE: io.netty.channel.DefaultChannelId#compareTo(java.lang.Object)
CALLER: io.netty.channel.DefaultChannelPipeline#close()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#close()
CALLER: io.netty.util.concurrent.FastThreadLocal#initialize(io.netty.util.internal.InternalThreadLocalMap)
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.InternalThreadLocalMap#setIndexedVariable(int,java.lang.Object)
	CALLEE: static io.netty.util.concurrent.FastThreadLocal#addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)
	CALLEE: io.netty.channel.ChannelHandlerMask.1#initialValue()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.1#initialValue()
CALLER: io.netty.util.concurrent.DefaultPromise#cause0(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise.CauseHolder#<init>(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#<init>(io.netty.util.concurrent.DefaultPromise.1)
CALLER: io.netty.channel.MultithreadEventLoopGroup#next()
	CALLEE: io.netty.util.concurrent.MultithreadEventExecutorGroup#next()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseFlowNode()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseBlockNodeOrIndentlessSequence()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#remoteAddress()
	CALLEE: io.netty.bootstrap.FailedChannel#remoteAddress0()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#localAddress()
	CALLEE: io.netty.bootstrap.FailedChannel#localAddress0()
CALLER: static io.netty.buffer.ByteBufUtil#hexDump(byte[],int,int)
	CALLEE: static io.netty.buffer.ByteBufUtil.HexUtil#access$100(byte[],int,int)
CALLER: io.netty.channel.AbstractChannelHandlerContext#close()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#newPromise()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#close(io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.ChannelHandlerMask.1#initialValue()
	CALLEE: io.netty.channel.ChannelHandlerMask.1#initialValue()
CALLER: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#<init>(io.netty.util.concurrent.DefaultPromise.1)
	CALLEE: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#<init>()
CALLER: io.netty.util.concurrent.MultithreadEventExecutorGroup#next()
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory.PowerOfTwoEventExecutorChooser#next()
	CALLEE: io.netty.util.concurrent.DefaultEventExecutorChooserFactory.GenericEventExecutorChooser#next()
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseFlowNode()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: static io.netty.buffer.ByteBufUtil.HexUtil#access$100(byte[],int,int)
	CALLEE: static io.netty.buffer.ByteBufUtil.HexUtil#hexDump(byte[],int,int)
CALLER: static io.netty.buffer.ByteBufUtil.HexUtil#<clinit>()
	CALLEE: static io.netty.util.internal.StringUtil#byteToHexStringPadded(int)
CALLER: io.netty.channel.AbstractChannelHandlerContext#newPromise()
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#channel()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
CALLER: io.netty.channel.AbstractChannelHandlerContext#close(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#isNotValidPromise(io.netty.channel.ChannelPromise,boolean)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextOutbound(int)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.11#<init>(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object,boolean)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeClose(io.netty.channel.ChannelPromise)
CALLER: static io.netty.buffer.ByteBufUtil.HexUtil#hexDump(byte[],int,int)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkPositiveOrZero(int,java.lang.String)
CALLER: io.netty.channel.AbstractChannelHandlerContext#channel()
	CALLEE: io.netty.channel.DefaultChannelPipeline#channel()
CALLER: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#channel()
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
CALLER: io.netty.channel.AbstractChannelHandlerContext#isNotValidPromise(io.netty.channel.ChannelPromise,boolean)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: static io.netty.util.internal.StringUtil#simpleClassName(java.lang.Class)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isCancelled()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#channel()
CALLER: io.netty.channel.AbstractChannelHandlerContext#findContextOutbound(int)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#skipContext(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor,int,int)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object,boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: static io.netty.util.ReferenceCountUtil#release(java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#lazyExecute(java.lang.Runnable)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#skipContext(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor,int,int)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
CALLER: static io.netty.util.ReferenceCountUtil#<clinit>()
	CALLEE: static io.netty.util.internal.logging.InternalLoggerFactory#getInstance(java.lang.Class)
	CALLEE: static io.netty.util.ResourceLeakDetector#addExclusions(java.lang.Class,java.lang.String[])
CALLER: org.eclipse.aether.repository.RepositoryPolicy#toString()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#isEnabled()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#getChecksumPolicy()
	CALLEE: org.eclipse.aether.repository.RepositoryPolicy#getUpdatePolicy()
CALLER: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#executor()
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
CALLER: io.netty.util.concurrent.DefaultPromise.LeanCancellationException#fillInStackTrace()
	CALLEE: static io.netty.util.concurrent.DefaultPromise#access$000()
CALLER: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.channel.ChannelFuture)
CALLER: net.md_5.bungee.BungeeCord.4#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: net.md_5.bungee.BungeeCord.4#operationComplete(io.netty.channel.ChannelFuture)
CALLER: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.channel.ChannelFuture)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#produce()
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#pop()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.CommentToken)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowEndComment#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseStreamStart#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseImplicitDocumentStart#produce()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockNode#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentContent#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseDocumentEnd#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseIndentlessSequenceEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceFirstEntry#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingFirstKey#produce()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$100(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.channel.AbstractChannel#newPromise()
	CALLEE: io.netty.channel.DefaultChannelPipeline#newPromise()
CALLER: org.yaml.snakeyaml.parser.ParserImpl#parseBlockNodeOrIndentlessSequence()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl#parseNode(boolean,boolean)
CALLER: io.netty.channel.DefaultChannelId#compareTo(java.lang.Object)
	CALLEE: io.netty.channel.DefaultChannelId#compareTo(io.netty.channel.ChannelId)
CALLER: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.Channel)
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)
	CALLEE: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.ChannelPromise)
CALLER: org.yaml.snakeyaml.DumperOptions.Version#toString()
	CALLEE: org.yaml.snakeyaml.DumperOptions.Version#getRepresentation()
CALLER: io.netty.channel.DefaultChannelPromise#syncUninterruptibly()
	CALLEE: io.netty.channel.DefaultChannelPromise#syncUninterruptibly()
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeClose(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#close(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingEmptyValue#produce()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
CALLER: net.md_5.bungee.BungeeCord.3#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
	CALLEE: static net.md_5.bungee.BungeeCord#access$100(net.md_5.bungee.BungeeCord)
CALLER: net.md_5.bungee.BungeeCord.4#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: net.md_5.bungee.BungeeCord#getLogger()
	CALLEE: net.md_5.bungee.api.config.ListenerInfo#getSocketAddress()
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannel#localAddress()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
	CALLEE: static net.md_5.bungee.BungeeCord#access$100(net.md_5.bungee.BungeeCord)
CALLER: io.netty.bootstrap.AbstractBootstrap.1#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.bootstrap.AbstractBootstrap.PendingRegistrationPromise#registered()
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#access$000(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.channel.DefaultChannelPipeline#newPromise()
	CALLEE: io.netty.channel.DefaultChannelPromise#<init>(io.netty.channel.Channel)
CALLER: io.netty.channel.DefaultChannelId#compareTo(io.netty.channel.ChannelId)
	CALLEE: io.netty.channel.DefaultChannelId#asLongText()
CALLER: io.netty.channel.SingleThreadEventLoop#register(io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.AbstractChannel#unsafe()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelPromise#syncUninterruptibly()
	CALLEE: io.netty.util.concurrent.DefaultPromise#syncUninterruptibly()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.util.internal.PromiseNotificationUtil#tryFailure(io.netty.util.concurrent.Promise,java.lang.Throwable,io.netty.util.internal.logging.InternalLogger)
CALLER: static io.netty.bootstrap.AbstractBootstrap#access$000(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.bootstrap.AbstractBootstrap#doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelId#asLongText()
	CALLEE: io.netty.channel.DefaultChannelId#newLongValue()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannel.CloseFuture#setClosed()
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannel#isRegistered()
	CALLEE: io.netty.bootstrap.FailedChannel#isCompatible(io.netty.channel.EventLoop)
	CALLEE: static io.netty.channel.AbstractChannel#access$102(io.netty.channel.AbstractChannel,io.netty.channel.EventLoop)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#register0(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.1#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#closeForcibly()
	CALLEE: static io.netty.channel.AbstractChannel#access$400(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
CALLER: io.netty.util.concurrent.DefaultPromise#syncUninterruptibly()
	CALLEE: io.netty.channel.DefaultChannelPromise#awaitUninterruptibly()
	CALLEE: io.netty.util.concurrent.DefaultPromise#rethrowIfFailed()
CALLER: static io.netty.util.internal.PromiseNotificationUtil#tryFailure(io.netty.util.concurrent.Promise,java.lang.Throwable,io.netty.util.internal.logging.InternalLogger)
	CALLEE: io.netty.util.concurrent.DefaultPromise#tryFailure(java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object[])
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: static io.netty.util.internal.ThrowableUtil#stackTraceToString(java.lang.Throwable)
CALLER: io.netty.channel.DefaultChannelId#newLongValue()
	CALLEE: io.netty.channel.DefaultChannelId#appendHexDumpField(java.lang.StringBuilder,int,int)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#register0(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setUncancellable()
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#closeForcibly()
	CALLEE: static io.netty.channel.AbstractChannel#access$400(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#ensureOpen(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel#doRegister()
	CALLEE: static io.netty.channel.AbstractChannel#access$002(io.netty.channel.AbstractChannel,boolean)
	CALLEE: static io.netty.channel.AbstractChannel#access$500(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.FailedChannel#config()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#beginRead()
	CALLEE: io.netty.channel.AbstractChannel.CloseFuture#setClosed()
	CALLEE: io.netty.channel.DefaultChannelPipeline#invokeHandlerAddedIfNeeded()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelRegistered()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelActive()
	CALLEE: io.netty.channel.DefaultChannelConfig#isAutoRead()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#closeForcibly()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: io.netty.bootstrap.FailedChannel#doClose()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#tryFailure(java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: io.netty.channel.VoidChannelPromise#tryFailure(java.lang.Throwable)
CALLER: io.netty.channel.DefaultChannelPromise#awaitUninterruptibly()
	CALLEE: io.netty.channel.DefaultChannelPromise#awaitUninterruptibly()
CALLER: io.netty.util.concurrent.DefaultPromise#rethrowIfFailed()
	CALLEE: static io.netty.util.internal.PlatformDependent#throwException(java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
CALLER: io.netty.channel.DefaultChannelId#appendHexDumpField(java.lang.StringBuilder,int,int)
	CALLEE: static io.netty.buffer.ByteBufUtil#hexDump(byte[],int,int)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#ensureOpen(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.bootstrap.FailedChannel#isOpen()
	CALLEE: static io.netty.channel.AbstractChannel#access$1300(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#newClosedChannelException(java.lang.Throwable,java.lang.String)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object)
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: io.netty.channel.DefaultChannelPromise#trySuccess()
	CALLEE: io.netty.channel.VoidChannelPromise#trySuccess()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#beginRead()
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: io.netty.bootstrap.FailedChannel#doBeginRead()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.9#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,java.lang.Exception)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#invokeLater(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#voidPromise()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: static io.netty.channel.AbstractChannel#access$000(io.netty.channel.AbstractChannel)
	CALLEE: static io.netty.channel.AbstractChannel#access$100(io.netty.channel.AbstractChannel)
CALLER: io.netty.channel.DefaultChannelPromise#awaitUninterruptibly()
	CALLEE: io.netty.util.concurrent.DefaultPromise#awaitUninterruptibly()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#newClosedChannelException(java.lang.Throwable,java.lang.String)
	CALLEE: static io.netty.channel.StacklessClosedChannelException#newInstance(java.lang.Class,java.lang.String)
CALLER: io.netty.channel.DefaultChannelPromise#trySuccess()
	CALLEE: io.netty.util.concurrent.DefaultPromise#trySuccess(java.lang.Object)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#invokeLater(java.lang.Runnable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#voidPromise()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: static io.netty.channel.AbstractChannel#access$1400(io.netty.channel.AbstractChannel)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: static io.netty.channel.StacklessClosedChannelException#newInstance(java.lang.Class,java.lang.String)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise,java.lang.Throwable,java.nio.channels.ClosedChannelException,boolean)
CALLER: io.netty.util.concurrent.DefaultPromise#awaitUninterruptibly()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.channel.DefaultChannelPromise#checkDeadLock()
	CALLEE: io.netty.util.concurrent.DefaultPromise#incWaiters()
	CALLEE: io.netty.util.concurrent.DefaultPromise#decWaiters()
CALLER: static io.netty.channel.StacklessClosedChannelException#newInstance(java.lang.Class,java.lang.String)
	CALLEE: static io.netty.util.internal.ThrowableUtil#unknownStackTrace(java.lang.Throwable,java.lang.Class,java.lang.String)
	CALLEE: io.netty.channel.StacklessClosedChannelException#<init>()
CALLER: io.netty.util.concurrent.DefaultPromise#trySuccess(java.lang.Object)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess0(java.lang.Object)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise,java.lang.Throwable,java.nio.channels.ClosedChannelException,boolean)
	CALLEE: io.netty.util.concurrent.DefaultPromise#isDone()
	CALLEE: io.netty.util.concurrent.DefaultPromise#setUncancellable()
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: static io.netty.channel.AbstractChannel#access$400(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#invokeLater(java.lang.Runnable)
	CALLEE: static io.netty.channel.AbstractChannel#access$900(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.5#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.channel.AbstractChannel#access$902(io.netty.channel.AbstractChannel,boolean)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#prepareToClose()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.6#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise,io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable,boolean,java.nio.channels.ClosedChannelException,boolean)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#doClose0(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#failFlushed(java.lang.Throwable,boolean)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#close(java.nio.channels.ClosedChannelException)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.7#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,boolean)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#fireChannelInactiveAndDeregister(boolean)
	CALLEE: io.netty.channel.VoidChannelPromise#setUncancellable()
CALLER: io.netty.channel.DefaultChannelPromise#checkDeadLock()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.channel.AbstractChannel#isRegistered()
	CALLEE: io.netty.util.concurrent.DefaultPromise#checkDeadLock()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#doClose0(io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.channel.AbstractChannel#access$400(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.FailedChannel#doClose()
	CALLEE: io.netty.channel.AbstractChannel.CloseFuture#setClosed()
CALLER: io.netty.channel.ChannelOutboundBuffer#failFlushed(java.lang.Throwable,boolean)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#remove0(java.lang.Throwable,boolean)
CALLER: io.netty.channel.ChannelOutboundBuffer#close(java.nio.channels.ClosedChannelException)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#close(java.lang.Throwable,boolean)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#fireChannelInactiveAndDeregister(boolean)
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#voidPromise()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#deregister(io.netty.channel.ChannelPromise,boolean)
CALLER: io.netty.util.concurrent.DefaultPromise#checkDeadLock()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.DefaultPromise#toString()
	CALLEE: io.netty.channel.DefaultChannelPromise#executor()
	CALLEE: io.netty.util.concurrent.BlockingOperationException#<init>(java.lang.String)
CALLER: io.netty.channel.AbstractChannel.CloseFuture#setClosed()
	CALLEE: io.netty.channel.DefaultChannelPromise#trySuccess()
CALLER: io.netty.channel.ChannelOutboundBuffer#remove0(java.lang.Throwable,boolean)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#clearNioBuffers()
	CALLEE: io.netty.channel.ChannelOutboundBuffer#removeEntry(io.netty.channel.ChannelOutboundBuffer.Entry)
	CALLEE: static io.netty.util.ReferenceCountUtil#safeRelease(java.lang.Object)
	CALLEE: static io.netty.channel.ChannelOutboundBuffer#safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#decrementPendingOutboundBytes(long,boolean,boolean)
CALLER: io.netty.channel.ChannelOutboundBuffer#close(java.lang.Throwable,boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
	CALLEE: io.netty.bootstrap.FailedChannel#isOpen()
	CALLEE: io.netty.channel.ChannelOutboundBuffer#clearNioBuffers()
	CALLEE: static io.netty.util.ReferenceCountUtil#safeRelease(java.lang.Object)
	CALLEE: static io.netty.channel.ChannelOutboundBuffer#safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.channel.ChannelOutboundBuffer.3#<init>(io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable,boolean)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#isEmpty()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#deregister(io.netty.channel.ChannelPromise,boolean)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#invokeLater(java.lang.Runnable)
	CALLEE: static io.netty.channel.AbstractChannel#access$000(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.8#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe,boolean,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.VoidChannelPromise#setUncancellable()
CALLER: io.netty.channel.ChannelOutboundBuffer#clearNioBuffers()
	CALLEE: io.netty.util.concurrent.FastThreadLocal#get()
CALLER: static io.netty.util.ReferenceCountUtil#safeRelease(java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: static io.netty.util.ReferenceCountUtil#release(java.lang.Object)
CALLER: static io.netty.channel.ChannelOutboundBuffer#safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.PromiseNotificationUtil#tryFailure(io.netty.util.concurrent.Promise,java.lang.Throwable,io.netty.util.internal.logging.InternalLogger)
CALLER: io.netty.channel.ChannelOutboundBuffer#decrementPendingOutboundBytes(long,boolean,boolean)
	CALLEE: io.netty.bootstrap.FailedChannel#config()
	CALLEE: io.netty.channel.DefaultChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: io.netty.channel.ChannelOutboundBuffer#setWritable(boolean)
CALLER: io.netty.channel.DefaultChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: io.netty.channel.WriteBufferWaterMark#low()
CALLER: io.netty.channel.ChannelOutboundBuffer#setWritable(boolean)
	CALLEE: io.netty.channel.ChannelOutboundBuffer#fireChannelWritabilityChanged(boolean)
CALLER: io.netty.channel.ChannelOutboundBuffer#fireChannelWritabilityChanged(boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
	CALLEE: io.netty.channel.AbstractChannel#pipeline()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.2#<init>(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.ChannelPipeline)
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelWritabilityChanged()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingValue#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2600(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingValueComment#produce()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#getToken()
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.util.ArrayStack#push(java.lang.Object)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#checkToken(org.yaml.snakeyaml.tokens.Token.ID[])
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$700(org.yaml.snakeyaml.parser.ParserImpl)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseBlockMappingKey#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$2300(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.channel.ChannelOutboundBuffer.1#initialValue()
	CALLEE: io.netty.channel.ChannelOutboundBuffer.1#initialValue()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.5#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.5#operationComplete(io.netty.channel.ChannelFuture)
CALLER: io.netty.util.concurrent.SingleThreadEventExecutor#lazyExecute(java.lang.Runnable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable,boolean)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise)
CALLER: io.netty.bootstrap.AbstractBootstrap.2#run()
	CALLEE: io.netty.channel.DefaultChannelPromise#setFailure(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPromise#addListener(io.netty.util.concurrent.GenericFutureListener)
	CALLEE: io.netty.util.concurrent.DefaultPromise#cause()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
	CALLEE: io.netty.channel.AbstractChannel#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.AbstractChannelHandlerContext.11#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$1200(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.1#run()
	CALLEE: static io.netty.channel.AbstractChannel.AbstractUnsafe#access$200(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelPipeline#invokeHandlerAddedIfNeeded()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.channel.AbstractChannel#eventLoop()
	CALLEE: io.netty.channel.DefaultChannelPipeline#callHandlerAddedForAllHandlers()
CALLER: io.netty.channel.DefaultChannelPipeline#fireChannelRegistered()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline#fireChannelActive()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.9#run()
	CALLEE: static io.netty.channel.AbstractChannel#access$500(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireExceptionCaught(java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.7#run()
	CALLEE: static io.netty.channel.AbstractChannel.AbstractUnsafe#access$1100(io.netty.channel.AbstractChannel.AbstractUnsafe,boolean)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.8#run()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: static io.netty.channel.AbstractChannel#access$002(io.netty.channel.AbstractChannel,boolean)
	CALLEE: static io.netty.channel.AbstractChannel#access$500(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.channel.AbstractChannel#access$000(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.AbstractChannel#doDeregister()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelInactive()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelUnregistered()
CALLER: io.netty.channel.VoidChannelPromise#tryFailure(java.lang.Throwable)
	CALLEE: io.netty.channel.VoidChannelPromise#fireException0(java.lang.Throwable)
CALLER: io.netty.channel.ChannelOutboundBuffer.3#run()
	CALLEE: io.netty.channel.ChannelOutboundBuffer#close(java.lang.Throwable,boolean)
CALLER: io.netty.channel.DefaultChannelPipeline#fireChannelWritabilityChanged()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.ChannelOutboundBuffer.2#run()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelWritabilityChanged()
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.ParserImpl.1)
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#<init>(org.yaml.snakeyaml.parser.ParserImpl)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.5#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: io.netty.channel.VoidChannelPromise#setSuccess()
	CALLEE: io.netty.channel.DefaultChannelPromise#setSuccess()
CALLER: io.netty.channel.AbstractChannel#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.DefaultChannelPipeline#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: static io.netty.channel.ChannelFutureListener#<clinit>()
	CALLEE: io.netty.channel.ChannelFutureListener.1#<init>()
	CALLEE: io.netty.channel.ChannelFutureListener.2#<init>()
	CALLEE: io.netty.channel.ChannelFutureListener.3#<init>()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$1200(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeClose(io.netty.channel.ChannelPromise)
CALLER: static io.netty.channel.AbstractChannel.AbstractUnsafe#access$200(io.netty.channel.AbstractChannel.AbstractUnsafe,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#register0(io.netty.channel.ChannelPromise)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.1#<init>(io.netty.channel.AbstractChannelHandlerContext)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.3#<init>(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline#fireExceptionCaught(java.lang.Throwable)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
CALLER: static io.netty.channel.AbstractChannel.AbstractUnsafe#access$1100(io.netty.channel.AbstractChannel.AbstractUnsafe,boolean)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#fireChannelInactiveAndDeregister(boolean)
CALLER: io.netty.channel.DefaultChannelPipeline#fireChannelInactive()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline#fireChannelUnregistered()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.VoidChannelPromise#fireException0(java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannel#isRegistered()
	CALLEE: io.netty.channel.AbstractChannel#pipeline()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireExceptionCaught(java.lang.Throwable)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks#<init>(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext.Tasks#access$800(io.netty.channel.AbstractChannelHandlerContext.Tasks)
CALLER: io.netty.channel.VoidChannelPromise#setSuccess()
	CALLEE: io.netty.channel.VoidChannelPromise#setSuccess()
CALLER: io.netty.channel.DefaultChannelPipeline#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#channelRegistered(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelRegistered()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#channelRegistered(io.netty.channel.ChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelActive()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#channelActive(io.netty.channel.ChannelHandlerContext)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.5#<init>(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.4#<init>(io.netty.channel.AbstractChannelHandlerContext)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.2#<init>(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelWritabilityChanged()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext.Tasks#<init>(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.1#<init>(io.netty.channel.AbstractChannelHandlerContext.Tasks)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.2#<init>(io.netty.channel.AbstractChannelHandlerContext.Tasks)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.3#<init>(io.netty.channel.AbstractChannelHandlerContext.Tasks)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks.4#<init>(io.netty.channel.AbstractChannelHandlerContext.Tasks)
CALLER: io.netty.channel.AbstractChannelHandlerContext#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#isNotValidPromise(io.netty.channel.ChannelPromise,boolean)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextOutbound(int)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object,boolean)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.8#<init>(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#channelRegistered(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline#invokeHandlerAddedIfNeeded()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelRegistered()
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isDebugEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Log4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#isWarnEnabled()
	CALLEE: io.netty.util.internal.logging.JdkLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#debug(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Object,java.lang.Object)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: static io.netty.util.internal.ThrowableUtil#stackTraceToString(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireExceptionCaught(java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireChannelRegistered()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelActive()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#readIfIsAutoRead()
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireChannelActive()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#channelInactive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelInactive()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#channelInactive(io.netty.channel.ChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#channelUnregistered(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelUnregistered()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#channelUnregistered(io.netty.channel.ChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelWritabilityChanged()
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireChannelWritabilityChanged()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireExceptionCaught(java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireExceptionCaught(java.lang.Throwable)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#skipContext(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor,int,int)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#readIfIsAutoRead()
	CALLEE: io.netty.bootstrap.FailedChannel#config()
	CALLEE: io.netty.channel.DefaultChannelConfig#isAutoRead()
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$600(io.netty.channel.DefaultChannelPipeline)
	CALLEE: io.netty.channel.AbstractChannel#read()
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#channelInactive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelInactive()
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireChannelInactive()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#channelUnregistered(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.bootstrap.FailedChannel#isOpen()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#fireChannelUnregistered()
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$600(io.netty.channel.DefaultChannelPipeline)
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$700(io.netty.channel.DefaultChannelPipeline)
CALLER: io.netty.channel.AbstractChannelHandlerContext#fireChannelUnregistered()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextInbound(int)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: static io.netty.channel.DefaultChannelPipeline#access$700(io.netty.channel.DefaultChannelPipeline)
	CALLEE: io.netty.channel.DefaultChannelPipeline#destroy()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#safeSetSuccess(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#invokeLater(java.lang.Runnable)
	CALLEE: io.netty.bootstrap.FailedChannel#doBind(java.net.SocketAddress)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#closeIfClosed()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe.2#<init>(io.netty.channel.AbstractChannel.AbstractUnsafe)
	CALLEE: static io.netty.util.internal.PlatformDependent#isWindows()
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setUncancellable()
	CALLEE: io.netty.bootstrap.FailedChannel#isActive()
	CALLEE: static io.netty.channel.AbstractChannel#access$300()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#ensureOpen(io.netty.channel.ChannelPromise)
	CALLEE: io.netty.bootstrap.FailedChannel#config()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#assertEventLoop()
	CALLEE: io.netty.channel.DefaultChannelConfig#getOption(io.netty.channel.ChannelOption)
	CALLEE: static io.netty.util.internal.PlatformDependent#maybeSuperUser()
CALLER: io.netty.channel.DefaultChannelPipeline#destroy()
	CALLEE: io.netty.channel.DefaultChannelPipeline#destroyUp(io.netty.channel.AbstractChannelHandlerContext,boolean)
CALLER: io.netty.channel.DefaultChannelConfig#getOption(io.netty.channel.ChannelOption)
	CALLEE: static io.netty.util.internal.ObjectUtil#checkNotNull(java.lang.Object,java.lang.String)
	CALLEE: io.netty.channel.DefaultChannelConfig#getWriteBufferLowWaterMark()
	CALLEE: io.netty.channel.DefaultChannelConfig#isAutoRead()
	CALLEE: io.netty.channel.DefaultChannelConfig#getConnectTimeoutMillis()
	CALLEE: io.netty.channel.DefaultChannelConfig#getMaxMessagesPerRead()
	CALLEE: io.netty.channel.DefaultChannelConfig#getWriteSpinCount()
	CALLEE: io.netty.channel.DefaultChannelConfig#getAllocator()
	CALLEE: io.netty.channel.DefaultChannelConfig#getRecvByteBufAllocator()
	CALLEE: io.netty.channel.DefaultChannelConfig#isAutoClose()
	CALLEE: io.netty.channel.DefaultChannelConfig#getWriteBufferHighWaterMark()
	CALLEE: io.netty.channel.DefaultChannelConfig#getWriteBufferWaterMark()
	CALLEE: io.netty.channel.DefaultChannelConfig#getMessageSizeEstimator()
	CALLEE: io.netty.channel.DefaultChannelConfig#getPinEventExecutorPerGroup()
	CALLEE: io.netty.channel.DefaultChannelConfig#getMaxMessagesPerWrite()
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe#closeIfClosed()
	CALLEE: io.netty.bootstrap.FailedChannel#isOpen()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#voidPromise()
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#close(io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.DefaultChannelPipeline#destroyUp(io.netty.channel.AbstractChannelHandlerContext,boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#inEventLoop(java.lang.Thread)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.DefaultChannelPipeline#destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)
	CALLEE: io.netty.channel.DefaultChannelPipeline.4#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelConfig#getMaxMessagesPerRead()
	CALLEE: io.netty.channel.DefaultChannelConfig#getRecvByteBufAllocator()
	CALLEE: io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator#maxMessagesPerRead()
CALLER: io.netty.channel.DefaultChannelConfig#getWriteBufferHighWaterMark()
	CALLEE: io.netty.channel.WriteBufferWaterMark#high()
CALLER: io.netty.channel.DefaultChannelPipeline#destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#inEventLoop(java.lang.Thread)
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.DefaultChannelPipeline#atomicRemoveFromHandlerList(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline#callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline.5#<init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline#callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#callHandlerRemoved()
	CALLEE: io.netty.channel.ChannelPipelineException#<init>(java.lang.String,java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannelHandlerContext#callHandlerRemoved()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handlerRemoved(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#setRemoved()
CALLER: io.netty.channel.ChannelPipelineException#<init>(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.channel.ChannelException#<init>(java.lang.String,java.lang.Throwable)
CALLER: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntryMappingEnd#produce()
	CALLEE: org.yaml.snakeyaml.events.MappingEndEvent#<init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)
	CALLEE: static org.yaml.snakeyaml.parser.ParserImpl#access$102(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production)
	CALLEE: org.yaml.snakeyaml.tokens.Token#getEndMark()
	CALLEE: org.yaml.snakeyaml.tokens.Token#getStartMark()
	CALLEE: org.yaml.snakeyaml.scanner.ScannerImpl#peekToken()
	CALLEE: org.yaml.snakeyaml.parser.ParserImpl.ParseFlowSequenceEntry#<init>(org.yaml.snakeyaml.parser.ParserImpl,boolean)
CALLER: io.netty.channel.DefaultChannelPromise#setSuccess()
	CALLEE: io.netty.channel.DefaultChannelPromise#setSuccess(java.lang.Void)
CALLER: io.netty.channel.AbstractChannel#read()
	CALLEE: io.netty.channel.DefaultChannelPipeline#read()
CALLER: io.netty.channel.AbstractChannelHandlerContext.Tasks.3#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext.Tasks#access$1800(io.netty.channel.AbstractChannelHandlerContext.Tasks)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$2100(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext.8#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$900(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: io.netty.channel.AbstractChannel.AbstractUnsafe.2#run()
	CALLEE: static io.netty.channel.AbstractChannel#access$500(io.netty.channel.AbstractChannel)
	CALLEE: io.netty.channel.DefaultChannelPipeline#fireChannelActive()
CALLER: io.netty.channel.AbstractChannelHandlerContext.1#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$000(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext.3#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$200(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext.5#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$400(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
CALLER: io.netty.channel.AbstractChannelHandlerContext.4#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$300(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.AbstractChannelHandlerContext.2#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$100(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline.4#run()
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$200(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext,boolean)
CALLER: io.netty.channel.DefaultChannelPipeline.5#run()
	CALLEE: static io.netty.channel.DefaultChannelPipeline#access$300(io.netty.channel.DefaultChannelPipeline,java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)
CALLER: io.netty.channel.ChannelFutureListener.2#operationComplete(io.netty.util.concurrent.Future)
	CALLEE: io.netty.channel.ChannelFutureListener.2#operationComplete(io.netty.channel.ChannelFuture)
CALLER: io.netty.channel.DefaultChannelPromise#setSuccess(java.lang.Void)
	CALLEE: io.netty.util.concurrent.DefaultPromise#setSuccess(java.lang.Object)
CALLER: io.netty.channel.DefaultChannelPipeline#read()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#read()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$2100(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelWritabilityChanged()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$900(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$000(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelRegistered()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$200(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelActive()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$400(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$300(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelInactive()
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$100(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeChannelUnregistered()
CALLER: static io.netty.channel.DefaultChannelPipeline#access$200(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext,boolean)
	CALLEE: io.netty.channel.DefaultChannelPipeline#destroyUp(io.netty.channel.AbstractChannelHandlerContext,boolean)
CALLER: static io.netty.channel.DefaultChannelPipeline#access$300(io.netty.channel.DefaultChannelPipeline,java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)
	CALLEE: io.netty.channel.DefaultChannelPipeline#destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)
CALLER: io.netty.channel.ChannelFutureListener.2#operationComplete(io.netty.channel.ChannelFuture)
	CALLEE: io.netty.channel.AbstractChannel#close()
	CALLEE: io.netty.channel.DefaultChannelPromise#channel()
	CALLEE: io.netty.util.concurrent.DefaultPromise#isSuccess()
CALLER: io.netty.channel.AbstractChannelHandlerContext#read()
	CALLEE: io.netty.util.concurrent.AbstractEventExecutor#inEventLoop()
	CALLEE: io.netty.util.concurrent.SingleThreadEventExecutor#execute(java.lang.Runnable)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#executor()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#findContextOutbound(int)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext.Tasks#<init>(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeRead()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext.Tasks#access$1400(io.netty.channel.AbstractChannelHandlerContext.Tasks)
CALLER: io.netty.channel.AbstractChannelHandlerContext#invokeRead()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeHandler()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeExceptionCaught(java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline.TailContext#handler()
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#read()
	CALLEE: io.netty.channel.DefaultChannelPipeline.HeadContext#read(io.netty.channel.ChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline.HeadContext#read(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannel.AbstractUnsafe#beginRead()
CALLER: io.netty.channel.DefaultChannelPipeline.TailContext#channelActive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline#onUnhandledInboundChannelActive()
CALLER: io.netty.channel.DefaultChannelPipeline.TailContext#exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)
	CALLEE: io.netty.channel.DefaultChannelPipeline#onUnhandledInboundException(java.lang.Throwable)
CALLER: io.netty.channel.DefaultChannelPipeline.TailContext#channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline#onUnhandledChannelWritabilityChanged()
CALLER: io.netty.channel.DefaultChannelPipeline.TailContext#channelInactive(io.netty.channel.ChannelHandlerContext)
	CALLEE: io.netty.channel.DefaultChannelPipeline#onUnhandledInboundChannelInactive()
CALLER: io.netty.channel.AbstractChannelHandlerContext.Tasks.2#run()
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext.Tasks#access$1800(io.netty.channel.AbstractChannelHandlerContext.Tasks)
	CALLEE: static io.netty.channel.AbstractChannelHandlerContext#access$2000(io.netty.channel.AbstractChannelHandlerContext)
CALLER: io.netty.channel.DefaultChannelPipeline#onUnhandledInboundException(java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.JdkLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Log4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.LocationAwareSlf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: io.netty.util.internal.logging.Slf4JLogger#warn(java.lang.String,java.lang.Throwable)
	CALLEE: static io.netty.util.ReferenceCountUtil#release(java.lang.Object)
CALLER: static io.netty.channel.AbstractChannelHandlerContext#access$2000(io.netty.channel.AbstractChannelHandlerContext)
	CALLEE: io.netty.channel.AbstractChannelHandlerContext#invokeRead()
